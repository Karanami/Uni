
5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c84  08004c84  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c8c  08004c8c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000084  08004d18  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004d18  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001319d  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e7b  00000000  00000000  00033294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00036110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c41  00000000  00000000  00037108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027fb8  00000000  00000000  00037d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164b8  00000000  00000000  0005fd01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f672e  00000000  00000000  000761b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004598  00000000  00000000  0016c8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00170e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004bfc 	.word	0x08004bfc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08004bfc 	.word	0x08004bfc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <DIO_Write>:
 * @param[in] hdio  : Digital I/O handler
 * @param[in] state : Digital output state (0 or 1)
 * @retval None
 */
void DIO_Write(DIO_Handle_TypeDef* hdio, _Bool state)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
  hdio->State = state;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	78fa      	ldrb	r2, [r7, #3]
 80005bc:	719a      	strb	r2, [r3, #6]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, hdio->State);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	8899      	ldrh	r1, [r3, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	799b      	ldrb	r3, [r3, #6]
 80005ca:	461a      	mov	r2, r3
 80005cc:	f001 fcec 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <gpioWrite>:
  * @param[in] hled   : LED DIO handler
  * @param[in] state  : LED state (LED_OFF or LED_ON)
  * @retval None
  */
void gpioWrite(LED_DIO_Handle_TypeDef* hled, LED_DIO_State_TypeDef state)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
  DIO_Write(&(hled->Output), (hled->ActiveState == LED_ON_HIGH) ? state : !state);
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7a1b      	ldrb	r3, [r3, #8]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d106      	bne.n	80005fc <gpioWrite+0x24>
 80005ee:	78fb      	ldrb	r3, [r7, #3]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	e005      	b.n	8000608 <gpioWrite+0x30>
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf0c      	ite	eq
 8000602:	2301      	moveq	r3, #1
 8000604:	2300      	movne	r3, #0
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4619      	mov	r1, r3
 800060a:	4610      	mov	r0, r2
 800060c:	f7ff ffce 	bl	80005ac <DIO_Write>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_ADC1_Init+0xb4>)
 800062c:	4a28      	ldr	r2, [pc, #160]	; (80006d0 <MX_ADC1_Init+0xb8>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_ADC1_Init+0xb4>)
 800063e:	2201      	movs	r2, #1
 8000640:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_ADC1_Init+0xb4>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000652:	2200      	movs	r2, #0
 8000654:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000658:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xbc>)
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC1_Init+0xb4>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000664:	2202      	movs	r2, #2
 8000666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_ADC1_Init+0xb4>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000672:	2201      	movs	r2, #1
 8000674:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4815      	ldr	r0, [pc, #84]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000678:	f000 fd30 	bl	80010dc <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000682:	f000 fb01 	bl	8000c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000686:	2303      	movs	r3, #3
 8000688:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068a:	2301      	movs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800068e:	2307      	movs	r3, #7
 8000690:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000698:	f000 ff6e 	bl	8001578 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006a2:	f000 faf1 	bl	8000c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006a6:	230a      	movs	r3, #10
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_ADC1_Init+0xb4>)
 80006b4:	f000 ff60 	bl	8001578 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006be:	f000 fae3 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000a0 	.word	0x200000a0
 80006d0:	40012000 	.word	0x40012000
 80006d4:	0f000001 	.word	0x0f000001

080006d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a25      	ldr	r2, [pc, #148]	; (800078c <HAL_ADC_MspInit+0xb4>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d143      	bne.n	8000782 <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 8000700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000704:	6453      	str	r3, [r2, #68]	; 0x44
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = POT2_Pin;
 8000742:	2301      	movs	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000746:	2303      	movs	r3, #3
 8000748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT2_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	480f      	ldr	r0, [pc, #60]	; (8000794 <HAL_ADC_MspInit+0xbc>)
 8000756:	f001 fa7b 	bl	8001c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin;
 800075a:	2308      	movs	r3, #8
 800075c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075e:	2303      	movs	r3, #3
 8000760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <HAL_ADC_MspInit+0xc0>)
 800076e:	f001 fa6f 	bl	8001c50 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2012      	movs	r0, #18
 8000778:	f001 fa33 	bl	8001be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800077c:	2012      	movs	r0, #18
 800077e:	f001 fa4c 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40012000 	.word	0x40012000
 8000790:	40023800 	.word	0x40023800
 8000794:	40020800 	.word	0x40020800
 8000798:	40020000 	.word	0x40020000

0800079c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b7b      	ldr	r3, [pc, #492]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a7a      	ldr	r2, [pc, #488]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b78      	ldr	r3, [pc, #480]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a74      	ldr	r2, [pc, #464]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b72      	ldr	r3, [pc, #456]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b6f      	ldr	r3, [pc, #444]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a6e      	ldr	r2, [pc, #440]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b6c      	ldr	r3, [pc, #432]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b69      	ldr	r3, [pc, #420]	; (80009a0 <MX_GPIO_Init+0x204>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a68      	ldr	r2, [pc, #416]	; (80009a0 <MX_GPIO_Init+0x204>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b66      	ldr	r3, [pc, #408]	; (80009a0 <MX_GPIO_Init+0x204>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	4b63      	ldr	r3, [pc, #396]	; (80009a0 <MX_GPIO_Init+0x204>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a62      	ldr	r2, [pc, #392]	; (80009a0 <MX_GPIO_Init+0x204>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b60      	ldr	r3, [pc, #384]	; (80009a0 <MX_GPIO_Init+0x204>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082a:	4b5d      	ldr	r3, [pc, #372]	; (80009a0 <MX_GPIO_Init+0x204>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a5c      	ldr	r2, [pc, #368]	; (80009a0 <MX_GPIO_Init+0x204>)
 8000830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b5a      	ldr	r3, [pc, #360]	; (80009a0 <MX_GPIO_Init+0x204>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f244 0181 	movw	r1, #16513	; 0x4081
 8000848:	4856      	ldr	r0, [pc, #344]	; (80009a4 <MX_GPIO_Init+0x208>)
 800084a:	f001 fbad 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	4855      	ldr	r0, [pc, #340]	; (80009a8 <MX_GPIO_Init+0x20c>)
 8000854:	f001 fba8 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	484f      	ldr	r0, [pc, #316]	; (80009ac <MX_GPIO_Init+0x210>)
 8000870:	f001 f9ee 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000874:	2332      	movs	r3, #50	; 0x32
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000884:	230b      	movs	r3, #11
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4847      	ldr	r0, [pc, #284]	; (80009ac <MX_GPIO_Init+0x210>)
 8000890:	f001 f9de 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000894:	2386      	movs	r3, #134	; 0x86
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a4:	230b      	movs	r3, #11
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4840      	ldr	r0, [pc, #256]	; (80009b0 <MX_GPIO_Init+0x214>)
 80008b0:	f001 f9ce 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4835      	ldr	r0, [pc, #212]	; (80009a4 <MX_GPIO_Init+0x208>)
 80008ce:	f001 f9bf 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e4:	230b      	movs	r3, #11
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	482d      	ldr	r0, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x208>)
 80008f0:	f001 f9ae 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4827      	ldr	r0, [pc, #156]	; (80009a8 <MX_GPIO_Init+0x20c>)
 800090c:	f001 f9a0 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4821      	ldr	r0, [pc, #132]	; (80009a8 <MX_GPIO_Init+0x20c>)
 8000924:	f001 f994 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000928:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800093a:	230a      	movs	r3, #10
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <MX_GPIO_Init+0x214>)
 8000946:	f001 f983 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800094a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x214>)
 8000960:	f001 f976 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000964:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000976:	230b      	movs	r3, #11
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <MX_GPIO_Init+0x20c>)
 8000982:	f001 f965 	bl	8001c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2102      	movs	r1, #2
 800098a:	2028      	movs	r0, #40	; 0x28
 800098c:	f001 f929 	bl	8001be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000990:	2028      	movs	r0, #40	; 0x28
 8000992:	f001 f942 	bl	8001c1a <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020400 	.word	0x40020400
 80009a8:	40021800 	.word	0x40021800
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020000 	.word	0x40020000

080009b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if(hadc == &hadc1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a40      	ldr	r2, [pc, #256]	; (8000ac0 <HAL_ADC_ConvCpltCallback+0x10c>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d178      	bne.n	8000ab6 <HAL_ADC_ConvCpltCallback+0x102>
  {
    if(conv == 1)
 80009c4:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <HAL_ADC_ConvCpltCallback+0x110>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d11a      	bne.n	8000a02 <HAL_ADC_ConvCpltCallback+0x4e>
      pot1 = rawToVoltage(HAL_ADC_GetValue(&hadc1));
 80009cc:	483c      	ldr	r0, [pc, #240]	; (8000ac0 <HAL_ADC_ConvCpltCallback+0x10c>)
 80009ce:	f000 fdb1 	bl	8001534 <HAL_ADC_GetValue>
 80009d2:	ee07 0a90 	vmov	s15, r0
 80009d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009da:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8000ac8 <HAL_ADC_ConvCpltCallback+0x114>
 80009de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000acc <HAL_ADC_ConvCpltCallback+0x118>
 80009e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ea:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000ad0 <HAL_ADC_ConvCpltCallback+0x11c>
 80009ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009f2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000ad4 <HAL_ADC_ConvCpltCallback+0x120>
 80009f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009fa:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <HAL_ADC_ConvCpltCallback+0x124>)
 80009fc:	edc3 7a00 	vstr	s15, [r3]
 8000a00:	e01d      	b.n	8000a3e <HAL_ADC_ConvCpltCallback+0x8a>
    else if(conv == 2)
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <HAL_ADC_ConvCpltCallback+0x110>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d119      	bne.n	8000a3e <HAL_ADC_ConvCpltCallback+0x8a>
      pot2 = rawToVoltage(HAL_ADC_GetValue(&hadc1));
 8000a0a:	482d      	ldr	r0, [pc, #180]	; (8000ac0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000a0c:	f000 fd92 	bl	8001534 <HAL_ADC_GetValue>
 8000a10:	ee07 0a90 	vmov	s15, r0
 8000a14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a18:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000ac8 <HAL_ADC_ConvCpltCallback+0x114>
 8000a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a20:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000acc <HAL_ADC_ConvCpltCallback+0x118>
 8000a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a28:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000ad0 <HAL_ADC_ConvCpltCallback+0x11c>
 8000a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a30:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000ad4 <HAL_ADC_ConvCpltCallback+0x120>
 8000a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <HAL_ADC_ConvCpltCallback+0x128>)
 8000a3a:	edc3 7a00 	vstr	s15, [r3]

    conv = 1 + (conv % 2);
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <HAL_ADC_ConvCpltCallback+0x110>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	3301      	adds	r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_ADC_ConvCpltCallback+0x110>)
 8000a4e:	701a      	strb	r2, [r3, #0]

    gpioWrite(&led_green, pot2 > 1000.0f);
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <HAL_ADC_ConvCpltCallback+0x128>)
 8000a52:	edd3 7a00 	vldr	s15, [r3]
 8000a56:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000ad4 <HAL_ADC_ConvCpltCallback+0x120>
 8000a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a62:	bfcc      	ite	gt
 8000a64:	2301      	movgt	r3, #1
 8000a66:	2300      	movle	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000a6e:	f7ff fdb3 	bl	80005d8 <gpioWrite>
    gpioWrite(&led_blue, pot2 > 2000.0f);
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_ADC_ConvCpltCallback+0x128>)
 8000a74:	edd3 7a00 	vldr	s15, [r3]
 8000a78:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000ae4 <HAL_ADC_ConvCpltCallback+0x130>
 8000a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a84:	bfcc      	ite	gt
 8000a86:	2301      	movgt	r3, #1
 8000a88:	2300      	movle	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4816      	ldr	r0, [pc, #88]	; (8000ae8 <HAL_ADC_ConvCpltCallback+0x134>)
 8000a90:	f7ff fda2 	bl	80005d8 <gpioWrite>
    gpioWrite(&led_red, pot2 > 3000.0f);
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_ADC_ConvCpltCallback+0x128>)
 8000a96:	edd3 7a00 	vldr	s15, [r3]
 8000a9a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000aec <HAL_ADC_ConvCpltCallback+0x138>
 8000a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa6:	bfcc      	ite	gt
 8000aa8:	2301      	movgt	r3, #1
 8000aaa:	2300      	movle	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480f      	ldr	r0, [pc, #60]	; (8000af0 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ab2:	f7ff fd91 	bl	80005d8 <gpioWrite>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000a0 	.word	0x200000a0
 8000ac4:	20000024 	.word	0x20000024
 8000ac8:	457ff000 	.word	0x457ff000
 8000acc:	40533333 	.word	0x40533333
 8000ad0:	00000000 	.word	0x00000000
 8000ad4:	447a0000 	.word	0x447a0000
 8000ad8:	200000e8 	.word	0x200000e8
 8000adc:	200000ec 	.word	0x200000ec
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	44fa0000 	.word	0x44fa0000
 8000ae8:	2000000c 	.word	0x2000000c
 8000aec:	453b8000 	.word	0x453b8000
 8000af0:	20000018 	.word	0x20000018

08000af4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if(htim == &htim6)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d102      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_ADC_Start_IT(&hadc1);
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b06:	f000 fb2d 	bl	8001164 <HAL_ADC_Start_IT>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000f4 	.word	0x200000f4
 8000b18:	200000a0 	.word	0x200000a0

08000b1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
  unsigned char tx_buffer[64] = { 0, };
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	223c      	movs	r2, #60	; 0x3c
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fbde 	bl	80042f4 <memset>
  int tx_n = sprintf((char*)tx_buffer, "{ \"channel\" : 3, \"voltage\" : %d }\r", (int)pot1);
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b3a:	edd3 7a00 	vldr	s15, [r3]
 8000b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	ee17 2a90 	vmov	r2, s15
 8000b4a:	4909      	ldr	r1, [pc, #36]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 fbb1 	bl	80042b4 <siprintf>
 8000b52:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart3, tx_buffer, tx_n, 100);
 8000b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f107 010c 	add.w	r1, r7, #12
 8000b5c:	2364      	movs	r3, #100	; 0x64
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b60:	f002 ff20 	bl	80039a4 <HAL_UART_Transmit>
}
 8000b64:	bf00      	nop
 8000b66:	3750      	adds	r7, #80	; 0x50
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200000e8 	.word	0x200000e8
 8000b70:	08004c14 	.word	0x08004c14
 8000b74:	20000140 	.word	0x20000140

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 fa51 	bl	8001022 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f814 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f7ff fe0a 	bl	800079c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b88:	f000 f992 	bl	8000eb0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000b8c:	f7ff fd44 	bl	8000618 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000b90:	f000 f932 	bl	8000df8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  hadc1.NbrOfCurrentConversionRank = 1;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <main+0x2c>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Base_Start_IT(&htim6);
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <main+0x30>)
 8000b9c:	f002 fba8 	bl	80032f0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <main+0x28>
 8000ba2:	bf00      	nop
 8000ba4:	200000a0 	.word	0x200000a0
 8000ba8:	200000f4 	.word	0x200000f4

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2230      	movs	r2, #48	; 0x30
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fb9a 	bl	80042f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bd0:	f001 fa1c 	bl	800200c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <SystemClock_Config+0xd4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <SystemClock_Config+0xd4>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <SystemClock_Config+0xd4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <SystemClock_Config+0xd8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <SystemClock_Config+0xd8>)
 8000bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <SystemClock_Config+0xd8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c1c:	23d8      	movs	r3, #216	; 0xd8
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c24:	2303      	movs	r3, #3
 8000c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0320 	add.w	r3, r7, #32
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fa4d 	bl	80020cc <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c38:	f000 f826 	bl	8000c88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c3c:	f001 f9f6 	bl	800202c <HAL_PWREx_EnableOverDrive>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c46:	f000 f81f 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	2107      	movs	r1, #7
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fcd3 	bl	8002614 <HAL_RCC_ClockConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c74:	f000 f808 	bl	8000c88 <Error_Handler>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3750      	adds	r7, #80	; 0x50
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x44>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x44>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f9b8 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <ADC_IRQHandler+0x10>)
 8000d36:	f000 faed 	bl	8001314 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000a0 	.word	0x200000a0

08000d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000d48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d4c:	f001 f946 	bl	8001fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <TIM6_DAC_IRQHandler+0x10>)
 8000d5a:	f002 fb41 	bl	80033e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000f4 	.word	0x200000f4

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f003 fab4 	bl	8004304 <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20050000 	.word	0x20050000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	200000f0 	.word	0x200000f0
 8000dd0:	20000318 	.word	0x20000318

08000dd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_TIM6_Init+0x64>)
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <MX_TIM6_Init+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_TIM6_Init+0x64>)
 8000e10:	226b      	movs	r2, #107	; 0x6b
 8000e12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_TIM6_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_TIM6_Init+0x64>)
 8000e1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e20:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_TIM6_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <MX_TIM6_Init+0x64>)
 8000e2a:	f002 fa09 	bl	8003240 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e34:	f7ff ff28 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_TIM6_Init+0x64>)
 8000e46:	f002 fcb3 	bl	80037b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e50:	f7ff ff1a 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200000f4 	.word	0x200000f4
 8000e60:	40001000 	.word	0x40001000

08000e64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d113      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_TIM_Base_MspInit+0x48>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <HAL_TIM_Base_MspInit+0x48>)
 8000e7c:	f043 0310 	orr.w	r3, r3, #16
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_TIM_Base_MspInit+0x48>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2101      	movs	r1, #1
 8000e92:	2036      	movs	r0, #54	; 0x36
 8000e94:	f000 fea5 	bl	8001be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e98:	2036      	movs	r0, #54	; 0x36
 8000e9a:	f000 febe 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40001000 	.word	0x40001000
 8000eac:	40023800 	.word	0x40023800

08000eb0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000eb6:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <MX_USART3_UART_Init+0x5c>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ef4:	f002 fd08 	bl	8003908 <HAL_UART_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000efe:	f7ff fec3 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000140 	.word	0x20000140
 8000f0c:	40004800 	.word	0x40004800

08000f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0aa      	sub	sp, #168	; 0xa8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	2284      	movs	r2, #132	; 0x84
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 f9df 	bl	80042f4 <memset>
  if(uartHandle->Instance==USART3)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d13c      	bne.n	8000fba <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fd86 	bl	8002a60 <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f5a:	f7ff fe95 	bl	8000c88 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <HAL_UART_MspInit+0xb8>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <HAL_UART_MspInit+0xb8>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_UART_MspInit+0xb8>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_UART_MspInit+0xb8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <HAL_UART_MspInit+0xb8>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_UART_MspInit+0xb8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_UART_MspInit+0xbc>)
 8000fb6:	f000 fe4b 	bl	8001c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	37a8      	adds	r7, #168	; 0xa8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004800 	.word	0x40004800
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020c00 	.word	0x40020c00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fec:	4c0b      	ldr	r4, [pc, #44]	; (800101c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff feeb 	bl	8000dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f003 f987 	bl	8004310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fdb9 	bl	8000b78 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001014:	08004c94 	.word	0x08004c94
  ldr r2, =_sbss
 8001018:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800101c:	20000314 	.word	0x20000314

08001020 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <CAN1_RX0_IRQHandler>

08001022 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 fdd0 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102c:	2000      	movs	r0, #0
 800102e:	f000 f805 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001032:	f7ff fe2f 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fdeb 	bl	8001c36 <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 fdb3 	bl	8001be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000028 	.word	0x20000028
 8001094:	20000030 	.word	0x20000030
 8001098:	2000002c 	.word	0x2000002c

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000030 	.word	0x20000030
 80010c0:	200001c8 	.word	0x200001c8

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200001c8 	.word	0x200001c8

080010dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e031      	b.n	8001156 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d109      	bne.n	800110e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff faec 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	d116      	bne.n	8001148 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_ADC_Init+0x84>)
 8001120:	4013      	ands	r3, r2
 8001122:	f043 0202 	orr.w	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fb7a 	bl	8001824 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f023 0303 	bic.w	r3, r3, #3
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
 8001146:	e001      	b.n	800114c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	ffffeefd 	.word	0xffffeefd

08001164 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_ADC_Start_IT+0x1a>
 800117a:	2302      	movs	r3, #2
 800117c:	e0b5      	b.n	80012ea <HAL_ADC_Start_IT+0x186>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b01      	cmp	r3, #1
 8001192:	d018      	beq.n	80011c6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80011a4:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <HAL_ADC_Start_IT+0x194>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a54      	ldr	r2, [pc, #336]	; (80012fc <HAL_ADC_Start_IT+0x198>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9a      	lsrs	r2, r3, #18
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011b8:	e002      	b.n	80011c0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3b01      	subs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f9      	bne.n	80011ba <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d17d      	bne.n	80012d0 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d8:	4b49      	ldr	r3, [pc, #292]	; (8001300 <HAL_ADC_Start_IT+0x19c>)
 80011da:	4013      	ands	r3, r2
 80011dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800120e:	d106      	bne.n	800121e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	f023 0206 	bic.w	r2, r3, #6
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	645a      	str	r2, [r3, #68]	; 0x44
 800121c:	e002      	b.n	8001224 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001234:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_ADC_Start_IT+0x1a0>)
 8001242:	430b      	orrs	r3, r1
 8001244:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_ADC_Start_IT+0x1a4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d143      	bne.n	80012e8 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e03a      	b.n	80012e8 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a25      	ldr	r2, [pc, #148]	; (800130c <HAL_ADC_Start_IT+0x1a8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d10e      	bne.n	800129a <HAL_ADC_Start_IT+0x136>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d107      	bne.n	800129a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001298:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_ADC_Start_IT+0x1a4>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d120      	bne.n	80012e8 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_ADC_Start_IT+0x1ac>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d11b      	bne.n	80012e8 <HAL_ADC_Start_IT+0x184>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d114      	bne.n	80012e8 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	e00b      	b.n	80012e8 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f043 0210 	orr.w	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000028 	.word	0x20000028
 80012fc:	431bde83 	.word	0x431bde83
 8001300:	fffff8fe 	.word	0xfffff8fe
 8001304:	04000020 	.word	0x04000020
 8001308:	40012300 	.word	0x40012300
 800130c:	40012000 	.word	0x40012000
 8001310:	40012200 	.word	0x40012200

08001314 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d049      	beq.n	80013de <HAL_ADC_IRQHandler+0xca>
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d046      	beq.n	80013de <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	2b00      	cmp	r3, #0
 800135a:	d105      	bne.n	8001368 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d12b      	bne.n	80013ce <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800137a:	2b00      	cmp	r3, #0
 800137c:	d127      	bne.n	80013ce <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001396:	2b00      	cmp	r3, #0
 8001398:	d119      	bne.n	80013ce <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0220 	bic.w	r2, r2, #32
 80013a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff faf0 	bl	80009b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f06f 0212 	mvn.w	r2, #18
 80013dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ec:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d057      	beq.n	80014a4 <HAL_ADC_IRQHandler+0x190>
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d054      	beq.n	80014a4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2b00      	cmp	r3, #0
 8001404:	d105      	bne.n	8001412 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d139      	bne.n	8001494 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001426:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001438:	2b00      	cmp	r3, #0
 800143a:	d12b      	bne.n	8001494 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001446:	2b00      	cmp	r3, #0
 8001448:	d124      	bne.n	8001494 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001454:	2b00      	cmp	r3, #0
 8001456:	d11d      	bne.n	8001494 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800145c:	2b00      	cmp	r3, #0
 800145e:	d119      	bne.n	8001494 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800146e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d105      	bne.n	8001494 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fabf 	bl	8001a18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f06f 020c 	mvn.w	r2, #12
 80014a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d017      	beq.n	80014ea <HAL_ADC_IRQHandler+0x1d6>
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d014      	beq.n	80014ea <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10d      	bne.n	80014ea <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f837 	bl	800154e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f06f 0201 	mvn.w	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014f8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d015      	beq.n	800152c <HAL_ADC_IRQHandler+0x218>
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d012      	beq.n	800152c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f043 0202 	orr.w	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f06f 0220 	mvn.w	r2, #32
 800151a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f820 	bl	8001562 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f06f 0220 	mvn.w	r2, #32
 800152a:	601a      	str	r2, [r3, #0]
  }
}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x1c>
 8001590:	2302      	movs	r3, #2
 8001592:	e136      	b.n	8001802 <HAL_ADC_ConfigChannel+0x28a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b09      	cmp	r3, #9
 80015a2:	d93a      	bls.n	800161a <HAL_ADC_ConfigChannel+0xa2>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015ac:	d035      	beq.n	800161a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68d9      	ldr	r1, [r3, #12]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	3b1e      	subs	r3, #30
 80015c4:	2207      	movs	r2, #7
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a8d      	ldr	r2, [pc, #564]	; (8001810 <HAL_ADC_ConfigChannel+0x298>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10a      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68d9      	ldr	r1, [r3, #12]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	061a      	lsls	r2, r3, #24
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015f2:	e035      	b.n	8001660 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68d9      	ldr	r1, [r3, #12]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	4603      	mov	r3, r0
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4403      	add	r3, r0
 800160c:	3b1e      	subs	r3, #30
 800160e:	409a      	lsls	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001618:	e022      	b.n	8001660 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6919      	ldr	r1, [r3, #16]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	2207      	movs	r2, #7
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	400a      	ands	r2, r1
 800163c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6919      	ldr	r1, [r3, #16]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	4603      	mov	r3, r0
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4403      	add	r3, r0
 8001656:	409a      	lsls	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b06      	cmp	r3, #6
 8001666:	d824      	bhi.n	80016b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	3b05      	subs	r3, #5
 800167a:	221f      	movs	r2, #31
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43da      	mvns	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	400a      	ands	r2, r1
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	4618      	mov	r0, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b05      	subs	r3, #5
 80016a4:	fa00 f203 	lsl.w	r2, r0, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
 80016b0:	e04c      	b.n	800174c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d824      	bhi.n	8001704 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b23      	subs	r3, #35	; 0x23
 80016cc:	221f      	movs	r2, #31
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	400a      	ands	r2, r1
 80016da:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b23      	subs	r3, #35	; 0x23
 80016f6:	fa00 f203 	lsl.w	r2, r0, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
 8001702:	e023      	b.n	800174c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b41      	subs	r3, #65	; 0x41
 8001716:	221f      	movs	r2, #31
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43da      	mvns	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	400a      	ands	r2, r1
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b41      	subs	r3, #65	; 0x41
 8001740:	fa00 f203 	lsl.w	r2, r0, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a30      	ldr	r2, [pc, #192]	; (8001814 <HAL_ADC_ConfigChannel+0x29c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10a      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1f4>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800175e:	d105      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a2c      	ldr	r2, [pc, #176]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 8001766:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800176a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a28      	ldr	r2, [pc, #160]	; (8001814 <HAL_ADC_ConfigChannel+0x29c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d10f      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x21e>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b12      	cmp	r3, #18
 800177c:	d10b      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4a25      	ldr	r2, [pc, #148]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 8001784:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001788:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a22      	ldr	r2, [pc, #136]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 8001790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001794:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <HAL_ADC_ConfigChannel+0x29c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d12b      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x280>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1a      	ldr	r2, [pc, #104]	; (8001810 <HAL_ADC_ConfigChannel+0x298>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d003      	beq.n	80017b2 <HAL_ADC_ConfigChannel+0x23a>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d122      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 80017b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017bc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a15      	ldr	r2, [pc, #84]	; (8001818 <HAL_ADC_ConfigChannel+0x2a0>)
 80017c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_ADC_ConfigChannel+0x298>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d111      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_ADC_ConfigChannel+0x2a4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a11      	ldr	r2, [pc, #68]	; (8001820 <HAL_ADC_ConfigChannel+0x2a8>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0c9a      	lsrs	r2, r3, #18
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017ea:	e002      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f9      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	10000012 	.word	0x10000012
 8001814:	40012000 	.word	0x40012000
 8001818:	40012300 	.word	0x40012300
 800181c:	20000028 	.word	0x20000028
 8001820:	431bde83 	.word	0x431bde83

08001824 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800182c:	4b78      	ldr	r3, [pc, #480]	; (8001a10 <ADC_Init+0x1ec>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a77      	ldr	r2, [pc, #476]	; (8001a10 <ADC_Init+0x1ec>)
 8001832:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001836:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001838:	4b75      	ldr	r3, [pc, #468]	; (8001a10 <ADC_Init+0x1ec>)
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4973      	ldr	r1, [pc, #460]	; (8001a10 <ADC_Init+0x1ec>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	021a      	lsls	r2, r3, #8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800189a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6899      	ldr	r1, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <ADC_Init+0x1f0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d022      	beq.n	80018fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6899      	ldr	r1, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6899      	ldr	r1, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	e00f      	b.n	800191e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800190c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800191c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0202 	bic.w	r2, r2, #2
 800192c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6899      	ldr	r1, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	005a      	lsls	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01b      	beq.n	8001984 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800195a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800196a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	3b01      	subs	r3, #1
 8001978:	035a      	lsls	r2, r3, #13
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	e007      	b.n	8001994 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001992:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	051a      	lsls	r2, r3, #20
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6899      	ldr	r1, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019d6:	025a      	lsls	r2, r3, #9
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6899      	ldr	r1, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	029a      	lsls	r2, r3, #10
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	609a      	str	r2, [r3, #8]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40012300 	.word	0x40012300
 8001a14:	0f000001 	.word	0x0f000001

08001a18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <__NVIC_SetPriorityGrouping+0x40>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x40>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	05fa0000 	.word	0x05fa0000

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <__NVIC_EnableIRQ+0x38>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff8e 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff29 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff3e 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff8e 	bl	8001b20 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5d 	bl	8001acc <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff31 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa2 	bl	8001b88 <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e175      	b.n	8001f5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 8164 	bne.w	8001f56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d005      	beq.n	8001ca6 <HAL_GPIO_Init+0x56>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d130      	bne.n	8001d08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 0201 	and.w	r2, r3, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d017      	beq.n	8001d44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80be 	beq.w	8001f56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	4b66      	ldr	r3, [pc, #408]	; (8001f74 <HAL_GPIO_Init+0x324>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <HAL_GPIO_Init+0x324>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <HAL_GPIO_Init+0x324>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001df2:	4a61      	ldr	r2, [pc, #388]	; (8001f78 <HAL_GPIO_Init+0x328>)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_GPIO_Init+0x32c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d037      	beq.n	8001e8e <HAL_GPIO_Init+0x23e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a57      	ldr	r2, [pc, #348]	; (8001f80 <HAL_GPIO_Init+0x330>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d031      	beq.n	8001e8a <HAL_GPIO_Init+0x23a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a56      	ldr	r2, [pc, #344]	; (8001f84 <HAL_GPIO_Init+0x334>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d02b      	beq.n	8001e86 <HAL_GPIO_Init+0x236>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a55      	ldr	r2, [pc, #340]	; (8001f88 <HAL_GPIO_Init+0x338>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_Init+0x232>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a54      	ldr	r2, [pc, #336]	; (8001f8c <HAL_GPIO_Init+0x33c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_Init+0x22e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a53      	ldr	r2, [pc, #332]	; (8001f90 <HAL_GPIO_Init+0x340>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_Init+0x22a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_GPIO_Init+0x344>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0x226>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a51      	ldr	r2, [pc, #324]	; (8001f98 <HAL_GPIO_Init+0x348>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_Init+0x222>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a50      	ldr	r2, [pc, #320]	; (8001f9c <HAL_GPIO_Init+0x34c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x21e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4f      	ldr	r2, [pc, #316]	; (8001fa0 <HAL_GPIO_Init+0x350>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_Init+0x21a>
 8001e66:	2309      	movs	r3, #9
 8001e68:	e012      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	e010      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e6e:	2308      	movs	r3, #8
 8001e70:	e00e      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e72:	2307      	movs	r3, #7
 8001e74:	e00c      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e76:	2306      	movs	r3, #6
 8001e78:	e00a      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ea0:	4935      	ldr	r1, [pc, #212]	; (8001f78 <HAL_GPIO_Init+0x328>)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_GPIO_Init+0x354>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a34      	ldr	r2, [pc, #208]	; (8001fa4 <HAL_GPIO_Init+0x354>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <HAL_GPIO_Init+0x354>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a29      	ldr	r2, [pc, #164]	; (8001fa4 <HAL_GPIO_Init+0x354>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <HAL_GPIO_Init+0x354>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_GPIO_Init+0x354>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_GPIO_Init+0x354>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_GPIO_Init+0x354>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	f67f ae86 	bls.w	8001c70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40021400 	.word	0x40021400
 8001f94:	40021800 	.word	0x40021800
 8001f98:	40021c00 	.word	0x40021c00
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40022400 	.word	0x40022400
 8001fa4:	40013c00 	.word	0x40013c00

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fc4:	e003      	b.n	8001fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	619a      	str	r2, [r3, #24]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fd8e 	bl	8000b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40007000 	.word	0x40007000

0800202c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800205a:	f7ff f833 	bl	80010c4 <HAL_GetTick>
 800205e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002060:	e009      	b.n	8002076 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002062:	f7ff f82f 	bl	80010c4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002070:	d901      	bls.n	8002076 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e022      	b.n	80020bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002082:	d1ee      	bne.n	8002062 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800208a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002090:	f7ff f818 	bl	80010c4 <HAL_GetTick>
 8002094:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002096:	e009      	b.n	80020ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002098:	f7ff f814 	bl	80010c4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020a6:	d901      	bls.n	80020ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e007      	b.n	80020bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020b8:	d1ee      	bne.n	8002098 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40007000 	.word	0x40007000

080020cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e291      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b96      	ldr	r3, [pc, #600]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00c      	beq.n	8002116 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fc:	4b93      	ldr	r3, [pc, #588]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d112      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
 8002108:	4b90      	ldr	r3, [pc, #576]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b8d      	ldr	r3, [pc, #564]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d06c      	beq.n	80021fc <HAL_RCC_OscConfig+0x130>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d168      	bne.n	80021fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e26b      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x7a>
 8002138:	4b84      	ldr	r3, [pc, #528]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a83      	ldr	r2, [pc, #524]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x9c>
 800214e:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7e      	ldr	r2, [pc, #504]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b7c      	ldr	r3, [pc, #496]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7b      	ldr	r2, [pc, #492]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xc0>
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a75      	ldr	r2, [pc, #468]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b73      	ldr	r3, [pc, #460]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a72      	ldr	r2, [pc, #456]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 800218c:	4b6f      	ldr	r3, [pc, #444]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b6c      	ldr	r3, [pc, #432]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6b      	ldr	r2, [pc, #428]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe ff8a 	bl	80010c4 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe ff86 	bl	80010c4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e21f      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe8>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe ff76 	bl	80010c4 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe ff72 	bl	80010c4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e20b      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b57      	ldr	r3, [pc, #348]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x110>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d069      	beq.n	80022de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x190>
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x17a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1df      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	493d      	ldr	r1, [pc, #244]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e040      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d023      	beq.n	80022ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a38      	ldr	r2, [pc, #224]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe ff28 	bl	80010c4 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7fe ff24 	bl	80010c4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1bd      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4929      	ldr	r1, [pc, #164]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
 80022aa:	e018      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe ff04 	bl	80010c4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe ff00 	bl	80010c4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e199      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d038      	beq.n	800235c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d019      	beq.n	8002326 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7fe fee1 	bl	80010c4 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe fedd 	bl	80010c4 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e176      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800231a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x23a>
 8002324:	e01a      	b.n	800235c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fec7 	bl	80010c4 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233a:	f7fe fec3 	bl	80010c4 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d903      	bls.n	8002350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e15c      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
 800234c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b91      	ldr	r3, [pc, #580]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a4 	beq.w	80024b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a87      	ldr	r2, [pc, #540]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b85      	ldr	r3, [pc, #532]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002392:	4b82      	ldr	r3, [pc, #520]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800239e:	4b7f      	ldr	r3, [pc, #508]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7e      	ldr	r2, [pc, #504]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fe8b 	bl	80010c4 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7fe fe87 	bl	80010c4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e120      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c4:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x31a>
 80023d8:	4b6f      	ldr	r3, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a6e      	ldr	r2, [pc, #440]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
 80023e4:	e02d      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x33c>
 80023ee:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a69      	ldr	r2, [pc, #420]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a66      	ldr	r2, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	e01c      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x35e>
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a60      	ldr	r2, [pc, #384]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	4a5d      	ldr	r2, [pc, #372]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	; 0x70
 8002428:	e00b      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
 800242a:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a5a      	ldr	r2, [pc, #360]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	4b58      	ldr	r3, [pc, #352]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe fe3b 	bl	80010c4 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fe37 	bl	80010c4 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0ce      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ee      	beq.n	8002452 <HAL_RCC_OscConfig+0x386>
 8002474:	e014      	b.n	80024a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7fe fe25 	bl	80010c4 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fe21 	bl	80010c4 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0b8      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d105      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80024ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80a4 	beq.w	8002604 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024bc:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d06b      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d149      	bne.n	8002564 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a30      	ldr	r2, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80024d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe fdf2 	bl	80010c4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fdee 	bl	80010c4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e087      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	019b      	lsls	r3, r3, #6
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	3b01      	subs	r3, #1
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	4313      	orrs	r3, r2
 8002528:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800252e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fdc2 	bl	80010c4 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fdbe 	bl	80010c4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e057      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x478>
 8002562:	e04f      	b.n	8002604 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800256a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800256e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fda8 	bl	80010c4 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe fda4 	bl	80010c4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e03d      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x4ac>
 8002596:	e035      	b.n	8002604 <HAL_RCC_OscConfig+0x538>
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x544>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d028      	beq.n	8002600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d121      	bne.n	8002600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11a      	bne.n	8002600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d8:	4293      	cmp	r3, r2
 80025da:	d111      	bne.n	8002600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	3b01      	subs	r3, #1
 80025ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0d0      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b67      	ldr	r3, [pc, #412]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 020f 	bic.w	r2, r3, #15
 8002642:	4965      	ldr	r1, [pc, #404]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002696:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d040      	beq.n	8002738 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d115      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e073      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06b      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4936      	ldr	r1, [pc, #216]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002708:	f7fe fcdc 	bl	80010c4 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7fe fcd8 	bl	80010c4 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e053      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d210      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 020f 	bic.w	r2, r3, #15
 800274e:	4922      	ldr	r1, [pc, #136]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	490a      	ldr	r1, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x1cc>)
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1d0>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1d4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fc38 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00
 80027dc:	40023800 	.word	0x40023800
 80027e0:	08004c38 	.word	0x08004c38
 80027e4:	20000028 	.word	0x20000028
 80027e8:	2000002c 	.word	0x2000002c

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f0:	b094      	sub	sp, #80	; 0x50
 80027f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	647b      	str	r3, [r7, #68]	; 0x44
 80027f8:	2300      	movs	r3, #0
 80027fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027fc:	2300      	movs	r3, #0
 80027fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002804:	4b79      	ldr	r3, [pc, #484]	; (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d00d      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x40>
 8002810:	2b08      	cmp	r3, #8
 8002812:	f200 80e1 	bhi.w	80029d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x34>
 800281a:	2b04      	cmp	r3, #4
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x3a>
 800281e:	e0db      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b73      	ldr	r3, [pc, #460]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002822:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002824:	e0db      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002826:	4b73      	ldr	r3, [pc, #460]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002828:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800282a:	e0d8      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002834:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002836:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d063      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002842:	4b6a      	ldr	r3, [pc, #424]	; (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	2200      	movs	r2, #0
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
 800284c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002854:	633b      	str	r3, [r7, #48]	; 0x30
 8002856:	2300      	movs	r3, #0
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
 800285a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800285e:	4622      	mov	r2, r4
 8002860:	462b      	mov	r3, r5
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	0159      	lsls	r1, r3, #5
 800286c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002870:	0150      	lsls	r0, r2, #5
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4621      	mov	r1, r4
 8002878:	1a51      	subs	r1, r2, r1
 800287a:	6139      	str	r1, [r7, #16]
 800287c:	4629      	mov	r1, r5
 800287e:	eb63 0301 	sbc.w	r3, r3, r1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002890:	4659      	mov	r1, fp
 8002892:	018b      	lsls	r3, r1, #6
 8002894:	4651      	mov	r1, sl
 8002896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289a:	4651      	mov	r1, sl
 800289c:	018a      	lsls	r2, r1, #6
 800289e:	4651      	mov	r1, sl
 80028a0:	ebb2 0801 	subs.w	r8, r2, r1
 80028a4:	4659      	mov	r1, fp
 80028a6:	eb63 0901 	sbc.w	r9, r3, r1
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028be:	4690      	mov	r8, r2
 80028c0:	4699      	mov	r9, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	eb18 0303 	adds.w	r3, r8, r3
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	462b      	mov	r3, r5
 80028cc:	eb49 0303 	adc.w	r3, r9, r3
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028de:	4629      	mov	r1, r5
 80028e0:	024b      	lsls	r3, r1, #9
 80028e2:	4621      	mov	r1, r4
 80028e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028e8:	4621      	mov	r1, r4
 80028ea:	024a      	lsls	r2, r1, #9
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f2:	2200      	movs	r2, #0
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028fc:	f7fd fcd8 	bl	80002b0 <__aeabi_uldivmod>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4613      	mov	r3, r2
 8002906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002908:	e058      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290a:	4b38      	ldr	r3, [pc, #224]	; (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	099b      	lsrs	r3, r3, #6
 8002910:	2200      	movs	r2, #0
 8002912:	4618      	mov	r0, r3
 8002914:	4611      	mov	r1, r2
 8002916:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800291a:	623b      	str	r3, [r7, #32]
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	f04f 0000 	mov.w	r0, #0
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	0159      	lsls	r1, r3, #5
 8002932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002936:	0150      	lsls	r0, r2, #5
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4641      	mov	r1, r8
 800293e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002942:	4649      	mov	r1, r9
 8002944:	eb63 0b01 	sbc.w	fp, r3, r1
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002954:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002958:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800295c:	ebb2 040a 	subs.w	r4, r2, sl
 8002960:	eb63 050b 	sbc.w	r5, r3, fp
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	00eb      	lsls	r3, r5, #3
 800296e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002972:	00e2      	lsls	r2, r4, #3
 8002974:	4614      	mov	r4, r2
 8002976:	461d      	mov	r5, r3
 8002978:	4643      	mov	r3, r8
 800297a:	18e3      	adds	r3, r4, r3
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	464b      	mov	r3, r9
 8002980:	eb45 0303 	adc.w	r3, r5, r3
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002992:	4629      	mov	r1, r5
 8002994:	028b      	lsls	r3, r1, #10
 8002996:	4621      	mov	r1, r4
 8002998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800299c:	4621      	mov	r1, r4
 800299e:	028a      	lsls	r2, r1, #10
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a6:	2200      	movs	r2, #0
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	61fa      	str	r2, [r7, #28]
 80029ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b0:	f7fd fc7e 	bl	80002b0 <__aeabi_uldivmod>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4613      	mov	r3, r2
 80029ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	3301      	adds	r3, #1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029d6:	e002      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3750      	adds	r7, #80	; 0x50
 80029e4:	46bd      	mov	sp, r7
 80029e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	007a1200 	.word	0x007a1200

080029f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000028 	.word	0x20000028

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a14:	f7ff fff0 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0a9b      	lsrs	r3, r3, #10
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4903      	ldr	r1, [pc, #12]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	08004c48 	.word	0x08004c48

08002a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a3c:	f7ff ffdc 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	0b5b      	lsrs	r3, r3, #13
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4903      	ldr	r1, [pc, #12]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	08004c48 	.word	0x08004c48

08002a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a88:	4b69      	ldr	r3, [pc, #420]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a68      	ldr	r2, [pc, #416]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a92:	6093      	str	r3, [r2, #8]
 8002a94:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	4964      	ldr	r1, [pc, #400]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d017      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	4959      	ldr	r1, [pc, #356]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad8:	d101      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d017      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002af6:	4b4e      	ldr	r3, [pc, #312]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	494a      	ldr	r1, [pc, #296]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 808b 	beq.w	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b50:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b5c:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a34      	ldr	r2, [pc, #208]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe faac 	bl	80010c4 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe faa8 	bl	80010c4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e357      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d035      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d02e      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bac:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d114      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fa70 	bl	80010c4 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7fe fa6c 	bl	80010c4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e319      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ee      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c16:	d111      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c26:	400b      	ands	r3, r1
 8002c28:	4901      	ldr	r1, [pc, #4]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40007000 	.word	0x40007000
 8002c38:	0ffffcff 	.word	0x0ffffcff
 8002c3c:	4baa      	ldr	r3, [pc, #680]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4aa9      	ldr	r2, [pc, #676]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c46:	6093      	str	r3, [r2, #8]
 8002c48:	4ba7      	ldr	r3, [pc, #668]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c54:	49a4      	ldr	r1, [pc, #656]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c66:	4ba0      	ldr	r3, [pc, #640]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6c:	4a9e      	ldr	r2, [pc, #632]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c76:	4b9c      	ldr	r3, [pc, #624]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	4999      	ldr	r1, [pc, #612]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c94:	4b94      	ldr	r3, [pc, #592]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca2:	4991      	ldr	r1, [pc, #580]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cb6:	4b8c      	ldr	r3, [pc, #560]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc4:	4988      	ldr	r1, [pc, #544]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cd8:	4b83      	ldr	r3, [pc, #524]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce6:	4980      	ldr	r1, [pc, #512]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cfa:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	4977      	ldr	r1, [pc, #476]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d1c:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f023 0203 	bic.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	496f      	ldr	r1, [pc, #444]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f023 020c 	bic.w	r2, r3, #12
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4c:	4966      	ldr	r1, [pc, #408]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	495e      	ldr	r1, [pc, #376]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d90:	4955      	ldr	r1, [pc, #340]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dc6:	4b48      	ldr	r3, [pc, #288]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	4944      	ldr	r1, [pc, #272]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	493c      	ldr	r1, [pc, #240]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e18:	4933      	ldr	r1, [pc, #204]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3a:	492b      	ldr	r1, [pc, #172]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d011      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5c:	4922      	ldr	r1, [pc, #136]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	4912      	ldr	r1, [pc, #72]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec0:	4909      	ldr	r1, [pc, #36]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d006      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80d9 	beq.w	800308e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002edc:	4b02      	ldr	r3, [pc, #8]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a01      	ldr	r2, [pc, #4]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee6:	e001      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eee:	f7fe f8e9 	bl	80010c4 <HAL_GetTick>
 8002ef2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ef6:	f7fe f8e5 	bl	80010c4 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b64      	cmp	r3, #100	; 0x64
 8002f02:	d901      	bls.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e194      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f08:	4b6c      	ldr	r3, [pc, #432]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f0      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d021      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d11d      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f28:	4b64      	ldr	r3, [pc, #400]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f36:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3c:	0e1b      	lsrs	r3, r3, #24
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	019a      	lsls	r2, r3, #6
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	061b      	lsls	r3, r3, #24
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	071b      	lsls	r3, r3, #28
 8002f5c:	4957      	ldr	r1, [pc, #348]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d02e      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8e:	d129      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f90:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa4:	0f1b      	lsrs	r3, r3, #28
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	019a      	lsls	r2, r3, #6
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	071b      	lsls	r3, r3, #28
 8002fc4:	493d      	ldr	r1, [pc, #244]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd2:	f023 021f 	bic.w	r2, r3, #31
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	4937      	ldr	r1, [pc, #220]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01d      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff6:	0e1b      	lsrs	r3, r3, #24
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003004:	0f1b      	lsrs	r3, r3, #28
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	019a      	lsls	r2, r3, #6
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	431a      	orrs	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	071b      	lsls	r3, r3, #28
 8003024:	4925      	ldr	r1, [pc, #148]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d011      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	019a      	lsls	r2, r3, #6
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	061b      	lsls	r3, r3, #24
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	071b      	lsls	r3, r3, #28
 8003054:	4919      	ldr	r1, [pc, #100]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800305c:	4b17      	ldr	r3, [pc, #92]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a16      	ldr	r2, [pc, #88]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003062:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fe f82c 	bl	80010c4 <HAL_GetTick>
 800306c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003070:	f7fe f828 	bl	80010c4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0d7      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b01      	cmp	r3, #1
 8003092:	f040 80cd 	bne.w	8003230 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a08      	ldr	r2, [pc, #32]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a2:	f7fe f80f 	bl	80010c4 <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030aa:	f7fe f80b 	bl	80010c4 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b64      	cmp	r3, #100	; 0x64
 80030b6:	d903      	bls.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0ba      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80030bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030c0:	4b5e      	ldr	r3, [pc, #376]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030cc:	d0ed      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d02e      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d12a      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030f6:	4b51      	ldr	r3, [pc, #324]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003104:	4b4d      	ldr	r3, [pc, #308]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	0f1b      	lsrs	r3, r3, #28
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	019a      	lsls	r2, r3, #6
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	431a      	orrs	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	071b      	lsls	r3, r3, #28
 800312a:	4944      	ldr	r1, [pc, #272]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003132:	4b42      	ldr	r3, [pc, #264]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003138:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	493d      	ldr	r1, [pc, #244]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d022      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800315c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003160:	d11d      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003162:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	0e1b      	lsrs	r3, r3, #24
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003170:	4b32      	ldr	r3, [pc, #200]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	0f1b      	lsrs	r3, r3, #28
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	019a      	lsls	r2, r3, #6
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	431a      	orrs	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	4929      	ldr	r1, [pc, #164]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d028      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	0e1b      	lsrs	r3, r3, #24
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031b8:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	0c1b      	lsrs	r3, r3, #16
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	019a      	lsls	r2, r3, #6
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	041b      	lsls	r3, r3, #16
 80031d0:	431a      	orrs	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	071b      	lsls	r3, r3, #28
 80031de:	4917      	ldr	r1, [pc, #92]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	4911      	ldr	r1, [pc, #68]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fd ff5c 	bl	80010c4 <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003210:	f7fd ff58 	bl	80010c4 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e007      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800322a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800322e:	d1ef      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e049      	b.n	80032e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fdfc 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f000 f9f6 	bl	8003670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d001      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e054      	b.n	80033b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x80>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003332:	d01d      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x80>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x80>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x80>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <HAL_TIM_Base_Start_IT+0xdc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x80>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x80>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x80>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d115      	bne.n	800339c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_TIM_Base_Start_IT+0xec>)
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d015      	beq.n	80033ae <HAL_TIM_Base_Start_IT+0xbe>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d011      	beq.n	80033ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339a:	e008      	b.n	80033ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e000      	b.n	80033b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40010400 	.word	0x40010400
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40001800 	.word	0x40001800
 80033dc:	00010007 	.word	0x00010007

080033e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d122      	bne.n	800343c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b02      	cmp	r3, #2
 8003402:	d11b      	bne.n	800343c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0202 	mvn.w	r2, #2
 800340c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f905 	bl	8003632 <HAL_TIM_IC_CaptureCallback>
 8003428:	e005      	b.n	8003436 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8f7 	bl	800361e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f908 	bl	8003646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b04      	cmp	r3, #4
 8003448:	d122      	bne.n	8003490 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b04      	cmp	r3, #4
 8003456:	d11b      	bne.n	8003490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0204 	mvn.w	r2, #4
 8003460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8db 	bl	8003632 <HAL_TIM_IC_CaptureCallback>
 800347c:	e005      	b.n	800348a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8cd 	bl	800361e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f8de 	bl	8003646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b08      	cmp	r3, #8
 800349c:	d122      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d11b      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0208 	mvn.w	r2, #8
 80034b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2204      	movs	r2, #4
 80034ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8b1 	bl	8003632 <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8a3 	bl	800361e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8b4 	bl	8003646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d122      	bne.n	8003538 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d11b      	bne.n	8003538 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0210 	mvn.w	r2, #16
 8003508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2208      	movs	r2, #8
 800350e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f887 	bl	8003632 <HAL_TIM_IC_CaptureCallback>
 8003524:	e005      	b.n	8003532 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f879 	bl	800361e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f88a 	bl	8003646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d10e      	bne.n	8003564 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d107      	bne.n	8003564 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0201 	mvn.w	r2, #1
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd fac8 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b80      	cmp	r3, #128	; 0x80
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	d107      	bne.n	8003590 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f9a8 	bl	80038e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359e:	d10e      	bne.n	80035be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d107      	bne.n	80035be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f99b 	bl	80038f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d10e      	bne.n	80035ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d107      	bne.n	80035ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f838 	bl	800365a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d10e      	bne.n	8003616 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b20      	cmp	r3, #32
 8003604:	d107      	bne.n	8003616 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f06f 0220 	mvn.w	r2, #32
 800360e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f95b 	bl	80038cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a40      	ldr	r2, [pc, #256]	; (8003784 <TIM_Base_SetConfig+0x114>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d00f      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3d      	ldr	r2, [pc, #244]	; (8003788 <TIM_Base_SetConfig+0x118>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00b      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3c      	ldr	r2, [pc, #240]	; (800378c <TIM_Base_SetConfig+0x11c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3b      	ldr	r2, [pc, #236]	; (8003790 <TIM_Base_SetConfig+0x120>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a3a      	ldr	r2, [pc, #232]	; (8003794 <TIM_Base_SetConfig+0x124>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d108      	bne.n	80036c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <TIM_Base_SetConfig+0x114>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02b      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d027      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2c      	ldr	r2, [pc, #176]	; (8003788 <TIM_Base_SetConfig+0x118>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d023      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2b      	ldr	r2, [pc, #172]	; (800378c <TIM_Base_SetConfig+0x11c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01f      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <TIM_Base_SetConfig+0x120>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01b      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a29      	ldr	r2, [pc, #164]	; (8003794 <TIM_Base_SetConfig+0x124>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d017      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a28      	ldr	r2, [pc, #160]	; (8003798 <TIM_Base_SetConfig+0x128>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a27      	ldr	r2, [pc, #156]	; (800379c <TIM_Base_SetConfig+0x12c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00f      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <TIM_Base_SetConfig+0x130>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00b      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <TIM_Base_SetConfig+0x134>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <TIM_Base_SetConfig+0x138>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d003      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a23      	ldr	r2, [pc, #140]	; (80037ac <TIM_Base_SetConfig+0x13c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d108      	bne.n	8003734 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <TIM_Base_SetConfig+0x114>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0xf8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <TIM_Base_SetConfig+0x124>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	615a      	str	r2, [r3, #20]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40010000 	.word	0x40010000
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40000c00 	.word	0x40000c00
 8003794:	40010400 	.word	0x40010400
 8003798:	40014000 	.word	0x40014000
 800379c:	40014400 	.word	0x40014400
 80037a0:	40014800 	.word	0x40014800
 80037a4:	40001800 	.word	0x40001800
 80037a8:	40001c00 	.word	0x40001c00
 80037ac:	40002000 	.word	0x40002000

080037b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e06d      	b.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a30      	ldr	r2, [pc, #192]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2f      	ldr	r2, [pc, #188]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d108      	bne.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003802:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003814:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d022      	beq.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d01d      	beq.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d018      	beq.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1a      	ldr	r2, [pc, #104]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00e      	beq.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d10c      	bne.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800387e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40010400 	.word	0x40010400
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40000c00 	.word	0x40000c00
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40001800 	.word	0x40001800

080038cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e040      	b.n	800399c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd faf0 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8b0 	bl	8003aac <UART_SetConfig>
 800394c:	4603      	mov	r3, r0
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e022      	b.n	800399c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fb08 	bl	8003f74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fb8f 	bl	80040b8 <UART_CheckIdleState>
 800399a:	4603      	mov	r3, r0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d171      	bne.n	8003aa0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_UART_Transmit+0x24>
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e06a      	b.n	8003aa2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2221      	movs	r2, #33	; 0x21
 80039d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039da:	f7fd fb73 	bl	80010c4 <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	88fa      	ldrh	r2, [r7, #6]
 80039e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d108      	bne.n	8003a0c <HAL_UART_Transmit+0x68>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e003      	b.n	8003a14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a14:	e02c      	b.n	8003a70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2180      	movs	r1, #128	; 0x80
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fb80 	bl	8004126 <UART_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e038      	b.n	8003aa2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	3302      	adds	r3, #2
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	e007      	b.n	8003a5e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1cc      	bne.n	8003a16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2140      	movs	r1, #64	; 0x40
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fb4d 	bl	8004126 <UART_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e005      	b.n	8003aa2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e000      	b.n	8003aa2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4ba6      	ldr	r3, [pc, #664]	; (8003d70 <UART_SetConfig+0x2c4>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	6979      	ldr	r1, [r7, #20]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a94      	ldr	r2, [pc, #592]	; (8003d74 <UART_SetConfig+0x2c8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d120      	bne.n	8003b6a <UART_SetConfig+0xbe>
 8003b28:	4b93      	ldr	r3, [pc, #588]	; (8003d78 <UART_SetConfig+0x2cc>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d816      	bhi.n	8003b64 <UART_SetConfig+0xb8>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0x90>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b59 	.word	0x08003b59
 8003b44:	08003b53 	.word	0x08003b53
 8003b48:	08003b5f 	.word	0x08003b5f
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e150      	b.n	8003df4 <UART_SetConfig+0x348>
 8003b52:	2302      	movs	r3, #2
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e14d      	b.n	8003df4 <UART_SetConfig+0x348>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e14a      	b.n	8003df4 <UART_SetConfig+0x348>
 8003b5e:	2308      	movs	r3, #8
 8003b60:	77fb      	strb	r3, [r7, #31]
 8003b62:	e147      	b.n	8003df4 <UART_SetConfig+0x348>
 8003b64:	2310      	movs	r3, #16
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e144      	b.n	8003df4 <UART_SetConfig+0x348>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a83      	ldr	r2, [pc, #524]	; (8003d7c <UART_SetConfig+0x2d0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d132      	bne.n	8003bda <UART_SetConfig+0x12e>
 8003b74:	4b80      	ldr	r3, [pc, #512]	; (8003d78 <UART_SetConfig+0x2cc>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b0c      	cmp	r3, #12
 8003b80:	d828      	bhi.n	8003bd4 <UART_SetConfig+0x128>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <UART_SetConfig+0xdc>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003bbd 	.word	0x08003bbd
 8003b8c:	08003bd5 	.word	0x08003bd5
 8003b90:	08003bd5 	.word	0x08003bd5
 8003b94:	08003bd5 	.word	0x08003bd5
 8003b98:	08003bc9 	.word	0x08003bc9
 8003b9c:	08003bd5 	.word	0x08003bd5
 8003ba0:	08003bd5 	.word	0x08003bd5
 8003ba4:	08003bd5 	.word	0x08003bd5
 8003ba8:	08003bc3 	.word	0x08003bc3
 8003bac:	08003bd5 	.word	0x08003bd5
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003bd5 	.word	0x08003bd5
 8003bb8:	08003bcf 	.word	0x08003bcf
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e118      	b.n	8003df4 <UART_SetConfig+0x348>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e115      	b.n	8003df4 <UART_SetConfig+0x348>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e112      	b.n	8003df4 <UART_SetConfig+0x348>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	77fb      	strb	r3, [r7, #31]
 8003bd2:	e10f      	b.n	8003df4 <UART_SetConfig+0x348>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e10c      	b.n	8003df4 <UART_SetConfig+0x348>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a68      	ldr	r2, [pc, #416]	; (8003d80 <UART_SetConfig+0x2d4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d120      	bne.n	8003c26 <UART_SetConfig+0x17a>
 8003be4:	4b64      	ldr	r3, [pc, #400]	; (8003d78 <UART_SetConfig+0x2cc>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bee:	2b30      	cmp	r3, #48	; 0x30
 8003bf0:	d013      	beq.n	8003c1a <UART_SetConfig+0x16e>
 8003bf2:	2b30      	cmp	r3, #48	; 0x30
 8003bf4:	d814      	bhi.n	8003c20 <UART_SetConfig+0x174>
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d009      	beq.n	8003c0e <UART_SetConfig+0x162>
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d810      	bhi.n	8003c20 <UART_SetConfig+0x174>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <UART_SetConfig+0x15c>
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d006      	beq.n	8003c14 <UART_SetConfig+0x168>
 8003c06:	e00b      	b.n	8003c20 <UART_SetConfig+0x174>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e0f2      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e0ef      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c14:	2304      	movs	r3, #4
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e0ec      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e0e9      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c20:	2310      	movs	r3, #16
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e0e6      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a56      	ldr	r2, [pc, #344]	; (8003d84 <UART_SetConfig+0x2d8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d120      	bne.n	8003c72 <UART_SetConfig+0x1c6>
 8003c30:	4b51      	ldr	r3, [pc, #324]	; (8003d78 <UART_SetConfig+0x2cc>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c3c:	d013      	beq.n	8003c66 <UART_SetConfig+0x1ba>
 8003c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c40:	d814      	bhi.n	8003c6c <UART_SetConfig+0x1c0>
 8003c42:	2b80      	cmp	r3, #128	; 0x80
 8003c44:	d009      	beq.n	8003c5a <UART_SetConfig+0x1ae>
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d810      	bhi.n	8003c6c <UART_SetConfig+0x1c0>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <UART_SetConfig+0x1a8>
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d006      	beq.n	8003c60 <UART_SetConfig+0x1b4>
 8003c52:	e00b      	b.n	8003c6c <UART_SetConfig+0x1c0>
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e0cc      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e0c9      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c60:	2304      	movs	r3, #4
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e0c6      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c66:	2308      	movs	r3, #8
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e0c3      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e0c0      	b.n	8003df4 <UART_SetConfig+0x348>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a44      	ldr	r2, [pc, #272]	; (8003d88 <UART_SetConfig+0x2dc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d125      	bne.n	8003cc8 <UART_SetConfig+0x21c>
 8003c7c:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <UART_SetConfig+0x2cc>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c8a:	d017      	beq.n	8003cbc <UART_SetConfig+0x210>
 8003c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c90:	d817      	bhi.n	8003cc2 <UART_SetConfig+0x216>
 8003c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c96:	d00b      	beq.n	8003cb0 <UART_SetConfig+0x204>
 8003c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9c:	d811      	bhi.n	8003cc2 <UART_SetConfig+0x216>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <UART_SetConfig+0x1fe>
 8003ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca6:	d006      	beq.n	8003cb6 <UART_SetConfig+0x20a>
 8003ca8:	e00b      	b.n	8003cc2 <UART_SetConfig+0x216>
 8003caa:	2300      	movs	r3, #0
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e0a1      	b.n	8003df4 <UART_SetConfig+0x348>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e09e      	b.n	8003df4 <UART_SetConfig+0x348>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e09b      	b.n	8003df4 <UART_SetConfig+0x348>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e098      	b.n	8003df4 <UART_SetConfig+0x348>
 8003cc2:	2310      	movs	r3, #16
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e095      	b.n	8003df4 <UART_SetConfig+0x348>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <UART_SetConfig+0x2e0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d125      	bne.n	8003d1e <UART_SetConfig+0x272>
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <UART_SetConfig+0x2cc>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce0:	d017      	beq.n	8003d12 <UART_SetConfig+0x266>
 8003ce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce6:	d817      	bhi.n	8003d18 <UART_SetConfig+0x26c>
 8003ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cec:	d00b      	beq.n	8003d06 <UART_SetConfig+0x25a>
 8003cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf2:	d811      	bhi.n	8003d18 <UART_SetConfig+0x26c>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <UART_SetConfig+0x254>
 8003cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfc:	d006      	beq.n	8003d0c <UART_SetConfig+0x260>
 8003cfe:	e00b      	b.n	8003d18 <UART_SetConfig+0x26c>
 8003d00:	2301      	movs	r3, #1
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e076      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d06:	2302      	movs	r3, #2
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e073      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e070      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d12:	2308      	movs	r3, #8
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e06d      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e06a      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <UART_SetConfig+0x2e4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d138      	bne.n	8003d9a <UART_SetConfig+0x2ee>
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <UART_SetConfig+0x2cc>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d36:	d017      	beq.n	8003d68 <UART_SetConfig+0x2bc>
 8003d38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d3c:	d82a      	bhi.n	8003d94 <UART_SetConfig+0x2e8>
 8003d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d42:	d00b      	beq.n	8003d5c <UART_SetConfig+0x2b0>
 8003d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d48:	d824      	bhi.n	8003d94 <UART_SetConfig+0x2e8>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <UART_SetConfig+0x2aa>
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	d006      	beq.n	8003d62 <UART_SetConfig+0x2b6>
 8003d54:	e01e      	b.n	8003d94 <UART_SetConfig+0x2e8>
 8003d56:	2300      	movs	r3, #0
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e04b      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e048      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d62:	2304      	movs	r3, #4
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e045      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e042      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d6e:	bf00      	nop
 8003d70:	efff69f3 	.word	0xefff69f3
 8003d74:	40011000 	.word	0x40011000
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40004400 	.word	0x40004400
 8003d80:	40004800 	.word	0x40004800
 8003d84:	40004c00 	.word	0x40004c00
 8003d88:	40005000 	.word	0x40005000
 8003d8c:	40011400 	.word	0x40011400
 8003d90:	40007800 	.word	0x40007800
 8003d94:	2310      	movs	r3, #16
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e02c      	b.n	8003df4 <UART_SetConfig+0x348>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a72      	ldr	r2, [pc, #456]	; (8003f68 <UART_SetConfig+0x4bc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d125      	bne.n	8003df0 <UART_SetConfig+0x344>
 8003da4:	4b71      	ldr	r3, [pc, #452]	; (8003f6c <UART_SetConfig+0x4c0>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003db2:	d017      	beq.n	8003de4 <UART_SetConfig+0x338>
 8003db4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003db8:	d817      	bhi.n	8003dea <UART_SetConfig+0x33e>
 8003dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbe:	d00b      	beq.n	8003dd8 <UART_SetConfig+0x32c>
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc4:	d811      	bhi.n	8003dea <UART_SetConfig+0x33e>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <UART_SetConfig+0x326>
 8003dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dce:	d006      	beq.n	8003dde <UART_SetConfig+0x332>
 8003dd0:	e00b      	b.n	8003dea <UART_SetConfig+0x33e>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e00d      	b.n	8003df4 <UART_SetConfig+0x348>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e00a      	b.n	8003df4 <UART_SetConfig+0x348>
 8003dde:	2304      	movs	r3, #4
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e007      	b.n	8003df4 <UART_SetConfig+0x348>
 8003de4:	2308      	movs	r3, #8
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e004      	b.n	8003df4 <UART_SetConfig+0x348>
 8003dea:	2310      	movs	r3, #16
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e001      	b.n	8003df4 <UART_SetConfig+0x348>
 8003df0:	2310      	movs	r3, #16
 8003df2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfc:	d15b      	bne.n	8003eb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003dfe:	7ffb      	ldrb	r3, [r7, #31]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d828      	bhi.n	8003e56 <UART_SetConfig+0x3aa>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <UART_SetConfig+0x360>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e57 	.word	0x08003e57
 8003e1c:	08003e47 	.word	0x08003e47
 8003e20:	08003e57 	.word	0x08003e57
 8003e24:	08003e57 	.word	0x08003e57
 8003e28:	08003e57 	.word	0x08003e57
 8003e2c:	08003e4f 	.word	0x08003e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7fe fdee 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8003e34:	61b8      	str	r0, [r7, #24]
        break;
 8003e36:	e013      	b.n	8003e60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7fe fdfe 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8003e3c:	61b8      	str	r0, [r7, #24]
        break;
 8003e3e:	e00f      	b.n	8003e60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e40:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <UART_SetConfig+0x4c4>)
 8003e42:	61bb      	str	r3, [r7, #24]
        break;
 8003e44:	e00c      	b.n	8003e60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e46:	f7fe fcd1 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 8003e4a:	61b8      	str	r0, [r7, #24]
        break;
 8003e4c:	e008      	b.n	8003e60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e52:	61bb      	str	r3, [r7, #24]
        break;
 8003e54:	e004      	b.n	8003e60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d074      	beq.n	8003f50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	005a      	lsls	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	441a      	add	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b0f      	cmp	r3, #15
 8003e80:	d916      	bls.n	8003eb0 <UART_SetConfig+0x404>
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e88:	d212      	bcs.n	8003eb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f023 030f 	bic.w	r3, r3, #15
 8003e92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	89fb      	ldrh	r3, [r7, #14]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	89fa      	ldrh	r2, [r7, #14]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	e04f      	b.n	8003f50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	77bb      	strb	r3, [r7, #30]
 8003eb4:	e04c      	b.n	8003f50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d828      	bhi.n	8003f0e <UART_SetConfig+0x462>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0x418>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003f0f 	.word	0x08003f0f
 8003ed4:	08003eff 	.word	0x08003eff
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003f0f 	.word	0x08003f0f
 8003ee0:	08003f0f 	.word	0x08003f0f
 8003ee4:	08003f07 	.word	0x08003f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee8:	f7fe fd92 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8003eec:	61b8      	str	r0, [r7, #24]
        break;
 8003eee:	e013      	b.n	8003f18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef0:	f7fe fda2 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8003ef4:	61b8      	str	r0, [r7, #24]
        break;
 8003ef6:	e00f      	b.n	8003f18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <UART_SetConfig+0x4c4>)
 8003efa:	61bb      	str	r3, [r7, #24]
        break;
 8003efc:	e00c      	b.n	8003f18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fe fc75 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 8003f02:	61b8      	str	r0, [r7, #24]
        break;
 8003f04:	e008      	b.n	8003f18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	61bb      	str	r3, [r7, #24]
        break;
 8003f0c:	e004      	b.n	8003f18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	77bb      	strb	r3, [r7, #30]
        break;
 8003f16:	bf00      	nop
    }

    if (pclk != 0U)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d018      	beq.n	8003f50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	085a      	lsrs	r2, r3, #1
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	441a      	add	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b0f      	cmp	r3, #15
 8003f36:	d909      	bls.n	8003f4c <UART_SetConfig+0x4a0>
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d205      	bcs.n	8003f4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	e001      	b.n	8003f50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40007c00 	.word	0x40007c00
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	00f42400 	.word	0x00f42400

08003f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01a      	beq.n	800408a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004072:	d10a      	bne.n	800408a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af02      	add	r7, sp, #8
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040c8:	f7fc fffc 	bl	80010c4 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d10e      	bne.n	80040fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f81b 	bl	8004126 <UART_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e011      	b.n	800411e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b09c      	sub	sp, #112	; 0x70
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4613      	mov	r3, r2
 8004134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004136:	e0a7      	b.n	8004288 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	f000 80a3 	beq.w	8004288 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004142:	f7fc ffbf 	bl	80010c4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <UART_WaitOnFlagUntilTimeout+0x32>
 8004152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004154:	2b00      	cmp	r3, #0
 8004156:	d13f      	bne.n	80041d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800416c:	667b      	str	r3, [r7, #100]	; 0x64
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004176:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004178:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800417c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e6      	bne.n	8004158 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3308      	adds	r3, #8
 8004190:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	663b      	str	r3, [r7, #96]	; 0x60
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80041ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e5      	bne.n	800418a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e068      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d050      	beq.n	8004288 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	d148      	bne.n	8004288 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004214:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421e:	637b      	str	r3, [r7, #52]	; 0x34
 8004220:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e6      	bne.n	8004200 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3308      	adds	r3, #8
 8004238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	613b      	str	r3, [r7, #16]
   return(result);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	66bb      	str	r3, [r7, #104]	; 0x68
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3308      	adds	r3, #8
 8004250:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004252:	623a      	str	r2, [r7, #32]
 8004254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	69f9      	ldr	r1, [r7, #28]
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e5      	bne.n	8004232 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e010      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	f43f af48 	beq.w	8004138 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3770      	adds	r7, #112	; 0x70
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <siprintf>:
 80042b4:	b40e      	push	{r1, r2, r3}
 80042b6:	b500      	push	{lr}
 80042b8:	b09c      	sub	sp, #112	; 0x70
 80042ba:	ab1d      	add	r3, sp, #116	; 0x74
 80042bc:	9002      	str	r0, [sp, #8]
 80042be:	9006      	str	r0, [sp, #24]
 80042c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042c4:	4809      	ldr	r0, [pc, #36]	; (80042ec <siprintf+0x38>)
 80042c6:	9107      	str	r1, [sp, #28]
 80042c8:	9104      	str	r1, [sp, #16]
 80042ca:	4909      	ldr	r1, [pc, #36]	; (80042f0 <siprintf+0x3c>)
 80042cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d0:	9105      	str	r1, [sp, #20]
 80042d2:	6800      	ldr	r0, [r0, #0]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	a902      	add	r1, sp, #8
 80042d8:	f000 f992 	bl	8004600 <_svfiprintf_r>
 80042dc:	9b02      	ldr	r3, [sp, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	b01c      	add	sp, #112	; 0x70
 80042e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e8:	b003      	add	sp, #12
 80042ea:	4770      	bx	lr
 80042ec:	20000080 	.word	0x20000080
 80042f0:	ffff0208 	.word	0xffff0208

080042f4 <memset>:
 80042f4:	4402      	add	r2, r0
 80042f6:	4603      	mov	r3, r0
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d100      	bne.n	80042fe <memset+0xa>
 80042fc:	4770      	bx	lr
 80042fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004302:	e7f9      	b.n	80042f8 <memset+0x4>

08004304 <__errno>:
 8004304:	4b01      	ldr	r3, [pc, #4]	; (800430c <__errno+0x8>)
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000080 	.word	0x20000080

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4d0d      	ldr	r5, [pc, #52]	; (8004348 <__libc_init_array+0x38>)
 8004314:	4c0d      	ldr	r4, [pc, #52]	; (800434c <__libc_init_array+0x3c>)
 8004316:	1b64      	subs	r4, r4, r5
 8004318:	10a4      	asrs	r4, r4, #2
 800431a:	2600      	movs	r6, #0
 800431c:	42a6      	cmp	r6, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	4d0b      	ldr	r5, [pc, #44]	; (8004350 <__libc_init_array+0x40>)
 8004322:	4c0c      	ldr	r4, [pc, #48]	; (8004354 <__libc_init_array+0x44>)
 8004324:	f000 fc6a 	bl	8004bfc <_init>
 8004328:	1b64      	subs	r4, r4, r5
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	2600      	movs	r6, #0
 800432e:	42a6      	cmp	r6, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	f855 3b04 	ldr.w	r3, [r5], #4
 8004338:	4798      	blx	r3
 800433a:	3601      	adds	r6, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004342:	4798      	blx	r3
 8004344:	3601      	adds	r6, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	08004c8c 	.word	0x08004c8c
 800434c:	08004c8c 	.word	0x08004c8c
 8004350:	08004c8c 	.word	0x08004c8c
 8004354:	08004c90 	.word	0x08004c90

08004358 <__retarget_lock_acquire_recursive>:
 8004358:	4770      	bx	lr

0800435a <__retarget_lock_release_recursive>:
 800435a:	4770      	bx	lr

0800435c <_free_r>:
 800435c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800435e:	2900      	cmp	r1, #0
 8004360:	d044      	beq.n	80043ec <_free_r+0x90>
 8004362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004366:	9001      	str	r0, [sp, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f1a1 0404 	sub.w	r4, r1, #4
 800436e:	bfb8      	it	lt
 8004370:	18e4      	addlt	r4, r4, r3
 8004372:	f000 f8df 	bl	8004534 <__malloc_lock>
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <_free_r+0x94>)
 8004378:	9801      	ldr	r0, [sp, #4]
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	b933      	cbnz	r3, 800438c <_free_r+0x30>
 800437e:	6063      	str	r3, [r4, #4]
 8004380:	6014      	str	r4, [r2, #0]
 8004382:	b003      	add	sp, #12
 8004384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004388:	f000 b8da 	b.w	8004540 <__malloc_unlock>
 800438c:	42a3      	cmp	r3, r4
 800438e:	d908      	bls.n	80043a2 <_free_r+0x46>
 8004390:	6825      	ldr	r5, [r4, #0]
 8004392:	1961      	adds	r1, r4, r5
 8004394:	428b      	cmp	r3, r1
 8004396:	bf01      	itttt	eq
 8004398:	6819      	ldreq	r1, [r3, #0]
 800439a:	685b      	ldreq	r3, [r3, #4]
 800439c:	1949      	addeq	r1, r1, r5
 800439e:	6021      	streq	r1, [r4, #0]
 80043a0:	e7ed      	b.n	800437e <_free_r+0x22>
 80043a2:	461a      	mov	r2, r3
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b10b      	cbz	r3, 80043ac <_free_r+0x50>
 80043a8:	42a3      	cmp	r3, r4
 80043aa:	d9fa      	bls.n	80043a2 <_free_r+0x46>
 80043ac:	6811      	ldr	r1, [r2, #0]
 80043ae:	1855      	adds	r5, r2, r1
 80043b0:	42a5      	cmp	r5, r4
 80043b2:	d10b      	bne.n	80043cc <_free_r+0x70>
 80043b4:	6824      	ldr	r4, [r4, #0]
 80043b6:	4421      	add	r1, r4
 80043b8:	1854      	adds	r4, r2, r1
 80043ba:	42a3      	cmp	r3, r4
 80043bc:	6011      	str	r1, [r2, #0]
 80043be:	d1e0      	bne.n	8004382 <_free_r+0x26>
 80043c0:	681c      	ldr	r4, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	6053      	str	r3, [r2, #4]
 80043c6:	440c      	add	r4, r1
 80043c8:	6014      	str	r4, [r2, #0]
 80043ca:	e7da      	b.n	8004382 <_free_r+0x26>
 80043cc:	d902      	bls.n	80043d4 <_free_r+0x78>
 80043ce:	230c      	movs	r3, #12
 80043d0:	6003      	str	r3, [r0, #0]
 80043d2:	e7d6      	b.n	8004382 <_free_r+0x26>
 80043d4:	6825      	ldr	r5, [r4, #0]
 80043d6:	1961      	adds	r1, r4, r5
 80043d8:	428b      	cmp	r3, r1
 80043da:	bf04      	itt	eq
 80043dc:	6819      	ldreq	r1, [r3, #0]
 80043de:	685b      	ldreq	r3, [r3, #4]
 80043e0:	6063      	str	r3, [r4, #4]
 80043e2:	bf04      	itt	eq
 80043e4:	1949      	addeq	r1, r1, r5
 80043e6:	6021      	streq	r1, [r4, #0]
 80043e8:	6054      	str	r4, [r2, #4]
 80043ea:	e7ca      	b.n	8004382 <_free_r+0x26>
 80043ec:	b003      	add	sp, #12
 80043ee:	bd30      	pop	{r4, r5, pc}
 80043f0:	2000030c 	.word	0x2000030c

080043f4 <sbrk_aligned>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	4e0e      	ldr	r6, [pc, #56]	; (8004430 <sbrk_aligned+0x3c>)
 80043f8:	460c      	mov	r4, r1
 80043fa:	6831      	ldr	r1, [r6, #0]
 80043fc:	4605      	mov	r5, r0
 80043fe:	b911      	cbnz	r1, 8004406 <sbrk_aligned+0x12>
 8004400:	f000 fba6 	bl	8004b50 <_sbrk_r>
 8004404:	6030      	str	r0, [r6, #0]
 8004406:	4621      	mov	r1, r4
 8004408:	4628      	mov	r0, r5
 800440a:	f000 fba1 	bl	8004b50 <_sbrk_r>
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	d00a      	beq.n	8004428 <sbrk_aligned+0x34>
 8004412:	1cc4      	adds	r4, r0, #3
 8004414:	f024 0403 	bic.w	r4, r4, #3
 8004418:	42a0      	cmp	r0, r4
 800441a:	d007      	beq.n	800442c <sbrk_aligned+0x38>
 800441c:	1a21      	subs	r1, r4, r0
 800441e:	4628      	mov	r0, r5
 8004420:	f000 fb96 	bl	8004b50 <_sbrk_r>
 8004424:	3001      	adds	r0, #1
 8004426:	d101      	bne.n	800442c <sbrk_aligned+0x38>
 8004428:	f04f 34ff 	mov.w	r4, #4294967295
 800442c:	4620      	mov	r0, r4
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	20000310 	.word	0x20000310

08004434 <_malloc_r>:
 8004434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004438:	1ccd      	adds	r5, r1, #3
 800443a:	f025 0503 	bic.w	r5, r5, #3
 800443e:	3508      	adds	r5, #8
 8004440:	2d0c      	cmp	r5, #12
 8004442:	bf38      	it	cc
 8004444:	250c      	movcc	r5, #12
 8004446:	2d00      	cmp	r5, #0
 8004448:	4607      	mov	r7, r0
 800444a:	db01      	blt.n	8004450 <_malloc_r+0x1c>
 800444c:	42a9      	cmp	r1, r5
 800444e:	d905      	bls.n	800445c <_malloc_r+0x28>
 8004450:	230c      	movs	r3, #12
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	2600      	movs	r6, #0
 8004456:	4630      	mov	r0, r6
 8004458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004530 <_malloc_r+0xfc>
 8004460:	f000 f868 	bl	8004534 <__malloc_lock>
 8004464:	f8d8 3000 	ldr.w	r3, [r8]
 8004468:	461c      	mov	r4, r3
 800446a:	bb5c      	cbnz	r4, 80044c4 <_malloc_r+0x90>
 800446c:	4629      	mov	r1, r5
 800446e:	4638      	mov	r0, r7
 8004470:	f7ff ffc0 	bl	80043f4 <sbrk_aligned>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	4604      	mov	r4, r0
 8004478:	d155      	bne.n	8004526 <_malloc_r+0xf2>
 800447a:	f8d8 4000 	ldr.w	r4, [r8]
 800447e:	4626      	mov	r6, r4
 8004480:	2e00      	cmp	r6, #0
 8004482:	d145      	bne.n	8004510 <_malloc_r+0xdc>
 8004484:	2c00      	cmp	r4, #0
 8004486:	d048      	beq.n	800451a <_malloc_r+0xe6>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	4631      	mov	r1, r6
 800448c:	4638      	mov	r0, r7
 800448e:	eb04 0903 	add.w	r9, r4, r3
 8004492:	f000 fb5d 	bl	8004b50 <_sbrk_r>
 8004496:	4581      	cmp	r9, r0
 8004498:	d13f      	bne.n	800451a <_malloc_r+0xe6>
 800449a:	6821      	ldr	r1, [r4, #0]
 800449c:	1a6d      	subs	r5, r5, r1
 800449e:	4629      	mov	r1, r5
 80044a0:	4638      	mov	r0, r7
 80044a2:	f7ff ffa7 	bl	80043f4 <sbrk_aligned>
 80044a6:	3001      	adds	r0, #1
 80044a8:	d037      	beq.n	800451a <_malloc_r+0xe6>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	442b      	add	r3, r5
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	f8d8 3000 	ldr.w	r3, [r8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d038      	beq.n	800452a <_malloc_r+0xf6>
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	42a2      	cmp	r2, r4
 80044bc:	d12b      	bne.n	8004516 <_malloc_r+0xe2>
 80044be:	2200      	movs	r2, #0
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	e00f      	b.n	80044e4 <_malloc_r+0xb0>
 80044c4:	6822      	ldr	r2, [r4, #0]
 80044c6:	1b52      	subs	r2, r2, r5
 80044c8:	d41f      	bmi.n	800450a <_malloc_r+0xd6>
 80044ca:	2a0b      	cmp	r2, #11
 80044cc:	d917      	bls.n	80044fe <_malloc_r+0xca>
 80044ce:	1961      	adds	r1, r4, r5
 80044d0:	42a3      	cmp	r3, r4
 80044d2:	6025      	str	r5, [r4, #0]
 80044d4:	bf18      	it	ne
 80044d6:	6059      	strne	r1, [r3, #4]
 80044d8:	6863      	ldr	r3, [r4, #4]
 80044da:	bf08      	it	eq
 80044dc:	f8c8 1000 	streq.w	r1, [r8]
 80044e0:	5162      	str	r2, [r4, r5]
 80044e2:	604b      	str	r3, [r1, #4]
 80044e4:	4638      	mov	r0, r7
 80044e6:	f104 060b 	add.w	r6, r4, #11
 80044ea:	f000 f829 	bl	8004540 <__malloc_unlock>
 80044ee:	f026 0607 	bic.w	r6, r6, #7
 80044f2:	1d23      	adds	r3, r4, #4
 80044f4:	1af2      	subs	r2, r6, r3
 80044f6:	d0ae      	beq.n	8004456 <_malloc_r+0x22>
 80044f8:	1b9b      	subs	r3, r3, r6
 80044fa:	50a3      	str	r3, [r4, r2]
 80044fc:	e7ab      	b.n	8004456 <_malloc_r+0x22>
 80044fe:	42a3      	cmp	r3, r4
 8004500:	6862      	ldr	r2, [r4, #4]
 8004502:	d1dd      	bne.n	80044c0 <_malloc_r+0x8c>
 8004504:	f8c8 2000 	str.w	r2, [r8]
 8004508:	e7ec      	b.n	80044e4 <_malloc_r+0xb0>
 800450a:	4623      	mov	r3, r4
 800450c:	6864      	ldr	r4, [r4, #4]
 800450e:	e7ac      	b.n	800446a <_malloc_r+0x36>
 8004510:	4634      	mov	r4, r6
 8004512:	6876      	ldr	r6, [r6, #4]
 8004514:	e7b4      	b.n	8004480 <_malloc_r+0x4c>
 8004516:	4613      	mov	r3, r2
 8004518:	e7cc      	b.n	80044b4 <_malloc_r+0x80>
 800451a:	230c      	movs	r3, #12
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	4638      	mov	r0, r7
 8004520:	f000 f80e 	bl	8004540 <__malloc_unlock>
 8004524:	e797      	b.n	8004456 <_malloc_r+0x22>
 8004526:	6025      	str	r5, [r4, #0]
 8004528:	e7dc      	b.n	80044e4 <_malloc_r+0xb0>
 800452a:	605b      	str	r3, [r3, #4]
 800452c:	deff      	udf	#255	; 0xff
 800452e:	bf00      	nop
 8004530:	2000030c 	.word	0x2000030c

08004534 <__malloc_lock>:
 8004534:	4801      	ldr	r0, [pc, #4]	; (800453c <__malloc_lock+0x8>)
 8004536:	f7ff bf0f 	b.w	8004358 <__retarget_lock_acquire_recursive>
 800453a:	bf00      	nop
 800453c:	20000308 	.word	0x20000308

08004540 <__malloc_unlock>:
 8004540:	4801      	ldr	r0, [pc, #4]	; (8004548 <__malloc_unlock+0x8>)
 8004542:	f7ff bf0a 	b.w	800435a <__retarget_lock_release_recursive>
 8004546:	bf00      	nop
 8004548:	20000308 	.word	0x20000308

0800454c <__ssputs_r>:
 800454c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	688e      	ldr	r6, [r1, #8]
 8004552:	461f      	mov	r7, r3
 8004554:	42be      	cmp	r6, r7
 8004556:	680b      	ldr	r3, [r1, #0]
 8004558:	4682      	mov	sl, r0
 800455a:	460c      	mov	r4, r1
 800455c:	4690      	mov	r8, r2
 800455e:	d82c      	bhi.n	80045ba <__ssputs_r+0x6e>
 8004560:	898a      	ldrh	r2, [r1, #12]
 8004562:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004566:	d026      	beq.n	80045b6 <__ssputs_r+0x6a>
 8004568:	6965      	ldr	r5, [r4, #20]
 800456a:	6909      	ldr	r1, [r1, #16]
 800456c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004570:	eba3 0901 	sub.w	r9, r3, r1
 8004574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004578:	1c7b      	adds	r3, r7, #1
 800457a:	444b      	add	r3, r9
 800457c:	106d      	asrs	r5, r5, #1
 800457e:	429d      	cmp	r5, r3
 8004580:	bf38      	it	cc
 8004582:	461d      	movcc	r5, r3
 8004584:	0553      	lsls	r3, r2, #21
 8004586:	d527      	bpl.n	80045d8 <__ssputs_r+0x8c>
 8004588:	4629      	mov	r1, r5
 800458a:	f7ff ff53 	bl	8004434 <_malloc_r>
 800458e:	4606      	mov	r6, r0
 8004590:	b360      	cbz	r0, 80045ec <__ssputs_r+0xa0>
 8004592:	6921      	ldr	r1, [r4, #16]
 8004594:	464a      	mov	r2, r9
 8004596:	f000 faeb 	bl	8004b70 <memcpy>
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a4:	81a3      	strh	r3, [r4, #12]
 80045a6:	6126      	str	r6, [r4, #16]
 80045a8:	6165      	str	r5, [r4, #20]
 80045aa:	444e      	add	r6, r9
 80045ac:	eba5 0509 	sub.w	r5, r5, r9
 80045b0:	6026      	str	r6, [r4, #0]
 80045b2:	60a5      	str	r5, [r4, #8]
 80045b4:	463e      	mov	r6, r7
 80045b6:	42be      	cmp	r6, r7
 80045b8:	d900      	bls.n	80045bc <__ssputs_r+0x70>
 80045ba:	463e      	mov	r6, r7
 80045bc:	6820      	ldr	r0, [r4, #0]
 80045be:	4632      	mov	r2, r6
 80045c0:	4641      	mov	r1, r8
 80045c2:	f000 faab 	bl	8004b1c <memmove>
 80045c6:	68a3      	ldr	r3, [r4, #8]
 80045c8:	1b9b      	subs	r3, r3, r6
 80045ca:	60a3      	str	r3, [r4, #8]
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	4433      	add	r3, r6
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	2000      	movs	r0, #0
 80045d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d8:	462a      	mov	r2, r5
 80045da:	f000 fad7 	bl	8004b8c <_realloc_r>
 80045de:	4606      	mov	r6, r0
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d1e0      	bne.n	80045a6 <__ssputs_r+0x5a>
 80045e4:	6921      	ldr	r1, [r4, #16]
 80045e6:	4650      	mov	r0, sl
 80045e8:	f7ff feb8 	bl	800435c <_free_r>
 80045ec:	230c      	movs	r3, #12
 80045ee:	f8ca 3000 	str.w	r3, [sl]
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f8:	81a3      	strh	r3, [r4, #12]
 80045fa:	f04f 30ff 	mov.w	r0, #4294967295
 80045fe:	e7e9      	b.n	80045d4 <__ssputs_r+0x88>

08004600 <_svfiprintf_r>:
 8004600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004604:	4698      	mov	r8, r3
 8004606:	898b      	ldrh	r3, [r1, #12]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	b09d      	sub	sp, #116	; 0x74
 800460c:	4607      	mov	r7, r0
 800460e:	460d      	mov	r5, r1
 8004610:	4614      	mov	r4, r2
 8004612:	d50e      	bpl.n	8004632 <_svfiprintf_r+0x32>
 8004614:	690b      	ldr	r3, [r1, #16]
 8004616:	b963      	cbnz	r3, 8004632 <_svfiprintf_r+0x32>
 8004618:	2140      	movs	r1, #64	; 0x40
 800461a:	f7ff ff0b 	bl	8004434 <_malloc_r>
 800461e:	6028      	str	r0, [r5, #0]
 8004620:	6128      	str	r0, [r5, #16]
 8004622:	b920      	cbnz	r0, 800462e <_svfiprintf_r+0x2e>
 8004624:	230c      	movs	r3, #12
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	e0d0      	b.n	80047d0 <_svfiprintf_r+0x1d0>
 800462e:	2340      	movs	r3, #64	; 0x40
 8004630:	616b      	str	r3, [r5, #20]
 8004632:	2300      	movs	r3, #0
 8004634:	9309      	str	r3, [sp, #36]	; 0x24
 8004636:	2320      	movs	r3, #32
 8004638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800463c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004640:	2330      	movs	r3, #48	; 0x30
 8004642:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047e8 <_svfiprintf_r+0x1e8>
 8004646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800464a:	f04f 0901 	mov.w	r9, #1
 800464e:	4623      	mov	r3, r4
 8004650:	469a      	mov	sl, r3
 8004652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004656:	b10a      	cbz	r2, 800465c <_svfiprintf_r+0x5c>
 8004658:	2a25      	cmp	r2, #37	; 0x25
 800465a:	d1f9      	bne.n	8004650 <_svfiprintf_r+0x50>
 800465c:	ebba 0b04 	subs.w	fp, sl, r4
 8004660:	d00b      	beq.n	800467a <_svfiprintf_r+0x7a>
 8004662:	465b      	mov	r3, fp
 8004664:	4622      	mov	r2, r4
 8004666:	4629      	mov	r1, r5
 8004668:	4638      	mov	r0, r7
 800466a:	f7ff ff6f 	bl	800454c <__ssputs_r>
 800466e:	3001      	adds	r0, #1
 8004670:	f000 80a9 	beq.w	80047c6 <_svfiprintf_r+0x1c6>
 8004674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004676:	445a      	add	r2, fp
 8004678:	9209      	str	r2, [sp, #36]	; 0x24
 800467a:	f89a 3000 	ldrb.w	r3, [sl]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80a1 	beq.w	80047c6 <_svfiprintf_r+0x1c6>
 8004684:	2300      	movs	r3, #0
 8004686:	f04f 32ff 	mov.w	r2, #4294967295
 800468a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800468e:	f10a 0a01 	add.w	sl, sl, #1
 8004692:	9304      	str	r3, [sp, #16]
 8004694:	9307      	str	r3, [sp, #28]
 8004696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800469a:	931a      	str	r3, [sp, #104]	; 0x68
 800469c:	4654      	mov	r4, sl
 800469e:	2205      	movs	r2, #5
 80046a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a4:	4850      	ldr	r0, [pc, #320]	; (80047e8 <_svfiprintf_r+0x1e8>)
 80046a6:	f7fb fdb3 	bl	8000210 <memchr>
 80046aa:	9a04      	ldr	r2, [sp, #16]
 80046ac:	b9d8      	cbnz	r0, 80046e6 <_svfiprintf_r+0xe6>
 80046ae:	06d0      	lsls	r0, r2, #27
 80046b0:	bf44      	itt	mi
 80046b2:	2320      	movmi	r3, #32
 80046b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046b8:	0711      	lsls	r1, r2, #28
 80046ba:	bf44      	itt	mi
 80046bc:	232b      	movmi	r3, #43	; 0x2b
 80046be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046c2:	f89a 3000 	ldrb.w	r3, [sl]
 80046c6:	2b2a      	cmp	r3, #42	; 0x2a
 80046c8:	d015      	beq.n	80046f6 <_svfiprintf_r+0xf6>
 80046ca:	9a07      	ldr	r2, [sp, #28]
 80046cc:	4654      	mov	r4, sl
 80046ce:	2000      	movs	r0, #0
 80046d0:	f04f 0c0a 	mov.w	ip, #10
 80046d4:	4621      	mov	r1, r4
 80046d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046da:	3b30      	subs	r3, #48	; 0x30
 80046dc:	2b09      	cmp	r3, #9
 80046de:	d94d      	bls.n	800477c <_svfiprintf_r+0x17c>
 80046e0:	b1b0      	cbz	r0, 8004710 <_svfiprintf_r+0x110>
 80046e2:	9207      	str	r2, [sp, #28]
 80046e4:	e014      	b.n	8004710 <_svfiprintf_r+0x110>
 80046e6:	eba0 0308 	sub.w	r3, r0, r8
 80046ea:	fa09 f303 	lsl.w	r3, r9, r3
 80046ee:	4313      	orrs	r3, r2
 80046f0:	9304      	str	r3, [sp, #16]
 80046f2:	46a2      	mov	sl, r4
 80046f4:	e7d2      	b.n	800469c <_svfiprintf_r+0x9c>
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	1d19      	adds	r1, r3, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	9103      	str	r1, [sp, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfbb      	ittet	lt
 8004702:	425b      	neglt	r3, r3
 8004704:	f042 0202 	orrlt.w	r2, r2, #2
 8004708:	9307      	strge	r3, [sp, #28]
 800470a:	9307      	strlt	r3, [sp, #28]
 800470c:	bfb8      	it	lt
 800470e:	9204      	strlt	r2, [sp, #16]
 8004710:	7823      	ldrb	r3, [r4, #0]
 8004712:	2b2e      	cmp	r3, #46	; 0x2e
 8004714:	d10c      	bne.n	8004730 <_svfiprintf_r+0x130>
 8004716:	7863      	ldrb	r3, [r4, #1]
 8004718:	2b2a      	cmp	r3, #42	; 0x2a
 800471a:	d134      	bne.n	8004786 <_svfiprintf_r+0x186>
 800471c:	9b03      	ldr	r3, [sp, #12]
 800471e:	1d1a      	adds	r2, r3, #4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	9203      	str	r2, [sp, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	bfb8      	it	lt
 8004728:	f04f 33ff 	movlt.w	r3, #4294967295
 800472c:	3402      	adds	r4, #2
 800472e:	9305      	str	r3, [sp, #20]
 8004730:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80047f8 <_svfiprintf_r+0x1f8>
 8004734:	7821      	ldrb	r1, [r4, #0]
 8004736:	2203      	movs	r2, #3
 8004738:	4650      	mov	r0, sl
 800473a:	f7fb fd69 	bl	8000210 <memchr>
 800473e:	b138      	cbz	r0, 8004750 <_svfiprintf_r+0x150>
 8004740:	9b04      	ldr	r3, [sp, #16]
 8004742:	eba0 000a 	sub.w	r0, r0, sl
 8004746:	2240      	movs	r2, #64	; 0x40
 8004748:	4082      	lsls	r2, r0
 800474a:	4313      	orrs	r3, r2
 800474c:	3401      	adds	r4, #1
 800474e:	9304      	str	r3, [sp, #16]
 8004750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004754:	4825      	ldr	r0, [pc, #148]	; (80047ec <_svfiprintf_r+0x1ec>)
 8004756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800475a:	2206      	movs	r2, #6
 800475c:	f7fb fd58 	bl	8000210 <memchr>
 8004760:	2800      	cmp	r0, #0
 8004762:	d038      	beq.n	80047d6 <_svfiprintf_r+0x1d6>
 8004764:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <_svfiprintf_r+0x1f0>)
 8004766:	bb1b      	cbnz	r3, 80047b0 <_svfiprintf_r+0x1b0>
 8004768:	9b03      	ldr	r3, [sp, #12]
 800476a:	3307      	adds	r3, #7
 800476c:	f023 0307 	bic.w	r3, r3, #7
 8004770:	3308      	adds	r3, #8
 8004772:	9303      	str	r3, [sp, #12]
 8004774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004776:	4433      	add	r3, r6
 8004778:	9309      	str	r3, [sp, #36]	; 0x24
 800477a:	e768      	b.n	800464e <_svfiprintf_r+0x4e>
 800477c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004780:	460c      	mov	r4, r1
 8004782:	2001      	movs	r0, #1
 8004784:	e7a6      	b.n	80046d4 <_svfiprintf_r+0xd4>
 8004786:	2300      	movs	r3, #0
 8004788:	3401      	adds	r4, #1
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	4619      	mov	r1, r3
 800478e:	f04f 0c0a 	mov.w	ip, #10
 8004792:	4620      	mov	r0, r4
 8004794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004798:	3a30      	subs	r2, #48	; 0x30
 800479a:	2a09      	cmp	r2, #9
 800479c:	d903      	bls.n	80047a6 <_svfiprintf_r+0x1a6>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0c6      	beq.n	8004730 <_svfiprintf_r+0x130>
 80047a2:	9105      	str	r1, [sp, #20]
 80047a4:	e7c4      	b.n	8004730 <_svfiprintf_r+0x130>
 80047a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047aa:	4604      	mov	r4, r0
 80047ac:	2301      	movs	r3, #1
 80047ae:	e7f0      	b.n	8004792 <_svfiprintf_r+0x192>
 80047b0:	ab03      	add	r3, sp, #12
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	462a      	mov	r2, r5
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <_svfiprintf_r+0x1f4>)
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	4638      	mov	r0, r7
 80047bc:	f3af 8000 	nop.w
 80047c0:	1c42      	adds	r2, r0, #1
 80047c2:	4606      	mov	r6, r0
 80047c4:	d1d6      	bne.n	8004774 <_svfiprintf_r+0x174>
 80047c6:	89ab      	ldrh	r3, [r5, #12]
 80047c8:	065b      	lsls	r3, r3, #25
 80047ca:	f53f af2d 	bmi.w	8004628 <_svfiprintf_r+0x28>
 80047ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047d0:	b01d      	add	sp, #116	; 0x74
 80047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d6:	ab03      	add	r3, sp, #12
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	462a      	mov	r2, r5
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <_svfiprintf_r+0x1f4>)
 80047de:	a904      	add	r1, sp, #16
 80047e0:	4638      	mov	r0, r7
 80047e2:	f000 f879 	bl	80048d8 <_printf_i>
 80047e6:	e7eb      	b.n	80047c0 <_svfiprintf_r+0x1c0>
 80047e8:	08004c50 	.word	0x08004c50
 80047ec:	08004c5a 	.word	0x08004c5a
 80047f0:	00000000 	.word	0x00000000
 80047f4:	0800454d 	.word	0x0800454d
 80047f8:	08004c56 	.word	0x08004c56

080047fc <_printf_common>:
 80047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	4616      	mov	r6, r2
 8004802:	4699      	mov	r9, r3
 8004804:	688a      	ldr	r2, [r1, #8]
 8004806:	690b      	ldr	r3, [r1, #16]
 8004808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800480c:	4293      	cmp	r3, r2
 800480e:	bfb8      	it	lt
 8004810:	4613      	movlt	r3, r2
 8004812:	6033      	str	r3, [r6, #0]
 8004814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004818:	4607      	mov	r7, r0
 800481a:	460c      	mov	r4, r1
 800481c:	b10a      	cbz	r2, 8004822 <_printf_common+0x26>
 800481e:	3301      	adds	r3, #1
 8004820:	6033      	str	r3, [r6, #0]
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	0699      	lsls	r1, r3, #26
 8004826:	bf42      	ittt	mi
 8004828:	6833      	ldrmi	r3, [r6, #0]
 800482a:	3302      	addmi	r3, #2
 800482c:	6033      	strmi	r3, [r6, #0]
 800482e:	6825      	ldr	r5, [r4, #0]
 8004830:	f015 0506 	ands.w	r5, r5, #6
 8004834:	d106      	bne.n	8004844 <_printf_common+0x48>
 8004836:	f104 0a19 	add.w	sl, r4, #25
 800483a:	68e3      	ldr	r3, [r4, #12]
 800483c:	6832      	ldr	r2, [r6, #0]
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	42ab      	cmp	r3, r5
 8004842:	dc26      	bgt.n	8004892 <_printf_common+0x96>
 8004844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004848:	1e13      	subs	r3, r2, #0
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	bf18      	it	ne
 800484e:	2301      	movne	r3, #1
 8004850:	0692      	lsls	r2, r2, #26
 8004852:	d42b      	bmi.n	80048ac <_printf_common+0xb0>
 8004854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004858:	4649      	mov	r1, r9
 800485a:	4638      	mov	r0, r7
 800485c:	47c0      	blx	r8
 800485e:	3001      	adds	r0, #1
 8004860:	d01e      	beq.n	80048a0 <_printf_common+0xa4>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	f003 0306 	and.w	r3, r3, #6
 800486a:	2b04      	cmp	r3, #4
 800486c:	bf02      	ittt	eq
 800486e:	68e5      	ldreq	r5, [r4, #12]
 8004870:	6833      	ldreq	r3, [r6, #0]
 8004872:	1aed      	subeq	r5, r5, r3
 8004874:	68a3      	ldr	r3, [r4, #8]
 8004876:	bf0c      	ite	eq
 8004878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800487c:	2500      	movne	r5, #0
 800487e:	4293      	cmp	r3, r2
 8004880:	bfc4      	itt	gt
 8004882:	1a9b      	subgt	r3, r3, r2
 8004884:	18ed      	addgt	r5, r5, r3
 8004886:	2600      	movs	r6, #0
 8004888:	341a      	adds	r4, #26
 800488a:	42b5      	cmp	r5, r6
 800488c:	d11a      	bne.n	80048c4 <_printf_common+0xc8>
 800488e:	2000      	movs	r0, #0
 8004890:	e008      	b.n	80048a4 <_printf_common+0xa8>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4649      	mov	r1, r9
 8004898:	4638      	mov	r0, r7
 800489a:	47c0      	blx	r8
 800489c:	3001      	adds	r0, #1
 800489e:	d103      	bne.n	80048a8 <_printf_common+0xac>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7c6      	b.n	800483a <_printf_common+0x3e>
 80048ac:	18e1      	adds	r1, r4, r3
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	2030      	movs	r0, #48	; 0x30
 80048b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048b6:	4422      	add	r2, r4
 80048b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c0:	3302      	adds	r3, #2
 80048c2:	e7c7      	b.n	8004854 <_printf_common+0x58>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4622      	mov	r2, r4
 80048c8:	4649      	mov	r1, r9
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d0e6      	beq.n	80048a0 <_printf_common+0xa4>
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7d9      	b.n	800488a <_printf_common+0x8e>
	...

080048d8 <_printf_i>:
 80048d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	7e0f      	ldrb	r7, [r1, #24]
 80048de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048e0:	2f78      	cmp	r7, #120	; 0x78
 80048e2:	4691      	mov	r9, r2
 80048e4:	4680      	mov	r8, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	469a      	mov	sl, r3
 80048ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048ee:	d807      	bhi.n	8004900 <_printf_i+0x28>
 80048f0:	2f62      	cmp	r7, #98	; 0x62
 80048f2:	d80a      	bhi.n	800490a <_printf_i+0x32>
 80048f4:	2f00      	cmp	r7, #0
 80048f6:	f000 80d4 	beq.w	8004aa2 <_printf_i+0x1ca>
 80048fa:	2f58      	cmp	r7, #88	; 0x58
 80048fc:	f000 80c0 	beq.w	8004a80 <_printf_i+0x1a8>
 8004900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004908:	e03a      	b.n	8004980 <_printf_i+0xa8>
 800490a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800490e:	2b15      	cmp	r3, #21
 8004910:	d8f6      	bhi.n	8004900 <_printf_i+0x28>
 8004912:	a101      	add	r1, pc, #4	; (adr r1, 8004918 <_printf_i+0x40>)
 8004914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004918:	08004971 	.word	0x08004971
 800491c:	08004985 	.word	0x08004985
 8004920:	08004901 	.word	0x08004901
 8004924:	08004901 	.word	0x08004901
 8004928:	08004901 	.word	0x08004901
 800492c:	08004901 	.word	0x08004901
 8004930:	08004985 	.word	0x08004985
 8004934:	08004901 	.word	0x08004901
 8004938:	08004901 	.word	0x08004901
 800493c:	08004901 	.word	0x08004901
 8004940:	08004901 	.word	0x08004901
 8004944:	08004a89 	.word	0x08004a89
 8004948:	080049b1 	.word	0x080049b1
 800494c:	08004a43 	.word	0x08004a43
 8004950:	08004901 	.word	0x08004901
 8004954:	08004901 	.word	0x08004901
 8004958:	08004aab 	.word	0x08004aab
 800495c:	08004901 	.word	0x08004901
 8004960:	080049b1 	.word	0x080049b1
 8004964:	08004901 	.word	0x08004901
 8004968:	08004901 	.word	0x08004901
 800496c:	08004a4b 	.word	0x08004a4b
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	602a      	str	r2, [r5, #0]
 8004978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800497c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004980:	2301      	movs	r3, #1
 8004982:	e09f      	b.n	8004ac4 <_printf_i+0x1ec>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	0607      	lsls	r7, r0, #24
 800498a:	f103 0104 	add.w	r1, r3, #4
 800498e:	6029      	str	r1, [r5, #0]
 8004990:	d501      	bpl.n	8004996 <_printf_i+0xbe>
 8004992:	681e      	ldr	r6, [r3, #0]
 8004994:	e003      	b.n	800499e <_printf_i+0xc6>
 8004996:	0646      	lsls	r6, r0, #25
 8004998:	d5fb      	bpl.n	8004992 <_printf_i+0xba>
 800499a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800499e:	2e00      	cmp	r6, #0
 80049a0:	da03      	bge.n	80049aa <_printf_i+0xd2>
 80049a2:	232d      	movs	r3, #45	; 0x2d
 80049a4:	4276      	negs	r6, r6
 80049a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049aa:	485a      	ldr	r0, [pc, #360]	; (8004b14 <_printf_i+0x23c>)
 80049ac:	230a      	movs	r3, #10
 80049ae:	e012      	b.n	80049d6 <_printf_i+0xfe>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	6820      	ldr	r0, [r4, #0]
 80049b4:	1d19      	adds	r1, r3, #4
 80049b6:	6029      	str	r1, [r5, #0]
 80049b8:	0605      	lsls	r5, r0, #24
 80049ba:	d501      	bpl.n	80049c0 <_printf_i+0xe8>
 80049bc:	681e      	ldr	r6, [r3, #0]
 80049be:	e002      	b.n	80049c6 <_printf_i+0xee>
 80049c0:	0641      	lsls	r1, r0, #25
 80049c2:	d5fb      	bpl.n	80049bc <_printf_i+0xe4>
 80049c4:	881e      	ldrh	r6, [r3, #0]
 80049c6:	4853      	ldr	r0, [pc, #332]	; (8004b14 <_printf_i+0x23c>)
 80049c8:	2f6f      	cmp	r7, #111	; 0x6f
 80049ca:	bf0c      	ite	eq
 80049cc:	2308      	moveq	r3, #8
 80049ce:	230a      	movne	r3, #10
 80049d0:	2100      	movs	r1, #0
 80049d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049d6:	6865      	ldr	r5, [r4, #4]
 80049d8:	60a5      	str	r5, [r4, #8]
 80049da:	2d00      	cmp	r5, #0
 80049dc:	bfa2      	ittt	ge
 80049de:	6821      	ldrge	r1, [r4, #0]
 80049e0:	f021 0104 	bicge.w	r1, r1, #4
 80049e4:	6021      	strge	r1, [r4, #0]
 80049e6:	b90e      	cbnz	r6, 80049ec <_printf_i+0x114>
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	d04b      	beq.n	8004a84 <_printf_i+0x1ac>
 80049ec:	4615      	mov	r5, r2
 80049ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80049f2:	fb03 6711 	mls	r7, r3, r1, r6
 80049f6:	5dc7      	ldrb	r7, [r0, r7]
 80049f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049fc:	4637      	mov	r7, r6
 80049fe:	42bb      	cmp	r3, r7
 8004a00:	460e      	mov	r6, r1
 8004a02:	d9f4      	bls.n	80049ee <_printf_i+0x116>
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d10b      	bne.n	8004a20 <_printf_i+0x148>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	07de      	lsls	r6, r3, #31
 8004a0c:	d508      	bpl.n	8004a20 <_printf_i+0x148>
 8004a0e:	6923      	ldr	r3, [r4, #16]
 8004a10:	6861      	ldr	r1, [r4, #4]
 8004a12:	4299      	cmp	r1, r3
 8004a14:	bfde      	ittt	le
 8004a16:	2330      	movle	r3, #48	; 0x30
 8004a18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a20:	1b52      	subs	r2, r2, r5
 8004a22:	6122      	str	r2, [r4, #16]
 8004a24:	f8cd a000 	str.w	sl, [sp]
 8004a28:	464b      	mov	r3, r9
 8004a2a:	aa03      	add	r2, sp, #12
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4640      	mov	r0, r8
 8004a30:	f7ff fee4 	bl	80047fc <_printf_common>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d14a      	bne.n	8004ace <_printf_i+0x1f6>
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	b004      	add	sp, #16
 8004a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f043 0320 	orr.w	r3, r3, #32
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	4833      	ldr	r0, [pc, #204]	; (8004b18 <_printf_i+0x240>)
 8004a4c:	2778      	movs	r7, #120	; 0x78
 8004a4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	6829      	ldr	r1, [r5, #0]
 8004a56:	061f      	lsls	r7, r3, #24
 8004a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a5c:	d402      	bmi.n	8004a64 <_printf_i+0x18c>
 8004a5e:	065f      	lsls	r7, r3, #25
 8004a60:	bf48      	it	mi
 8004a62:	b2b6      	uxthmi	r6, r6
 8004a64:	07df      	lsls	r7, r3, #31
 8004a66:	bf48      	it	mi
 8004a68:	f043 0320 	orrmi.w	r3, r3, #32
 8004a6c:	6029      	str	r1, [r5, #0]
 8004a6e:	bf48      	it	mi
 8004a70:	6023      	strmi	r3, [r4, #0]
 8004a72:	b91e      	cbnz	r6, 8004a7c <_printf_i+0x1a4>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	f023 0320 	bic.w	r3, r3, #32
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	e7a7      	b.n	80049d0 <_printf_i+0xf8>
 8004a80:	4824      	ldr	r0, [pc, #144]	; (8004b14 <_printf_i+0x23c>)
 8004a82:	e7e4      	b.n	8004a4e <_printf_i+0x176>
 8004a84:	4615      	mov	r5, r2
 8004a86:	e7bd      	b.n	8004a04 <_printf_i+0x12c>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	6826      	ldr	r6, [r4, #0]
 8004a8c:	6961      	ldr	r1, [r4, #20]
 8004a8e:	1d18      	adds	r0, r3, #4
 8004a90:	6028      	str	r0, [r5, #0]
 8004a92:	0635      	lsls	r5, r6, #24
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	d501      	bpl.n	8004a9c <_printf_i+0x1c4>
 8004a98:	6019      	str	r1, [r3, #0]
 8004a9a:	e002      	b.n	8004aa2 <_printf_i+0x1ca>
 8004a9c:	0670      	lsls	r0, r6, #25
 8004a9e:	d5fb      	bpl.n	8004a98 <_printf_i+0x1c0>
 8004aa0:	8019      	strh	r1, [r3, #0]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	4615      	mov	r5, r2
 8004aa8:	e7bc      	b.n	8004a24 <_printf_i+0x14c>
 8004aaa:	682b      	ldr	r3, [r5, #0]
 8004aac:	1d1a      	adds	r2, r3, #4
 8004aae:	602a      	str	r2, [r5, #0]
 8004ab0:	681d      	ldr	r5, [r3, #0]
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7fb fbaa 	bl	8000210 <memchr>
 8004abc:	b108      	cbz	r0, 8004ac2 <_printf_i+0x1ea>
 8004abe:	1b40      	subs	r0, r0, r5
 8004ac0:	6060      	str	r0, [r4, #4]
 8004ac2:	6863      	ldr	r3, [r4, #4]
 8004ac4:	6123      	str	r3, [r4, #16]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004acc:	e7aa      	b.n	8004a24 <_printf_i+0x14c>
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	462a      	mov	r2, r5
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	47d0      	blx	sl
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d0ad      	beq.n	8004a38 <_printf_i+0x160>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	079b      	lsls	r3, r3, #30
 8004ae0:	d413      	bmi.n	8004b0a <_printf_i+0x232>
 8004ae2:	68e0      	ldr	r0, [r4, #12]
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	4298      	cmp	r0, r3
 8004ae8:	bfb8      	it	lt
 8004aea:	4618      	movlt	r0, r3
 8004aec:	e7a6      	b.n	8004a3c <_printf_i+0x164>
 8004aee:	2301      	movs	r3, #1
 8004af0:	4632      	mov	r2, r6
 8004af2:	4649      	mov	r1, r9
 8004af4:	4640      	mov	r0, r8
 8004af6:	47d0      	blx	sl
 8004af8:	3001      	adds	r0, #1
 8004afa:	d09d      	beq.n	8004a38 <_printf_i+0x160>
 8004afc:	3501      	adds	r5, #1
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	9903      	ldr	r1, [sp, #12]
 8004b02:	1a5b      	subs	r3, r3, r1
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	dcf2      	bgt.n	8004aee <_printf_i+0x216>
 8004b08:	e7eb      	b.n	8004ae2 <_printf_i+0x20a>
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	f104 0619 	add.w	r6, r4, #25
 8004b10:	e7f5      	b.n	8004afe <_printf_i+0x226>
 8004b12:	bf00      	nop
 8004b14:	08004c61 	.word	0x08004c61
 8004b18:	08004c72 	.word	0x08004c72

08004b1c <memmove>:
 8004b1c:	4288      	cmp	r0, r1
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	eb01 0402 	add.w	r4, r1, r2
 8004b24:	d902      	bls.n	8004b2c <memmove+0x10>
 8004b26:	4284      	cmp	r4, r0
 8004b28:	4623      	mov	r3, r4
 8004b2a:	d807      	bhi.n	8004b3c <memmove+0x20>
 8004b2c:	1e43      	subs	r3, r0, #1
 8004b2e:	42a1      	cmp	r1, r4
 8004b30:	d008      	beq.n	8004b44 <memmove+0x28>
 8004b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b3a:	e7f8      	b.n	8004b2e <memmove+0x12>
 8004b3c:	4402      	add	r2, r0
 8004b3e:	4601      	mov	r1, r0
 8004b40:	428a      	cmp	r2, r1
 8004b42:	d100      	bne.n	8004b46 <memmove+0x2a>
 8004b44:	bd10      	pop	{r4, pc}
 8004b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b4e:	e7f7      	b.n	8004b40 <memmove+0x24>

08004b50 <_sbrk_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4d06      	ldr	r5, [pc, #24]	; (8004b6c <_sbrk_r+0x1c>)
 8004b54:	2300      	movs	r3, #0
 8004b56:	4604      	mov	r4, r0
 8004b58:	4608      	mov	r0, r1
 8004b5a:	602b      	str	r3, [r5, #0]
 8004b5c:	f7fc f904 	bl	8000d68 <_sbrk>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	d102      	bne.n	8004b6a <_sbrk_r+0x1a>
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	b103      	cbz	r3, 8004b6a <_sbrk_r+0x1a>
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	bd38      	pop	{r3, r4, r5, pc}
 8004b6c:	20000304 	.word	0x20000304

08004b70 <memcpy>:
 8004b70:	440a      	add	r2, r1
 8004b72:	4291      	cmp	r1, r2
 8004b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b78:	d100      	bne.n	8004b7c <memcpy+0xc>
 8004b7a:	4770      	bx	lr
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b86:	4291      	cmp	r1, r2
 8004b88:	d1f9      	bne.n	8004b7e <memcpy+0xe>
 8004b8a:	bd10      	pop	{r4, pc}

08004b8c <_realloc_r>:
 8004b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b90:	4680      	mov	r8, r0
 8004b92:	4614      	mov	r4, r2
 8004b94:	460e      	mov	r6, r1
 8004b96:	b921      	cbnz	r1, 8004ba2 <_realloc_r+0x16>
 8004b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	f7ff bc49 	b.w	8004434 <_malloc_r>
 8004ba2:	b92a      	cbnz	r2, 8004bb0 <_realloc_r+0x24>
 8004ba4:	f7ff fbda 	bl	800435c <_free_r>
 8004ba8:	4625      	mov	r5, r4
 8004baa:	4628      	mov	r0, r5
 8004bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb0:	f000 f81b 	bl	8004bea <_malloc_usable_size_r>
 8004bb4:	4284      	cmp	r4, r0
 8004bb6:	4607      	mov	r7, r0
 8004bb8:	d802      	bhi.n	8004bc0 <_realloc_r+0x34>
 8004bba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bbe:	d812      	bhi.n	8004be6 <_realloc_r+0x5a>
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	f7ff fc36 	bl	8004434 <_malloc_r>
 8004bc8:	4605      	mov	r5, r0
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d0ed      	beq.n	8004baa <_realloc_r+0x1e>
 8004bce:	42bc      	cmp	r4, r7
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	bf28      	it	cs
 8004bd6:	463a      	movcs	r2, r7
 8004bd8:	f7ff ffca 	bl	8004b70 <memcpy>
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4640      	mov	r0, r8
 8004be0:	f7ff fbbc 	bl	800435c <_free_r>
 8004be4:	e7e1      	b.n	8004baa <_realloc_r+0x1e>
 8004be6:	4635      	mov	r5, r6
 8004be8:	e7df      	b.n	8004baa <_realloc_r+0x1e>

08004bea <_malloc_usable_size_r>:
 8004bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bee:	1f18      	subs	r0, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bfbc      	itt	lt
 8004bf4:	580b      	ldrlt	r3, [r1, r0]
 8004bf6:	18c0      	addlt	r0, r0, r3
 8004bf8:	4770      	bx	lr
	...

08004bfc <_init>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr

08004c08 <_fini>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr
