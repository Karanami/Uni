
6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000511c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800536c  0800536c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000080  080053f4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080053f4  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013035  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f5d  00000000  00000000  00033128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00036088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c53  00000000  00000000  000370a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028242  00000000  00000000  00037cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d9e  00000000  00000000  0005ff35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f683c  00000000  00000000  00076cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045cc  00000000  00000000  0016d510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00171adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052d4 	.word	0x080052d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080052d4 	.word	0x080052d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <DIO_Write>:
 * @param[in] hdio  : Digital I/O handler
 * @param[in] state : Digital output state (0 or 1)
 * @retval None
 */
void DIO_Write(DIO_Handle_TypeDef* hdio, _Bool state)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
  hdio->State = state;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	719a      	strb	r2, [r3, #6]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, hdio->State);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	8899      	ldrh	r1, [r3, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	799b      	ldrb	r3, [r3, #6]
 80005da:	461a      	mov	r2, r3
 80005dc:	f002 f850 	bl	8002680 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <gpioWrite>:
  * @param[in] hled   : LED DIO handler
  * @param[in] state  : LED state (LED_OFF or LED_ON)
  * @retval None
  */
void gpioWrite(LED_DIO_Handle_TypeDef* hled, LED_DIO_State_TypeDef state)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
  DIO_Write(&(hled->Output), (hled->ActiveState == LED_ON_HIGH) ? state : !state);
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7a1b      	ldrb	r3, [r3, #8]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d106      	bne.n	800060c <gpioWrite+0x24>
 80005fe:	78fb      	ldrb	r3, [r7, #3]
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2db      	uxtb	r3, r3
 800060a:	e005      	b.n	8000618 <gpioWrite+0x30>
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf0c      	ite	eq
 8000612:	2301      	moveq	r3, #1
 8000614:	2300      	movne	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f7ff ffce 	bl	80005bc <DIO_Write>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_ADC1_Init+0xb4>)
 800063c:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <MX_ADC1_Init+0xb8>)
 800063e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_ADC1_Init+0xb4>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_ADC1_Init+0xb4>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_ADC1_Init+0xb4>)
 800064e:	2201      	movs	r2, #1
 8000650:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_ADC1_Init+0xb4>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_ADC1_Init+0xb4>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_ADC1_Init+0xb4>)
 8000662:	2200      	movs	r2, #0
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_ADC1_Init+0xb4>)
 8000668:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <MX_ADC1_Init+0xbc>)
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_ADC1_Init+0xb4>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_ADC1_Init+0xb4>)
 8000674:	2202      	movs	r2, #2
 8000676:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_ADC1_Init+0xb4>)
 800067a:	2201      	movs	r2, #1
 800067c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_ADC1_Init+0xb4>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <MX_ADC1_Init+0xb4>)
 8000688:	f000 fda0 	bl	80011cc <HAL_ADC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 fb71 	bl	8000d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000696:	2303      	movs	r3, #3
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2301      	movs	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800069e:	2307      	movs	r3, #7
 80006a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_ADC1_Init+0xb4>)
 80006a8:	f000 fee2 	bl	8001470 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006b2:	f000 fb61 	bl	8000d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006b6:	230a      	movs	r3, #10
 80006b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_ADC1_Init+0xb4>)
 80006c4:	f000 fed4 	bl	8001470 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006ce:	f000 fb53 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000009c 	.word	0x2000009c
 80006e0:	40012000 	.word	0x40012000
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a39      	ldr	r2, [pc, #228]	; (80007ec <HAL_ADC_MspInit+0x104>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d16b      	bne.n	80007e2 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a2c      	ldr	r2, [pc, #176]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = POT2_Pin;
 8000752:	2301      	movs	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000756:	2303      	movs	r3, #3
 8000758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT2_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	4823      	ldr	r0, [pc, #140]	; (80007f4 <HAL_ADC_MspInit+0x10c>)
 8000766:	f001 fddf 	bl	8002328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin;
 800076a:	2308      	movs	r3, #8
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076e:	2303      	movs	r3, #3
 8000770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	481e      	ldr	r0, [pc, #120]	; (80007f8 <HAL_ADC_MspInit+0x110>)
 800077e:	f001 fdd3 	bl	8002328 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <HAL_ADC_MspInit+0x114>)
 8000784:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <HAL_ADC_MspInit+0x118>)
 8000786:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_ADC_MspInit+0x114>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <HAL_ADC_MspInit+0x114>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <HAL_ADC_MspInit+0x114>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_ADC_MspInit+0x114>)
 800079c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <HAL_ADC_MspInit+0x114>)
 80007a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_ADC_MspInit+0x114>)
 80007ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_ADC_MspInit+0x114>)
 80007b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_ADC_MspInit+0x114>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_ADC_MspInit+0x114>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <HAL_ADC_MspInit+0x114>)
 80007c8:	f001 fa36 	bl	8001c38 <HAL_DMA_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80007d2:	f000 fad1 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_ADC_MspInit+0x114>)
 80007da:	639a      	str	r2, [r3, #56]	; 0x38
 80007dc:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_ADC_MspInit+0x114>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40012000 	.word	0x40012000
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	200000e4 	.word	0x200000e4
 8000800:	40026410 	.word	0x40026410

08000804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_DMA_Init+0x38>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <MX_DMA_Init+0x38>)
 8000810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_DMA_Init+0x38>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2038      	movs	r0, #56	; 0x38
 8000828:	f001 f9cf 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800082c:	2038      	movs	r0, #56	; 0x38
 800082e:	f001 f9e8 	bl	8001c02 <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b7b      	ldr	r3, [pc, #492]	; (8000a44 <MX_GPIO_Init+0x204>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a7a      	ldr	r2, [pc, #488]	; (8000a44 <MX_GPIO_Init+0x204>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b78      	ldr	r3, [pc, #480]	; (8000a44 <MX_GPIO_Init+0x204>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b75      	ldr	r3, [pc, #468]	; (8000a44 <MX_GPIO_Init+0x204>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a74      	ldr	r2, [pc, #464]	; (8000a44 <MX_GPIO_Init+0x204>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b72      	ldr	r3, [pc, #456]	; (8000a44 <MX_GPIO_Init+0x204>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b6f      	ldr	r3, [pc, #444]	; (8000a44 <MX_GPIO_Init+0x204>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a6e      	ldr	r2, [pc, #440]	; (8000a44 <MX_GPIO_Init+0x204>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b6c      	ldr	r3, [pc, #432]	; (8000a44 <MX_GPIO_Init+0x204>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b69      	ldr	r3, [pc, #420]	; (8000a44 <MX_GPIO_Init+0x204>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a68      	ldr	r2, [pc, #416]	; (8000a44 <MX_GPIO_Init+0x204>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b66      	ldr	r3, [pc, #408]	; (8000a44 <MX_GPIO_Init+0x204>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	4b63      	ldr	r3, [pc, #396]	; (8000a44 <MX_GPIO_Init+0x204>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a62      	ldr	r2, [pc, #392]	; (8000a44 <MX_GPIO_Init+0x204>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b60      	ldr	r3, [pc, #384]	; (8000a44 <MX_GPIO_Init+0x204>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ce:	4b5d      	ldr	r3, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x204>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a5c      	ldr	r2, [pc, #368]	; (8000a44 <MX_GPIO_Init+0x204>)
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <MX_GPIO_Init+0x204>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008ec:	4856      	ldr	r0, [pc, #344]	; (8000a48 <MX_GPIO_Init+0x208>)
 80008ee:	f001 fec7 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	4855      	ldr	r0, [pc, #340]	; (8000a4c <MX_GPIO_Init+0x20c>)
 80008f8:	f001 fec2 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	484f      	ldr	r0, [pc, #316]	; (8000a50 <MX_GPIO_Init+0x210>)
 8000914:	f001 fd08 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000918:	2332      	movs	r3, #50	; 0x32
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000928:	230b      	movs	r3, #11
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4847      	ldr	r0, [pc, #284]	; (8000a50 <MX_GPIO_Init+0x210>)
 8000934:	f001 fcf8 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000938:	2386      	movs	r3, #134	; 0x86
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000948:	230b      	movs	r3, #11
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4840      	ldr	r0, [pc, #256]	; (8000a54 <MX_GPIO_Init+0x214>)
 8000954:	f001 fce8 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000958:	f244 0381 	movw	r3, #16513	; 0x4081
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4835      	ldr	r0, [pc, #212]	; (8000a48 <MX_GPIO_Init+0x208>)
 8000972:	f001 fcd9 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000988:	230b      	movs	r3, #11
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	482d      	ldr	r0, [pc, #180]	; (8000a48 <MX_GPIO_Init+0x208>)
 8000994:	f001 fcc8 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4827      	ldr	r0, [pc, #156]	; (8000a4c <MX_GPIO_Init+0x20c>)
 80009b0:	f001 fcba 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4821      	ldr	r0, [pc, #132]	; (8000a4c <MX_GPIO_Init+0x20c>)
 80009c8:	f001 fcae 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009cc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009de:	230a      	movs	r3, #10
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	481a      	ldr	r0, [pc, #104]	; (8000a54 <MX_GPIO_Init+0x214>)
 80009ea:	f001 fc9d 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <MX_GPIO_Init+0x214>)
 8000a04:	f001 fc90 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1a:	230b      	movs	r3, #11
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <MX_GPIO_Init+0x20c>)
 8000a26:	f001 fc7f 	bl	8002328 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	2028      	movs	r0, #40	; 0x28
 8000a30:	f001 f8cb 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a34:	2028      	movs	r0, #40	; 0x28
 8000a36:	f001 f8e4 	bl	8001c02 <HAL_NVIC_EnableIRQ>

}
 8000a3a:	bf00      	nop
 8000a3c:	3730      	adds	r7, #48	; 0x30
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if(hadc == &hadc1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a4e      	ldr	r2, [pc, #312]	; (8000b9c <HAL_ADC_ConvCpltCallback+0x144>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	f040 8095 	bne.w	8000b94 <HAL_ADC_ConvCpltCallback+0x13c>
  {
    pot1 = rawToVoltage(adc_raw[0]);
 8000a6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <HAL_ADC_ConvCpltCallback+0x148>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	ee07 3a90 	vmov	s15, r3
 8000a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a76:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000ba4 <HAL_ADC_ConvCpltCallback+0x14c>
 8000a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a7e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000ba8 <HAL_ADC_ConvCpltCallback+0x150>
 8000a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a86:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000bac <HAL_ADC_ConvCpltCallback+0x154>
 8000a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a8e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000bb0 <HAL_ADC_ConvCpltCallback+0x158>
 8000a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a96:	4b47      	ldr	r3, [pc, #284]	; (8000bb4 <HAL_ADC_ConvCpltCallback+0x15c>)
 8000a98:	edc3 7a00 	vstr	s15, [r3]
    pot2 = rawToVoltage(adc_raw[1]);
 8000a9c:	4b40      	ldr	r3, [pc, #256]	; (8000ba0 <HAL_ADC_ConvCpltCallback+0x148>)
 8000a9e:	885b      	ldrh	r3, [r3, #2]
 8000aa0:	ee07 3a90 	vmov	s15, r3
 8000aa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aa8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8000ba4 <HAL_ADC_ConvCpltCallback+0x14c>
 8000aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ab0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000ba8 <HAL_ADC_ConvCpltCallback+0x150>
 8000ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000bac <HAL_ADC_ConvCpltCallback+0x154>
 8000abc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ac0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000bb0 <HAL_ADC_ConvCpltCallback+0x158>
 8000ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac8:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000aca:	edc3 7a00 	vstr	s15, [r3]

    ledg = pot2 > 1000.0f;
 8000ace:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000ad0:	edd3 7a00 	vldr	s15, [r3]
 8000ad4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000bb0 <HAL_ADC_ConvCpltCallback+0x158>
 8000ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae0:	bfcc      	ite	gt
 8000ae2:	2301      	movgt	r3, #1
 8000ae4:	2300      	movle	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <HAL_ADC_ConvCpltCallback+0x164>)
 8000aec:	701a      	strb	r2, [r3, #0]
    ledb = pot2 > 2000.0f;
 8000aee:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000af0:	edd3 7a00 	vldr	s15, [r3]
 8000af4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000bc0 <HAL_ADC_ConvCpltCallback+0x168>
 8000af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b00:	bfcc      	ite	gt
 8000b02:	2301      	movgt	r3, #1
 8000b04:	2300      	movle	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000b0c:	701a      	strb	r2, [r3, #0]
    ledr = pot2 > 3000.0f;
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000b10:	edd3 7a00 	vldr	s15, [r3]
 8000b14:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000bc8 <HAL_ADC_ConvCpltCallback+0x170>
 8000b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b20:	bfcc      	ite	gt
 8000b22:	2301      	movgt	r3, #1
 8000b24:	2300      	movle	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <HAL_ADC_ConvCpltCallback+0x174>)
 8000b2c:	701a      	strb	r2, [r3, #0]
    gpioWrite(&led_green, pot2 > 1000.0f);
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000b30:	edd3 7a00 	vldr	s15, [r3]
 8000b34:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000bb0 <HAL_ADC_ConvCpltCallback+0x158>
 8000b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b40:	bfcc      	ite	gt
 8000b42:	2301      	movgt	r3, #1
 8000b44:	2300      	movle	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <HAL_ADC_ConvCpltCallback+0x178>)
 8000b4c:	f7ff fd4c 	bl	80005e8 <gpioWrite>
    gpioWrite(&led_blue, pot2 > 2000.0f);
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000b52:	edd3 7a00 	vldr	s15, [r3]
 8000b56:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000bc0 <HAL_ADC_ConvCpltCallback+0x168>
 8000b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b62:	bfcc      	ite	gt
 8000b64:	2301      	movgt	r3, #1
 8000b66:	2300      	movle	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4819      	ldr	r0, [pc, #100]	; (8000bd4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8000b6e:	f7ff fd3b 	bl	80005e8 <gpioWrite>
    gpioWrite(&led_red, pot2 > 3000.0f);
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000bc8 <HAL_ADC_ConvCpltCallback+0x170>
 8000b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b84:	bfcc      	ite	gt
 8000b86:	2301      	movgt	r3, #1
 8000b88:	2300      	movle	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4812      	ldr	r0, [pc, #72]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0x180>)
 8000b90:	f7ff fd2a 	bl	80005e8 <gpioWrite>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000009c 	.word	0x2000009c
 8000ba0:	20000150 	.word	0x20000150
 8000ba4:	457ff000 	.word	0x457ff000
 8000ba8:	40533333 	.word	0x40533333
 8000bac:	00000000 	.word	0x00000000
 8000bb0:	447a0000 	.word	0x447a0000
 8000bb4:	20000144 	.word	0x20000144
 8000bb8:	20000148 	.word	0x20000148
 8000bbc:	2000014d 	.word	0x2000014d
 8000bc0:	44fa0000 	.word	0x44fa0000
 8000bc4:	2000014e 	.word	0x2000014e
 8000bc8:	453b8000 	.word	0x453b8000
 8000bcc:	2000014c 	.word	0x2000014c
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000018 	.word	0x20000018

08000bdc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim == &htim6)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d104      	bne.n	8000bf6 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_raw, 2);
 8000bec:	2202      	movs	r2, #2
 8000bee:	4905      	ldr	r1, [pc, #20]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bf2:	f000 fb2f 	bl	8001254 <HAL_ADC_Start_DMA>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000158 	.word	0x20000158
 8000c04:	20000150 	.word	0x20000150
 8000c08:	2000009c 	.word	0x2000009c

08000c0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b092      	sub	sp, #72	; 0x48
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
  char tx_buffer[64] = { 0, };
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	223c      	movs	r2, #60	; 0x3c
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fed2 	bl	80049cc <memset>
  sprintf(tx_buffer, "{ \"channel\" : 3, \"voltage\" : %d }\r", (int)pot1);
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c2a:	edd3 7a00 	vldr	s15, [r3]
 8000c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	ee17 2a90 	vmov	r2, s15
 8000c3a:	490b      	ldr	r1, [pc, #44]	; (8000c68 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fea5 	bl	800498c <siprintf>
  HAL_UART_Transmit(&huart3, tx_buffer, strlen(tx_buffer), 100);
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fae2 	bl	8000210 <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	f107 0108 	add.w	r1, r7, #8
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x60>)
 8000c58:	f003 fa10 	bl	800407c <HAL_UART_Transmit>
}
 8000c5c:	bf00      	nop
 8000c5e:	3748      	adds	r7, #72	; 0x48
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000144 	.word	0x20000144
 8000c68:	080052ec 	.word	0x080052ec
 8000c6c:	200001a4 	.word	0x200001a4

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c74:	f000 fa4d 	bl	8001112 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c78:	f000 f810 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7c:	f7ff fde0 	bl	8000840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c80:	f7ff fdc0 	bl	8000804 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c84:	f7ff fcd0 	bl	8000628 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000c88:	f000 f98a 	bl	8000fa0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000c8c:	f000 f92c 	bl	8000ee8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000c90:	4801      	ldr	r0, [pc, #4]	; (8000c98 <main+0x28>)
 8000c92:	f002 fe99 	bl	80039c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <main+0x26>
 8000c98:	20000158 	.word	0x20000158

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	; 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2230      	movs	r2, #48	; 0x30
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 fe8e 	bl	80049cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cc0:	f001 fd10 	bl	80026e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <SystemClock_Config+0xd4>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a29      	ldr	r2, [pc, #164]	; (8000d70 <SystemClock_Config+0xd4>)
 8000cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <SystemClock_Config+0xd4>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <SystemClock_Config+0xd8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a24      	ldr	r2, [pc, #144]	; (8000d74 <SystemClock_Config+0xd8>)
 8000ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <SystemClock_Config+0xd8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d0c:	23d8      	movs	r3, #216	; 0xd8
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d14:	2303      	movs	r3, #3
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 fd41 	bl	80027a4 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d28:	f000 f826 	bl	8000d78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d2c:	f001 fcea 	bl	8002704 <HAL_PWREx_EnableOverDrive>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d36:	f000 f81f 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000d4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	2107      	movs	r1, #7
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 ffc7 	bl	8002cec <HAL_RCC_ClockConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d64:	f000 f808 	bl	8000d78 <Error_Handler>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3750      	adds	r7, #80	; 0x50
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40007000 	.word	0x40007000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x44>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f9b8 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e28:	f001 fc44 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM6_DAC_IRQHandler+0x10>)
 8000e36:	f002 fe3f 	bl	8003ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000158 	.word	0x20000158

08000e44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DMA2_Stream0_IRQHandler+0x10>)
 8000e4a:	f001 f803 	bl	8001e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200000e4 	.word	0x200000e4

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f003 fda8 	bl	80049dc <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20050000 	.word	0x20050000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	20000154 	.word	0x20000154
 8000ec0:	20000378 	.word	0x20000378

08000ec4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_TIM6_Init+0x64>)
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <MX_TIM6_Init+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_TIM6_Init+0x64>)
 8000f00:	226b      	movs	r2, #107	; 0x6b
 8000f02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_TIM6_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_TIM6_Init+0x64>)
 8000f0c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_TIM6_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MX_TIM6_Init+0x64>)
 8000f1a:	f002 fcfd 	bl	8003918 <HAL_TIM_Base_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f24:	f7ff ff28 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_TIM6_Init+0x64>)
 8000f36:	f002 ffa7 	bl	8003e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f40:	f7ff ff1a 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000158 	.word	0x20000158
 8000f50:	40001000 	.word	0x40001000

08000f54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_TIM_Base_MspInit+0x44>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d113      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_TIM_Base_MspInit+0x48>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_TIM_Base_MspInit+0x48>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_TIM_Base_MspInit+0x48>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2101      	movs	r1, #1
 8000f82:	2036      	movs	r0, #54	; 0x36
 8000f84:	f000 fe21 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f88:	2036      	movs	r0, #54	; 0x36
 8000f8a:	f000 fe3a 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40001000 	.word	0x40001000
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <MX_USART3_UART_Init+0x5c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fe4:	f002 fffc 	bl	8003fe0 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fee:	f7ff fec3 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001a4 	.word	0x200001a4
 8000ffc:	40004800 	.word	0x40004800

08001000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0aa      	sub	sp, #168	; 0xa8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	2284      	movs	r2, #132	; 0x84
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fcd3 	bl	80049cc <memset>
  if(uartHandle->Instance==USART3)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_UART_MspInit+0xb4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d13c      	bne.n	80010aa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001034:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001036:	2300      	movs	r3, #0
 8001038:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4618      	mov	r0, r3
 8001040:	f002 f87a 	bl	8003138 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800104a:	f7ff fe95 	bl	8000d78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_UART_MspInit+0xb8>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_UART_MspInit+0xb8>)
 8001054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_UART_MspInit+0xb8>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_UART_MspInit+0xb8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <HAL_UART_MspInit+0xb8>)
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_UART_MspInit+0xb8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800107e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108c:	2301      	movs	r3, #1
 800108e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001098:	2307      	movs	r3, #7
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <HAL_UART_MspInit+0xbc>)
 80010a6:	f001 f93f 	bl	8002328 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	37a8      	adds	r7, #168	; 0xa8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40004800 	.word	0x40004800
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020c00 	.word	0x40020c00

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010c6:	490e      	ldr	r1, [pc, #56]	; (8001100 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c8:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010dc:	4c0b      	ldr	r4, [pc, #44]	; (800110c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ea:	f7ff feeb 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f003 fc7b 	bl	80049e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff fdbd 	bl	8000c70 <main>
  bx  lr    
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001104:	08005374 	.word	0x08005374
  ldr r2, =_sbss
 8001108:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800110c:	20000378 	.word	0x20000378

08001110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC_IRQHandler>

08001112 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
 8001118:	f000 fd4c 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f805 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001122:	f7ff fe2f 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fd67 	bl	8001c1e <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 fd2f 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000024 	.word	0x20000024
 8001184:	2000002c 	.word	0x2000002c
 8001188:	20000028 	.word	0x20000028

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000002c 	.word	0x2000002c
 80011b0:	2000022c 	.word	0x2000022c

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	2000022c 	.word	0x2000022c

080011cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e031      	b.n	8001246 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fa7c 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d116      	bne.n	8001238 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_ADC_Init+0x84>)
 8001210:	4013      	ands	r3, r2
 8001212:	f043 0202 	orr.w	r2, r3, #2
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fa7e 	bl	800171c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f023 0303 	bic.w	r3, r3, #3
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
 8001236:	e001      	b.n	800123c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	ffffeefd 	.word	0xffffeefd

08001254 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Start_DMA+0x1e>
 800126e:	2302      	movs	r3, #2
 8001270:	e0d4      	b.n	800141c <HAL_ADC_Start_DMA+0x1c8>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d018      	beq.n	80012ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001298:	4b62      	ldr	r3, [pc, #392]	; (8001424 <HAL_ADC_Start_DMA+0x1d0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a62      	ldr	r2, [pc, #392]	; (8001428 <HAL_ADC_Start_DMA+0x1d4>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0c9a      	lsrs	r2, r3, #18
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80012ac:	e002      	b.n	80012b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f9      	bne.n	80012ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f040 809c 	bne.w	8001402 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ce:	4b57      	ldr	r3, [pc, #348]	; (800142c <HAL_ADC_Start_DMA+0x1d8>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001304:	d106      	bne.n	8001314 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f023 0206 	bic.w	r2, r3, #6
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	645a      	str	r2, [r3, #68]	; 0x44
 8001312:	e002      	b.n	800131a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	4a42      	ldr	r2, [pc, #264]	; (8001430 <HAL_ADC_Start_DMA+0x1dc>)
 8001328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	4a41      	ldr	r2, [pc, #260]	; (8001434 <HAL_ADC_Start_DMA+0x1e0>)
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001336:	4a40      	ldr	r2, [pc, #256]	; (8001438 <HAL_ADC_Start_DMA+0x1e4>)
 8001338:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001342:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001352:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001362:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	334c      	adds	r3, #76	; 0x4c
 800136e:	4619      	mov	r1, r3
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f000 fd0e 	bl	8001d94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_ADC_Start_DMA+0x1e8>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d143      	bne.n	800141a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	e03a      	b.n	800141a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a25      	ldr	r2, [pc, #148]	; (8001440 <HAL_ADC_Start_DMA+0x1ec>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10e      	bne.n	80013cc <HAL_ADC_Start_DMA+0x178>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d107      	bne.n	80013cc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ca:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_ADC_Start_DMA+0x1e8>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d120      	bne.n	800141a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_ADC_Start_DMA+0x1f0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d11b      	bne.n	800141a <HAL_ADC_Start_DMA+0x1c6>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d114      	bne.n	800141a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	e00b      	b.n	800141a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f043 0210 	orr.w	r2, r3, #16
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000024 	.word	0x20000024
 8001428:	431bde83 	.word	0x431bde83
 800142c:	fffff8fe 	.word	0xfffff8fe
 8001430:	08001911 	.word	0x08001911
 8001434:	080019cb 	.word	0x080019cb
 8001438:	080019e7 	.word	0x080019e7
 800143c:	40012300 	.word	0x40012300
 8001440:	40012000 	.word	0x40012000
 8001444:	40012200 	.word	0x40012200

08001448 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_ADC_ConfigChannel+0x1c>
 8001488:	2302      	movs	r3, #2
 800148a:	e136      	b.n	80016fa <HAL_ADC_ConfigChannel+0x28a>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b09      	cmp	r3, #9
 800149a:	d93a      	bls.n	8001512 <HAL_ADC_ConfigChannel+0xa2>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014a4:	d035      	beq.n	8001512 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68d9      	ldr	r1, [r3, #12]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	3b1e      	subs	r3, #30
 80014bc:	2207      	movs	r2, #7
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a8d      	ldr	r2, [pc, #564]	; (8001708 <HAL_ADC_ConfigChannel+0x298>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d10a      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68d9      	ldr	r1, [r3, #12]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	061a      	lsls	r2, r3, #24
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ea:	e035      	b.n	8001558 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4403      	add	r3, r0
 8001504:	3b1e      	subs	r3, #30
 8001506:	409a      	lsls	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001510:	e022      	b.n	8001558 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6919      	ldr	r1, [r3, #16]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	2207      	movs	r2, #7
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43da      	mvns	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	400a      	ands	r2, r1
 8001534:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6919      	ldr	r1, [r3, #16]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	4603      	mov	r3, r0
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4403      	add	r3, r0
 800154e:	409a      	lsls	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b06      	cmp	r3, #6
 800155e:	d824      	bhi.n	80015aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b05      	subs	r3, #5
 8001572:	221f      	movs	r2, #31
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43da      	mvns	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	400a      	ands	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	3b05      	subs	r3, #5
 800159c:	fa00 f203 	lsl.w	r2, r0, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
 80015a8:	e04c      	b.n	8001644 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d824      	bhi.n	80015fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b23      	subs	r3, #35	; 0x23
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b23      	subs	r3, #35	; 0x23
 80015ee:	fa00 f203 	lsl.w	r2, r0, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
 80015fa:	e023      	b.n	8001644 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b41      	subs	r3, #65	; 0x41
 800160e:	221f      	movs	r2, #31
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43da      	mvns	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	400a      	ands	r2, r1
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	3b41      	subs	r3, #65	; 0x41
 8001638:	fa00 f203 	lsl.w	r2, r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_ADC_ConfigChannel+0x29c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10a      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1f4>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001656:	d105      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a2c      	ldr	r2, [pc, #176]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 800165e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001662:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_ADC_ConfigChannel+0x29c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10f      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b12      	cmp	r3, #18
 8001674:	d10b      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 800167c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001680:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 8001688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800168c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1e      	ldr	r2, [pc, #120]	; (800170c <HAL_ADC_ConfigChannel+0x29c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d12b      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x280>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_ADC_ConfigChannel+0x298>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d003      	beq.n	80016aa <HAL_ADC_ConfigChannel+0x23a>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b11      	cmp	r3, #17
 80016a8:	d122      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a18      	ldr	r2, [pc, #96]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 80016bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <HAL_ADC_ConfigChannel+0x298>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d111      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_ADC_ConfigChannel+0x2a4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_ADC_ConfigChannel+0x2a8>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0c9a      	lsrs	r2, r3, #18
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016e2:	e002      	b.n	80016ea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f9      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	10000012 	.word	0x10000012
 800170c:	40012000 	.word	0x40012000
 8001710:	40012300 	.word	0x40012300
 8001714:	20000024 	.word	0x20000024
 8001718:	431bde83 	.word	0x431bde83

0800171c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001724:	4b78      	ldr	r3, [pc, #480]	; (8001908 <ADC_Init+0x1ec>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a77      	ldr	r2, [pc, #476]	; (8001908 <ADC_Init+0x1ec>)
 800172a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800172e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001730:	4b75      	ldr	r3, [pc, #468]	; (8001908 <ADC_Init+0x1ec>)
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4973      	ldr	r1, [pc, #460]	; (8001908 <ADC_Init+0x1ec>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800174c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	021a      	lsls	r2, r3, #8
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6859      	ldr	r1, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6899      	ldr	r1, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	4a58      	ldr	r2, [pc, #352]	; (800190c <ADC_Init+0x1f0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d022      	beq.n	80017f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6899      	ldr	r1, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6899      	ldr	r1, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	e00f      	b.n	8001816 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001814:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0202 	bic.w	r2, r2, #2
 8001824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6899      	ldr	r1, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01b      	beq.n	800187c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001852:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001862:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6859      	ldr	r1, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	3b01      	subs	r3, #1
 8001870:	035a      	lsls	r2, r3, #13
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	e007      	b.n	800188c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800188a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	051a      	lsls	r2, r3, #20
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ce:	025a      	lsls	r2, r3, #9
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6899      	ldr	r1, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	029a      	lsls	r2, r3, #10
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40012300 	.word	0x40012300
 800190c:	0f000001 	.word	0x0f000001

08001910 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001926:	2b00      	cmp	r3, #0
 8001928:	d13c      	bne.n	80019a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d12b      	bne.n	800199c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001948:	2b00      	cmp	r3, #0
 800194a:	d127      	bne.n	800199c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001964:	2b00      	cmp	r3, #0
 8001966:	d119      	bne.n	800199c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0220 	bic.w	r2, r2, #32
 8001976:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff f85b 	bl	8000a58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019a2:	e00e      	b.n	80019c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff fd53 	bl	800145c <HAL_ADC_ErrorCallback>
}
 80019b6:	e004      	b.n	80019c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fd35 	bl	8001448 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f043 0204 	orr.w	r2, r3, #4
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff fd28 	bl	800145c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <__NVIC_SetPriorityGrouping+0x40>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <__NVIC_SetPriorityGrouping+0x40>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	05fa0000 	.word	0x05fa0000

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	; (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff29 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff3e 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff8e 	bl	8001b08 <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff31 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa2 	bl	8001b70 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff fab6 	bl	80011b4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e099      	b.n	8001d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c74:	e00f      	b.n	8001c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c76:	f7ff fa9d 	bl	80011b4 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d908      	bls.n	8001c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e078      	b.n	8001d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e8      	bne.n	8001c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <HAL_DMA_Init+0x158>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f023 0307 	bic.w	r3, r3, #7
 8001d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d117      	bne.n	8001d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00e      	beq.n	8001d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fa77 	bl	8002230 <DMA_CheckFifoParam>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d56:	2301      	movs	r3, #1
 8001d58:	e016      	b.n	8001d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa2e 	bl	80021c4 <DMA_CalcBaseAndBitshift>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	223f      	movs	r2, #63	; 0x3f
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	f010803f 	.word	0xf010803f

08001d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_DMA_Start_IT+0x26>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e048      	b.n	8001e4c <HAL_DMA_Start_IT+0xb8>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d137      	bne.n	8001e3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f9c0 	bl	8002168 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	223f      	movs	r2, #63	; 0x3f
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0216 	orr.w	r2, r2, #22
 8001e02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e12:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0208 	orr.w	r2, r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e005      	b.n	8001e4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e46:	2302      	movs	r3, #2
 8001e48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e60:	4b8e      	ldr	r3, [pc, #568]	; (800209c <HAL_DMA_IRQHandler+0x248>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a8e      	ldr	r2, [pc, #568]	; (80020a0 <HAL_DMA_IRQHandler+0x24c>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	0a9b      	lsrs	r3, r3, #10
 8001e6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2208      	movs	r2, #8
 8001e80:	409a      	lsls	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d01a      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0204 	bic.w	r2, r2, #4
 8001ea6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	2208      	movs	r2, #8
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d012      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	f043 0202 	orr.w	r2, r3, #2
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2204      	movs	r2, #4
 8001efc:	409a      	lsls	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00b      	beq.n	8001f2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	2204      	movs	r2, #4
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f043 0204 	orr.w	r2, r3, #4
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2210      	movs	r2, #16
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d043      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d03c      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	2210      	movs	r2, #16
 8001f50:	409a      	lsls	r2, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d018      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d108      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d024      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
 8001f82:	e01f      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01b      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
 8001f94:	e016      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d107      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0208 	bic.w	r2, r2, #8
 8001fb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2220      	movs	r2, #32
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 808f 	beq.w	80020f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8087 	beq.w	80020f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2220      	movs	r2, #32
 8001fec:	409a      	lsls	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b05      	cmp	r3, #5
 8001ffc:	d136      	bne.n	800206c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0216 	bic.w	r2, r2, #22
 800200c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800201c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <HAL_DMA_IRQHandler+0x1da>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0208 	bic.w	r2, r2, #8
 800203c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	223f      	movs	r2, #63	; 0x3f
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205e:	2b00      	cmp	r3, #0
 8002060:	d07e      	beq.n	8002160 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
        }
        return;
 800206a:	e079      	b.n	8002160 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01d      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10d      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	2b00      	cmp	r3, #0
 800208e:	d031      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	e02c      	b.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
 800209a:	bf00      	nop
 800209c:	20000024 	.word	0x20000024
 80020a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d023      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
 80020b4:	e01e      	b.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10f      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0210 	bic.w	r2, r2, #16
 80020d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d032      	beq.n	8002162 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d022      	beq.n	800214e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2205      	movs	r2, #5
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	3301      	adds	r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	d307      	bcc.n	800213c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f2      	bne.n	8002120 <HAL_DMA_IRQHandler+0x2cc>
 800213a:	e000      	b.n	800213e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800213c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
 800215e:	e000      	b.n	8002162 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002160:	bf00      	nop
    }
  }
}
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002184:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b40      	cmp	r3, #64	; 0x40
 8002194:	d108      	bne.n	80021a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021a6:	e007      	b.n	80021b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3b10      	subs	r3, #16
 80021d4:	4a13      	ldr	r2, [pc, #76]	; (8002224 <DMA_CalcBaseAndBitshift+0x60>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <DMA_CalcBaseAndBitshift+0x64>)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d908      	bls.n	8002204 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <DMA_CalcBaseAndBitshift+0x68>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	1d1a      	adds	r2, r3, #4
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	659a      	str	r2, [r3, #88]	; 0x58
 8002202:	e006      	b.n	8002212 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <DMA_CalcBaseAndBitshift+0x68>)
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	aaaaaaab 	.word	0xaaaaaaab
 8002228:	08005328 	.word	0x08005328
 800222c:	fffffc00 	.word	0xfffffc00

08002230 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11f      	bne.n	800228a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d856      	bhi.n	80022fe <DMA_CheckFifoParam+0xce>
 8002250:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <DMA_CheckFifoParam+0x28>)
 8002252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002256:	bf00      	nop
 8002258:	08002269 	.word	0x08002269
 800225c:	0800227b 	.word	0x0800227b
 8002260:	08002269 	.word	0x08002269
 8002264:	080022ff 	.word	0x080022ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d046      	beq.n	8002302 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002278:	e043      	b.n	8002302 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002282:	d140      	bne.n	8002306 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002288:	e03d      	b.n	8002306 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002292:	d121      	bne.n	80022d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d837      	bhi.n	800230a <DMA_CheckFifoParam+0xda>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <DMA_CheckFifoParam+0x70>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022b1 	.word	0x080022b1
 80022a4:	080022b7 	.word	0x080022b7
 80022a8:	080022b1 	.word	0x080022b1
 80022ac:	080022c9 	.word	0x080022c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e030      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d025      	beq.n	800230e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c6:	e022      	b.n	800230e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022d0:	d11f      	bne.n	8002312 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022d6:	e01c      	b.n	8002312 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d903      	bls.n	80022e6 <DMA_CheckFifoParam+0xb6>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d003      	beq.n	80022ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022e4:	e018      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ea:	e015      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      break;
 80022fc:	e00b      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      break;
 80022fe:	bf00      	nop
 8002300:	e00a      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 8002302:	bf00      	nop
 8002304:	e008      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 8002306:	bf00      	nop
 8002308:	e006      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 800230a:	bf00      	nop
 800230c:	e004      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 800230e:	bf00      	nop
 8002310:	e002      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;   
 8002312:	bf00      	nop
 8002314:	e000      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 8002316:	bf00      	nop
    }
  } 
  
  return status; 
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop

08002328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e175      	b.n	8002634 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	f040 8164 	bne.w	800262e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d005      	beq.n	800237e <HAL_GPIO_Init+0x56>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d130      	bne.n	80023e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 0201 	and.w	r2, r3, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d017      	beq.n	800241c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d123      	bne.n	8002470 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	08da      	lsrs	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3208      	adds	r2, #8
 8002430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	08da      	lsrs	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3208      	adds	r2, #8
 800246a:	69b9      	ldr	r1, [r7, #24]
 800246c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0203 	and.w	r2, r3, #3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80be 	beq.w	800262e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	4b66      	ldr	r3, [pc, #408]	; (800264c <HAL_GPIO_Init+0x324>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_GPIO_Init+0x324>)
 80024b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024bc:	6453      	str	r3, [r2, #68]	; 0x44
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_GPIO_Init+0x324>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024ca:	4a61      	ldr	r2, [pc, #388]	; (8002650 <HAL_GPIO_Init+0x328>)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	220f      	movs	r2, #15
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a58      	ldr	r2, [pc, #352]	; (8002654 <HAL_GPIO_Init+0x32c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d037      	beq.n	8002566 <HAL_GPIO_Init+0x23e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <HAL_GPIO_Init+0x330>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d031      	beq.n	8002562 <HAL_GPIO_Init+0x23a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_GPIO_Init+0x334>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02b      	beq.n	800255e <HAL_GPIO_Init+0x236>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a55      	ldr	r2, [pc, #340]	; (8002660 <HAL_GPIO_Init+0x338>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d025      	beq.n	800255a <HAL_GPIO_Init+0x232>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <HAL_GPIO_Init+0x33c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <HAL_GPIO_Init+0x22e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a53      	ldr	r2, [pc, #332]	; (8002668 <HAL_GPIO_Init+0x340>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x22a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_GPIO_Init+0x344>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x226>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a51      	ldr	r2, [pc, #324]	; (8002670 <HAL_GPIO_Init+0x348>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x222>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <HAL_GPIO_Init+0x34c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x21e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4f      	ldr	r2, [pc, #316]	; (8002678 <HAL_GPIO_Init+0x350>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x21a>
 800253e:	2309      	movs	r3, #9
 8002540:	e012      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002542:	230a      	movs	r3, #10
 8002544:	e010      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002546:	2308      	movs	r3, #8
 8002548:	e00e      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800254a:	2307      	movs	r3, #7
 800254c:	e00c      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800254e:	2306      	movs	r3, #6
 8002550:	e00a      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002552:	2305      	movs	r3, #5
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002556:	2304      	movs	r3, #4
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	; (8002650 <HAL_GPIO_Init+0x328>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_GPIO_Init+0x354>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a34      	ldr	r2, [pc, #208]	; (800267c <HAL_GPIO_Init+0x354>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_GPIO_Init+0x354>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a29      	ldr	r2, [pc, #164]	; (800267c <HAL_GPIO_Init+0x354>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_GPIO_Init+0x354>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_GPIO_Init+0x354>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_GPIO_Init+0x354>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <HAL_GPIO_Init+0x354>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f ae86 	bls.w	8002348 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40021400 	.word	0x40021400
 800266c:	40021800 	.word	0x40021800
 8002670:	40021c00 	.word	0x40021c00
 8002674:	40022000 	.word	0x40022000
 8002678:	40022400 	.word	0x40022400
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fa9a 	bl	8000c0c <HAL_GPIO_EXTI_Callback>
  }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40007000 	.word	0x40007000

08002704 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_PWREx_EnableOverDrive+0x98>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <HAL_PWREx_EnableOverDrive+0x98>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_PWREx_EnableOverDrive+0x98>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002732:	f7fe fd3f 	bl	80011b4 <HAL_GetTick>
 8002736:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002738:	e009      	b.n	800274e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800273a:	f7fe fd3b 	bl	80011b4 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002748:	d901      	bls.n	800274e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e022      	b.n	8002794 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275a:	d1ee      	bne.n	800273a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002766:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002768:	f7fe fd24 	bl	80011b4 <HAL_GetTick>
 800276c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800276e:	e009      	b.n	8002784 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002770:	f7fe fd20 	bl	80011b4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800277e:	d901      	bls.n	8002784 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e007      	b.n	8002794 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002790:	d1ee      	bne.n	8002770 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	40007000 	.word	0x40007000

080027a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e291      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8087 	beq.w	80028d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c8:	4b96      	ldr	r3, [pc, #600]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d00c      	beq.n	80027ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d4:	4b93      	ldr	r3, [pc, #588]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d112      	bne.n	8002806 <HAL_RCC_OscConfig+0x62>
 80027e0:	4b90      	ldr	r3, [pc, #576]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ec:	d10b      	bne.n	8002806 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ee:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d06c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x130>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d168      	bne.n	80028d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e26b      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x7a>
 8002810:	4b84      	ldr	r3, [pc, #528]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a83      	ldr	r2, [pc, #524]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	e02e      	b.n	800287c <HAL_RCC_OscConfig+0xd8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x9c>
 8002826:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7e      	ldr	r2, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 800282c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b7c      	ldr	r3, [pc, #496]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a7b      	ldr	r2, [pc, #492]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e01d      	b.n	800287c <HAL_RCC_OscConfig+0xd8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0xc0>
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a75      	ldr	r2, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b73      	ldr	r3, [pc, #460]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a72      	ldr	r2, [pc, #456]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0xd8>
 8002864:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a6e      	ldr	r2, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 800286a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4b6c      	ldr	r3, [pc, #432]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a6b      	ldr	r2, [pc, #428]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d013      	beq.n	80028ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fc96 	bl	80011b4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe fc92 	bl	80011b4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e21f      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0xe8>
 80028aa:	e014      	b.n	80028d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fc82 	bl	80011b4 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fc7e 	bl	80011b4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e20b      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c6:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x110>
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d069      	beq.n	80029b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e2:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ee:	4b4d      	ldr	r3, [pc, #308]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d11c      	bne.n	8002934 <HAL_RCC_OscConfig+0x190>
 80028fa:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d116      	bne.n	8002934 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_RCC_OscConfig+0x17a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d001      	beq.n	800291e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e1df      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	493d      	ldr	r1, [pc, #244]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	e040      	b.n	80029b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d023      	beq.n	8002984 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800293c:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a38      	ldr	r2, [pc, #224]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fc34 	bl	80011b4 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002950:	f7fe fc30 	bl	80011b4 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1bd      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4929      	ldr	r1, [pc, #164]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
 8002982:	e018      	b.n	80029b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fc10 	bl	80011b4 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe fc0c 	bl	80011b4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e199      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d038      	beq.n	8002a34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d019      	beq.n	80029fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d6:	f7fe fbed 	bl	80011b4 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029de:	f7fe fbe9 	bl	80011b4 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e176      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x23a>
 80029fc:	e01a      	b.n	8002a34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_RCC_OscConfig+0x280>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fbd3 	bl	80011b4 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7fe fbcf 	bl	80011b4 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d903      	bls.n	8002a28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e15c      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
 8002a24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b91      	ldr	r3, [pc, #580]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ee      	bne.n	8002a12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a4 	beq.w	8002b8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a42:	4b8b      	ldr	r3, [pc, #556]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a87      	ldr	r2, [pc, #540]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b85      	ldr	r3, [pc, #532]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6a:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a76:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x4d0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7e      	ldr	r2, [pc, #504]	; (8002c74 <HAL_RCC_OscConfig+0x4d0>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fb97 	bl	80011b4 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fe fb93 	bl	80011b4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e120      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	4b75      	ldr	r3, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x4d0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x31a>
 8002ab0:	4b6f      	ldr	r3, [pc, #444]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	e02d      	b.n	8002b1a <HAL_RCC_OscConfig+0x376>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x33c>
 8002ac6:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a69      	ldr	r2, [pc, #420]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad2:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	4a66      	ldr	r2, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ade:	e01c      	b.n	8002b1a <HAL_RCC_OscConfig+0x376>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d10c      	bne.n	8002b02 <HAL_RCC_OscConfig+0x35e>
 8002ae8:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a60      	ldr	r2, [pc, #384]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	e00b      	b.n	8002b1a <HAL_RCC_OscConfig+0x376>
 8002b02:	4b5b      	ldr	r3, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a5a      	ldr	r2, [pc, #360]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d015      	beq.n	8002b4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7fe fb47 	bl	80011b4 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe fb43 	bl	80011b4 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0ce      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ee      	beq.n	8002b2a <HAL_RCC_OscConfig+0x386>
 8002b4c:	e014      	b.n	8002b78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fb31 	bl	80011b4 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fe fb2d 	bl	80011b4 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0b8      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6c:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7e:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a3b      	ldr	r2, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80a4 	beq.w	8002cdc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d06b      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d149      	bne.n	8002c3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a30      	ldr	r2, [pc, #192]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fafe 	bl	80011b4 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe fafa 	bl	80011b4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e087      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bce:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	019b      	lsls	r3, r3, #6
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe face 	bl	80011b4 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe faca 	bl	80011b4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e057      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x478>
 8002c3a:	e04f      	b.n	8002cdc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fab4 	bl	80011b4 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fab0 	bl	80011b4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e03d      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4ac>
 8002c6e:	e035      	b.n	8002cdc <HAL_RCC_OscConfig+0x538>
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x544>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d028      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d121      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d11a      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d111      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800

08002cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0d0      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b6a      	ldr	r3, [pc, #424]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d910      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b67      	ldr	r3, [pc, #412]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 020f 	bic.w	r2, r3, #15
 8002d1a:	4965      	ldr	r1, [pc, #404]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	494d      	ldr	r1, [pc, #308]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d040      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d115      	bne.n	8002dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e073      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e06b      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4936      	ldr	r1, [pc, #216]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de0:	f7fe f9e8 	bl	80011b4 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fe f9e4 	bl	80011b4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e053      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d210      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 020f 	bic.w	r2, r3, #15
 8002e26:	4922      	ldr	r1, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e032      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4916      	ldr	r1, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e7e:	f000 f821 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1d0>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1d4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe f944 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08005310 	.word	0x08005310
 8002ebc:	20000024 	.word	0x20000024
 8002ec0:	20000028 	.word	0x20000028

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec8:	b094      	sub	sp, #80	; 0x50
 8002eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002edc:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d00d      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	f200 80e1 	bhi.w	80030b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ef6:	e0db      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efc:	e0db      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efe:	4b73      	ldr	r3, [pc, #460]	; (80030cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f02:	e0d8      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f04:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d063      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	2200      	movs	r2, #0
 8002f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2e:	2300      	movs	r3, #0
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
 8002f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f36:	4622      	mov	r2, r4
 8002f38:	462b      	mov	r3, r5
 8002f3a:	f04f 0000 	mov.w	r0, #0
 8002f3e:	f04f 0100 	mov.w	r1, #0
 8002f42:	0159      	lsls	r1, r3, #5
 8002f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f48:	0150      	lsls	r0, r2, #5
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4621      	mov	r1, r4
 8002f50:	1a51      	subs	r1, r2, r1
 8002f52:	6139      	str	r1, [r7, #16]
 8002f54:	4629      	mov	r1, r5
 8002f56:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f68:	4659      	mov	r1, fp
 8002f6a:	018b      	lsls	r3, r1, #6
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f72:	4651      	mov	r1, sl
 8002f74:	018a      	lsls	r2, r1, #6
 8002f76:	4651      	mov	r1, sl
 8002f78:	ebb2 0801 	subs.w	r8, r2, r1
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f96:	4690      	mov	r8, r2
 8002f98:	4699      	mov	r9, r3
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	eb18 0303 	adds.w	r3, r8, r3
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	eb49 0303 	adc.w	r3, r9, r3
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	024b      	lsls	r3, r1, #9
 8002fba:	4621      	mov	r1, r4
 8002fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	024a      	lsls	r2, r1, #9
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fca:	2200      	movs	r2, #0
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd4:	f7fd f974 	bl	80002c0 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe0:	e058      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe2:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	4611      	mov	r1, r2
 8002fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff2:	623b      	str	r3, [r7, #32]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	f04f 0000 	mov.w	r0, #0
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	0159      	lsls	r1, r3, #5
 800300a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300e:	0150      	lsls	r0, r2, #5
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4641      	mov	r1, r8
 8003016:	ebb2 0a01 	subs.w	sl, r2, r1
 800301a:	4649      	mov	r1, r9
 800301c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800302c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003034:	ebb2 040a 	subs.w	r4, r2, sl
 8003038:	eb63 050b 	sbc.w	r5, r3, fp
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	00eb      	lsls	r3, r5, #3
 8003046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304a:	00e2      	lsls	r2, r4, #3
 800304c:	4614      	mov	r4, r2
 800304e:	461d      	mov	r5, r3
 8003050:	4643      	mov	r3, r8
 8003052:	18e3      	adds	r3, r4, r3
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	464b      	mov	r3, r9
 8003058:	eb45 0303 	adc.w	r3, r5, r3
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307e:	2200      	movs	r2, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	61fa      	str	r2, [r7, #28]
 8003084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003088:	f7fd f91a 	bl	80002c0 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	3301      	adds	r3, #1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80030a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3750      	adds	r7, #80	; 0x50
 80030bc:	46bd      	mov	sp, r7
 80030be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	007a1200 	.word	0x007a1200

080030d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000024 	.word	0x20000024

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030ec:	f7ff fff0 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	08005320 	.word	0x08005320

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003114:	f7ff ffdc 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0b5b      	lsrs	r3, r3, #13
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	08005320 	.word	0x08005320

08003138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d012      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003160:	4b69      	ldr	r3, [pc, #420]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a68      	ldr	r2, [pc, #416]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003166:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800316a:	6093      	str	r3, [r2, #8]
 800316c:	4b66      	ldr	r3, [pc, #408]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	4964      	ldr	r1, [pc, #400]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003182:	2301      	movs	r3, #1
 8003184:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d017      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003192:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	4959      	ldr	r1, [pc, #356]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b0:	d101      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d017      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031ce:	4b4e      	ldr	r3, [pc, #312]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	494a      	ldr	r1, [pc, #296]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ec:	d101      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800320a:	2301      	movs	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 808b 	beq.w	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800321c:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	4a39      	ldr	r2, [pc, #228]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003226:	6413      	str	r3, [r2, #64]	; 0x40
 8003228:	4b37      	ldr	r3, [pc, #220]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003234:	4b35      	ldr	r3, [pc, #212]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a34      	ldr	r2, [pc, #208]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003240:	f7fd ffb8 	bl	80011b4 <HAL_GetTick>
 8003244:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fd ffb4 	bl	80011b4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e357      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003266:	4b28      	ldr	r3, [pc, #160]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d035      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	429a      	cmp	r2, r3
 8003282:	d02e      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800328e:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032a6:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d114      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fd ff7c 	bl	80011b4 <HAL_GetTick>
 80032bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f7fd ff78 	bl	80011b4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e319      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ee      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ee:	d111      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032fe:	400b      	ands	r3, r1
 8003300:	4901      	ldr	r1, [pc, #4]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
 8003306:	e00b      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003308:	40023800 	.word	0x40023800
 800330c:	40007000 	.word	0x40007000
 8003310:	0ffffcff 	.word	0x0ffffcff
 8003314:	4baa      	ldr	r3, [pc, #680]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4aa9      	ldr	r2, [pc, #676]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800331e:	6093      	str	r3, [r2, #8]
 8003320:	4ba7      	ldr	r3, [pc, #668]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	49a4      	ldr	r1, [pc, #656]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332e:	4313      	orrs	r3, r2
 8003330:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d010      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800333e:	4ba0      	ldr	r3, [pc, #640]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003344:	4a9e      	ldr	r2, [pc, #632]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800334e:	4b9c      	ldr	r3, [pc, #624]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003350:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	4999      	ldr	r1, [pc, #612]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800336c:	4b94      	ldr	r3, [pc, #592]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800337a:	4991      	ldr	r1, [pc, #580]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800338e:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339c:	4988      	ldr	r1, [pc, #544]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b0:	4b83      	ldr	r3, [pc, #524]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033be:	4980      	ldr	r1, [pc, #512]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033d2:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	4977      	ldr	r1, [pc, #476]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f4:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f023 0203 	bic.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	496f      	ldr	r1, [pc, #444]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003416:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f023 020c 	bic.w	r2, r3, #12
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003424:	4966      	ldr	r1, [pc, #408]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003438:	4b61      	ldr	r3, [pc, #388]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	495e      	ldr	r1, [pc, #376]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800345a:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003468:	4955      	ldr	r1, [pc, #340]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	494d      	ldr	r1, [pc, #308]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800349e:	4b48      	ldr	r3, [pc, #288]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	4944      	ldr	r1, [pc, #272]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034c0:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	493c      	ldr	r1, [pc, #240]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f0:	4933      	ldr	r1, [pc, #204]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003504:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003512:	492b      	ldr	r1, [pc, #172]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d011      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003534:	4922      	ldr	r1, [pc, #136]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003544:	d101      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003546:	2301      	movs	r3, #1
 8003548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003556:	2301      	movs	r3, #1
 8003558:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003574:	4912      	ldr	r1, [pc, #72]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003588:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003598:	4909      	ldr	r1, [pc, #36]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d006      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80d9 	beq.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a01      	ldr	r2, [pc, #4]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035be:	e001      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80035c0:	40023800 	.word	0x40023800
 80035c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c6:	f7fd fdf5 	bl	80011b4 <HAL_GetTick>
 80035ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ce:	f7fd fdf1 	bl	80011b4 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b64      	cmp	r3, #100	; 0x64
 80035da:	d901      	bls.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e194      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035e0:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d021      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11d      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003606:	0c1b      	lsrs	r3, r3, #16
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800360e:	4b61      	ldr	r3, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003614:	0e1b      	lsrs	r3, r3, #24
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	019a      	lsls	r2, r3, #6
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	431a      	orrs	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	071b      	lsls	r3, r3, #28
 8003634:	4957      	ldr	r1, [pc, #348]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800365a:	2b00      	cmp	r3, #0
 800365c:	d02e      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003666:	d129      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003668:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367c:	0f1b      	lsrs	r3, r3, #28
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	019a      	lsls	r2, r3, #6
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	431a      	orrs	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	071b      	lsls	r3, r3, #28
 800369c:	493d      	ldr	r1, [pc, #244]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036a4:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036aa:	f023 021f 	bic.w	r2, r3, #31
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	3b01      	subs	r3, #1
 80036b4:	4937      	ldr	r1, [pc, #220]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01d      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ce:	0e1b      	lsrs	r3, r3, #24
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036dc:	0f1b      	lsrs	r3, r3, #28
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	019a      	lsls	r2, r3, #6
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	431a      	orrs	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	071b      	lsls	r3, r3, #28
 80036fc:	4925      	ldr	r1, [pc, #148]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d011      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	019a      	lsls	r2, r3, #6
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	071b      	lsls	r3, r3, #28
 800372c:	4919      	ldr	r1, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a16      	ldr	r2, [pc, #88]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800373e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003740:	f7fd fd38 	bl	80011b4 <HAL_GetTick>
 8003744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003748:	f7fd fd34 	bl	80011b4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0d7      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b01      	cmp	r3, #1
 800376a:	f040 80cd 	bne.w	8003908 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377a:	f7fd fd1b 	bl	80011b4 <HAL_GetTick>
 800377e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003780:	e00a      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003782:	f7fd fd17 	bl	80011b4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b64      	cmp	r3, #100	; 0x64
 800378e:	d903      	bls.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0ba      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003794:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003798:	4b5e      	ldr	r3, [pc, #376]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a4:	d0ed      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02e      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d12a      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037ce:	4b51      	ldr	r3, [pc, #324]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037dc:	4b4d      	ldr	r3, [pc, #308]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	0f1b      	lsrs	r3, r3, #28
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	019a      	lsls	r2, r3, #6
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	061b      	lsls	r3, r3, #24
 80037fc:	431a      	orrs	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	071b      	lsls	r3, r3, #28
 8003802:	4944      	ldr	r1, [pc, #272]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800380a:	4b42      	ldr	r3, [pc, #264]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003810:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	493d      	ldr	r1, [pc, #244]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d022      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003838:	d11d      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800383a:	4b36      	ldr	r3, [pc, #216]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	0e1b      	lsrs	r3, r3, #24
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003848:	4b32      	ldr	r3, [pc, #200]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	0f1b      	lsrs	r3, r3, #28
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	019a      	lsls	r2, r3, #6
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	431a      	orrs	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	061b      	lsls	r3, r3, #24
 8003868:	431a      	orrs	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	071b      	lsls	r3, r3, #28
 800386e:	4929      	ldr	r1, [pc, #164]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d028      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	0e1b      	lsrs	r3, r3, #24
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003890:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	0c1b      	lsrs	r3, r3, #16
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	019a      	lsls	r2, r3, #6
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	431a      	orrs	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	071b      	lsls	r3, r3, #28
 80038b6:	4917      	ldr	r1, [pc, #92]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4911      	ldr	r1, [pc, #68]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e0:	f7fd fc68 	bl	80011b4 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038e8:	f7fd fc64 	bl	80011b4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e007      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003906:	d1ef      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800

08003918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e049      	b.n	80039be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fb08 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f000 f9f6 	bl	8003d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d001      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e054      	b.n	8003a8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <HAL_TIM_Base_Start_IT+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d022      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0a:	d01d      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <HAL_TIM_Base_Start_IT+0xd4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d018      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00e      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d009      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <HAL_TIM_Base_Start_IT+0xe4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d115      	bne.n	8003a74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <HAL_TIM_Base_Start_IT+0xec>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d015      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0xbe>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d011      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a72:	e008      	b.n	8003a86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e000      	b.n	8003a88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40010400 	.word	0x40010400
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40001800 	.word	0x40001800
 8003ab4:	00010007 	.word	0x00010007

08003ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0202 	mvn.w	r2, #2
 8003ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f905 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8f7 	bl	8003cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f908 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0204 	mvn.w	r2, #4
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8db 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8cd 	bl	8003cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f8de 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0208 	mvn.w	r2, #8
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2204      	movs	r2, #4
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8b1 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f8a3 	bl	8003cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f8b4 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0210 	mvn.w	r2, #16
 8003be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2208      	movs	r2, #8
 8003be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f887 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f879 	bl	8003cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f88a 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0201 	mvn.w	r2, #1
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fc ffd0 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b80      	cmp	r3, #128	; 0x80
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9a8 	bl	8003fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c76:	d10e      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d107      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f99b 	bl	8003fcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f838 	bl	8003d32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d10e      	bne.n	8003cee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f06f 0220 	mvn.w	r2, #32
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f95b 	bl	8003fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a40      	ldr	r2, [pc, #256]	; (8003e5c <TIM_Base_SetConfig+0x114>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d66:	d00f      	beq.n	8003d88 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3d      	ldr	r2, [pc, #244]	; (8003e60 <TIM_Base_SetConfig+0x118>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3c      	ldr	r2, [pc, #240]	; (8003e64 <TIM_Base_SetConfig+0x11c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3b      	ldr	r2, [pc, #236]	; (8003e68 <TIM_Base_SetConfig+0x120>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3a      	ldr	r2, [pc, #232]	; (8003e6c <TIM_Base_SetConfig+0x124>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d108      	bne.n	8003d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a2f      	ldr	r2, [pc, #188]	; (8003e5c <TIM_Base_SetConfig+0x114>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d02b      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d027      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <TIM_Base_SetConfig+0x118>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d023      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <TIM_Base_SetConfig+0x11c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01f      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2a      	ldr	r2, [pc, #168]	; (8003e68 <TIM_Base_SetConfig+0x120>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01b      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a29      	ldr	r2, [pc, #164]	; (8003e6c <TIM_Base_SetConfig+0x124>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d017      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <TIM_Base_SetConfig+0x128>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a27      	ldr	r2, [pc, #156]	; (8003e74 <TIM_Base_SetConfig+0x12c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00f      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a26      	ldr	r2, [pc, #152]	; (8003e78 <TIM_Base_SetConfig+0x130>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a25      	ldr	r2, [pc, #148]	; (8003e7c <TIM_Base_SetConfig+0x134>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a24      	ldr	r2, [pc, #144]	; (8003e80 <TIM_Base_SetConfig+0x138>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <TIM_Base_SetConfig+0x13c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <TIM_Base_SetConfig+0x114>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <TIM_Base_SetConfig+0xf8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a0c      	ldr	r2, [pc, #48]	; (8003e6c <TIM_Base_SetConfig+0x124>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d103      	bne.n	8003e48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	615a      	str	r2, [r3, #20]
}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800
 8003e68:	40000c00 	.word	0x40000c00
 8003e6c:	40010400 	.word	0x40010400
 8003e70:	40014000 	.word	0x40014000
 8003e74:	40014400 	.word	0x40014400
 8003e78:	40014800 	.word	0x40014800
 8003e7c:	40001800 	.word	0x40001800
 8003e80:	40001c00 	.word	0x40001c00
 8003e84:	40002000 	.word	0x40002000

08003e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e06d      	b.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2f      	ldr	r2, [pc, #188]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003eda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d022      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f12:	d01d      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d018      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00e      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10c      	bne.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40010400 	.word	0x40010400
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40000c00 	.word	0x40000c00
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40001800 	.word	0x40001800

08003fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e040      	b.n	8004074 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fc fffc 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2224      	movs	r2, #36	; 0x24
 800400c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8b0 	bl	8004184 <UART_SetConfig>
 8004024:	4603      	mov	r3, r0
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e022      	b.n	8004074 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fb08 	bl	800464c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800404a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800405a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fb8f 	bl	8004790 <UART_CheckIdleState>
 8004072:	4603      	mov	r3, r0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004090:	2b20      	cmp	r3, #32
 8004092:	d171      	bne.n	8004178 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_UART_Transmit+0x24>
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e06a      	b.n	800417a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2221      	movs	r2, #33	; 0x21
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b2:	f7fd f87f 	bl	80011b4 <HAL_GetTick>
 80040b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d0:	d108      	bne.n	80040e4 <HAL_UART_Transmit+0x68>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e003      	b.n	80040ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040ec:	e02c      	b.n	8004148 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fb80 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e038      	b.n	800417a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	3302      	adds	r3, #2
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	e007      	b.n	8004136 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	3301      	adds	r3, #1
 8004134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1cc      	bne.n	80040ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fb4d 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e005      	b.n	800417a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4ba6      	ldr	r3, [pc, #664]	; (8004448 <UART_SetConfig+0x2c4>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a94      	ldr	r2, [pc, #592]	; (800444c <UART_SetConfig+0x2c8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d120      	bne.n	8004242 <UART_SetConfig+0xbe>
 8004200:	4b93      	ldr	r3, [pc, #588]	; (8004450 <UART_SetConfig+0x2cc>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b03      	cmp	r3, #3
 800420c:	d816      	bhi.n	800423c <UART_SetConfig+0xb8>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x90>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004225 	.word	0x08004225
 8004218:	08004231 	.word	0x08004231
 800421c:	0800422b 	.word	0x0800422b
 8004220:	08004237 	.word	0x08004237
 8004224:	2301      	movs	r3, #1
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e150      	b.n	80044cc <UART_SetConfig+0x348>
 800422a:	2302      	movs	r3, #2
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e14d      	b.n	80044cc <UART_SetConfig+0x348>
 8004230:	2304      	movs	r3, #4
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e14a      	b.n	80044cc <UART_SetConfig+0x348>
 8004236:	2308      	movs	r3, #8
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e147      	b.n	80044cc <UART_SetConfig+0x348>
 800423c:	2310      	movs	r3, #16
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e144      	b.n	80044cc <UART_SetConfig+0x348>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a83      	ldr	r2, [pc, #524]	; (8004454 <UART_SetConfig+0x2d0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d132      	bne.n	80042b2 <UART_SetConfig+0x12e>
 800424c:	4b80      	ldr	r3, [pc, #512]	; (8004450 <UART_SetConfig+0x2cc>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d828      	bhi.n	80042ac <UART_SetConfig+0x128>
 800425a:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <UART_SetConfig+0xdc>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	08004295 	.word	0x08004295
 8004264:	080042ad 	.word	0x080042ad
 8004268:	080042ad 	.word	0x080042ad
 800426c:	080042ad 	.word	0x080042ad
 8004270:	080042a1 	.word	0x080042a1
 8004274:	080042ad 	.word	0x080042ad
 8004278:	080042ad 	.word	0x080042ad
 800427c:	080042ad 	.word	0x080042ad
 8004280:	0800429b 	.word	0x0800429b
 8004284:	080042ad 	.word	0x080042ad
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042ad 	.word	0x080042ad
 8004290:	080042a7 	.word	0x080042a7
 8004294:	2300      	movs	r3, #0
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e118      	b.n	80044cc <UART_SetConfig+0x348>
 800429a:	2302      	movs	r3, #2
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e115      	b.n	80044cc <UART_SetConfig+0x348>
 80042a0:	2304      	movs	r3, #4
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e112      	b.n	80044cc <UART_SetConfig+0x348>
 80042a6:	2308      	movs	r3, #8
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e10f      	b.n	80044cc <UART_SetConfig+0x348>
 80042ac:	2310      	movs	r3, #16
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e10c      	b.n	80044cc <UART_SetConfig+0x348>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a68      	ldr	r2, [pc, #416]	; (8004458 <UART_SetConfig+0x2d4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d120      	bne.n	80042fe <UART_SetConfig+0x17a>
 80042bc:	4b64      	ldr	r3, [pc, #400]	; (8004450 <UART_SetConfig+0x2cc>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042c6:	2b30      	cmp	r3, #48	; 0x30
 80042c8:	d013      	beq.n	80042f2 <UART_SetConfig+0x16e>
 80042ca:	2b30      	cmp	r3, #48	; 0x30
 80042cc:	d814      	bhi.n	80042f8 <UART_SetConfig+0x174>
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d009      	beq.n	80042e6 <UART_SetConfig+0x162>
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d810      	bhi.n	80042f8 <UART_SetConfig+0x174>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <UART_SetConfig+0x15c>
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d006      	beq.n	80042ec <UART_SetConfig+0x168>
 80042de:	e00b      	b.n	80042f8 <UART_SetConfig+0x174>
 80042e0:	2300      	movs	r3, #0
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e0f2      	b.n	80044cc <UART_SetConfig+0x348>
 80042e6:	2302      	movs	r3, #2
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e0ef      	b.n	80044cc <UART_SetConfig+0x348>
 80042ec:	2304      	movs	r3, #4
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e0ec      	b.n	80044cc <UART_SetConfig+0x348>
 80042f2:	2308      	movs	r3, #8
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e0e9      	b.n	80044cc <UART_SetConfig+0x348>
 80042f8:	2310      	movs	r3, #16
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e0e6      	b.n	80044cc <UART_SetConfig+0x348>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a56      	ldr	r2, [pc, #344]	; (800445c <UART_SetConfig+0x2d8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d120      	bne.n	800434a <UART_SetConfig+0x1c6>
 8004308:	4b51      	ldr	r3, [pc, #324]	; (8004450 <UART_SetConfig+0x2cc>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004312:	2bc0      	cmp	r3, #192	; 0xc0
 8004314:	d013      	beq.n	800433e <UART_SetConfig+0x1ba>
 8004316:	2bc0      	cmp	r3, #192	; 0xc0
 8004318:	d814      	bhi.n	8004344 <UART_SetConfig+0x1c0>
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d009      	beq.n	8004332 <UART_SetConfig+0x1ae>
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d810      	bhi.n	8004344 <UART_SetConfig+0x1c0>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <UART_SetConfig+0x1a8>
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d006      	beq.n	8004338 <UART_SetConfig+0x1b4>
 800432a:	e00b      	b.n	8004344 <UART_SetConfig+0x1c0>
 800432c:	2300      	movs	r3, #0
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e0cc      	b.n	80044cc <UART_SetConfig+0x348>
 8004332:	2302      	movs	r3, #2
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e0c9      	b.n	80044cc <UART_SetConfig+0x348>
 8004338:	2304      	movs	r3, #4
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e0c6      	b.n	80044cc <UART_SetConfig+0x348>
 800433e:	2308      	movs	r3, #8
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e0c3      	b.n	80044cc <UART_SetConfig+0x348>
 8004344:	2310      	movs	r3, #16
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e0c0      	b.n	80044cc <UART_SetConfig+0x348>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a44      	ldr	r2, [pc, #272]	; (8004460 <UART_SetConfig+0x2dc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d125      	bne.n	80043a0 <UART_SetConfig+0x21c>
 8004354:	4b3e      	ldr	r3, [pc, #248]	; (8004450 <UART_SetConfig+0x2cc>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004362:	d017      	beq.n	8004394 <UART_SetConfig+0x210>
 8004364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004368:	d817      	bhi.n	800439a <UART_SetConfig+0x216>
 800436a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436e:	d00b      	beq.n	8004388 <UART_SetConfig+0x204>
 8004370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004374:	d811      	bhi.n	800439a <UART_SetConfig+0x216>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <UART_SetConfig+0x1fe>
 800437a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437e:	d006      	beq.n	800438e <UART_SetConfig+0x20a>
 8004380:	e00b      	b.n	800439a <UART_SetConfig+0x216>
 8004382:	2300      	movs	r3, #0
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e0a1      	b.n	80044cc <UART_SetConfig+0x348>
 8004388:	2302      	movs	r3, #2
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e09e      	b.n	80044cc <UART_SetConfig+0x348>
 800438e:	2304      	movs	r3, #4
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e09b      	b.n	80044cc <UART_SetConfig+0x348>
 8004394:	2308      	movs	r3, #8
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e098      	b.n	80044cc <UART_SetConfig+0x348>
 800439a:	2310      	movs	r3, #16
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e095      	b.n	80044cc <UART_SetConfig+0x348>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a2f      	ldr	r2, [pc, #188]	; (8004464 <UART_SetConfig+0x2e0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d125      	bne.n	80043f6 <UART_SetConfig+0x272>
 80043aa:	4b29      	ldr	r3, [pc, #164]	; (8004450 <UART_SetConfig+0x2cc>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043b8:	d017      	beq.n	80043ea <UART_SetConfig+0x266>
 80043ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043be:	d817      	bhi.n	80043f0 <UART_SetConfig+0x26c>
 80043c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c4:	d00b      	beq.n	80043de <UART_SetConfig+0x25a>
 80043c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ca:	d811      	bhi.n	80043f0 <UART_SetConfig+0x26c>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <UART_SetConfig+0x254>
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d006      	beq.n	80043e4 <UART_SetConfig+0x260>
 80043d6:	e00b      	b.n	80043f0 <UART_SetConfig+0x26c>
 80043d8:	2301      	movs	r3, #1
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e076      	b.n	80044cc <UART_SetConfig+0x348>
 80043de:	2302      	movs	r3, #2
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e073      	b.n	80044cc <UART_SetConfig+0x348>
 80043e4:	2304      	movs	r3, #4
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e070      	b.n	80044cc <UART_SetConfig+0x348>
 80043ea:	2308      	movs	r3, #8
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e06d      	b.n	80044cc <UART_SetConfig+0x348>
 80043f0:	2310      	movs	r3, #16
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e06a      	b.n	80044cc <UART_SetConfig+0x348>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1b      	ldr	r2, [pc, #108]	; (8004468 <UART_SetConfig+0x2e4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d138      	bne.n	8004472 <UART_SetConfig+0x2ee>
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <UART_SetConfig+0x2cc>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800440a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800440e:	d017      	beq.n	8004440 <UART_SetConfig+0x2bc>
 8004410:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004414:	d82a      	bhi.n	800446c <UART_SetConfig+0x2e8>
 8004416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441a:	d00b      	beq.n	8004434 <UART_SetConfig+0x2b0>
 800441c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004420:	d824      	bhi.n	800446c <UART_SetConfig+0x2e8>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <UART_SetConfig+0x2aa>
 8004426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442a:	d006      	beq.n	800443a <UART_SetConfig+0x2b6>
 800442c:	e01e      	b.n	800446c <UART_SetConfig+0x2e8>
 800442e:	2300      	movs	r3, #0
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e04b      	b.n	80044cc <UART_SetConfig+0x348>
 8004434:	2302      	movs	r3, #2
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e048      	b.n	80044cc <UART_SetConfig+0x348>
 800443a:	2304      	movs	r3, #4
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e045      	b.n	80044cc <UART_SetConfig+0x348>
 8004440:	2308      	movs	r3, #8
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e042      	b.n	80044cc <UART_SetConfig+0x348>
 8004446:	bf00      	nop
 8004448:	efff69f3 	.word	0xefff69f3
 800444c:	40011000 	.word	0x40011000
 8004450:	40023800 	.word	0x40023800
 8004454:	40004400 	.word	0x40004400
 8004458:	40004800 	.word	0x40004800
 800445c:	40004c00 	.word	0x40004c00
 8004460:	40005000 	.word	0x40005000
 8004464:	40011400 	.word	0x40011400
 8004468:	40007800 	.word	0x40007800
 800446c:	2310      	movs	r3, #16
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e02c      	b.n	80044cc <UART_SetConfig+0x348>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a72      	ldr	r2, [pc, #456]	; (8004640 <UART_SetConfig+0x4bc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d125      	bne.n	80044c8 <UART_SetConfig+0x344>
 800447c:	4b71      	ldr	r3, [pc, #452]	; (8004644 <UART_SetConfig+0x4c0>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004486:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800448a:	d017      	beq.n	80044bc <UART_SetConfig+0x338>
 800448c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004490:	d817      	bhi.n	80044c2 <UART_SetConfig+0x33e>
 8004492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004496:	d00b      	beq.n	80044b0 <UART_SetConfig+0x32c>
 8004498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449c:	d811      	bhi.n	80044c2 <UART_SetConfig+0x33e>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <UART_SetConfig+0x326>
 80044a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044a6:	d006      	beq.n	80044b6 <UART_SetConfig+0x332>
 80044a8:	e00b      	b.n	80044c2 <UART_SetConfig+0x33e>
 80044aa:	2300      	movs	r3, #0
 80044ac:	77fb      	strb	r3, [r7, #31]
 80044ae:	e00d      	b.n	80044cc <UART_SetConfig+0x348>
 80044b0:	2302      	movs	r3, #2
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e00a      	b.n	80044cc <UART_SetConfig+0x348>
 80044b6:	2304      	movs	r3, #4
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e007      	b.n	80044cc <UART_SetConfig+0x348>
 80044bc:	2308      	movs	r3, #8
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e004      	b.n	80044cc <UART_SetConfig+0x348>
 80044c2:	2310      	movs	r3, #16
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e001      	b.n	80044cc <UART_SetConfig+0x348>
 80044c8:	2310      	movs	r3, #16
 80044ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d4:	d15b      	bne.n	800458e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80044d6:	7ffb      	ldrb	r3, [r7, #31]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d828      	bhi.n	800452e <UART_SetConfig+0x3aa>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0x360>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004509 	.word	0x08004509
 80044e8:	08004511 	.word	0x08004511
 80044ec:	08004519 	.word	0x08004519
 80044f0:	0800452f 	.word	0x0800452f
 80044f4:	0800451f 	.word	0x0800451f
 80044f8:	0800452f 	.word	0x0800452f
 80044fc:	0800452f 	.word	0x0800452f
 8004500:	0800452f 	.word	0x0800452f
 8004504:	08004527 	.word	0x08004527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004508:	f7fe fdee 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 800450c:	61b8      	str	r0, [r7, #24]
        break;
 800450e:	e013      	b.n	8004538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004510:	f7fe fdfe 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8004514:	61b8      	str	r0, [r7, #24]
        break;
 8004516:	e00f      	b.n	8004538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004518:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <UART_SetConfig+0x4c4>)
 800451a:	61bb      	str	r3, [r7, #24]
        break;
 800451c:	e00c      	b.n	8004538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451e:	f7fe fcd1 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8004522:	61b8      	str	r0, [r7, #24]
        break;
 8004524:	e008      	b.n	8004538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452a:	61bb      	str	r3, [r7, #24]
        break;
 800452c:	e004      	b.n	8004538 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	77bb      	strb	r3, [r7, #30]
        break;
 8004536:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d074      	beq.n	8004628 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	005a      	lsls	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	441a      	add	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2b0f      	cmp	r3, #15
 8004558:	d916      	bls.n	8004588 <UART_SetConfig+0x404>
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004560:	d212      	bcs.n	8004588 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	b29b      	uxth	r3, r3
 8004566:	f023 030f 	bic.w	r3, r3, #15
 800456a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	b29b      	uxth	r3, r3
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	b29a      	uxth	r2, r3
 8004578:	89fb      	ldrh	r3, [r7, #14]
 800457a:	4313      	orrs	r3, r2
 800457c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	89fa      	ldrh	r2, [r7, #14]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	e04f      	b.n	8004628 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77bb      	strb	r3, [r7, #30]
 800458c:	e04c      	b.n	8004628 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458e:	7ffb      	ldrb	r3, [r7, #31]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d828      	bhi.n	80045e6 <UART_SetConfig+0x462>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x418>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fe fd92 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 80045c4:	61b8      	str	r0, [r7, #24]
        break;
 80045c6:	e013      	b.n	80045f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fe fda2 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 80045cc:	61b8      	str	r0, [r7, #24]
        break;
 80045ce:	e00f      	b.n	80045f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <UART_SetConfig+0x4c4>)
 80045d2:	61bb      	str	r3, [r7, #24]
        break;
 80045d4:	e00c      	b.n	80045f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fe fc75 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 80045da:	61b8      	str	r0, [r7, #24]
        break;
 80045dc:	e008      	b.n	80045f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	61bb      	str	r3, [r7, #24]
        break;
 80045e4:	e004      	b.n	80045f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	77bb      	strb	r3, [r7, #30]
        break;
 80045ee:	bf00      	nop
    }

    if (pclk != 0U)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d018      	beq.n	8004628 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	085a      	lsrs	r2, r3, #1
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	441a      	add	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b0f      	cmp	r3, #15
 800460e:	d909      	bls.n	8004624 <UART_SetConfig+0x4a0>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004616:	d205      	bcs.n	8004624 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	e001      	b.n	8004628 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004634:	7fbb      	ldrb	r3, [r7, #30]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40007c00 	.word	0x40007c00
 8004644:	40023800 	.word	0x40023800
 8004648:	00f42400 	.word	0x00f42400

0800464c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01a      	beq.n	8004762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474a:	d10a      	bne.n	8004762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
  }
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047a0:	f7fc fd08 	bl	80011b4 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d10e      	bne.n	80047d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f81b 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e011      	b.n	80047f6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b09c      	sub	sp, #112	; 0x70
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480e:	e0a7      	b.n	8004960 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	f000 80a3 	beq.w	8004960 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fc fccb 	bl	80011b4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <UART_WaitOnFlagUntilTimeout+0x32>
 800482a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482c:	2b00      	cmp	r3, #0
 800482e:	d13f      	bne.n	80048b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800483e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004844:	667b      	str	r3, [r7, #100]	; 0x64
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004850:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800485c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e6      	bne.n	8004830 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3308      	adds	r3, #8
 8004880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004882:	64ba      	str	r2, [r7, #72]	; 0x48
 8004884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e5      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e068      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d050      	beq.n	8004960 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048cc:	d148      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
 80048f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e6      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	613b      	str	r3, [r7, #16]
   return(result);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	66bb      	str	r3, [r7, #104]	; 0x68
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800492a:	623a      	str	r2, [r7, #32]
 800492c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	69f9      	ldr	r1, [r7, #28]
 8004930:	6a3a      	ldr	r2, [r7, #32]
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	61bb      	str	r3, [r7, #24]
   return(result);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e5      	bne.n	800490a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e010      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4013      	ands	r3, r2
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	429a      	cmp	r2, r3
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	429a      	cmp	r2, r3
 800497c:	f43f af48 	beq.w	8004810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3770      	adds	r7, #112	; 0x70
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <siprintf>:
 800498c:	b40e      	push	{r1, r2, r3}
 800498e:	b500      	push	{lr}
 8004990:	b09c      	sub	sp, #112	; 0x70
 8004992:	ab1d      	add	r3, sp, #116	; 0x74
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800499c:	4809      	ldr	r0, [pc, #36]	; (80049c4 <siprintf+0x38>)
 800499e:	9107      	str	r1, [sp, #28]
 80049a0:	9104      	str	r1, [sp, #16]
 80049a2:	4909      	ldr	r1, [pc, #36]	; (80049c8 <siprintf+0x3c>)
 80049a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a8:	9105      	str	r1, [sp, #20]
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	a902      	add	r1, sp, #8
 80049b0:	f000 f992 	bl	8004cd8 <_svfiprintf_r>
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	b01c      	add	sp, #112	; 0x70
 80049bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c0:	b003      	add	sp, #12
 80049c2:	4770      	bx	lr
 80049c4:	2000007c 	.word	0x2000007c
 80049c8:	ffff0208 	.word	0xffff0208

080049cc <memset>:
 80049cc:	4402      	add	r2, r0
 80049ce:	4603      	mov	r3, r0
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d100      	bne.n	80049d6 <memset+0xa>
 80049d4:	4770      	bx	lr
 80049d6:	f803 1b01 	strb.w	r1, [r3], #1
 80049da:	e7f9      	b.n	80049d0 <memset+0x4>

080049dc <__errno>:
 80049dc:	4b01      	ldr	r3, [pc, #4]	; (80049e4 <__errno+0x8>)
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	2000007c 	.word	0x2000007c

080049e8 <__libc_init_array>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	4d0d      	ldr	r5, [pc, #52]	; (8004a20 <__libc_init_array+0x38>)
 80049ec:	4c0d      	ldr	r4, [pc, #52]	; (8004a24 <__libc_init_array+0x3c>)
 80049ee:	1b64      	subs	r4, r4, r5
 80049f0:	10a4      	asrs	r4, r4, #2
 80049f2:	2600      	movs	r6, #0
 80049f4:	42a6      	cmp	r6, r4
 80049f6:	d109      	bne.n	8004a0c <__libc_init_array+0x24>
 80049f8:	4d0b      	ldr	r5, [pc, #44]	; (8004a28 <__libc_init_array+0x40>)
 80049fa:	4c0c      	ldr	r4, [pc, #48]	; (8004a2c <__libc_init_array+0x44>)
 80049fc:	f000 fc6a 	bl	80052d4 <_init>
 8004a00:	1b64      	subs	r4, r4, r5
 8004a02:	10a4      	asrs	r4, r4, #2
 8004a04:	2600      	movs	r6, #0
 8004a06:	42a6      	cmp	r6, r4
 8004a08:	d105      	bne.n	8004a16 <__libc_init_array+0x2e>
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a10:	4798      	blx	r3
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7ee      	b.n	80049f4 <__libc_init_array+0xc>
 8004a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1a:	4798      	blx	r3
 8004a1c:	3601      	adds	r6, #1
 8004a1e:	e7f2      	b.n	8004a06 <__libc_init_array+0x1e>
 8004a20:	0800536c 	.word	0x0800536c
 8004a24:	0800536c 	.word	0x0800536c
 8004a28:	0800536c 	.word	0x0800536c
 8004a2c:	08005370 	.word	0x08005370

08004a30 <__retarget_lock_acquire_recursive>:
 8004a30:	4770      	bx	lr

08004a32 <__retarget_lock_release_recursive>:
 8004a32:	4770      	bx	lr

08004a34 <_free_r>:
 8004a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a36:	2900      	cmp	r1, #0
 8004a38:	d044      	beq.n	8004ac4 <_free_r+0x90>
 8004a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a3e:	9001      	str	r0, [sp, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f1a1 0404 	sub.w	r4, r1, #4
 8004a46:	bfb8      	it	lt
 8004a48:	18e4      	addlt	r4, r4, r3
 8004a4a:	f000 f8df 	bl	8004c0c <__malloc_lock>
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <_free_r+0x94>)
 8004a50:	9801      	ldr	r0, [sp, #4]
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	b933      	cbnz	r3, 8004a64 <_free_r+0x30>
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	6014      	str	r4, [r2, #0]
 8004a5a:	b003      	add	sp, #12
 8004a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a60:	f000 b8da 	b.w	8004c18 <__malloc_unlock>
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d908      	bls.n	8004a7a <_free_r+0x46>
 8004a68:	6825      	ldr	r5, [r4, #0]
 8004a6a:	1961      	adds	r1, r4, r5
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	bf01      	itttt	eq
 8004a70:	6819      	ldreq	r1, [r3, #0]
 8004a72:	685b      	ldreq	r3, [r3, #4]
 8004a74:	1949      	addeq	r1, r1, r5
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	e7ed      	b.n	8004a56 <_free_r+0x22>
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	b10b      	cbz	r3, 8004a84 <_free_r+0x50>
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d9fa      	bls.n	8004a7a <_free_r+0x46>
 8004a84:	6811      	ldr	r1, [r2, #0]
 8004a86:	1855      	adds	r5, r2, r1
 8004a88:	42a5      	cmp	r5, r4
 8004a8a:	d10b      	bne.n	8004aa4 <_free_r+0x70>
 8004a8c:	6824      	ldr	r4, [r4, #0]
 8004a8e:	4421      	add	r1, r4
 8004a90:	1854      	adds	r4, r2, r1
 8004a92:	42a3      	cmp	r3, r4
 8004a94:	6011      	str	r1, [r2, #0]
 8004a96:	d1e0      	bne.n	8004a5a <_free_r+0x26>
 8004a98:	681c      	ldr	r4, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	6053      	str	r3, [r2, #4]
 8004a9e:	440c      	add	r4, r1
 8004aa0:	6014      	str	r4, [r2, #0]
 8004aa2:	e7da      	b.n	8004a5a <_free_r+0x26>
 8004aa4:	d902      	bls.n	8004aac <_free_r+0x78>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	6003      	str	r3, [r0, #0]
 8004aaa:	e7d6      	b.n	8004a5a <_free_r+0x26>
 8004aac:	6825      	ldr	r5, [r4, #0]
 8004aae:	1961      	adds	r1, r4, r5
 8004ab0:	428b      	cmp	r3, r1
 8004ab2:	bf04      	itt	eq
 8004ab4:	6819      	ldreq	r1, [r3, #0]
 8004ab6:	685b      	ldreq	r3, [r3, #4]
 8004ab8:	6063      	str	r3, [r4, #4]
 8004aba:	bf04      	itt	eq
 8004abc:	1949      	addeq	r1, r1, r5
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	6054      	str	r4, [r2, #4]
 8004ac2:	e7ca      	b.n	8004a5a <_free_r+0x26>
 8004ac4:	b003      	add	sp, #12
 8004ac6:	bd30      	pop	{r4, r5, pc}
 8004ac8:	20000370 	.word	0x20000370

08004acc <sbrk_aligned>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4e0e      	ldr	r6, [pc, #56]	; (8004b08 <sbrk_aligned+0x3c>)
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	6831      	ldr	r1, [r6, #0]
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	b911      	cbnz	r1, 8004ade <sbrk_aligned+0x12>
 8004ad8:	f000 fba6 	bl	8005228 <_sbrk_r>
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 fba1 	bl	8005228 <_sbrk_r>
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	d00a      	beq.n	8004b00 <sbrk_aligned+0x34>
 8004aea:	1cc4      	adds	r4, r0, #3
 8004aec:	f024 0403 	bic.w	r4, r4, #3
 8004af0:	42a0      	cmp	r0, r4
 8004af2:	d007      	beq.n	8004b04 <sbrk_aligned+0x38>
 8004af4:	1a21      	subs	r1, r4, r0
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 fb96 	bl	8005228 <_sbrk_r>
 8004afc:	3001      	adds	r0, #1
 8004afe:	d101      	bne.n	8004b04 <sbrk_aligned+0x38>
 8004b00:	f04f 34ff 	mov.w	r4, #4294967295
 8004b04:	4620      	mov	r0, r4
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	20000374 	.word	0x20000374

08004b0c <_malloc_r>:
 8004b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b10:	1ccd      	adds	r5, r1, #3
 8004b12:	f025 0503 	bic.w	r5, r5, #3
 8004b16:	3508      	adds	r5, #8
 8004b18:	2d0c      	cmp	r5, #12
 8004b1a:	bf38      	it	cc
 8004b1c:	250c      	movcc	r5, #12
 8004b1e:	2d00      	cmp	r5, #0
 8004b20:	4607      	mov	r7, r0
 8004b22:	db01      	blt.n	8004b28 <_malloc_r+0x1c>
 8004b24:	42a9      	cmp	r1, r5
 8004b26:	d905      	bls.n	8004b34 <_malloc_r+0x28>
 8004b28:	230c      	movs	r3, #12
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	2600      	movs	r6, #0
 8004b2e:	4630      	mov	r0, r6
 8004b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c08 <_malloc_r+0xfc>
 8004b38:	f000 f868 	bl	8004c0c <__malloc_lock>
 8004b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b40:	461c      	mov	r4, r3
 8004b42:	bb5c      	cbnz	r4, 8004b9c <_malloc_r+0x90>
 8004b44:	4629      	mov	r1, r5
 8004b46:	4638      	mov	r0, r7
 8004b48:	f7ff ffc0 	bl	8004acc <sbrk_aligned>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	4604      	mov	r4, r0
 8004b50:	d155      	bne.n	8004bfe <_malloc_r+0xf2>
 8004b52:	f8d8 4000 	ldr.w	r4, [r8]
 8004b56:	4626      	mov	r6, r4
 8004b58:	2e00      	cmp	r6, #0
 8004b5a:	d145      	bne.n	8004be8 <_malloc_r+0xdc>
 8004b5c:	2c00      	cmp	r4, #0
 8004b5e:	d048      	beq.n	8004bf2 <_malloc_r+0xe6>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	4631      	mov	r1, r6
 8004b64:	4638      	mov	r0, r7
 8004b66:	eb04 0903 	add.w	r9, r4, r3
 8004b6a:	f000 fb5d 	bl	8005228 <_sbrk_r>
 8004b6e:	4581      	cmp	r9, r0
 8004b70:	d13f      	bne.n	8004bf2 <_malloc_r+0xe6>
 8004b72:	6821      	ldr	r1, [r4, #0]
 8004b74:	1a6d      	subs	r5, r5, r1
 8004b76:	4629      	mov	r1, r5
 8004b78:	4638      	mov	r0, r7
 8004b7a:	f7ff ffa7 	bl	8004acc <sbrk_aligned>
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d037      	beq.n	8004bf2 <_malloc_r+0xe6>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	442b      	add	r3, r5
 8004b86:	6023      	str	r3, [r4, #0]
 8004b88:	f8d8 3000 	ldr.w	r3, [r8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d038      	beq.n	8004c02 <_malloc_r+0xf6>
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	42a2      	cmp	r2, r4
 8004b94:	d12b      	bne.n	8004bee <_malloc_r+0xe2>
 8004b96:	2200      	movs	r2, #0
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	e00f      	b.n	8004bbc <_malloc_r+0xb0>
 8004b9c:	6822      	ldr	r2, [r4, #0]
 8004b9e:	1b52      	subs	r2, r2, r5
 8004ba0:	d41f      	bmi.n	8004be2 <_malloc_r+0xd6>
 8004ba2:	2a0b      	cmp	r2, #11
 8004ba4:	d917      	bls.n	8004bd6 <_malloc_r+0xca>
 8004ba6:	1961      	adds	r1, r4, r5
 8004ba8:	42a3      	cmp	r3, r4
 8004baa:	6025      	str	r5, [r4, #0]
 8004bac:	bf18      	it	ne
 8004bae:	6059      	strne	r1, [r3, #4]
 8004bb0:	6863      	ldr	r3, [r4, #4]
 8004bb2:	bf08      	it	eq
 8004bb4:	f8c8 1000 	streq.w	r1, [r8]
 8004bb8:	5162      	str	r2, [r4, r5]
 8004bba:	604b      	str	r3, [r1, #4]
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	f104 060b 	add.w	r6, r4, #11
 8004bc2:	f000 f829 	bl	8004c18 <__malloc_unlock>
 8004bc6:	f026 0607 	bic.w	r6, r6, #7
 8004bca:	1d23      	adds	r3, r4, #4
 8004bcc:	1af2      	subs	r2, r6, r3
 8004bce:	d0ae      	beq.n	8004b2e <_malloc_r+0x22>
 8004bd0:	1b9b      	subs	r3, r3, r6
 8004bd2:	50a3      	str	r3, [r4, r2]
 8004bd4:	e7ab      	b.n	8004b2e <_malloc_r+0x22>
 8004bd6:	42a3      	cmp	r3, r4
 8004bd8:	6862      	ldr	r2, [r4, #4]
 8004bda:	d1dd      	bne.n	8004b98 <_malloc_r+0x8c>
 8004bdc:	f8c8 2000 	str.w	r2, [r8]
 8004be0:	e7ec      	b.n	8004bbc <_malloc_r+0xb0>
 8004be2:	4623      	mov	r3, r4
 8004be4:	6864      	ldr	r4, [r4, #4]
 8004be6:	e7ac      	b.n	8004b42 <_malloc_r+0x36>
 8004be8:	4634      	mov	r4, r6
 8004bea:	6876      	ldr	r6, [r6, #4]
 8004bec:	e7b4      	b.n	8004b58 <_malloc_r+0x4c>
 8004bee:	4613      	mov	r3, r2
 8004bf0:	e7cc      	b.n	8004b8c <_malloc_r+0x80>
 8004bf2:	230c      	movs	r3, #12
 8004bf4:	603b      	str	r3, [r7, #0]
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	f000 f80e 	bl	8004c18 <__malloc_unlock>
 8004bfc:	e797      	b.n	8004b2e <_malloc_r+0x22>
 8004bfe:	6025      	str	r5, [r4, #0]
 8004c00:	e7dc      	b.n	8004bbc <_malloc_r+0xb0>
 8004c02:	605b      	str	r3, [r3, #4]
 8004c04:	deff      	udf	#255	; 0xff
 8004c06:	bf00      	nop
 8004c08:	20000370 	.word	0x20000370

08004c0c <__malloc_lock>:
 8004c0c:	4801      	ldr	r0, [pc, #4]	; (8004c14 <__malloc_lock+0x8>)
 8004c0e:	f7ff bf0f 	b.w	8004a30 <__retarget_lock_acquire_recursive>
 8004c12:	bf00      	nop
 8004c14:	2000036c 	.word	0x2000036c

08004c18 <__malloc_unlock>:
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <__malloc_unlock+0x8>)
 8004c1a:	f7ff bf0a 	b.w	8004a32 <__retarget_lock_release_recursive>
 8004c1e:	bf00      	nop
 8004c20:	2000036c 	.word	0x2000036c

08004c24 <__ssputs_r>:
 8004c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	688e      	ldr	r6, [r1, #8]
 8004c2a:	461f      	mov	r7, r3
 8004c2c:	42be      	cmp	r6, r7
 8004c2e:	680b      	ldr	r3, [r1, #0]
 8004c30:	4682      	mov	sl, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	4690      	mov	r8, r2
 8004c36:	d82c      	bhi.n	8004c92 <__ssputs_r+0x6e>
 8004c38:	898a      	ldrh	r2, [r1, #12]
 8004c3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c3e:	d026      	beq.n	8004c8e <__ssputs_r+0x6a>
 8004c40:	6965      	ldr	r5, [r4, #20]
 8004c42:	6909      	ldr	r1, [r1, #16]
 8004c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c48:	eba3 0901 	sub.w	r9, r3, r1
 8004c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c50:	1c7b      	adds	r3, r7, #1
 8004c52:	444b      	add	r3, r9
 8004c54:	106d      	asrs	r5, r5, #1
 8004c56:	429d      	cmp	r5, r3
 8004c58:	bf38      	it	cc
 8004c5a:	461d      	movcc	r5, r3
 8004c5c:	0553      	lsls	r3, r2, #21
 8004c5e:	d527      	bpl.n	8004cb0 <__ssputs_r+0x8c>
 8004c60:	4629      	mov	r1, r5
 8004c62:	f7ff ff53 	bl	8004b0c <_malloc_r>
 8004c66:	4606      	mov	r6, r0
 8004c68:	b360      	cbz	r0, 8004cc4 <__ssputs_r+0xa0>
 8004c6a:	6921      	ldr	r1, [r4, #16]
 8004c6c:	464a      	mov	r2, r9
 8004c6e:	f000 faeb 	bl	8005248 <memcpy>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7c:	81a3      	strh	r3, [r4, #12]
 8004c7e:	6126      	str	r6, [r4, #16]
 8004c80:	6165      	str	r5, [r4, #20]
 8004c82:	444e      	add	r6, r9
 8004c84:	eba5 0509 	sub.w	r5, r5, r9
 8004c88:	6026      	str	r6, [r4, #0]
 8004c8a:	60a5      	str	r5, [r4, #8]
 8004c8c:	463e      	mov	r6, r7
 8004c8e:	42be      	cmp	r6, r7
 8004c90:	d900      	bls.n	8004c94 <__ssputs_r+0x70>
 8004c92:	463e      	mov	r6, r7
 8004c94:	6820      	ldr	r0, [r4, #0]
 8004c96:	4632      	mov	r2, r6
 8004c98:	4641      	mov	r1, r8
 8004c9a:	f000 faab 	bl	80051f4 <memmove>
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	1b9b      	subs	r3, r3, r6
 8004ca2:	60a3      	str	r3, [r4, #8]
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	4433      	add	r3, r6
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	2000      	movs	r0, #0
 8004cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb0:	462a      	mov	r2, r5
 8004cb2:	f000 fad7 	bl	8005264 <_realloc_r>
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d1e0      	bne.n	8004c7e <__ssputs_r+0x5a>
 8004cbc:	6921      	ldr	r1, [r4, #16]
 8004cbe:	4650      	mov	r0, sl
 8004cc0:	f7ff feb8 	bl	8004a34 <_free_r>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	f8ca 3000 	str.w	r3, [sl]
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd6:	e7e9      	b.n	8004cac <__ssputs_r+0x88>

08004cd8 <_svfiprintf_r>:
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	4698      	mov	r8, r3
 8004cde:	898b      	ldrh	r3, [r1, #12]
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	b09d      	sub	sp, #116	; 0x74
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	460d      	mov	r5, r1
 8004ce8:	4614      	mov	r4, r2
 8004cea:	d50e      	bpl.n	8004d0a <_svfiprintf_r+0x32>
 8004cec:	690b      	ldr	r3, [r1, #16]
 8004cee:	b963      	cbnz	r3, 8004d0a <_svfiprintf_r+0x32>
 8004cf0:	2140      	movs	r1, #64	; 0x40
 8004cf2:	f7ff ff0b 	bl	8004b0c <_malloc_r>
 8004cf6:	6028      	str	r0, [r5, #0]
 8004cf8:	6128      	str	r0, [r5, #16]
 8004cfa:	b920      	cbnz	r0, 8004d06 <_svfiprintf_r+0x2e>
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	e0d0      	b.n	8004ea8 <_svfiprintf_r+0x1d0>
 8004d06:	2340      	movs	r3, #64	; 0x40
 8004d08:	616b      	str	r3, [r5, #20]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d0e:	2320      	movs	r3, #32
 8004d10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d14:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d18:	2330      	movs	r3, #48	; 0x30
 8004d1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ec0 <_svfiprintf_r+0x1e8>
 8004d1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d22:	f04f 0901 	mov.w	r9, #1
 8004d26:	4623      	mov	r3, r4
 8004d28:	469a      	mov	sl, r3
 8004d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d2e:	b10a      	cbz	r2, 8004d34 <_svfiprintf_r+0x5c>
 8004d30:	2a25      	cmp	r2, #37	; 0x25
 8004d32:	d1f9      	bne.n	8004d28 <_svfiprintf_r+0x50>
 8004d34:	ebba 0b04 	subs.w	fp, sl, r4
 8004d38:	d00b      	beq.n	8004d52 <_svfiprintf_r+0x7a>
 8004d3a:	465b      	mov	r3, fp
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4638      	mov	r0, r7
 8004d42:	f7ff ff6f 	bl	8004c24 <__ssputs_r>
 8004d46:	3001      	adds	r0, #1
 8004d48:	f000 80a9 	beq.w	8004e9e <_svfiprintf_r+0x1c6>
 8004d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d4e:	445a      	add	r2, fp
 8004d50:	9209      	str	r2, [sp, #36]	; 0x24
 8004d52:	f89a 3000 	ldrb.w	r3, [sl]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80a1 	beq.w	8004e9e <_svfiprintf_r+0x1c6>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d66:	f10a 0a01 	add.w	sl, sl, #1
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	9307      	str	r3, [sp, #28]
 8004d6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d72:	931a      	str	r3, [sp, #104]	; 0x68
 8004d74:	4654      	mov	r4, sl
 8004d76:	2205      	movs	r2, #5
 8004d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d7c:	4850      	ldr	r0, [pc, #320]	; (8004ec0 <_svfiprintf_r+0x1e8>)
 8004d7e:	f7fb fa4f 	bl	8000220 <memchr>
 8004d82:	9a04      	ldr	r2, [sp, #16]
 8004d84:	b9d8      	cbnz	r0, 8004dbe <_svfiprintf_r+0xe6>
 8004d86:	06d0      	lsls	r0, r2, #27
 8004d88:	bf44      	itt	mi
 8004d8a:	2320      	movmi	r3, #32
 8004d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d90:	0711      	lsls	r1, r2, #28
 8004d92:	bf44      	itt	mi
 8004d94:	232b      	movmi	r3, #43	; 0x2b
 8004d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004da0:	d015      	beq.n	8004dce <_svfiprintf_r+0xf6>
 8004da2:	9a07      	ldr	r2, [sp, #28]
 8004da4:	4654      	mov	r4, sl
 8004da6:	2000      	movs	r0, #0
 8004da8:	f04f 0c0a 	mov.w	ip, #10
 8004dac:	4621      	mov	r1, r4
 8004dae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004db2:	3b30      	subs	r3, #48	; 0x30
 8004db4:	2b09      	cmp	r3, #9
 8004db6:	d94d      	bls.n	8004e54 <_svfiprintf_r+0x17c>
 8004db8:	b1b0      	cbz	r0, 8004de8 <_svfiprintf_r+0x110>
 8004dba:	9207      	str	r2, [sp, #28]
 8004dbc:	e014      	b.n	8004de8 <_svfiprintf_r+0x110>
 8004dbe:	eba0 0308 	sub.w	r3, r0, r8
 8004dc2:	fa09 f303 	lsl.w	r3, r9, r3
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	9304      	str	r3, [sp, #16]
 8004dca:	46a2      	mov	sl, r4
 8004dcc:	e7d2      	b.n	8004d74 <_svfiprintf_r+0x9c>
 8004dce:	9b03      	ldr	r3, [sp, #12]
 8004dd0:	1d19      	adds	r1, r3, #4
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	9103      	str	r1, [sp, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bfbb      	ittet	lt
 8004dda:	425b      	neglt	r3, r3
 8004ddc:	f042 0202 	orrlt.w	r2, r2, #2
 8004de0:	9307      	strge	r3, [sp, #28]
 8004de2:	9307      	strlt	r3, [sp, #28]
 8004de4:	bfb8      	it	lt
 8004de6:	9204      	strlt	r2, [sp, #16]
 8004de8:	7823      	ldrb	r3, [r4, #0]
 8004dea:	2b2e      	cmp	r3, #46	; 0x2e
 8004dec:	d10c      	bne.n	8004e08 <_svfiprintf_r+0x130>
 8004dee:	7863      	ldrb	r3, [r4, #1]
 8004df0:	2b2a      	cmp	r3, #42	; 0x2a
 8004df2:	d134      	bne.n	8004e5e <_svfiprintf_r+0x186>
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	1d1a      	adds	r2, r3, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	9203      	str	r2, [sp, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bfb8      	it	lt
 8004e00:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e04:	3402      	adds	r4, #2
 8004e06:	9305      	str	r3, [sp, #20]
 8004e08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ed0 <_svfiprintf_r+0x1f8>
 8004e0c:	7821      	ldrb	r1, [r4, #0]
 8004e0e:	2203      	movs	r2, #3
 8004e10:	4650      	mov	r0, sl
 8004e12:	f7fb fa05 	bl	8000220 <memchr>
 8004e16:	b138      	cbz	r0, 8004e28 <_svfiprintf_r+0x150>
 8004e18:	9b04      	ldr	r3, [sp, #16]
 8004e1a:	eba0 000a 	sub.w	r0, r0, sl
 8004e1e:	2240      	movs	r2, #64	; 0x40
 8004e20:	4082      	lsls	r2, r0
 8004e22:	4313      	orrs	r3, r2
 8004e24:	3401      	adds	r4, #1
 8004e26:	9304      	str	r3, [sp, #16]
 8004e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e2c:	4825      	ldr	r0, [pc, #148]	; (8004ec4 <_svfiprintf_r+0x1ec>)
 8004e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e32:	2206      	movs	r2, #6
 8004e34:	f7fb f9f4 	bl	8000220 <memchr>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d038      	beq.n	8004eae <_svfiprintf_r+0x1d6>
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <_svfiprintf_r+0x1f0>)
 8004e3e:	bb1b      	cbnz	r3, 8004e88 <_svfiprintf_r+0x1b0>
 8004e40:	9b03      	ldr	r3, [sp, #12]
 8004e42:	3307      	adds	r3, #7
 8004e44:	f023 0307 	bic.w	r3, r3, #7
 8004e48:	3308      	adds	r3, #8
 8004e4a:	9303      	str	r3, [sp, #12]
 8004e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4e:	4433      	add	r3, r6
 8004e50:	9309      	str	r3, [sp, #36]	; 0x24
 8004e52:	e768      	b.n	8004d26 <_svfiprintf_r+0x4e>
 8004e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e58:	460c      	mov	r4, r1
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	e7a6      	b.n	8004dac <_svfiprintf_r+0xd4>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	3401      	adds	r4, #1
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	4619      	mov	r1, r3
 8004e66:	f04f 0c0a 	mov.w	ip, #10
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e70:	3a30      	subs	r2, #48	; 0x30
 8004e72:	2a09      	cmp	r2, #9
 8004e74:	d903      	bls.n	8004e7e <_svfiprintf_r+0x1a6>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0c6      	beq.n	8004e08 <_svfiprintf_r+0x130>
 8004e7a:	9105      	str	r1, [sp, #20]
 8004e7c:	e7c4      	b.n	8004e08 <_svfiprintf_r+0x130>
 8004e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e82:	4604      	mov	r4, r0
 8004e84:	2301      	movs	r3, #1
 8004e86:	e7f0      	b.n	8004e6a <_svfiprintf_r+0x192>
 8004e88:	ab03      	add	r3, sp, #12
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	462a      	mov	r2, r5
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <_svfiprintf_r+0x1f4>)
 8004e90:	a904      	add	r1, sp, #16
 8004e92:	4638      	mov	r0, r7
 8004e94:	f3af 8000 	nop.w
 8004e98:	1c42      	adds	r2, r0, #1
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	d1d6      	bne.n	8004e4c <_svfiprintf_r+0x174>
 8004e9e:	89ab      	ldrh	r3, [r5, #12]
 8004ea0:	065b      	lsls	r3, r3, #25
 8004ea2:	f53f af2d 	bmi.w	8004d00 <_svfiprintf_r+0x28>
 8004ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea8:	b01d      	add	sp, #116	; 0x74
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	ab03      	add	r3, sp, #12
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	462a      	mov	r2, r5
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <_svfiprintf_r+0x1f4>)
 8004eb6:	a904      	add	r1, sp, #16
 8004eb8:	4638      	mov	r0, r7
 8004eba:	f000 f879 	bl	8004fb0 <_printf_i>
 8004ebe:	e7eb      	b.n	8004e98 <_svfiprintf_r+0x1c0>
 8004ec0:	08005330 	.word	0x08005330
 8004ec4:	0800533a 	.word	0x0800533a
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	08004c25 	.word	0x08004c25
 8004ed0:	08005336 	.word	0x08005336

08004ed4 <_printf_common>:
 8004ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed8:	4616      	mov	r6, r2
 8004eda:	4699      	mov	r9, r3
 8004edc:	688a      	ldr	r2, [r1, #8]
 8004ede:	690b      	ldr	r3, [r1, #16]
 8004ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	bfb8      	it	lt
 8004ee8:	4613      	movlt	r3, r2
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	b10a      	cbz	r2, 8004efa <_printf_common+0x26>
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	6033      	str	r3, [r6, #0]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	0699      	lsls	r1, r3, #26
 8004efe:	bf42      	ittt	mi
 8004f00:	6833      	ldrmi	r3, [r6, #0]
 8004f02:	3302      	addmi	r3, #2
 8004f04:	6033      	strmi	r3, [r6, #0]
 8004f06:	6825      	ldr	r5, [r4, #0]
 8004f08:	f015 0506 	ands.w	r5, r5, #6
 8004f0c:	d106      	bne.n	8004f1c <_printf_common+0x48>
 8004f0e:	f104 0a19 	add.w	sl, r4, #25
 8004f12:	68e3      	ldr	r3, [r4, #12]
 8004f14:	6832      	ldr	r2, [r6, #0]
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	42ab      	cmp	r3, r5
 8004f1a:	dc26      	bgt.n	8004f6a <_printf_common+0x96>
 8004f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f20:	1e13      	subs	r3, r2, #0
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	bf18      	it	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	0692      	lsls	r2, r2, #26
 8004f2a:	d42b      	bmi.n	8004f84 <_printf_common+0xb0>
 8004f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f30:	4649      	mov	r1, r9
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c0      	blx	r8
 8004f36:	3001      	adds	r0, #1
 8004f38:	d01e      	beq.n	8004f78 <_printf_common+0xa4>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	6922      	ldr	r2, [r4, #16]
 8004f3e:	f003 0306 	and.w	r3, r3, #6
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	bf02      	ittt	eq
 8004f46:	68e5      	ldreq	r5, [r4, #12]
 8004f48:	6833      	ldreq	r3, [r6, #0]
 8004f4a:	1aed      	subeq	r5, r5, r3
 8004f4c:	68a3      	ldr	r3, [r4, #8]
 8004f4e:	bf0c      	ite	eq
 8004f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f54:	2500      	movne	r5, #0
 8004f56:	4293      	cmp	r3, r2
 8004f58:	bfc4      	itt	gt
 8004f5a:	1a9b      	subgt	r3, r3, r2
 8004f5c:	18ed      	addgt	r5, r5, r3
 8004f5e:	2600      	movs	r6, #0
 8004f60:	341a      	adds	r4, #26
 8004f62:	42b5      	cmp	r5, r6
 8004f64:	d11a      	bne.n	8004f9c <_printf_common+0xc8>
 8004f66:	2000      	movs	r0, #0
 8004f68:	e008      	b.n	8004f7c <_printf_common+0xa8>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	4649      	mov	r1, r9
 8004f70:	4638      	mov	r0, r7
 8004f72:	47c0      	blx	r8
 8004f74:	3001      	adds	r0, #1
 8004f76:	d103      	bne.n	8004f80 <_printf_common+0xac>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f80:	3501      	adds	r5, #1
 8004f82:	e7c6      	b.n	8004f12 <_printf_common+0x3e>
 8004f84:	18e1      	adds	r1, r4, r3
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	2030      	movs	r0, #48	; 0x30
 8004f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f8e:	4422      	add	r2, r4
 8004f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f98:	3302      	adds	r3, #2
 8004f9a:	e7c7      	b.n	8004f2c <_printf_common+0x58>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	47c0      	blx	r8
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d0e6      	beq.n	8004f78 <_printf_common+0xa4>
 8004faa:	3601      	adds	r6, #1
 8004fac:	e7d9      	b.n	8004f62 <_printf_common+0x8e>
	...

08004fb0 <_printf_i>:
 8004fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb4:	7e0f      	ldrb	r7, [r1, #24]
 8004fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fb8:	2f78      	cmp	r7, #120	; 0x78
 8004fba:	4691      	mov	r9, r2
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	469a      	mov	sl, r3
 8004fc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fc6:	d807      	bhi.n	8004fd8 <_printf_i+0x28>
 8004fc8:	2f62      	cmp	r7, #98	; 0x62
 8004fca:	d80a      	bhi.n	8004fe2 <_printf_i+0x32>
 8004fcc:	2f00      	cmp	r7, #0
 8004fce:	f000 80d4 	beq.w	800517a <_printf_i+0x1ca>
 8004fd2:	2f58      	cmp	r7, #88	; 0x58
 8004fd4:	f000 80c0 	beq.w	8005158 <_printf_i+0x1a8>
 8004fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fe0:	e03a      	b.n	8005058 <_printf_i+0xa8>
 8004fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fe6:	2b15      	cmp	r3, #21
 8004fe8:	d8f6      	bhi.n	8004fd8 <_printf_i+0x28>
 8004fea:	a101      	add	r1, pc, #4	; (adr r1, 8004ff0 <_printf_i+0x40>)
 8004fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff0:	08005049 	.word	0x08005049
 8004ff4:	0800505d 	.word	0x0800505d
 8004ff8:	08004fd9 	.word	0x08004fd9
 8004ffc:	08004fd9 	.word	0x08004fd9
 8005000:	08004fd9 	.word	0x08004fd9
 8005004:	08004fd9 	.word	0x08004fd9
 8005008:	0800505d 	.word	0x0800505d
 800500c:	08004fd9 	.word	0x08004fd9
 8005010:	08004fd9 	.word	0x08004fd9
 8005014:	08004fd9 	.word	0x08004fd9
 8005018:	08004fd9 	.word	0x08004fd9
 800501c:	08005161 	.word	0x08005161
 8005020:	08005089 	.word	0x08005089
 8005024:	0800511b 	.word	0x0800511b
 8005028:	08004fd9 	.word	0x08004fd9
 800502c:	08004fd9 	.word	0x08004fd9
 8005030:	08005183 	.word	0x08005183
 8005034:	08004fd9 	.word	0x08004fd9
 8005038:	08005089 	.word	0x08005089
 800503c:	08004fd9 	.word	0x08004fd9
 8005040:	08004fd9 	.word	0x08004fd9
 8005044:	08005123 	.word	0x08005123
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	1d1a      	adds	r2, r3, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	602a      	str	r2, [r5, #0]
 8005050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005058:	2301      	movs	r3, #1
 800505a:	e09f      	b.n	800519c <_printf_i+0x1ec>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	682b      	ldr	r3, [r5, #0]
 8005060:	0607      	lsls	r7, r0, #24
 8005062:	f103 0104 	add.w	r1, r3, #4
 8005066:	6029      	str	r1, [r5, #0]
 8005068:	d501      	bpl.n	800506e <_printf_i+0xbe>
 800506a:	681e      	ldr	r6, [r3, #0]
 800506c:	e003      	b.n	8005076 <_printf_i+0xc6>
 800506e:	0646      	lsls	r6, r0, #25
 8005070:	d5fb      	bpl.n	800506a <_printf_i+0xba>
 8005072:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005076:	2e00      	cmp	r6, #0
 8005078:	da03      	bge.n	8005082 <_printf_i+0xd2>
 800507a:	232d      	movs	r3, #45	; 0x2d
 800507c:	4276      	negs	r6, r6
 800507e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005082:	485a      	ldr	r0, [pc, #360]	; (80051ec <_printf_i+0x23c>)
 8005084:	230a      	movs	r3, #10
 8005086:	e012      	b.n	80050ae <_printf_i+0xfe>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	1d19      	adds	r1, r3, #4
 800508e:	6029      	str	r1, [r5, #0]
 8005090:	0605      	lsls	r5, r0, #24
 8005092:	d501      	bpl.n	8005098 <_printf_i+0xe8>
 8005094:	681e      	ldr	r6, [r3, #0]
 8005096:	e002      	b.n	800509e <_printf_i+0xee>
 8005098:	0641      	lsls	r1, r0, #25
 800509a:	d5fb      	bpl.n	8005094 <_printf_i+0xe4>
 800509c:	881e      	ldrh	r6, [r3, #0]
 800509e:	4853      	ldr	r0, [pc, #332]	; (80051ec <_printf_i+0x23c>)
 80050a0:	2f6f      	cmp	r7, #111	; 0x6f
 80050a2:	bf0c      	ite	eq
 80050a4:	2308      	moveq	r3, #8
 80050a6:	230a      	movne	r3, #10
 80050a8:	2100      	movs	r1, #0
 80050aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ae:	6865      	ldr	r5, [r4, #4]
 80050b0:	60a5      	str	r5, [r4, #8]
 80050b2:	2d00      	cmp	r5, #0
 80050b4:	bfa2      	ittt	ge
 80050b6:	6821      	ldrge	r1, [r4, #0]
 80050b8:	f021 0104 	bicge.w	r1, r1, #4
 80050bc:	6021      	strge	r1, [r4, #0]
 80050be:	b90e      	cbnz	r6, 80050c4 <_printf_i+0x114>
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	d04b      	beq.n	800515c <_printf_i+0x1ac>
 80050c4:	4615      	mov	r5, r2
 80050c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ca:	fb03 6711 	mls	r7, r3, r1, r6
 80050ce:	5dc7      	ldrb	r7, [r0, r7]
 80050d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050d4:	4637      	mov	r7, r6
 80050d6:	42bb      	cmp	r3, r7
 80050d8:	460e      	mov	r6, r1
 80050da:	d9f4      	bls.n	80050c6 <_printf_i+0x116>
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d10b      	bne.n	80050f8 <_printf_i+0x148>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	07de      	lsls	r6, r3, #31
 80050e4:	d508      	bpl.n	80050f8 <_printf_i+0x148>
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	6861      	ldr	r1, [r4, #4]
 80050ea:	4299      	cmp	r1, r3
 80050ec:	bfde      	ittt	le
 80050ee:	2330      	movle	r3, #48	; 0x30
 80050f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050f8:	1b52      	subs	r2, r2, r5
 80050fa:	6122      	str	r2, [r4, #16]
 80050fc:	f8cd a000 	str.w	sl, [sp]
 8005100:	464b      	mov	r3, r9
 8005102:	aa03      	add	r2, sp, #12
 8005104:	4621      	mov	r1, r4
 8005106:	4640      	mov	r0, r8
 8005108:	f7ff fee4 	bl	8004ed4 <_printf_common>
 800510c:	3001      	adds	r0, #1
 800510e:	d14a      	bne.n	80051a6 <_printf_i+0x1f6>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	b004      	add	sp, #16
 8005116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	f043 0320 	orr.w	r3, r3, #32
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	4833      	ldr	r0, [pc, #204]	; (80051f0 <_printf_i+0x240>)
 8005124:	2778      	movs	r7, #120	; 0x78
 8005126:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	6829      	ldr	r1, [r5, #0]
 800512e:	061f      	lsls	r7, r3, #24
 8005130:	f851 6b04 	ldr.w	r6, [r1], #4
 8005134:	d402      	bmi.n	800513c <_printf_i+0x18c>
 8005136:	065f      	lsls	r7, r3, #25
 8005138:	bf48      	it	mi
 800513a:	b2b6      	uxthmi	r6, r6
 800513c:	07df      	lsls	r7, r3, #31
 800513e:	bf48      	it	mi
 8005140:	f043 0320 	orrmi.w	r3, r3, #32
 8005144:	6029      	str	r1, [r5, #0]
 8005146:	bf48      	it	mi
 8005148:	6023      	strmi	r3, [r4, #0]
 800514a:	b91e      	cbnz	r6, 8005154 <_printf_i+0x1a4>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	f023 0320 	bic.w	r3, r3, #32
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	2310      	movs	r3, #16
 8005156:	e7a7      	b.n	80050a8 <_printf_i+0xf8>
 8005158:	4824      	ldr	r0, [pc, #144]	; (80051ec <_printf_i+0x23c>)
 800515a:	e7e4      	b.n	8005126 <_printf_i+0x176>
 800515c:	4615      	mov	r5, r2
 800515e:	e7bd      	b.n	80050dc <_printf_i+0x12c>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	6826      	ldr	r6, [r4, #0]
 8005164:	6961      	ldr	r1, [r4, #20]
 8005166:	1d18      	adds	r0, r3, #4
 8005168:	6028      	str	r0, [r5, #0]
 800516a:	0635      	lsls	r5, r6, #24
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	d501      	bpl.n	8005174 <_printf_i+0x1c4>
 8005170:	6019      	str	r1, [r3, #0]
 8005172:	e002      	b.n	800517a <_printf_i+0x1ca>
 8005174:	0670      	lsls	r0, r6, #25
 8005176:	d5fb      	bpl.n	8005170 <_printf_i+0x1c0>
 8005178:	8019      	strh	r1, [r3, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	6123      	str	r3, [r4, #16]
 800517e:	4615      	mov	r5, r2
 8005180:	e7bc      	b.n	80050fc <_printf_i+0x14c>
 8005182:	682b      	ldr	r3, [r5, #0]
 8005184:	1d1a      	adds	r2, r3, #4
 8005186:	602a      	str	r2, [r5, #0]
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	2100      	movs	r1, #0
 800518e:	4628      	mov	r0, r5
 8005190:	f7fb f846 	bl	8000220 <memchr>
 8005194:	b108      	cbz	r0, 800519a <_printf_i+0x1ea>
 8005196:	1b40      	subs	r0, r0, r5
 8005198:	6060      	str	r0, [r4, #4]
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	2300      	movs	r3, #0
 80051a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a4:	e7aa      	b.n	80050fc <_printf_i+0x14c>
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	462a      	mov	r2, r5
 80051aa:	4649      	mov	r1, r9
 80051ac:	4640      	mov	r0, r8
 80051ae:	47d0      	blx	sl
 80051b0:	3001      	adds	r0, #1
 80051b2:	d0ad      	beq.n	8005110 <_printf_i+0x160>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	079b      	lsls	r3, r3, #30
 80051b8:	d413      	bmi.n	80051e2 <_printf_i+0x232>
 80051ba:	68e0      	ldr	r0, [r4, #12]
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	4298      	cmp	r0, r3
 80051c0:	bfb8      	it	lt
 80051c2:	4618      	movlt	r0, r3
 80051c4:	e7a6      	b.n	8005114 <_printf_i+0x164>
 80051c6:	2301      	movs	r3, #1
 80051c8:	4632      	mov	r2, r6
 80051ca:	4649      	mov	r1, r9
 80051cc:	4640      	mov	r0, r8
 80051ce:	47d0      	blx	sl
 80051d0:	3001      	adds	r0, #1
 80051d2:	d09d      	beq.n	8005110 <_printf_i+0x160>
 80051d4:	3501      	adds	r5, #1
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	9903      	ldr	r1, [sp, #12]
 80051da:	1a5b      	subs	r3, r3, r1
 80051dc:	42ab      	cmp	r3, r5
 80051de:	dcf2      	bgt.n	80051c6 <_printf_i+0x216>
 80051e0:	e7eb      	b.n	80051ba <_printf_i+0x20a>
 80051e2:	2500      	movs	r5, #0
 80051e4:	f104 0619 	add.w	r6, r4, #25
 80051e8:	e7f5      	b.n	80051d6 <_printf_i+0x226>
 80051ea:	bf00      	nop
 80051ec:	08005341 	.word	0x08005341
 80051f0:	08005352 	.word	0x08005352

080051f4 <memmove>:
 80051f4:	4288      	cmp	r0, r1
 80051f6:	b510      	push	{r4, lr}
 80051f8:	eb01 0402 	add.w	r4, r1, r2
 80051fc:	d902      	bls.n	8005204 <memmove+0x10>
 80051fe:	4284      	cmp	r4, r0
 8005200:	4623      	mov	r3, r4
 8005202:	d807      	bhi.n	8005214 <memmove+0x20>
 8005204:	1e43      	subs	r3, r0, #1
 8005206:	42a1      	cmp	r1, r4
 8005208:	d008      	beq.n	800521c <memmove+0x28>
 800520a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800520e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005212:	e7f8      	b.n	8005206 <memmove+0x12>
 8005214:	4402      	add	r2, r0
 8005216:	4601      	mov	r1, r0
 8005218:	428a      	cmp	r2, r1
 800521a:	d100      	bne.n	800521e <memmove+0x2a>
 800521c:	bd10      	pop	{r4, pc}
 800521e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005226:	e7f7      	b.n	8005218 <memmove+0x24>

08005228 <_sbrk_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d06      	ldr	r5, [pc, #24]	; (8005244 <_sbrk_r+0x1c>)
 800522c:	2300      	movs	r3, #0
 800522e:	4604      	mov	r4, r0
 8005230:	4608      	mov	r0, r1
 8005232:	602b      	str	r3, [r5, #0]
 8005234:	f7fb fe10 	bl	8000e58 <_sbrk>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_sbrk_r+0x1a>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_sbrk_r+0x1a>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	20000368 	.word	0x20000368

08005248 <memcpy>:
 8005248:	440a      	add	r2, r1
 800524a:	4291      	cmp	r1, r2
 800524c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005250:	d100      	bne.n	8005254 <memcpy+0xc>
 8005252:	4770      	bx	lr
 8005254:	b510      	push	{r4, lr}
 8005256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800525a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800525e:	4291      	cmp	r1, r2
 8005260:	d1f9      	bne.n	8005256 <memcpy+0xe>
 8005262:	bd10      	pop	{r4, pc}

08005264 <_realloc_r>:
 8005264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005268:	4680      	mov	r8, r0
 800526a:	4614      	mov	r4, r2
 800526c:	460e      	mov	r6, r1
 800526e:	b921      	cbnz	r1, 800527a <_realloc_r+0x16>
 8005270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	4611      	mov	r1, r2
 8005276:	f7ff bc49 	b.w	8004b0c <_malloc_r>
 800527a:	b92a      	cbnz	r2, 8005288 <_realloc_r+0x24>
 800527c:	f7ff fbda 	bl	8004a34 <_free_r>
 8005280:	4625      	mov	r5, r4
 8005282:	4628      	mov	r0, r5
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	f000 f81b 	bl	80052c2 <_malloc_usable_size_r>
 800528c:	4284      	cmp	r4, r0
 800528e:	4607      	mov	r7, r0
 8005290:	d802      	bhi.n	8005298 <_realloc_r+0x34>
 8005292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005296:	d812      	bhi.n	80052be <_realloc_r+0x5a>
 8005298:	4621      	mov	r1, r4
 800529a:	4640      	mov	r0, r8
 800529c:	f7ff fc36 	bl	8004b0c <_malloc_r>
 80052a0:	4605      	mov	r5, r0
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d0ed      	beq.n	8005282 <_realloc_r+0x1e>
 80052a6:	42bc      	cmp	r4, r7
 80052a8:	4622      	mov	r2, r4
 80052aa:	4631      	mov	r1, r6
 80052ac:	bf28      	it	cs
 80052ae:	463a      	movcs	r2, r7
 80052b0:	f7ff ffca 	bl	8005248 <memcpy>
 80052b4:	4631      	mov	r1, r6
 80052b6:	4640      	mov	r0, r8
 80052b8:	f7ff fbbc 	bl	8004a34 <_free_r>
 80052bc:	e7e1      	b.n	8005282 <_realloc_r+0x1e>
 80052be:	4635      	mov	r5, r6
 80052c0:	e7df      	b.n	8005282 <_realloc_r+0x1e>

080052c2 <_malloc_usable_size_r>:
 80052c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c6:	1f18      	subs	r0, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bfbc      	itt	lt
 80052cc:	580b      	ldrlt	r3, [r1, r0]
 80052ce:	18c0      	addlt	r0, r0, r3
 80052d0:	4770      	bx	lr
	...

080052d4 <_init>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr

080052e0 <_fini>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr
