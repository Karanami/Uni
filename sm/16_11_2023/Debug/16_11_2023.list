
16_11_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800af10  0800af10  0001af10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b314  0800b314  00020320  2**0
                  CONTENTS
  4 .ARM          00000008  0800b314  0800b314  0001b314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b31c  0800b31c  00020320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b31c  0800b31c  0001b31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b320  0800b320  0001b320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e0  0800b504  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000280  0800b5a4  00020280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007b8  20000320  0800b644  00020320  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000ad8  0800b644  00020ad8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bf64  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003986  00000000  00000000  0003c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001630  00000000  00000000  0003fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001498  00000000  00000000  00041270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a02e  00000000  00000000  00042708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001be84  00000000  00000000  0006c736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fce9d  00000000  00000000  000885ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00185457  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f88  00000000  00000000  001854a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000320 	.word	0x20000320
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aef8 	.word	0x0800aef8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000324 	.word	0x20000324
 800020c:	0800aef8 	.word	0x0800aef8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <bmp280Write>:

#include "BMP280.h"
#include "gpio.h"

void bmp280Write(uint8_t reg_addr , const uint8_t * reg_data , uint32_t length)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
    /* Software slave selection procedure */
    HAL_GPIO_WritePin ( SPI4_CS_GPIO_Port, SPI4_CS_Pin , GPIO_PIN_RESET ) ;
 8000efa:	2200      	movs	r2, #0
 8000efc:	2110      	movs	r1, #16
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <bmp280Write+0x48>)
 8000f00:	f001 fec8 	bl	8002c94 <HAL_GPIO_WritePin>

    /* Data exchange */
    HAL_SPI_Transmit ( BMP2_SPI , &reg_addr , BMP2_REG_ADDR_LEN , 100 ) ;
 8000f04:	f107 010f 	add.w	r1, r7, #15
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <bmp280Write+0x4c>)
 8000f0e:	f003 f998 	bl	8004242 <HAL_SPI_Transmit>
    HAL_SPI_Transmit ( BMP2_SPI , reg_data , length , 100 ) ;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <bmp280Write+0x4c>)
 8000f1c:	f003 f991 	bl	8004242 <HAL_SPI_Transmit>

    /* Disable all slaves */
    HAL_GPIO_WritePin ( SPI4_CS_GPIO_Port, SPI4_CS_Pin , GPIO_PIN_SET ) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	2110      	movs	r1, #16
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <bmp280Write+0x48>)
 8000f26:	f001 feb5 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	20000434 	.word	0x20000434

08000f3c <bmp280Read>:

void bmp280Read(uint8_t reg_addr , const uint8_t * reg_data , uint32_t length)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	73fb      	strb	r3, [r7, #15]
    /* Software slave selection procedure */
    HAL_GPIO_WritePin ( SPI4_CS_GPIO_Port, SPI4_CS_Pin , GPIO_PIN_RESET ) ;
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <bmp280Read+0x50>)
 8000f50:	f001 fea0 	bl	8002c94 <HAL_GPIO_WritePin>
    reg_addr |= 0b10000000;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]

    /* Data exchange */
    HAL_SPI_Transmit ( BMP2_SPI , &reg_addr , BMP2_REG_ADDR_LEN , 100 ) ;
 8000f5e:	f107 010f 	add.w	r1, r7, #15
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	2201      	movs	r2, #1
 8000f66:	480a      	ldr	r0, [pc, #40]	; (8000f90 <bmp280Read+0x54>)
 8000f68:	f003 f96b 	bl	8004242 <HAL_SPI_Transmit>
    HAL_SPI_Receive ( BMP2_SPI , reg_data , length , 100 ) ;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <bmp280Read+0x54>)
 8000f76:	f003 fad2 	bl	800451e <HAL_SPI_Receive>

    /* Disable all slaves */
    HAL_GPIO_WritePin ( SPI4_CS_GPIO_Port, SPI4_CS_Pin , GPIO_PIN_SET ) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <bmp280Read+0x50>)
 8000f80:	f001 fe88 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	20000434 	.word	0x20000434

08000f94 <bmp280Init>:
	uint8_t osrs_p : 3;
	uint8_t osrs_t : 3;
}Bmp280Config;

void bmp280Init()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
	Bmp280Config config =
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <bmp280Init+0x24>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	713b      	strb	r3, [r7, #4]
 8000fa0:	793b      	ldrb	r3, [r7, #4]
		.osrs_t = BMP2_osrs_t,
		.osrs_p = BMP2_osrs_p,
		.mode = BMP2_mode
	};
	uint8_t buff;
	memcpy(&buff, &config, 1);
 8000fa2:	70fb      	strb	r3, [r7, #3]
	bmp280Write(BMP2_ctrl_meas, &config, 1);
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4619      	mov	r1, r3
 8000faa:	20f4      	movs	r0, #244	; 0xf4
 8000fac:	f7ff ff9e 	bl	8000eec <bmp280Write>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	0800af10 	.word	0x0800af10

08000fbc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_ETH_Init+0x84>)
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <MX_ETH_Init+0x88>)
 8000fc4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_ETH_Init+0x8c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_ETH_Init+0x8c>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_ETH_Init+0x8c>)
 8000fd4:	22e1      	movs	r2, #225	; 0xe1
 8000fd6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_ETH_Init+0x8c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_ETH_Init+0x8c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_ETH_Init+0x8c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_ETH_Init+0x84>)
 8000fec:	4a16      	ldr	r2, [pc, #88]	; (8001048 <MX_ETH_Init+0x8c>)
 8000fee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_ETH_Init+0x84>)
 8000ff2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ff6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_ETH_Init+0x84>)
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <MX_ETH_Init+0x90>)
 8000ffc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_ETH_Init+0x84>)
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <MX_ETH_Init+0x94>)
 8001002:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_ETH_Init+0x84>)
 8001006:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800100a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_ETH_Init+0x84>)
 800100e:	f001 f96f 	bl	80022f0 <HAL_ETH_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001018:	f000 fac0 	bl	800159c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800101c:	2238      	movs	r2, #56	; 0x38
 800101e:	2100      	movs	r1, #0
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_ETH_Init+0x98>)
 8001022:	f006 fff1 	bl	8008008 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_ETH_Init+0x98>)
 8001028:	2221      	movs	r2, #33	; 0x21
 800102a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_ETH_Init+0x98>)
 800102e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001032:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_ETH_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000374 	.word	0x20000374
 8001044:	40028000 	.word	0x40028000
 8001048:	20000424 	.word	0x20000424
 800104c:	20000280 	.word	0x20000280
 8001050:	200001e0 	.word	0x200001e0
 8001054:	2000033c 	.word	0x2000033c

08001058 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08e      	sub	sp, #56	; 0x38
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a4e      	ldr	r2, [pc, #312]	; (80011b0 <HAL_ETH_MspInit+0x158>)
 8001076:	4293      	cmp	r3, r2
 8001078:	f040 8096 	bne.w	80011a8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800107c:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 8001082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
 8001088:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 800109a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
 80010b8:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	4a3a      	ldr	r2, [pc, #232]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6313      	str	r3, [r2, #48]	; 0x30
 80010d0:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001100:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 8001112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_ETH_MspInit+0x15c>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001124:	2332      	movs	r3, #50	; 0x32
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001134:	230b      	movs	r3, #11
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	481e      	ldr	r0, [pc, #120]	; (80011b8 <HAL_ETH_MspInit+0x160>)
 8001140:	f001 fbfc 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001144:	2386      	movs	r3, #134	; 0x86
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001154:	230b      	movs	r3, #11
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4817      	ldr	r0, [pc, #92]	; (80011bc <HAL_ETH_MspInit+0x164>)
 8001160:	f001 fbec 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001176:	230b      	movs	r3, #11
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	480f      	ldr	r0, [pc, #60]	; (80011c0 <HAL_ETH_MspInit+0x168>)
 8001182:	f001 fbdb 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001186:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001198:	230b      	movs	r3, #11
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <HAL_ETH_MspInit+0x16c>)
 80011a4:	f001 fbca 	bl	800293c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80011a8:	bf00      	nop
 80011aa:	3738      	adds	r7, #56	; 0x38
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40028000 	.word	0x40028000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40021800 	.word	0x40021800

080011c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011de:	4b56      	ldr	r3, [pc, #344]	; (8001338 <MX_GPIO_Init+0x170>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a55      	ldr	r2, [pc, #340]	; (8001338 <MX_GPIO_Init+0x170>)
 80011e4:	f043 0310 	orr.w	r3, r3, #16
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <MX_GPIO_Init+0x170>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b50      	ldr	r3, [pc, #320]	; (8001338 <MX_GPIO_Init+0x170>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <MX_GPIO_Init+0x170>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <MX_GPIO_Init+0x170>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <MX_GPIO_Init+0x170>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a49      	ldr	r2, [pc, #292]	; (8001338 <MX_GPIO_Init+0x170>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b47      	ldr	r3, [pc, #284]	; (8001338 <MX_GPIO_Init+0x170>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b44      	ldr	r3, [pc, #272]	; (8001338 <MX_GPIO_Init+0x170>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a43      	ldr	r2, [pc, #268]	; (8001338 <MX_GPIO_Init+0x170>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b41      	ldr	r3, [pc, #260]	; (8001338 <MX_GPIO_Init+0x170>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <MX_GPIO_Init+0x170>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a3d      	ldr	r2, [pc, #244]	; (8001338 <MX_GPIO_Init+0x170>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <MX_GPIO_Init+0x170>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	4b38      	ldr	r3, [pc, #224]	; (8001338 <MX_GPIO_Init+0x170>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a37      	ldr	r2, [pc, #220]	; (8001338 <MX_GPIO_Init+0x170>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <MX_GPIO_Init+0x170>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800126e:	4b32      	ldr	r3, [pc, #200]	; (8001338 <MX_GPIO_Init+0x170>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a31      	ldr	r2, [pc, #196]	; (8001338 <MX_GPIO_Init+0x170>)
 8001274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <MX_GPIO_Init+0x170>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2110      	movs	r1, #16
 800128a:	482c      	ldr	r0, [pc, #176]	; (800133c <MX_GPIO_Init+0x174>)
 800128c:	f001 fd02 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f244 0181 	movw	r1, #16513	; 0x4081
 8001296:	482a      	ldr	r0, [pc, #168]	; (8001340 <MX_GPIO_Init+0x178>)
 8001298:	f001 fcfc 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	4828      	ldr	r0, [pc, #160]	; (8001344 <MX_GPIO_Init+0x17c>)
 80012a2:	f001 fcf7 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80012a6:	2310      	movs	r3, #16
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	481f      	ldr	r0, [pc, #124]	; (800133c <MX_GPIO_Init+0x174>)
 80012be:	f001 fb3d 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	481b      	ldr	r0, [pc, #108]	; (8001348 <MX_GPIO_Init+0x180>)
 80012da:	f001 fb2f 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012de:	f244 0381 	movw	r3, #16513	; 0x4081
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <MX_GPIO_Init+0x178>)
 80012f8:	f001 fb20 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012fc:	2340      	movs	r3, #64	; 0x40
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_GPIO_Init+0x17c>)
 8001314:	f001 fb12 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_GPIO_Init+0x17c>)
 800132c:	f001 fb06 	bl	800293c <HAL_GPIO_Init>

}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40021000 	.word	0x40021000
 8001340:	40020400 	.word	0x40020400
 8001344:	40021800 	.word	0x40021800
 8001348:	40020800 	.word	0x40020800

0800134c <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af02      	add	r7, sp, #8
 8001352:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a28      	ldr	r2, [pc, #160]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d149      	bne.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0xa4>
	{
		uint16_t temp_b;
		uint16_t pres_b;
		bmp280Read(BMP2_osrs_t, (uint8_t*)&temp_b, 2);
 800135c:	f107 031e 	add.w	r3, r7, #30
 8001360:	2202      	movs	r2, #2
 8001362:	4619      	mov	r1, r3
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff fde9 	bl	8000f3c <bmp280Read>
		bmp280Read(BMP2_osrs_p, (uint8_t*)&pres_b, 2);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2202      	movs	r2, #2
 8001370:	4619      	mov	r1, r3
 8001372:	2001      	movs	r0, #1
 8001374:	f7ff fde2 	bl	8000f3c <bmp280Read>
		temp = temp_b * BMP2_BIT_TO_T;// * 1000;//mC*
 8001378:	8bfb      	ldrh	r3, [r7, #30]
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001382:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80013fc <HAL_TIM_PeriodElapsedCallback+0xb0>
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800138c:	edc3 7a00 	vstr	s15, [r3]
		pres = pres_b * BMP2_BIT_TO_PA;// * 1000;//mPa
 8001390:	8bbb      	ldrh	r3, [r7, #28]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001404 <HAL_TIM_PeriodElapsedCallback+0xb8>
 800139e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80013a4:	edc3 7a00 	vstr	s15, [r3]
		char buff[16];
		sprintf(buff, "%.0f;%.0f\r\n", temp, pres);
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8eb 	bl	8000588 <__aeabi_f2d>
 80013b2:	4604      	mov	r4, r0
 80013b4:	460d      	mov	r5, r1
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8e4 	bl	8000588 <__aeabi_f2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	f107 000c 	add.w	r0, r7, #12
 80013c8:	e9cd 2300 	strd	r2, r3, [sp]
 80013cc:	4622      	mov	r2, r4
 80013ce:	462b      	mov	r3, r5
 80013d0:	490e      	ldr	r1, [pc, #56]	; (800140c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80013d2:	f007 fa8b 	bl	80088ec <siprintf>
		HAL_UART_Transmit(&huart3, buff, strlen(buff), 100);
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe ff18 	bl	8000210 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f107 010c 	add.w	r1, r7, #12
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80013ec:	f005 f85c 	bl	80064a8 <HAL_UART_Transmit>
	}
}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bdb0      	pop	{r4, r5, r7, pc}
 80013f8:	200004e8 	.word	0x200004e8
 80013fc:	3ba3d70a 	.word	0x3ba3d70a
 8001400:	2000042c 	.word	0x2000042c
 8001404:	4027ae14 	.word	0x4027ae14
 8001408:	20000430 	.word	0x20000430
 800140c:	0800af14 	.word	0x0800af14
 8001410:	20000534 	.word	0x20000534

08001414 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3);
	uint8_t duty = atoi(cmd);
 800141c:	4810      	ldr	r0, [pc, #64]	; (8001460 <HAL_UART_RxCpltCallback+0x4c>)
 800141e:	f006 fdc5 	bl	8007fac <atoi>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
	if(duty > 100) duty = 100;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b64      	cmp	r3, #100	; 0x64
 800142a:	d901      	bls.n	8001430 <HAL_UART_RxCpltCallback+0x1c>
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	73fb      	strb	r3, [r7, #15]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty * 10);
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	461a      	mov	r2, r3
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_UART_RxCpltCallback+0x50>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_UART_Receive_IT(&huart3, cmd, strlen(cmd));
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <HAL_UART_RxCpltCallback+0x4c>)
 8001444:	f7fe fee4 	bl	8000210 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29b      	uxth	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	4904      	ldr	r1, [pc, #16]	; (8001460 <HAL_UART_RxCpltCallback+0x4c>)
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_UART_RxCpltCallback+0x54>)
 8001452:	f005 f8ac 	bl	80065ae <HAL_UART_Receive_IT>
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000
 8001464:	2000049c 	.word	0x2000049c
 8001468:	20000534 	.word	0x20000534

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f000 fd19 	bl	8001ea6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001474:	f000 f82a 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001478:	f7ff fea6 	bl	80011c8 <MX_GPIO_Init>
  MX_ETH_Init();
 800147c:	f7ff fd9e 	bl	8000fbc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001480:	f000 fba8 	bl	8001bd4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001484:	f000 fc3e 	bl	8001d04 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8001488:	f000 f88e 	bl	80015a8 <MX_SPI4_Init>
  MX_TIM1_Init();
 800148c:	f000 fa48 	bl	8001920 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001490:	f000 fad6 	bl	8001a40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  bmp280Init();
 8001494:	f7ff fd7e 	bl	8000f94 <bmp280Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <main+0x50>)
 800149a:	f003 fddf 	bl	800505c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800149e:	2100      	movs	r1, #0
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <main+0x54>)
 80014a2:	f003 feab 	bl	80051fc <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, cmd, strlen(cmd));
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <main+0x58>)
 80014a8:	f7fe feb2 	bl	8000210 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4904      	ldr	r1, [pc, #16]	; (80014c4 <main+0x58>)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <main+0x5c>)
 80014b6:	f005 f87a 	bl	80065ae <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <main+0x4e>
 80014bc:	200004e8 	.word	0x200004e8
 80014c0:	2000049c 	.word	0x2000049c
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000534 	.word	0x20000534

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	; 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2230      	movs	r2, #48	; 0x30
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 fd94 	bl	8008008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014f0:	f001 fd32 	bl	8002f58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <SystemClock_Config+0xc8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a26      	ldr	r2, [pc, #152]	; (8001594 <SystemClock_Config+0xc8>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <SystemClock_Config+0xc8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <SystemClock_Config+0xcc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <SystemClock_Config+0xcc>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <SystemClock_Config+0xcc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800152c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001532:	2302      	movs	r3, #2
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800153c:	2304      	movs	r3, #4
 800153e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001540:	2348      	movs	r3, #72	; 0x48
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001548:	2303      	movs	r3, #3
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fd11 	bl	8002f78 <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800155c:	f000 f81e 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2102      	movs	r1, #2
 800157c:	4618      	mov	r0, r3
 800157e:	f001 ff9f 	bl	80034c0 <HAL_RCC_ClockConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001588:	f000 f808 	bl	800159c <Error_Handler>
  }
}
 800158c:	bf00      	nop
 800158e:	3750      	adds	r7, #80	; 0x50
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <Error_Handler+0x8>
	...

080015a8 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_SPI4_Init+0x74>)
 80015ae:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <MX_SPI4_Init+0x78>)
 80015b0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_SPI4_Init+0x74>)
 80015b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_SPI4_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_SPI4_Init+0x74>)
 80015c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015c6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_SPI4_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <MX_SPI4_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_SPI4_Init+0x74>)
 80015d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015da:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_SPI4_Init+0x74>)
 80015de:	2228      	movs	r2, #40	; 0x28
 80015e0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_SPI4_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_SPI4_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_SPI4_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_SPI4_Init+0x74>)
 80015f6:	2207      	movs	r2, #7
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_SPI4_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_SPI4_Init+0x74>)
 8001602:	2208      	movs	r2, #8
 8001604:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_SPI4_Init+0x74>)
 8001608:	f002 fd70 	bl	80040ec <HAL_SPI_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001612:	f7ff ffc3 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000434 	.word	0x20000434
 8001620:	40013400 	.word	0x40013400

08001624 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_SPI_MspInit+0x7c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d127      	bne.n	8001696 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_SPI_MspInit+0x80>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <HAL_SPI_MspInit+0x80>)
 800164c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_SPI_MspInit+0x80>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_SPI_MspInit+0x80>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_SPI_MspInit+0x80>)
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_SPI_MspInit+0x80>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001676:	2364      	movs	r3, #100	; 0x64
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001686:	2305      	movs	r3, #5
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_SPI_MspInit+0x84>)
 8001692:	f001 f953 	bl	800293c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40013400 	.word	0x40013400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_MspInit+0x44>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_MspInit+0x44>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_MspInit+0x44>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_MspInit+0x44>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_MspInit+0x44>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001740:	f000 fbee 	bl	8001f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <TIM2_IRQHandler+0x10>)
 800174e:	f003 fe4f 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200004e8 	.word	0x200004e8

0800175c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <USART3_IRQHandler+0x10>)
 8001762:	f004 ff69 	bl	8006638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000534 	.word	0x20000534

08001770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_kill>:

int _kill(int pid, int sig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800178a:	f006 fc13 	bl	8007fb4 <__errno>
 800178e:	4603      	mov	r3, r0
 8001790:	2216      	movs	r2, #22
 8001792:	601a      	str	r2, [r3, #0]
  return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_exit>:

void _exit (int status)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffe7 	bl	8001780 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b2:	e7fe      	b.n	80017b2 <_exit+0x12>

080017b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e00a      	b.n	80017dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c6:	f3af 8000 	nop.w
 80017ca:	4601      	mov	r1, r0
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf0      	blt.n	80017c6 <_read+0x12>
  }

  return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e009      	b.n	8001814 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf1      	blt.n	8001800 <_write+0x12>
  }
  return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_close>:

int _close(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184e:	605a      	str	r2, [r3, #4]
  return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_isatty>:

int _isatty(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f006 fb78 	bl	8007fb4 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20050000 	.word	0x20050000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	20000498 	.word	0x20000498
 80018f8:	20000ad8 	.word	0x20000ad8

080018fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b096      	sub	sp, #88	; 0x58
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001926:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	222c      	movs	r2, #44	; 0x2c
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f006 fb5b 	bl	8008008 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001954:	4a39      	ldr	r2, [pc, #228]	; (8001a3c <MX_TIM1_Init+0x11c>)
 8001956:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <MX_TIM1_Init+0x118>)
 800195a:	2247      	movs	r2, #71	; 0x47
 800195c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000 - 1;
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001966:	f240 32e7 	movw	r2, #999	; 0x3e7
 800196a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <MX_TIM1_Init+0x118>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <MX_TIM1_Init+0x118>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800197e:	482e      	ldr	r0, [pc, #184]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001980:	f003 fbe4 	bl	800514c <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800198a:	f7ff fe07 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800199a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800199e:	4619      	mov	r1, r3
 80019a0:	4825      	ldr	r0, [pc, #148]	; (8001a38 <MX_TIM1_Init+0x118>)
 80019a2:	f004 fc09 	bl	80061b8 <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019ac:	f7ff fdf6 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b0:	2360      	movs	r3, #96	; 0x60
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019bc:	2300      	movs	r3, #0
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d0:	2200      	movs	r2, #0
 80019d2:	4619      	mov	r1, r3
 80019d4:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM1_Init+0x118>)
 80019d6:	f003 fe2b 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019e0:	f7ff fddc 	bl	800159c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001a1a:	f004 fc5b 	bl	80062d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001a24:	f7ff fdba 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001a2a:	f000 f89b 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 8001a2e:	bf00      	nop
 8001a30:	3758      	adds	r7, #88	; 0x58
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000049c 	.word	0x2000049c
 8001a3c:	40010000 	.word	0x40010000

08001a40 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a68:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a76:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a8a:	f003 fa8f 	bl	8004fac <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001a94:	f7ff fd82 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001aa6:	f003 fed7 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ab0:	f7ff fd74 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001ac2:	f004 fb79 	bl	80061b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001acc:	f7ff fd66 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200004e8 	.word	0x200004e8

08001adc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_TIM_PWM_MspInit+0x38>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10b      	bne.n	8001b06 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_TIM_PWM_MspInit+0x3c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_TIM_PWM_MspInit+0x3c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_TIM_PWM_MspInit+0x3c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40010000 	.word	0x40010000
 8001b18:	40023800 	.word	0x40023800

08001b1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2c:	d113      	bne.n	8001b56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_TIM_Base_MspInit+0x44>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_TIM_Base_MspInit+0x44>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_TIM_Base_MspInit+0x44>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	201c      	movs	r0, #28
 8001b4c:	f000 fb07 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b50:	201c      	movs	r0, #28
 8001b52:	f000 fb20 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <HAL_TIM_MspPostInit+0x64>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d11c      	bne.n	8001bc0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_TIM_MspPostInit+0x68>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_TIM_MspPostInit+0x68>)
 8001b8c:	f043 0310 	orr.w	r3, r3, #16
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_TIM_MspPostInit+0x68>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_TIM_MspPostInit+0x6c>)
 8001bbc:	f000 febe 	bl	800293c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <MX_USART3_UART_Init+0x5c>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c18:	f004 fbf8 	bl	800640c <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c22:	f7ff fcbb 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000534 	.word	0x20000534
 8001c30:	40004800 	.word	0x40004800

08001c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b0aa      	sub	sp, #168	; 0xa8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	2284      	movs	r2, #132	; 0x84
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f006 f9d7 	bl	8008008 <memset>
  if(uartHandle->Instance==USART3)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <HAL_UART_MspInit+0xc4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d144      	bne.n	8001cee <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 fe4a 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c7e:	f7ff fc8d 	bl	800159c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <HAL_UART_MspInit+0xc8>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_UART_MspInit+0xc8>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_UART_MspInit+0xc8>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_UART_MspInit+0xc8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <HAL_UART_MspInit+0xc8>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_UART_MspInit+0xc8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ccc:	2307      	movs	r3, #7
 8001cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <HAL_UART_MspInit+0xcc>)
 8001cda:	f000 fe2f 	bl	800293c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2027      	movs	r0, #39	; 0x27
 8001ce4:	f000 fa3b 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ce8:	2027      	movs	r0, #39	; 0x27
 8001cea:	f000 fa54 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cee:	bf00      	nop
 8001cf0:	37a8      	adds	r7, #168	; 0xa8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40004800 	.word	0x40004800
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020c00 	.word	0x40020c00

08001d04 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d12:	2206      	movs	r2, #6
 8001d14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d18:	2202      	movs	r2, #2
 8001d1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d24:	2202      	movs	r2, #2
 8001d26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d48:	f000 ffbd 	bl	8002cc6 <HAL_PCD_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d52:	f7ff fc23 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200005bc 	.word	0x200005bc

08001d60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0ac      	sub	sp, #176	; 0xb0
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	2284      	movs	r2, #132	; 0x84
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f006 f941 	bl	8008008 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d8e:	d159      	bne.n	8001e44 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 fdb3 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001dac:	f7ff fbf6 	bl	800159c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_PCD_MspInit+0xec>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_PCD_MspInit+0xec>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_PCD_MspInit+0xec>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dc8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001de2:	230a      	movs	r3, #10
 8001de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dec:	4619      	mov	r1, r3
 8001dee:	4818      	ldr	r0, [pc, #96]	; (8001e50 <HAL_PCD_MspInit+0xf0>)
 8001df0:	f000 fda4 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4810      	ldr	r0, [pc, #64]	; (8001e50 <HAL_PCD_MspInit+0xf0>)
 8001e10:	f000 fd94 	bl	800293c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_PCD_MspInit+0xec>)
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_PCD_MspInit+0xec>)
 8001e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1e:	6353      	str	r3, [r2, #52]	; 0x34
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_PCD_MspInit+0xec>)
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_PCD_MspInit+0xec>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_PCD_MspInit+0xec>)
 8001e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e36:	6453      	str	r3, [r2, #68]	; 0x44
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <HAL_PCD_MspInit+0xec>)
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e44:	bf00      	nop
 8001e46:	37b0      	adds	r7, #176	; 0xb0
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e5a:	490e      	ldr	r1, [pc, #56]	; (8001e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e70:	4c0b      	ldr	r4, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e7e:	f7ff fd3d 	bl	80018fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f006 f89d 	bl	8007fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7ff faf1 	bl	800146c <main>
  bx  lr    
 8001e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e98:	0800b324 	.word	0x0800b324
  ldr r2, =_sbss
 8001e9c:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8001ea0:	20000ad8 	.word	0x20000ad8

08001ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>

08001ea6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eaa:	2003      	movs	r0, #3
 8001eac:	f000 f94c 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f000 f805 	bl	8001ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb6:	f7ff fbf9 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x54>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_InitTick+0x58>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f967 	bl	80021b2 <HAL_SYSTICK_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00e      	b.n	8001f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d80a      	bhi.n	8001f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f000 f92f 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f00:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <HAL_InitTick+0x5c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e000      	b.n	8001f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000004 	.word	0x20000004
 8001f18:	2000000c 	.word	0x2000000c
 8001f1c:	20000008 	.word	0x20000008

08001f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x20>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_IncTick+0x24>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <HAL_IncTick+0x24>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	2000000c 	.word	0x2000000c
 8001f44:	20000ac4 	.word	0x20000ac4

08001f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_GetTick+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000ac4 	.word	0x20000ac4

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff ffee 	bl	8001f48 <HAL_GetTick>
 8001f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d005      	beq.n	8001f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_Delay+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f86:	bf00      	nop
 8001f88:	f7ff ffde 	bl	8001f48 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8f7      	bhi.n	8001f88 <HAL_Delay+0x28>
  {
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000000c 	.word	0x2000000c

08001fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x40>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x40>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00
 8001fec:	05fa0000 	.word	0x05fa0000

08001ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0b      	blt.n	8002036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4907      	ldr	r1, [pc, #28]	; (8002044 <__NVIC_EnableIRQ+0x38>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff29 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff3e 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff8e 	bl	800209c <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff31 	bl	800200c <__NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffa2 	bl	8002104 <SysTick_Config>
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff feb6 	bl	8001f48 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d008      	beq.n	80021fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e052      	b.n	80022a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0216 	bic.w	r2, r2, #22
 800220a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800221a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d103      	bne.n	800222c <HAL_DMA_Abort+0x62>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0208 	bic.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224c:	e013      	b.n	8002276 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800224e:	f7ff fe7b 	bl	8001f48 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b05      	cmp	r3, #5
 800225a:	d90c      	bls.n	8002276 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e015      	b.n	80022a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1e4      	bne.n	800224e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	223f      	movs	r2, #63	; 0x3f
 800228a:	409a      	lsls	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d004      	beq.n	80022c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2280      	movs	r2, #128	; 0x80
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e00c      	b.n	80022e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2205      	movs	r2, #5
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e06a      	b.n	80023d8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2223      	movs	r2, #35	; 0x23
 8002310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7fe fe9f 	bl	8001058 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_ETH_Init+0xf0>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a30      	ldr	r2, [pc, #192]	; (80023e0 <HAL_ETH_Init+0xf0>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <HAL_ETH_Init+0xf0>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <HAL_ETH_Init+0xf4>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a2b      	ldr	r2, [pc, #172]	; (80023e4 <HAL_ETH_Init+0xf4>)
 8002338:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800233c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_ETH_Init+0xf4>)
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4927      	ldr	r1, [pc, #156]	; (80023e4 <HAL_ETH_Init+0xf4>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_ETH_Init+0xf4>)
 800234e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002366:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002368:	f7ff fdee 	bl	8001f48 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800236e:	e011      	b.n	8002394 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002370:	f7ff fdea 	bl	8001f48 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800237e:	d909      	bls.n	8002394 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2204      	movs	r2, #4
 8002384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	22e0      	movs	r2, #224	; 0xe0
 800238c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e021      	b.n	80023d8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1e4      	bne.n	8002370 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f958 	bl	800265c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f9ff 	bl	80027b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa55 	bl	8002862 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	461a      	mov	r2, r3
 80023be:	2100      	movs	r1, #0
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f9bd 	bl	8002740 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2210      	movs	r2, #16
 80023d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40013800 	.word	0x40013800

080023e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4b51      	ldr	r3, [pc, #324]	; (8002544 <ETH_SetMACConfig+0x15c>)
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	7c1b      	ldrb	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <ETH_SetMACConfig+0x28>
 800240a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800240e:	e000      	b.n	8002412 <ETH_SetMACConfig+0x2a>
 8002410:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7c5b      	ldrb	r3, [r3, #17]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <ETH_SetMACConfig+0x38>
 800241a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800241e:	e000      	b.n	8002422 <ETH_SetMACConfig+0x3a>
 8002420:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002422:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002428:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	7fdb      	ldrb	r3, [r3, #31]
 800242e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002430:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002436:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	7f92      	ldrb	r2, [r2, #30]
 800243c:	2a00      	cmp	r2, #0
 800243e:	d102      	bne.n	8002446 <ETH_SetMACConfig+0x5e>
 8002440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002444:	e000      	b.n	8002448 <ETH_SetMACConfig+0x60>
 8002446:	2200      	movs	r2, #0
                        macconf->Speed |
 8002448:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	7f1b      	ldrb	r3, [r3, #28]
 800244e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002450:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002456:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800245e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002466:	2a00      	cmp	r2, #0
 8002468:	d102      	bne.n	8002470 <ETH_SetMACConfig+0x88>
 800246a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246e:	e000      	b.n	8002472 <ETH_SetMACConfig+0x8a>
 8002470:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002472:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	7bdb      	ldrb	r3, [r3, #15]
 8002478:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800247a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002480:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002488:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800248a:	4313      	orrs	r3, r2
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7ff fd5c 	bl	8001f60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024be:	4013      	ands	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024ce:	2a00      	cmp	r2, #0
 80024d0:	d101      	bne.n	80024d6 <ETH_SetMACConfig+0xee>
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	e000      	b.n	80024d8 <ETH_SetMACConfig+0xf0>
 80024d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024e6:	2a01      	cmp	r2, #1
 80024e8:	d101      	bne.n	80024ee <ETH_SetMACConfig+0x106>
 80024ea:	2208      	movs	r2, #8
 80024ec:	e000      	b.n	80024f0 <ETH_SetMACConfig+0x108>
 80024ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024f8:	2a01      	cmp	r2, #1
 80024fa:	d101      	bne.n	8002500 <ETH_SetMACConfig+0x118>
 80024fc:	2204      	movs	r2, #4
 80024fe:	e000      	b.n	8002502 <ETH_SetMACConfig+0x11a>
 8002500:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002502:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800250a:	2a01      	cmp	r2, #1
 800250c:	d101      	bne.n	8002512 <ETH_SetMACConfig+0x12a>
 800250e:	2202      	movs	r2, #2
 8002510:	e000      	b.n	8002514 <ETH_SetMACConfig+0x12c>
 8002512:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002514:	4313      	orrs	r3, r2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff fd17 	bl	8001f60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	ff20810f 	.word	0xff20810f

08002548 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <ETH_SetDMAConfig+0x110>)
 8002562:	4013      	ands	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	7b1b      	ldrb	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <ETH_SetDMAConfig+0x2c>
 800256e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002572:	e000      	b.n	8002576 <ETH_SetDMAConfig+0x2e>
 8002574:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	7b5b      	ldrb	r3, [r3, #13]
 800257a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800257c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	7f52      	ldrb	r2, [r2, #29]
 8002582:	2a00      	cmp	r2, #0
 8002584:	d102      	bne.n	800258c <ETH_SetDMAConfig+0x44>
 8002586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800258a:	e000      	b.n	800258e <ETH_SetDMAConfig+0x46>
 800258c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800258e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	7b9b      	ldrb	r3, [r3, #14]
 8002594:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002596:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800259c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7f1b      	ldrb	r3, [r3, #28]
 80025a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80025a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	7f9b      	ldrb	r3, [r3, #30]
 80025aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025bc:	4313      	orrs	r3, r2
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025cc:	461a      	mov	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff fcbe 	bl	8001f60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ec:	461a      	mov	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	791b      	ldrb	r3, [r3, #4]
 80025f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002602:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002608:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002610:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002612:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800261a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002620:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800262a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800262e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800263c:	2001      	movs	r0, #1
 800263e:	f7ff fc8f 	bl	8001f60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	f8de3f23 	.word	0xf8de3f23

0800265c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0a6      	sub	sp, #152	; 0x98
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002670:	2300      	movs	r3, #0
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800267a:	2301      	movs	r3, #1
 800267c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002698:	2300      	movs	r3, #0
 800269a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026c2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fe86 	bl	80023e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026dc:	2301      	movs	r3, #1
 80026de:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026e0:	2301      	movs	r3, #1
 80026e2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026fe:	2300      	movs	r3, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002708:	2301      	movs	r3, #1
 800270a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800270c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002710:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002716:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800271c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002724:	2300      	movs	r3, #0
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ff08 	bl	8002548 <ETH_SetDMAConfig>
}
 8002738:	bf00      	nop
 800273a:	3798      	adds	r7, #152	; 0x98
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3305      	adds	r3, #5
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	3204      	adds	r2, #4
 8002758:	7812      	ldrb	r2, [r2, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <ETH_MACAddressConfig+0x68>)
 8002762:	4413      	add	r3, r2
 8002764:	461a      	mov	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3303      	adds	r3, #3
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	061a      	lsls	r2, r3, #24
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3302      	adds	r3, #2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3301      	adds	r3, #1
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	4313      	orrs	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <ETH_MACAddressConfig+0x6c>)
 8002792:	4413      	add	r3, r2
 8002794:	461a      	mov	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	6013      	str	r3, [r2, #0]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40028040 	.word	0x40028040
 80027ac:	40028044 	.word	0x40028044

080027b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e03e      	b.n	800283c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2200      	movs	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	3206      	adds	r2, #6
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d80c      	bhi.n	8002820 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68d9      	ldr	r1, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	e004      	b.n	800282a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3301      	adds	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d9bd      	bls.n	80027be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002854:	611a      	str	r2, [r3, #16]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e046      	b.n	80028fe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6919      	ldr	r1, [r3, #16]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80028b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	3212      	adds	r2, #18
 80028ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d80c      	bhi.n	80028ee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6919      	ldr	r1, [r3, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e004      	b.n	80028f8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3301      	adds	r3, #1
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d9b5      	bls.n	8002870 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292e:	60da      	str	r2, [r3, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e175      	b.n	8002c48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8164 	bne.w	8002c42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <HAL_GPIO_Init+0x56>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d130      	bne.n	80029f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0201 	and.w	r2, r3, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d017      	beq.n	8002a30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d123      	bne.n	8002a84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80be 	beq.w	8002c42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_GPIO_Init+0x324>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_GPIO_Init+0x324>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_GPIO_Init+0x324>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ade:	4a61      	ldr	r2, [pc, #388]	; (8002c64 <HAL_GPIO_Init+0x328>)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	220f      	movs	r2, #15
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_GPIO_Init+0x32c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d037      	beq.n	8002b7a <HAL_GPIO_Init+0x23e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <HAL_GPIO_Init+0x330>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d031      	beq.n	8002b76 <HAL_GPIO_Init+0x23a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a56      	ldr	r2, [pc, #344]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02b      	beq.n	8002b72 <HAL_GPIO_Init+0x236>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a55      	ldr	r2, [pc, #340]	; (8002c74 <HAL_GPIO_Init+0x338>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d025      	beq.n	8002b6e <HAL_GPIO_Init+0x232>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <HAL_GPIO_Init+0x33c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01f      	beq.n	8002b6a <HAL_GPIO_Init+0x22e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a53      	ldr	r2, [pc, #332]	; (8002c7c <HAL_GPIO_Init+0x340>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d019      	beq.n	8002b66 <HAL_GPIO_Init+0x22a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_GPIO_Init+0x344>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_GPIO_Init+0x226>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a51      	ldr	r2, [pc, #324]	; (8002c84 <HAL_GPIO_Init+0x348>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00d      	beq.n	8002b5e <HAL_GPIO_Init+0x222>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a50      	ldr	r2, [pc, #320]	; (8002c88 <HAL_GPIO_Init+0x34c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <HAL_GPIO_Init+0x21e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <HAL_GPIO_Init+0x350>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_GPIO_Init+0x21a>
 8002b52:	2309      	movs	r3, #9
 8002b54:	e012      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b56:	230a      	movs	r3, #10
 8002b58:	e010      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	e00e      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b5e:	2307      	movs	r3, #7
 8002b60:	e00c      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b62:	2306      	movs	r3, #6
 8002b64:	e00a      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b66:	2305      	movs	r3, #5
 8002b68:	e008      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e004      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e002      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f002 0203 	and.w	r2, r2, #3
 8002b82:	0092      	lsls	r2, r2, #2
 8002b84:	4093      	lsls	r3, r2
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b8c:	4935      	ldr	r1, [pc, #212]	; (8002c64 <HAL_GPIO_Init+0x328>)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	3302      	adds	r3, #2
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bbe:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be8:	4a29      	ldr	r2, [pc, #164]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c12:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c3c:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3301      	adds	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	f67f ae86 	bls.w	800295c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40013800 	.word	0x40013800
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40021400 	.word	0x40021400
 8002c80:	40021800 	.word	0x40021800
 8002c84:	40021c00 	.word	0x40021c00
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40022400 	.word	0x40022400
 8002c90:	40013c00 	.word	0x40013c00

08002c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cb0:	e003      	b.n	8002cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	041a      	lsls	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc8:	b08f      	sub	sp, #60	; 0x3c
 8002cca:	af0a      	add	r7, sp, #40	; 0x28
 8002ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e116      	b.n	8002f06 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff f834 	bl	8001d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 feac 	bl	8007a74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	687e      	ldr	r6, [r7, #4]
 8002d24:	466d      	mov	r5, sp
 8002d26:	f106 0410 	add.w	r4, r6, #16
 8002d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d3a:	1d33      	adds	r3, r6, #4
 8002d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3e:	6838      	ldr	r0, [r7, #0]
 8002d40:	f004 fe40 	bl	80079c4 <USB_CoreInit>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0d7      	b.n	8002f06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 fe9a 	bl	8007a96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	e04a      	b.n	8002dfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	333d      	adds	r3, #61	; 0x3d
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	333c      	adds	r3, #60	; 0x3c
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	b298      	uxth	r0, r3
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3344      	adds	r3, #68	; 0x44
 8002da4:	4602      	mov	r2, r0
 8002da6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3340      	adds	r3, #64	; 0x40
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3348      	adds	r3, #72	; 0x48
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	334c      	adds	r3, #76	; 0x4c
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	3354      	adds	r3, #84	; 0x54
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3af      	bcc.n	8002d68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	e044      	b.n	8002e98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	3301      	adds	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3b5      	bcc.n	8002e0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	687e      	ldr	r6, [r7, #4]
 8002eaa:	466d      	mov	r5, sp
 8002eac:	f106 0410 	add.w	r4, r6, #16
 8002eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ebc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ec0:	1d33      	adds	r3, r6, #4
 8002ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec4:	6838      	ldr	r0, [r7, #0]
 8002ec6:	f004 fe33 	bl	8007b30 <USB_DevInit>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e014      	b.n	8002f06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d102      	bne.n	8002efa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f80b 	bl	8002f10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 fff1 	bl	8007ee6 <USB_DevDisconnect>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	10000003 	.word	0x10000003

08002f58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40007000 	.word	0x40007000

08002f78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f80:	2300      	movs	r3, #0
 8002f82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e291      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8087 	beq.w	80030aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f9c:	4b96      	ldr	r3, [pc, #600]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d00c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa8:	4b93      	ldr	r3, [pc, #588]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d112      	bne.n	8002fda <HAL_RCC_OscConfig+0x62>
 8002fb4:	4b90      	ldr	r3, [pc, #576]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc0:	d10b      	bne.n	8002fda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc2:	4b8d      	ldr	r3, [pc, #564]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d06c      	beq.n	80030a8 <HAL_RCC_OscConfig+0x130>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d168      	bne.n	80030a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e26b      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x7a>
 8002fe4:	4b84      	ldr	r3, [pc, #528]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a83      	ldr	r2, [pc, #524]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e02e      	b.n	8003050 <HAL_RCC_OscConfig+0xd8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x9c>
 8002ffa:	4b7f      	ldr	r3, [pc, #508]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a7e      	ldr	r2, [pc, #504]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b7c      	ldr	r3, [pc, #496]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a7b      	ldr	r2, [pc, #492]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 800300c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e01d      	b.n	8003050 <HAL_RCC_OscConfig+0xd8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0xc0>
 800301e:	4b76      	ldr	r3, [pc, #472]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a75      	ldr	r2, [pc, #468]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b73      	ldr	r3, [pc, #460]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a72      	ldr	r2, [pc, #456]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0xd8>
 8003038:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a6e      	ldr	r2, [pc, #440]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 800303e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b6c      	ldr	r3, [pc, #432]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a6b      	ldr	r2, [pc, #428]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 800304a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d013      	beq.n	8003080 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe ff76 	bl	8001f48 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7fe ff72 	bl	8001f48 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e21f      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0xe8>
 800307e:	e014      	b.n	80030aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe ff62 	bl	8001f48 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003088:	f7fe ff5e 	bl	8001f48 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e20b      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	4b57      	ldr	r3, [pc, #348]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x110>
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d069      	beq.n	800318a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030b6:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c2:	4b4d      	ldr	r3, [pc, #308]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d11c      	bne.n	8003108 <HAL_RCC_OscConfig+0x190>
 80030ce:	4b4a      	ldr	r3, [pc, #296]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_RCC_OscConfig+0x17a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e1df      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	493d      	ldr	r1, [pc, #244]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003106:	e040      	b.n	800318a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d023      	beq.n	8003158 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a38      	ldr	r2, [pc, #224]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe ff14 	bl	8001f48 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003124:	f7fe ff10 	bl	8001f48 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e1bd      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003136:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4929      	ldr	r1, [pc, #164]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
 8003156:	e018      	b.n	800318a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fef0 	bl	8001f48 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316c:	f7fe feec 	bl	8001f48 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e199      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d038      	beq.n	8003208 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d019      	beq.n	80031d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031aa:	f7fe fecd 	bl	8001f48 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b2:	f7fe fec9 	bl	8001f48 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e176      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80031c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x23a>
 80031d0:	e01a      	b.n	8003208 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <HAL_RCC_OscConfig+0x280>)
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7fe feb3 	bl	8001f48 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e6:	f7fe feaf 	bl	8001f48 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d903      	bls.n	80031fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e15c      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
 80031f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	4b91      	ldr	r3, [pc, #580]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ee      	bne.n	80031e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a4 	beq.w	800335e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003216:	4b8b      	ldr	r3, [pc, #556]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4a87      	ldr	r2, [pc, #540]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322c:	6413      	str	r3, [r2, #64]	; 0x40
 800322e:	4b85      	ldr	r3, [pc, #532]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323e:	4b82      	ldr	r3, [pc, #520]	; (8003448 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d118      	bne.n	800327c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <HAL_RCC_OscConfig+0x4d0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7e      	ldr	r2, [pc, #504]	; (8003448 <HAL_RCC_OscConfig+0x4d0>)
 8003250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003256:	f7fe fe77 	bl	8001f48 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325e:	f7fe fe73 	bl	8001f48 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b64      	cmp	r3, #100	; 0x64
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e120      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003270:	4b75      	ldr	r3, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x4d0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x31a>
 8003284:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a6e      	ldr	r2, [pc, #440]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	e02d      	b.n	80032ee <HAL_RCC_OscConfig+0x376>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x33c>
 800329a:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a69      	ldr	r2, [pc, #420]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
 80032a6:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a66      	ldr	r2, [pc, #408]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70
 80032b2:	e01c      	b.n	80032ee <HAL_RCC_OscConfig+0x376>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d10c      	bne.n	80032d6 <HAL_RCC_OscConfig+0x35e>
 80032bc:	4b61      	ldr	r3, [pc, #388]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	4a60      	ldr	r2, [pc, #384]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	6713      	str	r3, [r2, #112]	; 0x70
 80032c8:	4b5e      	ldr	r3, [pc, #376]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a5d      	ldr	r2, [pc, #372]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
 80032d4:	e00b      	b.n	80032ee <HAL_RCC_OscConfig+0x376>
 80032d6:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a5a      	ldr	r2, [pc, #360]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
 80032e2:	4b58      	ldr	r3, [pc, #352]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a57      	ldr	r2, [pc, #348]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80032e8:	f023 0304 	bic.w	r3, r3, #4
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d015      	beq.n	8003322 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f6:	f7fe fe27 	bl	8001f48 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7fe fe23 	bl	8001f48 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0ce      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ee      	beq.n	80032fe <HAL_RCC_OscConfig+0x386>
 8003320:	e014      	b.n	800334c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7fe fe11 	bl	8001f48 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7fe fe0d 	bl	8001f48 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0b8      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	4b40      	ldr	r3, [pc, #256]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ee      	bne.n	800332a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800334c:	7dfb      	ldrb	r3, [r7, #23]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d105      	bne.n	800335e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003352:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a3b      	ldr	r2, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 80a4 	beq.w	80034b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003368:	4b36      	ldr	r3, [pc, #216]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b08      	cmp	r3, #8
 8003372:	d06b      	beq.n	800344c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d149      	bne.n	8003410 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337c:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a30      	ldr	r2, [pc, #192]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fe fdde 	bl	8001f48 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003390:	f7fe fdda 	bl	8001f48 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e087      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	019b      	lsls	r3, r3, #6
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	3b01      	subs	r3, #1
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	4313      	orrs	r3, r2
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe fdae 	bl	8001f48 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fdaa 	bl	8001f48 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e057      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x478>
 800340e:	e04f      	b.n	80034b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe fd94 	bl	8001f48 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003424:	f7fe fd90 	bl	8001f48 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e03d      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x4ac>
 8003442:	e035      	b.n	80034b0 <HAL_RCC_OscConfig+0x538>
 8003444:	40023800 	.word	0x40023800
 8003448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_RCC_OscConfig+0x544>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d028      	beq.n	80034ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d121      	bne.n	80034ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d11a      	bne.n	80034ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003482:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003484:	4293      	cmp	r3, r2
 8003486:	d111      	bne.n	80034ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	3b01      	subs	r3, #1
 8003496:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d107      	bne.n	80034ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800

080034c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0d0      	b.n	800367a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d910      	bls.n	8003508 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 020f 	bic.w	r2, r3, #15
 80034ee:	4965      	ldr	r1, [pc, #404]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b63      	ldr	r3, [pc, #396]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0b8      	b.n	800367a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d020      	beq.n	8003556 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003520:	4b59      	ldr	r3, [pc, #356]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800352a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a52      	ldr	r2, [pc, #328]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 800353e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003542:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	494d      	ldr	r1, [pc, #308]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d040      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e07f      	b.n	800367a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e073      	b.n	800367a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e06b      	b.n	800367a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b39      	ldr	r3, [pc, #228]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4936      	ldr	r1, [pc, #216]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b4:	f7fe fcc8 	bl	8001f48 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fe fcc4 	bl	8001f48 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e053      	b.n	800367a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d210      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 020f 	bic.w	r2, r3, #15
 80035fa:	4922      	ldr	r1, [pc, #136]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e032      	b.n	800367a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4916      	ldr	r1, [pc, #88]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	490e      	ldr	r1, [pc, #56]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003652:	f000 f821 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8003656:	4602      	mov	r2, r0
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	490a      	ldr	r1, [pc, #40]	; (800368c <HAL_RCC_ClockConfig+0x1cc>)
 8003664:	5ccb      	ldrb	r3, [r1, r3]
 8003666:	fa22 f303 	lsr.w	r3, r2, r3
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x1d0>)
 800366c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1d4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fc24 	bl	8001ec0 <HAL_InitTick>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023c00 	.word	0x40023c00
 8003688:	40023800 	.word	0x40023800
 800368c:	0800af20 	.word	0x0800af20
 8003690:	20000004 	.word	0x20000004
 8003694:	20000008 	.word	0x20000008

08003698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800369c:	b094      	sub	sp, #80	; 0x50
 800369e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	647b      	str	r3, [r7, #68]	; 0x44
 80036a4:	2300      	movs	r3, #0
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a8:	2300      	movs	r3, #0
 80036aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b0:	4b79      	ldr	r3, [pc, #484]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d00d      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x40>
 80036bc:	2b08      	cmp	r3, #8
 80036be:	f200 80e1 	bhi.w	8003884 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x34>
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d003      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ca:	e0db      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b73      	ldr	r3, [pc, #460]	; (800389c <HAL_RCC_GetSysClockFreq+0x204>)
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036d0:	e0db      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d2:	4b73      	ldr	r3, [pc, #460]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80036d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036d6:	e0d8      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d8:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036e2:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d063      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ee:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	2200      	movs	r2, #0
 80036f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003700:	633b      	str	r3, [r7, #48]	; 0x30
 8003702:	2300      	movs	r3, #0
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
 8003706:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800370a:	4622      	mov	r2, r4
 800370c:	462b      	mov	r3, r5
 800370e:	f04f 0000 	mov.w	r0, #0
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	0159      	lsls	r1, r3, #5
 8003718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371c:	0150      	lsls	r0, r2, #5
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4621      	mov	r1, r4
 8003724:	1a51      	subs	r1, r2, r1
 8003726:	6139      	str	r1, [r7, #16]
 8003728:	4629      	mov	r1, r5
 800372a:	eb63 0301 	sbc.w	r3, r3, r1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800373c:	4659      	mov	r1, fp
 800373e:	018b      	lsls	r3, r1, #6
 8003740:	4651      	mov	r1, sl
 8003742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003746:	4651      	mov	r1, sl
 8003748:	018a      	lsls	r2, r1, #6
 800374a:	4651      	mov	r1, sl
 800374c:	ebb2 0801 	subs.w	r8, r2, r1
 8003750:	4659      	mov	r1, fp
 8003752:	eb63 0901 	sbc.w	r9, r3, r1
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800376a:	4690      	mov	r8, r2
 800376c:	4699      	mov	r9, r3
 800376e:	4623      	mov	r3, r4
 8003770:	eb18 0303 	adds.w	r3, r8, r3
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	462b      	mov	r3, r5
 8003778:	eb49 0303 	adc.w	r3, r9, r3
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800378a:	4629      	mov	r1, r5
 800378c:	024b      	lsls	r3, r1, #9
 800378e:	4621      	mov	r1, r4
 8003790:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003794:	4621      	mov	r1, r4
 8003796:	024a      	lsls	r2, r1, #9
 8003798:	4610      	mov	r0, r2
 800379a:	4619      	mov	r1, r3
 800379c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379e:	2200      	movs	r2, #0
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037a8:	f7fd fa1e 	bl	8000be8 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4613      	mov	r3, r2
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b4:	e058      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b6:	4b38      	ldr	r3, [pc, #224]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	2200      	movs	r2, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	4611      	mov	r1, r2
 80037c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	2300      	movs	r3, #0
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
 80037cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037d0:	4642      	mov	r2, r8
 80037d2:	464b      	mov	r3, r9
 80037d4:	f04f 0000 	mov.w	r0, #0
 80037d8:	f04f 0100 	mov.w	r1, #0
 80037dc:	0159      	lsls	r1, r3, #5
 80037de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e2:	0150      	lsls	r0, r2, #5
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4641      	mov	r1, r8
 80037ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003800:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003804:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003808:	ebb2 040a 	subs.w	r4, r2, sl
 800380c:	eb63 050b 	sbc.w	r5, r3, fp
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	00eb      	lsls	r3, r5, #3
 800381a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381e:	00e2      	lsls	r2, r4, #3
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	4643      	mov	r3, r8
 8003826:	18e3      	adds	r3, r4, r3
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	464b      	mov	r3, r9
 800382c:	eb45 0303 	adc.w	r3, r5, r3
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800383e:	4629      	mov	r1, r5
 8003840:	028b      	lsls	r3, r1, #10
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003848:	4621      	mov	r1, r4
 800384a:	028a      	lsls	r2, r1, #10
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003852:	2200      	movs	r2, #0
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	61fa      	str	r2, [r7, #28]
 8003858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800385c:	f7fd f9c4 	bl	8000be8 <__aeabi_uldivmod>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4613      	mov	r3, r2
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	3301      	adds	r3, #1
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800387a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003882:	e002      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_GetSysClockFreq+0x204>)
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800388a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800388c:	4618      	mov	r0, r3
 800388e:	3750      	adds	r7, #80	; 0x50
 8003890:	46bd      	mov	sp, r7
 8003892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	007a1200 	.word	0x007a1200

080038a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000004 	.word	0x20000004

080038bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038c0:	f7ff fff0 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	0a9b      	lsrs	r3, r3, #10
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4903      	ldr	r1, [pc, #12]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40023800 	.word	0x40023800
 80038e0:	0800af30 	.word	0x0800af30

080038e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038e8:	f7ff ffdc 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	0b5b      	lsrs	r3, r3, #13
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40023800 	.word	0x40023800
 8003908:	0800af30 	.word	0x0800af30

0800390c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d012      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003934:	4b69      	ldr	r3, [pc, #420]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a68      	ldr	r2, [pc, #416]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800393e:	6093      	str	r3, [r2, #8]
 8003940:	4b66      	ldr	r3, [pc, #408]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	4964      	ldr	r1, [pc, #400]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003956:	2301      	movs	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d017      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003966:	4b5d      	ldr	r3, [pc, #372]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	4959      	ldr	r1, [pc, #356]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003984:	d101      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003986:	2301      	movs	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003992:	2301      	movs	r3, #1
 8003994:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d017      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039a2:	4b4e      	ldr	r3, [pc, #312]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	494a      	ldr	r1, [pc, #296]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c0:	d101      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039c2:	2301      	movs	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039de:	2301      	movs	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 808b 	beq.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b3a      	ldr	r3, [pc, #232]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	4a39      	ldr	r2, [pc, #228]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fa:	6413      	str	r3, [r2, #64]	; 0x40
 80039fc:	4b37      	ldr	r3, [pc, #220]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a08:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a34      	ldr	r2, [pc, #208]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fe fa98 	bl	8001f48 <HAL_GetTick>
 8003a18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fe fa94 	bl	8001f48 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e357      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3a:	4b28      	ldr	r3, [pc, #160]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d035      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d02e      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a58:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a7a:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a80:	4b16      	ldr	r3, [pc, #88]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d114      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fa5c 	bl	8001f48 <HAL_GetTick>
 8003a90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fe fa58 	bl	8001f48 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e319      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ee      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac2:	d111      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ad2:	400b      	ands	r3, r1
 8003ad4:	4901      	ldr	r1, [pc, #4]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40007000 	.word	0x40007000
 8003ae4:	0ffffcff 	.word	0x0ffffcff
 8003ae8:	4baa      	ldr	r3, [pc, #680]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4aa9      	ldr	r2, [pc, #676]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003af2:	6093      	str	r3, [r2, #8]
 8003af4:	4ba7      	ldr	r3, [pc, #668]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b00:	49a4      	ldr	r1, [pc, #656]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d010      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b12:	4ba0      	ldr	r3, [pc, #640]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b18:	4a9e      	ldr	r2, [pc, #632]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b22:	4b9c      	ldr	r3, [pc, #624]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	4999      	ldr	r1, [pc, #612]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b40:	4b94      	ldr	r3, [pc, #592]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4e:	4991      	ldr	r1, [pc, #580]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b62:	4b8c      	ldr	r3, [pc, #560]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b70:	4988      	ldr	r1, [pc, #544]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b84:	4b83      	ldr	r3, [pc, #524]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b92:	4980      	ldr	r1, [pc, #512]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ba6:	4b7b      	ldr	r3, [pc, #492]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4977      	ldr	r1, [pc, #476]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bc8:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	496f      	ldr	r1, [pc, #444]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bea:	4b6a      	ldr	r3, [pc, #424]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f023 020c 	bic.w	r2, r3, #12
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	4966      	ldr	r1, [pc, #408]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c0c:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	495e      	ldr	r1, [pc, #376]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c2e:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	4955      	ldr	r1, [pc, #340]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	494d      	ldr	r1, [pc, #308]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c72:	4b48      	ldr	r3, [pc, #288]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4944      	ldr	r1, [pc, #272]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c94:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	493c      	ldr	r1, [pc, #240]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc4:	4933      	ldr	r1, [pc, #204]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cd8:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce6:	492b      	ldr	r1, [pc, #172]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d011      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cfa:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d08:	4922      	ldr	r1, [pc, #136]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d18:	d101      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d3a:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d48:	4912      	ldr	r1, [pc, #72]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6c:	4909      	ldr	r1, [pc, #36]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d006      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80d9 	beq.w	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d88:	4b02      	ldr	r3, [pc, #8]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a01      	ldr	r2, [pc, #4]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d92:	e001      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003d94:	40023800 	.word	0x40023800
 8003d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9a:	f7fe f8d5 	bl	8001f48 <HAL_GetTick>
 8003d9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003da2:	f7fe f8d1 	bl	8001f48 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b64      	cmp	r3, #100	; 0x64
 8003dae:	d901      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e194      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003db4:	4b6c      	ldr	r3, [pc, #432]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d021      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11d      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dd4:	4b64      	ldr	r3, [pc, #400]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003de2:	4b61      	ldr	r3, [pc, #388]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de8:	0e1b      	lsrs	r3, r3, #24
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	019a      	lsls	r2, r3, #6
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	071b      	lsls	r3, r3, #28
 8003e08:	4957      	ldr	r1, [pc, #348]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d004      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02e      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3a:	d129      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e3c:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e50:	0f1b      	lsrs	r3, r3, #28
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	019a      	lsls	r2, r3, #6
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	071b      	lsls	r3, r3, #28
 8003e70:	493d      	ldr	r1, [pc, #244]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e78:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7e:	f023 021f 	bic.w	r2, r3, #31
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	3b01      	subs	r3, #1
 8003e88:	4937      	ldr	r1, [pc, #220]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01d      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e9c:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea2:	0e1b      	lsrs	r3, r3, #24
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb0:	0f1b      	lsrs	r3, r3, #28
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	019a      	lsls	r2, r3, #6
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	071b      	lsls	r3, r3, #28
 8003ed0:	4925      	ldr	r1, [pc, #148]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d011      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	019a      	lsls	r2, r3, #6
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	071b      	lsls	r3, r3, #28
 8003f00:	4919      	ldr	r1, [pc, #100]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f08:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f14:	f7fe f818 	bl	8001f48 <HAL_GetTick>
 8003f18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f1c:	f7fe f814 	bl	8001f48 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e0d7      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	f040 80cd 	bne.w	80040dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a08      	ldr	r2, [pc, #32]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f4e:	f7fd fffb 	bl	8001f48 <HAL_GetTick>
 8003f52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f54:	e00a      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f56:	f7fd fff7 	bl	8001f48 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b64      	cmp	r3, #100	; 0x64
 8003f62:	d903      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0ba      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f6c:	4b5e      	ldr	r3, [pc, #376]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f78:	d0ed      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02e      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d12a      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fa2:	4b51      	ldr	r3, [pc, #324]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fb0:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	0f1b      	lsrs	r3, r3, #28
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	019a      	lsls	r2, r3, #6
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	061b      	lsls	r3, r3, #24
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	071b      	lsls	r3, r3, #28
 8003fd6:	4944      	ldr	r1, [pc, #272]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fde:	4b42      	ldr	r3, [pc, #264]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	493d      	ldr	r1, [pc, #244]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d022      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400c:	d11d      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	0e1b      	lsrs	r3, r3, #24
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800401c:	4b32      	ldr	r3, [pc, #200]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	0f1b      	lsrs	r3, r3, #28
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	019a      	lsls	r2, r3, #6
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	431a      	orrs	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	071b      	lsls	r3, r3, #28
 8004042:	4929      	ldr	r1, [pc, #164]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d028      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	0e1b      	lsrs	r3, r3, #24
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004064:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	019a      	lsls	r2, r3, #6
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	431a      	orrs	r2, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	061b      	lsls	r3, r3, #24
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	071b      	lsls	r3, r3, #28
 800408a:	4917      	ldr	r1, [pc, #92]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4911      	ldr	r1, [pc, #68]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b4:	f7fd ff48 	bl	8001f48 <HAL_GetTick>
 80040b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040bc:	f7fd ff44 	bl	8001f48 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e007      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040da:	d1ef      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800

080040ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e09d      	b.n	800423a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d108      	bne.n	8004118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800410e:	d009      	beq.n	8004124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
 8004116:	e005      	b.n	8004124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd fa70 	bl	8001624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004164:	d902      	bls.n	800416c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e002      	b.n	8004172 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800416c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004170:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800417a:	d007      	beq.n	800418c <HAL_SPI_Init+0xa0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004184:	d002      	beq.n	800418c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	ea42 0103 	orr.w	r1, r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	f003 0204 	and.w	r2, r3, #4
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004208:	ea42 0103 	orr.w	r1, r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004228:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_SPI_Transmit+0x22>
 8004260:	2302      	movs	r3, #2
 8004262:	e158      	b.n	8004516 <HAL_SPI_Transmit+0x2d4>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800426c:	f7fd fe6c 	bl	8001f48 <HAL_GetTick>
 8004270:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d002      	beq.n	8004288 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004286:	e13d      	b.n	8004504 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_SPI_Transmit+0x52>
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004298:	e134      	b.n	8004504 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2203      	movs	r2, #3
 800429e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	88fa      	ldrh	r2, [r7, #6]
 80042b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e4:	d10f      	bne.n	8004306 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004304:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d007      	beq.n	8004324 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800432c:	d94b      	bls.n	80043c6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_SPI_Transmit+0xfa>
 8004336:	8afb      	ldrh	r3, [r7, #22]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d13e      	bne.n	80043ba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004360:	e02b      	b.n	80043ba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	d112      	bne.n	8004396 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	881a      	ldrh	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004394:	e011      	b.n	80043ba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004396:	f7fd fdd7 	bl	8001f48 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d803      	bhi.n	80043ae <HAL_SPI_Transmit+0x16c>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d102      	bne.n	80043b4 <HAL_SPI_Transmit+0x172>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043b8:	e0a4      	b.n	8004504 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ce      	bne.n	8004362 <HAL_SPI_Transmit+0x120>
 80043c4:	e07c      	b.n	80044c0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_Transmit+0x192>
 80043ce:	8afb      	ldrh	r3, [r7, #22]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d170      	bne.n	80044b6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d912      	bls.n	8004404 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	881a      	ldrh	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b02      	subs	r3, #2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004402:	e058      	b.n	80044b6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800442a:	e044      	b.n	80044b6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d12b      	bne.n	8004492 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d912      	bls.n	800446a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	881a      	ldrh	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b02      	subs	r3, #2
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004468:	e025      	b.n	80044b6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	7812      	ldrb	r2, [r2, #0]
 8004476:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004490:	e011      	b.n	80044b6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004492:	f7fd fd59 	bl	8001f48 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d803      	bhi.n	80044aa <HAL_SPI_Transmit+0x268>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d102      	bne.n	80044b0 <HAL_SPI_Transmit+0x26e>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044b4:	e026      	b.n	8004504 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1b5      	bne.n	800442c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fd07 	bl	8004ed8 <SPI_EndRxTxTransaction>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e000      	b.n	8004504 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004502:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004514:	7ffb      	ldrb	r3, [r7, #31]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b088      	sub	sp, #32
 8004522:	af02      	add	r7, sp, #8
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800453a:	d112      	bne.n	8004562 <HAL_SPI_Receive+0x44>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10e      	bne.n	8004562 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2204      	movs	r2, #4
 8004548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f910 	bl	800477e <HAL_SPI_TransmitReceive>
 800455e:	4603      	mov	r3, r0
 8004560:	e109      	b.n	8004776 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_SPI_Receive+0x52>
 800456c:	2302      	movs	r3, #2
 800456e:	e102      	b.n	8004776 <HAL_SPI_Receive+0x258>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004578:	f7fd fce6 	bl	8001f48 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b01      	cmp	r3, #1
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800458a:	2302      	movs	r3, #2
 800458c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800458e:	e0e9      	b.n	8004764 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_SPI_Receive+0x7e>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045a0:	e0e0      	b.n	8004764 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2204      	movs	r2, #4
 80045a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	88fa      	ldrh	r2, [r7, #6]
 80045ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	88fa      	ldrh	r2, [r7, #6]
 80045c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045ec:	d908      	bls.n	8004600 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	e007      	b.n	8004610 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800460e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004618:	d10f      	bne.n	800463a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004628:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004638:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d007      	beq.n	8004658 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004656:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004660:	d867      	bhi.n	8004732 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004662:	e030      	b.n	80046c6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b01      	cmp	r3, #1
 8004670:	d117      	bne.n	80046a2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f103 020c 	add.w	r2, r3, #12
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80046a0:	e011      	b.n	80046c6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a2:	f7fd fc51 	bl	8001f48 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d803      	bhi.n	80046ba <HAL_SPI_Receive+0x19c>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d102      	bne.n	80046c0 <HAL_SPI_Receive+0x1a2>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046c4:	e04e      	b.n	8004764 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1c8      	bne.n	8004664 <HAL_SPI_Receive+0x146>
 80046d2:	e034      	b.n	800473e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d115      	bne.n	800470e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	b292      	uxth	r2, r2
 80046ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	1c9a      	adds	r2, r3, #2
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800470c:	e011      	b.n	8004732 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800470e:	f7fd fc1b 	bl	8001f48 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d803      	bhi.n	8004726 <HAL_SPI_Receive+0x208>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d102      	bne.n	800472c <HAL_SPI_Receive+0x20e>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004730:	e018      	b.n	8004764 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1ca      	bne.n	80046d4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fb4c 	bl	8004de0 <SPI_EndRxTransaction>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	75fb      	strb	r3, [r7, #23]
 8004760:	e000      	b.n	8004764 <HAL_SPI_Receive+0x246>
  }

error :
 8004762:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b08a      	sub	sp, #40	; 0x28
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x26>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e1fb      	b.n	8004b9c <HAL_SPI_TransmitReceive+0x41e>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ac:	f7fd fbcc 	bl	8001f48 <HAL_GetTick>
 80047b0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047b8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047c0:	887b      	ldrh	r3, [r7, #2]
 80047c2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047c8:	7efb      	ldrb	r3, [r7, #27]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d00e      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x6e>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d4:	d106      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x66>
 80047de:	7efb      	ldrb	r3, [r7, #27]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d003      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047ea:	e1cd      	b.n	8004b88 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x80>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x80>
 80047f8:	887b      	ldrh	r3, [r7, #2]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004804:	e1c0      	b.n	8004b88 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b04      	cmp	r3, #4
 8004810:	d003      	beq.n	800481a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2205      	movs	r2, #5
 8004816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	887a      	ldrh	r2, [r7, #2]
 800482a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	887a      	ldrh	r2, [r7, #2]
 8004832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	887a      	ldrh	r2, [r7, #2]
 8004846:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800485c:	d802      	bhi.n	8004864 <HAL_SPI_TransmitReceive+0xe6>
 800485e:	8a3b      	ldrh	r3, [r7, #16]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d908      	bls.n	8004876 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004872:	605a      	str	r2, [r3, #4]
 8004874:	e007      	b.n	8004886 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004884:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d007      	beq.n	80048a4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048ac:	d97c      	bls.n	80049a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_SPI_TransmitReceive+0x13e>
 80048b6:	8a7b      	ldrh	r3, [r7, #18]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d169      	bne.n	8004990 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	881a      	ldrh	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e0:	e056      	b.n	8004990 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d11b      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x1aa>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d016      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x1aa>
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d113      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	881a      	ldrh	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	1c9a      	adds	r2, r3, #2
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b01      	cmp	r3, #1
 8004934:	d11c      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x1f2>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	b292      	uxth	r2, r2
 800494e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800496c:	2301      	movs	r3, #1
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004970:	f7fd faea 	bl	8001f48 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497c:	429a      	cmp	r2, r3
 800497e:	d807      	bhi.n	8004990 <HAL_SPI_TransmitReceive+0x212>
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d003      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800498e:	e0fb      	b.n	8004b88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1a3      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x164>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d19d      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x164>
 80049a6:	e0df      	b.n	8004b68 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x23a>
 80049b0:	8a7b      	ldrh	r3, [r7, #18]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	f040 80cb 	bne.w	8004b4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d912      	bls.n	80049e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	881a      	ldrh	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	1c9a      	adds	r2, r3, #2
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b02      	subs	r3, #2
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049e6:	e0b2      	b.n	8004b4e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	7812      	ldrb	r2, [r2, #0]
 80049f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a0e:	e09e      	b.n	8004b4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d134      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x30a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d02f      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x30a>
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d12c      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d912      	bls.n	8004a5e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	881a      	ldrh	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	1c9a      	adds	r2, r3, #2
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b02      	subs	r3, #2
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a5c:	e012      	b.n	8004a84 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	330c      	adds	r3, #12
 8004a68:	7812      	ldrb	r2, [r2, #0]
 8004a6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d148      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x3aa>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d042      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d923      	bls.n	8004af6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	b292      	uxth	r2, r2
 8004aba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b02      	subs	r3, #2
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d81f      	bhi.n	8004b24 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004af2:	605a      	str	r2, [r3, #4]
 8004af4:	e016      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f103 020c 	add.w	r2, r3, #12
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b24:	2301      	movs	r3, #1
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b28:	f7fd fa0e 	bl	8001f48 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d803      	bhi.n	8004b40 <HAL_SPI_TransmitReceive+0x3c2>
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3e:	d102      	bne.n	8004b46 <HAL_SPI_TransmitReceive+0x3c8>
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b4c:	e01c      	b.n	8004b88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f47f af5b 	bne.w	8004a10 <HAL_SPI_TransmitReceive+0x292>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f47f af54 	bne.w	8004a10 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f9b3 	bl	8004ed8 <SPI_EndRxTxTransaction>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	661a      	str	r2, [r3, #96]	; 0x60
 8004b84:	e000      	b.n	8004b88 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004b86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3728      	adds	r7, #40	; 0x28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bb4:	f7fd f9c8 	bl	8001f48 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bc4:	f7fd f9c0 	bl	8001f48 <HAL_GetTick>
 8004bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bca:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	015b      	lsls	r3, r3, #5
 8004bd0:	0d1b      	lsrs	r3, r3, #20
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	fb02 f303 	mul.w	r3, r2, r3
 8004bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bda:	e054      	b.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d050      	beq.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be4:	f7fd f9b0 	bl	8001f48 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d902      	bls.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d13d      	bne.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c12:	d111      	bne.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1c:	d004      	beq.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c26:	d107      	bne.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c40:	d10f      	bne.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e017      	b.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	bf0c      	ite	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	2300      	movne	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d19b      	bne.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000004 	.word	0x20000004

08004cb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cc6:	f7fd f93f 	bl	8001f48 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004cd6:	f7fd f937 	bl	8001f48 <HAL_GetTick>
 8004cda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ce4:	4b3d      	ldr	r3, [pc, #244]	; (8004ddc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	00da      	lsls	r2, r3, #3
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	0d1b      	lsrs	r3, r3, #20
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004cfc:	e060      	b.n	8004dc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d04:	d107      	bne.n	8004d16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d104      	bne.n	8004d16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1c:	d050      	beq.n	8004dc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d1e:	f7fd f913 	bl	8001f48 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d902      	bls.n	8004d34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d13d      	bne.n	8004db0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4c:	d111      	bne.n	8004d72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d56:	d004      	beq.n	8004d62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d107      	bne.n	8004d72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7a:	d10f      	bne.n	8004d9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e010      	b.n	8004dd2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d196      	bne.n	8004cfe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3728      	adds	r7, #40	; 0x28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000004 	.word	0x20000004

08004de0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df4:	d111      	bne.n	8004e1a <SPI_EndRxTransaction+0x3a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfe:	d004      	beq.n	8004e0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e08:	d107      	bne.n	8004e1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e22:	d112      	bne.n	8004e4a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2180      	movs	r1, #128	; 0x80
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff feb8 	bl	8004ba4 <SPI_WaitFlagStateUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d021      	beq.n	8004e7e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e03d      	b.n	8004ec6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e4a:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <SPI_EndRxTransaction+0xf0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <SPI_EndRxTransaction+0xf4>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	0d5b      	lsrs	r3, r3, #21
 8004e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d0f2      	beq.n	8004e60 <SPI_EndRxTransaction+0x80>
 8004e7a:	e000      	b.n	8004e7e <SPI_EndRxTransaction+0x9e>
        break;
 8004e7c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e86:	d11d      	bne.n	8004ec4 <SPI_EndRxTransaction+0xe4>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e90:	d004      	beq.n	8004e9c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9a:	d113      	bne.n	8004ec4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff ff03 	bl	8004cb4 <SPI_WaitFifoStateUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e000      	b.n	8004ec6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000004 	.word	0x20000004
 8004ed4:	165e9f81 	.word	0x165e9f81

08004ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff fedf 	bl	8004cb4 <SPI_WaitFifoStateUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f00:	f043 0220 	orr.w	r2, r3, #32
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e046      	b.n	8004f9a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <SPI_EndRxTxTransaction+0xcc>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <SPI_EndRxTxTransaction+0xd0>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	0d5b      	lsrs	r3, r3, #21
 8004f18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f1c:	fb02 f303 	mul.w	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2a:	d112      	bne.n	8004f52 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2200      	movs	r2, #0
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff fe34 	bl	8004ba4 <SPI_WaitFlagStateUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e023      	b.n	8004f9a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	2b80      	cmp	r3, #128	; 0x80
 8004f6a:	d0f2      	beq.n	8004f52 <SPI_EndRxTxTransaction+0x7a>
 8004f6c:	e000      	b.n	8004f70 <SPI_EndRxTxTransaction+0x98>
        break;
 8004f6e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff fe99 	bl	8004cb4 <SPI_WaitFifoStateUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e000      	b.n	8004f9a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000004 	.word	0x20000004
 8004fa8:	165e9f81 	.word	0x165e9f81

08004fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e049      	b.n	8005052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc fda2 	bl	8001b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f000 fd26 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d001      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e054      	b.n	800511e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a26      	ldr	r2, [pc, #152]	; (800512c <HAL_TIM_Base_Start_IT+0xd0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d022      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d01d      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a22      	ldr	r2, [pc, #136]	; (8005130 <HAL_TIM_Base_Start_IT+0xd4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d018      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a21      	ldr	r2, [pc, #132]	; (8005134 <HAL_TIM_Base_Start_IT+0xd8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <HAL_TIM_Base_Start_IT+0xdc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00e      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1e      	ldr	r2, [pc, #120]	; (800513c <HAL_TIM_Base_Start_IT+0xe0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d009      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <HAL_TIM_Base_Start_IT+0xe4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <HAL_TIM_Base_Start_IT+0xe8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d115      	bne.n	8005108 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	4b19      	ldr	r3, [pc, #100]	; (8005148 <HAL_TIM_Base_Start_IT+0xec>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b06      	cmp	r3, #6
 80050ec:	d015      	beq.n	800511a <HAL_TIM_Base_Start_IT+0xbe>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f4:	d011      	beq.n	800511a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005106:	e008      	b.n	800511a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e000      	b.n	800511c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40001800 	.word	0x40001800
 8005148:	00010007 	.word	0x00010007

0800514c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fcb2 	bl	8001adc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 fc56 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <HAL_TIM_PWM_Start+0x24>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e03c      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b04      	cmp	r3, #4
 8005224:	d109      	bne.n	800523a <HAL_TIM_PWM_Start+0x3e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	e02f      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d109      	bne.n	8005254 <HAL_TIM_PWM_Start+0x58>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	e022      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d109      	bne.n	800526e <HAL_TIM_PWM_Start+0x72>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b01      	cmp	r3, #1
 8005264:	bf14      	ite	ne
 8005266:	2301      	movne	r3, #1
 8005268:	2300      	moveq	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e015      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b10      	cmp	r3, #16
 8005272:	d109      	bne.n	8005288 <HAL_TIM_PWM_Start+0x8c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e008      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	bf14      	ite	ne
 8005294:	2301      	movne	r3, #1
 8005296:	2300      	moveq	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e092      	b.n	80053c8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_PWM_Start+0xb6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b0:	e023      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_PWM_Start+0xc6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c0:	e01b      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_PWM_Start+0xd6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d0:	e013      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_PWM_Start+0xe6>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052e0:	e00b      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0xf6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f0:	e003      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2201      	movs	r2, #1
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 ff32 	bl	800616c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a30      	ldr	r2, [pc, #192]	; (80053d0 <HAL_TIM_PWM_Start+0x1d4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_TIM_PWM_Start+0x120>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a2f      	ldr	r2, [pc, #188]	; (80053d4 <HAL_TIM_PWM_Start+0x1d8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d101      	bne.n	8005320 <HAL_TIM_PWM_Start+0x124>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <HAL_TIM_PWM_Start+0x126>
 8005320:	2300      	movs	r3, #0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005334:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <HAL_TIM_PWM_Start+0x1d4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_TIM_PWM_Start+0x18a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005348:	d01d      	beq.n	8005386 <HAL_TIM_PWM_Start+0x18a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <HAL_TIM_PWM_Start+0x1dc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <HAL_TIM_PWM_Start+0x18a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a20      	ldr	r2, [pc, #128]	; (80053dc <HAL_TIM_PWM_Start+0x1e0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_TIM_PWM_Start+0x18a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_TIM_PWM_Start+0x1e4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_TIM_PWM_Start+0x18a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <HAL_TIM_PWM_Start+0x1d8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_TIM_PWM_Start+0x18a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <HAL_TIM_PWM_Start+0x1e8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_TIM_PWM_Start+0x18a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <HAL_TIM_PWM_Start+0x1ec>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d115      	bne.n	80053b2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	4b17      	ldr	r3, [pc, #92]	; (80053ec <HAL_TIM_PWM_Start+0x1f0>)
 800538e:	4013      	ands	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b06      	cmp	r3, #6
 8005396:	d015      	beq.n	80053c4 <HAL_TIM_PWM_Start+0x1c8>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539e:	d011      	beq.n	80053c4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b0:	e008      	b.n	80053c4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0201 	orr.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	e000      	b.n	80053c6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40010400 	.word	0x40010400
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40001800 	.word	0x40001800
 80053ec:	00010007 	.word	0x00010007

080053f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b02      	cmp	r3, #2
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0202 	mvn.w	r2, #2
 800541c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fae4 	bl	8005a00 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fad6 	bl	80059ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fae7 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b04      	cmp	r3, #4
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0204 	mvn.w	r2, #4
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 faba 	bl	8005a00 <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 faac 	bl	80059ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fabd 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0208 	mvn.w	r2, #8
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2204      	movs	r2, #4
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa90 	bl	8005a00 <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa82 	bl	80059ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fa93 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b10      	cmp	r3, #16
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0210 	mvn.w	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2208      	movs	r2, #8
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa66 	bl	8005a00 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa58 	bl	80059ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa69 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0201 	mvn.w	r2, #1
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fb feec 	bl	800134c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 ff22 	bl	80063e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d10e      	bne.n	80055ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d107      	bne.n	80055ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 ff15 	bl	80063f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d10e      	bne.n	80055fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d107      	bne.n	80055fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fa17 	bl	8005a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b20      	cmp	r3, #32
 8005606:	d10e      	bne.n	8005626 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d107      	bne.n	8005626 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f06f 0220 	mvn.w	r2, #32
 800561e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fed5 	bl	80063d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800564a:	2302      	movs	r3, #2
 800564c:	e0ff      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b14      	cmp	r3, #20
 800565a:	f200 80f0 	bhi.w	800583e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800565e:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	080056b9 	.word	0x080056b9
 8005668:	0800583f 	.word	0x0800583f
 800566c:	0800583f 	.word	0x0800583f
 8005670:	0800583f 	.word	0x0800583f
 8005674:	080056f9 	.word	0x080056f9
 8005678:	0800583f 	.word	0x0800583f
 800567c:	0800583f 	.word	0x0800583f
 8005680:	0800583f 	.word	0x0800583f
 8005684:	0800573b 	.word	0x0800573b
 8005688:	0800583f 	.word	0x0800583f
 800568c:	0800583f 	.word	0x0800583f
 8005690:	0800583f 	.word	0x0800583f
 8005694:	0800577b 	.word	0x0800577b
 8005698:	0800583f 	.word	0x0800583f
 800569c:	0800583f 	.word	0x0800583f
 80056a0:	0800583f 	.word	0x0800583f
 80056a4:	080057bd 	.word	0x080057bd
 80056a8:	0800583f 	.word	0x0800583f
 80056ac:	0800583f 	.word	0x0800583f
 80056b0:	0800583f 	.word	0x0800583f
 80056b4:	080057fd 	.word	0x080057fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fa5c 	bl	8005b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0208 	orr.w	r2, r2, #8
 80056d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0204 	bic.w	r2, r2, #4
 80056e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6999      	ldr	r1, [r3, #24]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	619a      	str	r2, [r3, #24]
      break;
 80056f6:	e0a5      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 faae 	bl	8005c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6999      	ldr	r1, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	021a      	lsls	r2, r3, #8
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	619a      	str	r2, [r3, #24]
      break;
 8005738:	e084      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fb05 	bl	8005d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0208 	orr.w	r2, r2, #8
 8005754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0204 	bic.w	r2, r2, #4
 8005764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69d9      	ldr	r1, [r3, #28]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	61da      	str	r2, [r3, #28]
      break;
 8005778:	e064      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fb5b 	bl	8005e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69d9      	ldr	r1, [r3, #28]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	021a      	lsls	r2, r3, #8
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	61da      	str	r2, [r3, #28]
      break;
 80057ba:	e043      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fb92 	bl	8005eec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0208 	orr.w	r2, r2, #8
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0204 	bic.w	r2, r2, #4
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057fa:	e023      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fbc4 	bl	8005f90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005816:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	021a      	lsls	r2, r3, #8
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800583c:	e002      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	75fb      	strb	r3, [r7, #23]
      break;
 8005842:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800584c:	7dfb      	ldrb	r3, [r7, #23]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop

08005858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIM_ConfigClockSource+0x1c>
 8005870:	2302      	movs	r3, #2
 8005872:	e0b4      	b.n	80059de <HAL_TIM_ConfigClockSource+0x186>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	4b56      	ldr	r3, [pc, #344]	; (80059e8 <HAL_TIM_ConfigClockSource+0x190>)
 8005890:	4013      	ands	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ac:	d03e      	beq.n	800592c <HAL_TIM_ConfigClockSource+0xd4>
 80058ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b2:	f200 8087 	bhi.w	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ba:	f000 8086 	beq.w	80059ca <HAL_TIM_ConfigClockSource+0x172>
 80058be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c2:	d87f      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
 80058c4:	2b70      	cmp	r3, #112	; 0x70
 80058c6:	d01a      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0xa6>
 80058c8:	2b70      	cmp	r3, #112	; 0x70
 80058ca:	d87b      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
 80058cc:	2b60      	cmp	r3, #96	; 0x60
 80058ce:	d050      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x11a>
 80058d0:	2b60      	cmp	r3, #96	; 0x60
 80058d2:	d877      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
 80058d4:	2b50      	cmp	r3, #80	; 0x50
 80058d6:	d03c      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0xfa>
 80058d8:	2b50      	cmp	r3, #80	; 0x50
 80058da:	d873      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d058      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x13a>
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d86f      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
 80058e4:	2b30      	cmp	r3, #48	; 0x30
 80058e6:	d064      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x15a>
 80058e8:	2b30      	cmp	r3, #48	; 0x30
 80058ea:	d86b      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d060      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x15a>
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d867      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d05c      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x15a>
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d05a      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x15a>
 80058fc:	e062      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6899      	ldr	r1, [r3, #8]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f000 fc0d 	bl	800612c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	609a      	str	r2, [r3, #8]
      break;
 800592a:	e04f      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6899      	ldr	r1, [r3, #8]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f000 fbf6 	bl	800612c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800594e:	609a      	str	r2, [r3, #8]
      break;
 8005950:	e03c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	461a      	mov	r2, r3
 8005960:	f000 fb6a 	bl	8006038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2150      	movs	r1, #80	; 0x50
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fbc3 	bl	80060f6 <TIM_ITRx_SetConfig>
      break;
 8005970:	e02c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6859      	ldr	r1, [r3, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	461a      	mov	r2, r3
 8005980:	f000 fb89 	bl	8006096 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2160      	movs	r1, #96	; 0x60
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fbb3 	bl	80060f6 <TIM_ITRx_SetConfig>
      break;
 8005990:	e01c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6859      	ldr	r1, [r3, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	461a      	mov	r2, r3
 80059a0:	f000 fb4a 	bl	8006038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2140      	movs	r1, #64	; 0x40
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fba3 	bl	80060f6 <TIM_ITRx_SetConfig>
      break;
 80059b0:	e00c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4619      	mov	r1, r3
 80059bc:	4610      	mov	r0, r2
 80059be:	f000 fb9a 	bl	80060f6 <TIM_ITRx_SetConfig>
      break;
 80059c2:	e003      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
      break;
 80059c8:	e000      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	fffeff88 	.word	0xfffeff88

080059ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a40      	ldr	r2, [pc, #256]	; (8005b50 <TIM_Base_SetConfig+0x114>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5a:	d00f      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3d      	ldr	r2, [pc, #244]	; (8005b54 <TIM_Base_SetConfig+0x118>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a3c      	ldr	r2, [pc, #240]	; (8005b58 <TIM_Base_SetConfig+0x11c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a3b      	ldr	r2, [pc, #236]	; (8005b5c <TIM_Base_SetConfig+0x120>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a3a      	ldr	r2, [pc, #232]	; (8005b60 <TIM_Base_SetConfig+0x124>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2f      	ldr	r2, [pc, #188]	; (8005b50 <TIM_Base_SetConfig+0x114>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d02b      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9c:	d027      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2c      	ldr	r2, [pc, #176]	; (8005b54 <TIM_Base_SetConfig+0x118>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d023      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2b      	ldr	r2, [pc, #172]	; (8005b58 <TIM_Base_SetConfig+0x11c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01f      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <TIM_Base_SetConfig+0x120>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01b      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <TIM_Base_SetConfig+0x124>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d017      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a28      	ldr	r2, [pc, #160]	; (8005b64 <TIM_Base_SetConfig+0x128>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a27      	ldr	r2, [pc, #156]	; (8005b68 <TIM_Base_SetConfig+0x12c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00f      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a26      	ldr	r2, [pc, #152]	; (8005b6c <TIM_Base_SetConfig+0x130>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a25      	ldr	r2, [pc, #148]	; (8005b70 <TIM_Base_SetConfig+0x134>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d007      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <TIM_Base_SetConfig+0x138>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <TIM_Base_SetConfig+0x13c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d108      	bne.n	8005b00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a0a      	ldr	r2, [pc, #40]	; (8005b50 <TIM_Base_SetConfig+0x114>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_Base_SetConfig+0xf8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a0c      	ldr	r2, [pc, #48]	; (8005b60 <TIM_Base_SetConfig+0x124>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d103      	bne.n	8005b3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	615a      	str	r2, [r3, #20]
}
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40010000 	.word	0x40010000
 8005b54:	40000400 	.word	0x40000400
 8005b58:	40000800 	.word	0x40000800
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	40010400 	.word	0x40010400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400
 8005b6c:	40014800 	.word	0x40014800
 8005b70:	40001800 	.word	0x40001800
 8005b74:	40001c00 	.word	0x40001c00
 8005b78:	40002000 	.word	0x40002000

08005b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4b2b      	ldr	r3, [pc, #172]	; (8005c54 <TIM_OC1_SetConfig+0xd8>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0303 	bic.w	r3, r3, #3
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f023 0302 	bic.w	r3, r3, #2
 8005bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a21      	ldr	r2, [pc, #132]	; (8005c58 <TIM_OC1_SetConfig+0xdc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC1_SetConfig+0x64>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a20      	ldr	r2, [pc, #128]	; (8005c5c <TIM_OC1_SetConfig+0xe0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10c      	bne.n	8005bfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0308 	bic.w	r3, r3, #8
 8005be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
 8005bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a16      	ldr	r2, [pc, #88]	; (8005c58 <TIM_OC1_SetConfig+0xdc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_OC1_SetConfig+0x8e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <TIM_OC1_SetConfig+0xe0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d111      	bne.n	8005c2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	621a      	str	r2, [r3, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	fffeff8f 	.word	0xfffeff8f
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40010400 	.word	0x40010400

08005c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0210 	bic.w	r2, r3, #16
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4b2e      	ldr	r3, [pc, #184]	; (8005d44 <TIM_OC2_SetConfig+0xe4>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0320 	bic.w	r3, r3, #32
 8005caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a23      	ldr	r2, [pc, #140]	; (8005d48 <TIM_OC2_SetConfig+0xe8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC2_SetConfig+0x68>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <TIM_OC2_SetConfig+0xec>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d10d      	bne.n	8005ce4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <TIM_OC2_SetConfig+0xe8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC2_SetConfig+0x94>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <TIM_OC2_SetConfig+0xec>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d113      	bne.n	8005d1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	feff8fff 	.word	0xfeff8fff
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40010400 	.word	0x40010400

08005d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4b2d      	ldr	r3, [pc, #180]	; (8005e30 <TIM_OC3_SetConfig+0xe0>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0303 	bic.w	r3, r3, #3
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a22      	ldr	r2, [pc, #136]	; (8005e34 <TIM_OC3_SetConfig+0xe4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_OC3_SetConfig+0x66>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <TIM_OC3_SetConfig+0xe8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d10d      	bne.n	8005dd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a17      	ldr	r2, [pc, #92]	; (8005e34 <TIM_OC3_SetConfig+0xe4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC3_SetConfig+0x92>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <TIM_OC3_SetConfig+0xe8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d113      	bne.n	8005e0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	621a      	str	r2, [r3, #32]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	fffeff8f 	.word	0xfffeff8f
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40010400 	.word	0x40010400

08005e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4b1e      	ldr	r3, [pc, #120]	; (8005ee0 <TIM_OC4_SetConfig+0xa4>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	031b      	lsls	r3, r3, #12
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <TIM_OC4_SetConfig+0xa8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC4_SetConfig+0x68>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a12      	ldr	r2, [pc, #72]	; (8005ee8 <TIM_OC4_SetConfig+0xac>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d109      	bne.n	8005eb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	feff8fff 	.word	0xfeff8fff
 8005ee4:	40010000 	.word	0x40010000
 8005ee8:	40010400 	.word	0x40010400

08005eec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <TIM_OC5_SetConfig+0x98>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a12      	ldr	r2, [pc, #72]	; (8005f88 <TIM_OC5_SetConfig+0x9c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_OC5_SetConfig+0x5e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <TIM_OC5_SetConfig+0xa0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d109      	bne.n	8005f5e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	621a      	str	r2, [r3, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	fffeff8f 	.word	0xfffeff8f
 8005f88:	40010000 	.word	0x40010000
 8005f8c:	40010400 	.word	0x40010400

08005f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4b1c      	ldr	r3, [pc, #112]	; (800602c <TIM_OC6_SetConfig+0x9c>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	051b      	lsls	r3, r3, #20
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a13      	ldr	r2, [pc, #76]	; (8006030 <TIM_OC6_SetConfig+0xa0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_OC6_SetConfig+0x60>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a12      	ldr	r2, [pc, #72]	; (8006034 <TIM_OC6_SetConfig+0xa4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d109      	bne.n	8006004 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	029b      	lsls	r3, r3, #10
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	feff8fff 	.word	0xfeff8fff
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400

08006038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f023 0201 	bic.w	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f023 030a 	bic.w	r3, r3, #10
 8006074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006096:	b480      	push	{r7}
 8006098:	b087      	sub	sp, #28
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f023 0210 	bic.w	r2, r3, #16
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	f043 0307 	orr.w	r3, r3, #7
 8006118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	609a      	str	r2, [r3, #8]
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	021a      	lsls	r2, r3, #8
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	431a      	orrs	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4313      	orrs	r3, r2
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	609a      	str	r2, [r3, #8]
}
 8006160:	bf00      	nop
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	2201      	movs	r2, #1
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1a      	ldr	r2, [r3, #32]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	43db      	mvns	r3, r3
 800618e:	401a      	ands	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	fa01 f303 	lsl.w	r3, r1, r3
 80061a4:	431a      	orrs	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e06d      	b.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a30      	ldr	r2, [pc, #192]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a2f      	ldr	r2, [pc, #188]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d108      	bne.n	8006216 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800620a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a20      	ldr	r2, [pc, #128]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d022      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006242:	d01d      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d018      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00e      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a15      	ldr	r2, [pc, #84]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a16      	ldr	r2, [pc, #88]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10c      	bne.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006286:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40010400 	.word	0x40010400
 80062c0:	40000400 	.word	0x40000400
 80062c4:	40000800 	.word	0x40000800
 80062c8:	40000c00 	.word	0x40000c00
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40001800 	.word	0x40001800

080062d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e065      	b.n	80063bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	041b      	lsls	r3, r3, #16
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a16      	ldr	r2, [pc, #88]	; (80063c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a14      	ldr	r2, [pc, #80]	; (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d115      	bne.n	80063aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	051b      	lsls	r3, r3, #20
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40010400 	.word	0x40010400

080063d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e040      	b.n	80064a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fb fc00 	bl	8001c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2224      	movs	r2, #36	; 0x24
 8006438:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fbe6 	bl	8006c1c <UART_SetConfig>
 8006450:	4603      	mov	r3, r0
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e022      	b.n	80064a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fe3e 	bl	80070e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fec5 	bl	8007228 <UART_CheckIdleState>
 800649e:	4603      	mov	r3, r0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	4613      	mov	r3, r2
 80064b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d171      	bne.n	80065a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_UART_Transmit+0x24>
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e06a      	b.n	80065a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2221      	movs	r2, #33	; 0x21
 80064dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064de:	f7fb fd33 	bl	8001f48 <HAL_GetTick>
 80064e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	88fa      	ldrh	r2, [r7, #6]
 80064e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	88fa      	ldrh	r2, [r7, #6]
 80064f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fc:	d108      	bne.n	8006510 <HAL_UART_Transmit+0x68>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d104      	bne.n	8006510 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	e003      	b.n	8006518 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006518:	e02c      	b.n	8006574 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2200      	movs	r2, #0
 8006522:	2180      	movs	r1, #128	; 0x80
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 feb6 	bl	8007296 <UART_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e038      	b.n	80065a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006548:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	3302      	adds	r3, #2
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	e007      	b.n	8006562 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	3301      	adds	r3, #1
 8006560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1cc      	bne.n	800651a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2200      	movs	r2, #0
 8006588:	2140      	movs	r1, #64	; 0x40
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fe83 	bl	8007296 <UART_WaitOnFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e005      	b.n	80065a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e000      	b.n	80065a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b08a      	sub	sp, #40	; 0x28
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d132      	bne.n	800662c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_UART_Receive_IT+0x24>
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e02b      	b.n	800662e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d018      	beq.n	800661c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	613b      	str	r3, [r7, #16]
   return(result);
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	69f9      	ldr	r1, [r7, #28]
 800660e:	6a3a      	ldr	r2, [r7, #32]
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	61bb      	str	r3, [r7, #24]
   return(result);
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e6      	bne.n	80065ea <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800661c:	88fb      	ldrh	r3, [r7, #6]
 800661e:	461a      	mov	r2, r3
 8006620:	68b9      	ldr	r1, [r7, #8]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fefe 	bl	8007424 <UART_Start_Receive_IT>
 8006628:	4603      	mov	r3, r0
 800662a:	e000      	b.n	800662e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b0ba      	sub	sp, #232	; 0xe8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800665e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006662:	f640 030f 	movw	r3, #2063	; 0x80f
 8006666:	4013      	ands	r3, r2
 8006668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800666c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d115      	bne.n	80066a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00f      	beq.n	80066a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 8297 	beq.w	8006bc4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
      }
      return;
 800669e:	e291      	b.n	8006bc4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8117 	beq.w	80068d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066ba:	4b85      	ldr	r3, [pc, #532]	; (80068d0 <HAL_UART_IRQHandler+0x298>)
 80066bc:	4013      	ands	r3, r2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 810a 	beq.w	80068d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d011      	beq.n	80066f4 <HAL_UART_IRQHandler+0xbc>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2201      	movs	r2, #1
 80066e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ea:	f043 0201 	orr.w	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d011      	beq.n	8006724 <HAL_UART_IRQHandler+0xec>
 8006700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2202      	movs	r2, #2
 8006712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d011      	beq.n	8006754 <HAL_UART_IRQHandler+0x11c>
 8006730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2204      	movs	r2, #4
 8006742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674a:	f043 0202 	orr.w	r2, r3, #2
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d017      	beq.n	8006790 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800676c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006770:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2208      	movs	r2, #8
 800677e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006786:	f043 0208 	orr.w	r2, r3, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006798:	2b00      	cmp	r3, #0
 800679a:	d012      	beq.n	80067c2 <HAL_UART_IRQHandler+0x18a>
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00c      	beq.n	80067c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b8:	f043 0220 	orr.w	r2, r3, #32
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 81fd 	beq.w	8006bc8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00d      	beq.n	80067f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d005      	beq.n	800681a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800680e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006812:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006816:	2b00      	cmp	r3, #0
 8006818:	d04f      	beq.n	80068ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fec8 	bl	80075b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	d141      	bne.n	80068b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3308      	adds	r3, #8
 8006834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800684c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3308      	adds	r3, #8
 8006856:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800685a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800685e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006866:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1d9      	bne.n	800682e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687e:	2b00      	cmp	r3, #0
 8006880:	d013      	beq.n	80068aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006886:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <HAL_UART_IRQHandler+0x29c>)
 8006888:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800688e:	4618      	mov	r0, r3
 8006890:	f7fb fd0b 	bl	80022aa <HAL_DMA_Abort_IT>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d017      	beq.n	80068ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800689e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	e00f      	b.n	80068ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f9a0 	bl	8006bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	e00b      	b.n	80068ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f99c 	bl	8006bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b8:	e007      	b.n	80068ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f998 	bl	8006bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80068c8:	e17e      	b.n	8006bc8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ca:	bf00      	nop
    return;
 80068cc:	e17c      	b.n	8006bc8 <HAL_UART_IRQHandler+0x590>
 80068ce:	bf00      	nop
 80068d0:	04000120 	.word	0x04000120
 80068d4:	08007679 	.word	0x08007679

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068dc:	2b01      	cmp	r3, #1
 80068de:	f040 814c 	bne.w	8006b7a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8145 	beq.w	8006b7a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 813e 	beq.w	8006b7a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2210      	movs	r2, #16
 8006904:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	f040 80b6 	bne.w	8006a82 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006922:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8150 	beq.w	8006bcc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006936:	429a      	cmp	r2, r3
 8006938:	f080 8148 	bcs.w	8006bcc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006942:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006950:	f000 8086 	beq.w	8006a60 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800696c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006970:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800697e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006982:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800698a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1da      	bne.n	8006954 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e1      	bne.n	800699e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e3      	bne.n	80069da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a30:	f023 0310 	bic.w	r3, r3, #16
 8006a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a42:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e4      	bne.n	8006a20 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fb fbb5 	bl	80021ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f8c2 	bl	8006c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a80:	e0a4      	b.n	8006bcc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8096 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8091 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e4      	bne.n	8006aae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	623b      	str	r3, [r7, #32]
   return(result);
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	f023 0301 	bic.w	r3, r3, #1
 8006afa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b08:	633a      	str	r2, [r7, #48]	; 0x30
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e3      	bne.n	8006ae4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f023 0310 	bic.w	r3, r3, #16
 8006b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	69b9      	ldr	r1, [r7, #24]
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e4      	bne.n	8006b30 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f846 	bl	8006c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b78:	e02a      	b.n	8006bd0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00e      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d008      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d01c      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
    }
    return;
 8006ba2:	e017      	b.n	8006bd4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x59e>
 8006bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00c      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fd71 	bl	80076a4 <UART_EndTransmit_IT>
    return;
 8006bc2:	e008      	b.n	8006bd6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006bc4:	bf00      	nop
 8006bc6:	e006      	b.n	8006bd6 <HAL_UART_IRQHandler+0x59e>
    return;
 8006bc8:	bf00      	nop
 8006bca:	e004      	b.n	8006bd6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006bcc:	bf00      	nop
 8006bce:	e002      	b.n	8006bd6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006bd0:	bf00      	nop
 8006bd2:	e000      	b.n	8006bd6 <HAL_UART_IRQHandler+0x59e>
    return;
 8006bd4:	bf00      	nop
  }

}
 8006bd6:	37e8      	adds	r7, #232	; 0xe8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4ba6      	ldr	r3, [pc, #664]	; (8006ee0 <UART_SetConfig+0x2c4>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a94      	ldr	r2, [pc, #592]	; (8006ee4 <UART_SetConfig+0x2c8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d120      	bne.n	8006cda <UART_SetConfig+0xbe>
 8006c98:	4b93      	ldr	r3, [pc, #588]	; (8006ee8 <UART_SetConfig+0x2cc>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d816      	bhi.n	8006cd4 <UART_SetConfig+0xb8>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x90>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006cc9 	.word	0x08006cc9
 8006cb4:	08006cc3 	.word	0x08006cc3
 8006cb8:	08006ccf 	.word	0x08006ccf
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e150      	b.n	8006f64 <UART_SetConfig+0x348>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e14d      	b.n	8006f64 <UART_SetConfig+0x348>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e14a      	b.n	8006f64 <UART_SetConfig+0x348>
 8006cce:	2308      	movs	r3, #8
 8006cd0:	77fb      	strb	r3, [r7, #31]
 8006cd2:	e147      	b.n	8006f64 <UART_SetConfig+0x348>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e144      	b.n	8006f64 <UART_SetConfig+0x348>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a83      	ldr	r2, [pc, #524]	; (8006eec <UART_SetConfig+0x2d0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d132      	bne.n	8006d4a <UART_SetConfig+0x12e>
 8006ce4:	4b80      	ldr	r3, [pc, #512]	; (8006ee8 <UART_SetConfig+0x2cc>)
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cea:	f003 030c 	and.w	r3, r3, #12
 8006cee:	2b0c      	cmp	r3, #12
 8006cf0:	d828      	bhi.n	8006d44 <UART_SetConfig+0x128>
 8006cf2:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <UART_SetConfig+0xdc>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d2d 	.word	0x08006d2d
 8006cfc:	08006d45 	.word	0x08006d45
 8006d00:	08006d45 	.word	0x08006d45
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d39 	.word	0x08006d39
 8006d0c:	08006d45 	.word	0x08006d45
 8006d10:	08006d45 	.word	0x08006d45
 8006d14:	08006d45 	.word	0x08006d45
 8006d18:	08006d33 	.word	0x08006d33
 8006d1c:	08006d45 	.word	0x08006d45
 8006d20:	08006d45 	.word	0x08006d45
 8006d24:	08006d45 	.word	0x08006d45
 8006d28:	08006d3f 	.word	0x08006d3f
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e118      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d32:	2302      	movs	r3, #2
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e115      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e112      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d3e:	2308      	movs	r3, #8
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e10f      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d44:	2310      	movs	r3, #16
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e10c      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a68      	ldr	r2, [pc, #416]	; (8006ef0 <UART_SetConfig+0x2d4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d120      	bne.n	8006d96 <UART_SetConfig+0x17a>
 8006d54:	4b64      	ldr	r3, [pc, #400]	; (8006ee8 <UART_SetConfig+0x2cc>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d5e:	2b30      	cmp	r3, #48	; 0x30
 8006d60:	d013      	beq.n	8006d8a <UART_SetConfig+0x16e>
 8006d62:	2b30      	cmp	r3, #48	; 0x30
 8006d64:	d814      	bhi.n	8006d90 <UART_SetConfig+0x174>
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d009      	beq.n	8006d7e <UART_SetConfig+0x162>
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d810      	bhi.n	8006d90 <UART_SetConfig+0x174>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <UART_SetConfig+0x15c>
 8006d72:	2b10      	cmp	r3, #16
 8006d74:	d006      	beq.n	8006d84 <UART_SetConfig+0x168>
 8006d76:	e00b      	b.n	8006d90 <UART_SetConfig+0x174>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e0f2      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e0ef      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d84:	2304      	movs	r3, #4
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e0ec      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e0e9      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d90:	2310      	movs	r3, #16
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e0e6      	b.n	8006f64 <UART_SetConfig+0x348>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a56      	ldr	r2, [pc, #344]	; (8006ef4 <UART_SetConfig+0x2d8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d120      	bne.n	8006de2 <UART_SetConfig+0x1c6>
 8006da0:	4b51      	ldr	r3, [pc, #324]	; (8006ee8 <UART_SetConfig+0x2cc>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006daa:	2bc0      	cmp	r3, #192	; 0xc0
 8006dac:	d013      	beq.n	8006dd6 <UART_SetConfig+0x1ba>
 8006dae:	2bc0      	cmp	r3, #192	; 0xc0
 8006db0:	d814      	bhi.n	8006ddc <UART_SetConfig+0x1c0>
 8006db2:	2b80      	cmp	r3, #128	; 0x80
 8006db4:	d009      	beq.n	8006dca <UART_SetConfig+0x1ae>
 8006db6:	2b80      	cmp	r3, #128	; 0x80
 8006db8:	d810      	bhi.n	8006ddc <UART_SetConfig+0x1c0>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <UART_SetConfig+0x1a8>
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	d006      	beq.n	8006dd0 <UART_SetConfig+0x1b4>
 8006dc2:	e00b      	b.n	8006ddc <UART_SetConfig+0x1c0>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e0cc      	b.n	8006f64 <UART_SetConfig+0x348>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	77fb      	strb	r3, [r7, #31]
 8006dce:	e0c9      	b.n	8006f64 <UART_SetConfig+0x348>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e0c6      	b.n	8006f64 <UART_SetConfig+0x348>
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	77fb      	strb	r3, [r7, #31]
 8006dda:	e0c3      	b.n	8006f64 <UART_SetConfig+0x348>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	77fb      	strb	r3, [r7, #31]
 8006de0:	e0c0      	b.n	8006f64 <UART_SetConfig+0x348>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a44      	ldr	r2, [pc, #272]	; (8006ef8 <UART_SetConfig+0x2dc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d125      	bne.n	8006e38 <UART_SetConfig+0x21c>
 8006dec:	4b3e      	ldr	r3, [pc, #248]	; (8006ee8 <UART_SetConfig+0x2cc>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dfa:	d017      	beq.n	8006e2c <UART_SetConfig+0x210>
 8006dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e00:	d817      	bhi.n	8006e32 <UART_SetConfig+0x216>
 8006e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e06:	d00b      	beq.n	8006e20 <UART_SetConfig+0x204>
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0c:	d811      	bhi.n	8006e32 <UART_SetConfig+0x216>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <UART_SetConfig+0x1fe>
 8006e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e16:	d006      	beq.n	8006e26 <UART_SetConfig+0x20a>
 8006e18:	e00b      	b.n	8006e32 <UART_SetConfig+0x216>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e0a1      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e20:	2302      	movs	r3, #2
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e09e      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e26:	2304      	movs	r3, #4
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e09b      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e098      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e32:	2310      	movs	r3, #16
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e095      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2f      	ldr	r2, [pc, #188]	; (8006efc <UART_SetConfig+0x2e0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d125      	bne.n	8006e8e <UART_SetConfig+0x272>
 8006e42:	4b29      	ldr	r3, [pc, #164]	; (8006ee8 <UART_SetConfig+0x2cc>)
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e50:	d017      	beq.n	8006e82 <UART_SetConfig+0x266>
 8006e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e56:	d817      	bhi.n	8006e88 <UART_SetConfig+0x26c>
 8006e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5c:	d00b      	beq.n	8006e76 <UART_SetConfig+0x25a>
 8006e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e62:	d811      	bhi.n	8006e88 <UART_SetConfig+0x26c>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <UART_SetConfig+0x254>
 8006e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6c:	d006      	beq.n	8006e7c <UART_SetConfig+0x260>
 8006e6e:	e00b      	b.n	8006e88 <UART_SetConfig+0x26c>
 8006e70:	2301      	movs	r3, #1
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e076      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e76:	2302      	movs	r3, #2
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e073      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e070      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e82:	2308      	movs	r3, #8
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e06d      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e06a      	b.n	8006f64 <UART_SetConfig+0x348>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a1b      	ldr	r2, [pc, #108]	; (8006f00 <UART_SetConfig+0x2e4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d138      	bne.n	8006f0a <UART_SetConfig+0x2ee>
 8006e98:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <UART_SetConfig+0x2cc>)
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ea2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ea6:	d017      	beq.n	8006ed8 <UART_SetConfig+0x2bc>
 8006ea8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eac:	d82a      	bhi.n	8006f04 <UART_SetConfig+0x2e8>
 8006eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb2:	d00b      	beq.n	8006ecc <UART_SetConfig+0x2b0>
 8006eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb8:	d824      	bhi.n	8006f04 <UART_SetConfig+0x2e8>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <UART_SetConfig+0x2aa>
 8006ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec2:	d006      	beq.n	8006ed2 <UART_SetConfig+0x2b6>
 8006ec4:	e01e      	b.n	8006f04 <UART_SetConfig+0x2e8>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e04b      	b.n	8006f64 <UART_SetConfig+0x348>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e048      	b.n	8006f64 <UART_SetConfig+0x348>
 8006ed2:	2304      	movs	r3, #4
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e045      	b.n	8006f64 <UART_SetConfig+0x348>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	e042      	b.n	8006f64 <UART_SetConfig+0x348>
 8006ede:	bf00      	nop
 8006ee0:	efff69f3 	.word	0xefff69f3
 8006ee4:	40011000 	.word	0x40011000
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	40004400 	.word	0x40004400
 8006ef0:	40004800 	.word	0x40004800
 8006ef4:	40004c00 	.word	0x40004c00
 8006ef8:	40005000 	.word	0x40005000
 8006efc:	40011400 	.word	0x40011400
 8006f00:	40007800 	.word	0x40007800
 8006f04:	2310      	movs	r3, #16
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e02c      	b.n	8006f64 <UART_SetConfig+0x348>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a72      	ldr	r2, [pc, #456]	; (80070d8 <UART_SetConfig+0x4bc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d125      	bne.n	8006f60 <UART_SetConfig+0x344>
 8006f14:	4b71      	ldr	r3, [pc, #452]	; (80070dc <UART_SetConfig+0x4c0>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f22:	d017      	beq.n	8006f54 <UART_SetConfig+0x338>
 8006f24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f28:	d817      	bhi.n	8006f5a <UART_SetConfig+0x33e>
 8006f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2e:	d00b      	beq.n	8006f48 <UART_SetConfig+0x32c>
 8006f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f34:	d811      	bhi.n	8006f5a <UART_SetConfig+0x33e>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <UART_SetConfig+0x326>
 8006f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f3e:	d006      	beq.n	8006f4e <UART_SetConfig+0x332>
 8006f40:	e00b      	b.n	8006f5a <UART_SetConfig+0x33e>
 8006f42:	2300      	movs	r3, #0
 8006f44:	77fb      	strb	r3, [r7, #31]
 8006f46:	e00d      	b.n	8006f64 <UART_SetConfig+0x348>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e00a      	b.n	8006f64 <UART_SetConfig+0x348>
 8006f4e:	2304      	movs	r3, #4
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e007      	b.n	8006f64 <UART_SetConfig+0x348>
 8006f54:	2308      	movs	r3, #8
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e004      	b.n	8006f64 <UART_SetConfig+0x348>
 8006f5a:	2310      	movs	r3, #16
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e001      	b.n	8006f64 <UART_SetConfig+0x348>
 8006f60:	2310      	movs	r3, #16
 8006f62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	d15b      	bne.n	8007026 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006f6e:	7ffb      	ldrb	r3, [r7, #31]
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d828      	bhi.n	8006fc6 <UART_SetConfig+0x3aa>
 8006f74:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <UART_SetConfig+0x360>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fa9 	.word	0x08006fa9
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	08006fc7 	.word	0x08006fc7
 8006f8c:	08006fb7 	.word	0x08006fb7
 8006f90:	08006fc7 	.word	0x08006fc7
 8006f94:	08006fc7 	.word	0x08006fc7
 8006f98:	08006fc7 	.word	0x08006fc7
 8006f9c:	08006fbf 	.word	0x08006fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa0:	f7fc fc8c 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8006fa4:	61b8      	str	r0, [r7, #24]
        break;
 8006fa6:	e013      	b.n	8006fd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fa8:	f7fc fc9c 	bl	80038e4 <HAL_RCC_GetPCLK2Freq>
 8006fac:	61b8      	str	r0, [r7, #24]
        break;
 8006fae:	e00f      	b.n	8006fd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b4b      	ldr	r3, [pc, #300]	; (80070e0 <UART_SetConfig+0x4c4>)
 8006fb2:	61bb      	str	r3, [r7, #24]
        break;
 8006fb4:	e00c      	b.n	8006fd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fc fb6f 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8006fba:	61b8      	str	r0, [r7, #24]
        break;
 8006fbc:	e008      	b.n	8006fd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc2:	61bb      	str	r3, [r7, #24]
        break;
 8006fc4:	e004      	b.n	8006fd0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8006fce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d074      	beq.n	80070c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	005a      	lsls	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	441a      	add	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2b0f      	cmp	r3, #15
 8006ff0:	d916      	bls.n	8007020 <UART_SetConfig+0x404>
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff8:	d212      	bcs.n	8007020 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f023 030f 	bic.w	r3, r3, #15
 8007002:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	b29a      	uxth	r2, r3
 8007010:	89fb      	ldrh	r3, [r7, #14]
 8007012:	4313      	orrs	r3, r2
 8007014:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	89fa      	ldrh	r2, [r7, #14]
 800701c:	60da      	str	r2, [r3, #12]
 800701e:	e04f      	b.n	80070c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	77bb      	strb	r3, [r7, #30]
 8007024:	e04c      	b.n	80070c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007026:	7ffb      	ldrb	r3, [r7, #31]
 8007028:	2b08      	cmp	r3, #8
 800702a:	d828      	bhi.n	800707e <UART_SetConfig+0x462>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <UART_SetConfig+0x418>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007059 	.word	0x08007059
 8007038:	08007061 	.word	0x08007061
 800703c:	08007069 	.word	0x08007069
 8007040:	0800707f 	.word	0x0800707f
 8007044:	0800706f 	.word	0x0800706f
 8007048:	0800707f 	.word	0x0800707f
 800704c:	0800707f 	.word	0x0800707f
 8007050:	0800707f 	.word	0x0800707f
 8007054:	08007077 	.word	0x08007077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007058:	f7fc fc30 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 800705c:	61b8      	str	r0, [r7, #24]
        break;
 800705e:	e013      	b.n	8007088 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007060:	f7fc fc40 	bl	80038e4 <HAL_RCC_GetPCLK2Freq>
 8007064:	61b8      	str	r0, [r7, #24]
        break;
 8007066:	e00f      	b.n	8007088 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007068:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <UART_SetConfig+0x4c4>)
 800706a:	61bb      	str	r3, [r7, #24]
        break;
 800706c:	e00c      	b.n	8007088 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800706e:	f7fc fb13 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8007072:	61b8      	str	r0, [r7, #24]
        break;
 8007074:	e008      	b.n	8007088 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800707a:	61bb      	str	r3, [r7, #24]
        break;
 800707c:	e004      	b.n	8007088 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	77bb      	strb	r3, [r7, #30]
        break;
 8007086:	bf00      	nop
    }

    if (pclk != 0U)
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d018      	beq.n	80070c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	085a      	lsrs	r2, r3, #1
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	441a      	add	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b0f      	cmp	r3, #15
 80070a6:	d909      	bls.n	80070bc <UART_SetConfig+0x4a0>
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ae:	d205      	bcs.n	80070bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60da      	str	r2, [r3, #12]
 80070ba:	e001      	b.n	80070c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80070cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	40007c00 	.word	0x40007c00
 80070dc:	40023800 	.word	0x40023800
 80070e0:	00f42400 	.word	0x00f42400

080070e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01a      	beq.n	80071fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e2:	d10a      	bne.n	80071fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	605a      	str	r2, [r3, #4]
  }
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af02      	add	r7, sp, #8
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007238:	f7fa fe86 	bl	8001f48 <HAL_GetTick>
 800723c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b08      	cmp	r3, #8
 800724a:	d10e      	bne.n	800726a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800724c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f81b 	bl	8007296 <UART_WaitOnFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e011      	b.n	800728e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b09c      	sub	sp, #112	; 0x70
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	4613      	mov	r3, r2
 80072a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a6:	e0a7      	b.n	80073f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ae:	f000 80a3 	beq.w	80073f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b2:	f7fa fe49 	bl	8001f48 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072be:	429a      	cmp	r2, r3
 80072c0:	d302      	bcc.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80072c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d13f      	bne.n	8007348 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072dc:	667b      	str	r3, [r7, #100]	; 0x64
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e6      	bne.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	663b      	str	r3, [r7, #96]	; 0x60
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800731a:	64ba      	str	r2, [r7, #72]	; 0x48
 800731c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e5      	bne.n	80072fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2220      	movs	r2, #32
 8007332:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2220      	movs	r2, #32
 8007338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e068      	b.n	800741a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	d050      	beq.n	80073f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007364:	d148      	bne.n	80073f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800736e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
 8007390:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e6      	bne.n	8007370 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3308      	adds	r3, #8
 80073a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	613b      	str	r3, [r7, #16]
   return(result);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073c2:	623a      	str	r2, [r7, #32]
 80073c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	69f9      	ldr	r1, [r7, #28]
 80073c8:	6a3a      	ldr	r2, [r7, #32]
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e5      	bne.n	80073a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e010      	b.n	800741a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69da      	ldr	r2, [r3, #28]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4013      	ands	r3, r2
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	429a      	cmp	r2, r3
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	429a      	cmp	r2, r3
 8007414:	f43f af48 	beq.w	80072a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3770      	adds	r7, #112	; 0x70
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007424:	b480      	push	{r7}
 8007426:	b097      	sub	sp, #92	; 0x5c
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007456:	d10e      	bne.n	8007476 <UART_Start_Receive_IT+0x52>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d105      	bne.n	800746c <UART_Start_Receive_IT+0x48>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007466:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800746a:	e02d      	b.n	80074c8 <UART_Start_Receive_IT+0xa4>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	22ff      	movs	r2, #255	; 0xff
 8007470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007474:	e028      	b.n	80074c8 <UART_Start_Receive_IT+0xa4>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10d      	bne.n	800749a <UART_Start_Receive_IT+0x76>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d104      	bne.n	8007490 <UART_Start_Receive_IT+0x6c>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	22ff      	movs	r2, #255	; 0xff
 800748a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800748e:	e01b      	b.n	80074c8 <UART_Start_Receive_IT+0xa4>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	227f      	movs	r2, #127	; 0x7f
 8007494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007498:	e016      	b.n	80074c8 <UART_Start_Receive_IT+0xa4>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074a2:	d10d      	bne.n	80074c0 <UART_Start_Receive_IT+0x9c>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <UART_Start_Receive_IT+0x92>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	227f      	movs	r2, #127	; 0x7f
 80074b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b4:	e008      	b.n	80074c8 <UART_Start_Receive_IT+0xa4>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	223f      	movs	r2, #63	; 0x3f
 80074ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074be:	e003      	b.n	80074c8 <UART_Start_Receive_IT+0xa4>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2222      	movs	r2, #34	; 0x22
 80074d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3308      	adds	r3, #8
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	657b      	str	r3, [r7, #84]	; 0x54
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3308      	adds	r3, #8
 80074f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80074fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e5      	bne.n	80074d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007514:	d107      	bne.n	8007526 <UART_Start_Receive_IT+0x102>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4a21      	ldr	r2, [pc, #132]	; (80075a8 <UART_Start_Receive_IT+0x184>)
 8007522:	669a      	str	r2, [r3, #104]	; 0x68
 8007524:	e002      	b.n	800752c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4a20      	ldr	r2, [pc, #128]	; (80075ac <UART_Start_Receive_IT+0x188>)
 800752a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d019      	beq.n	8007568 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007552:	637b      	str	r3, [r7, #52]	; 0x34
 8007554:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e6      	bne.n	8007534 <UART_Start_Receive_IT+0x110>
 8007566:	e018      	b.n	800759a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	613b      	str	r3, [r7, #16]
   return(result);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f043 0320 	orr.w	r3, r3, #32
 800757c:	653b      	str	r3, [r7, #80]	; 0x50
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007586:	623b      	str	r3, [r7, #32]
 8007588:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	69f9      	ldr	r1, [r7, #28]
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	61bb      	str	r3, [r7, #24]
   return(result);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e6      	bne.n	8007568 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	375c      	adds	r7, #92	; 0x5c
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	0800785f 	.word	0x0800785f
 80075ac:	080076f9 	.word	0x080076f9

080075b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b095      	sub	sp, #84	; 0x54
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d6:	643b      	str	r3, [r7, #64]	; 0x40
 80075d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e6      	bne.n	80075b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3308      	adds	r3, #8
 80075f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	f023 0301 	bic.w	r3, r3, #1
 8007600:	64bb      	str	r3, [r7, #72]	; 0x48
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3308      	adds	r3, #8
 8007608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800760a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e5      	bne.n	80075ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007622:	2b01      	cmp	r3, #1
 8007624:	d118      	bne.n	8007658 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	60bb      	str	r3, [r7, #8]
   return(result);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f023 0310 	bic.w	r3, r3, #16
 800763a:	647b      	str	r3, [r7, #68]	; 0x44
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6979      	ldr	r1, [r7, #20]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	613b      	str	r3, [r7, #16]
   return(result);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e6      	bne.n	8007626 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800766c:	bf00      	nop
 800766e:	3754      	adds	r7, #84	; 0x54
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff faaa 	bl	8006bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6979      	ldr	r1, [r7, #20]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	613b      	str	r3, [r7, #16]
   return(result);
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e6      	bne.n	80076ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff fa76 	bl	8006bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f0:	bf00      	nop
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b096      	sub	sp, #88	; 0x58
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007706:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007710:	2b22      	cmp	r3, #34	; 0x22
 8007712:	f040 8098 	bne.w	8007846 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007720:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007724:	b2d9      	uxtb	r1, r3
 8007726:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800772a:	b2da      	uxtb	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007730:	400a      	ands	r2, r1
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d17b      	bne.n	8007856 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800776c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007772:	653b      	str	r3, [r7, #80]	; 0x50
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800777c:	647b      	str	r3, [r7, #68]	; 0x44
 800777e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800778a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e6      	bne.n	800775e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3308      	adds	r3, #8
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	623b      	str	r3, [r7, #32]
   return(result);
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	f023 0301 	bic.w	r3, r3, #1
 80077a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077b0:	633a      	str	r2, [r7, #48]	; 0x30
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e5      	bne.n	8007790 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d12e      	bne.n	800783e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	e853 3f00 	ldrex	r3, [r3]
 80077f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0310 	bic.w	r3, r3, #16
 80077fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007804:	61fb      	str	r3, [r7, #28]
 8007806:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	69b9      	ldr	r1, [r7, #24]
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	617b      	str	r3, [r7, #20]
   return(result);
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e6      	bne.n	80077e6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f003 0310 	and.w	r3, r3, #16
 8007822:	2b10      	cmp	r3, #16
 8007824:	d103      	bne.n	800782e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2210      	movs	r2, #16
 800782c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff f9e4 	bl	8006c04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800783c:	e00b      	b.n	8007856 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7f9 fde8 	bl	8001414 <HAL_UART_RxCpltCallback>
}
 8007844:	e007      	b.n	8007856 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699a      	ldr	r2, [r3, #24]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0208 	orr.w	r2, r2, #8
 8007854:	619a      	str	r2, [r3, #24]
}
 8007856:	bf00      	nop
 8007858:	3758      	adds	r7, #88	; 0x58
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b096      	sub	sp, #88	; 0x58
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800786c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007876:	2b22      	cmp	r3, #34	; 0x22
 8007878:	f040 8098 	bne.w	80079ac <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800788c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007890:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007894:	4013      	ands	r3, r2
 8007896:	b29a      	uxth	r2, r3
 8007898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800789a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a0:	1c9a      	adds	r2, r3, #2
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d17b      	bne.n	80079bc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e2:	643b      	str	r3, [r7, #64]	; 0x40
 80078e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e6      	bne.n	80078c4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3308      	adds	r3, #8
 80078fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	61fb      	str	r3, [r7, #28]
   return(result);
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	64bb      	str	r3, [r7, #72]	; 0x48
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3308      	adds	r3, #8
 8007914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800791c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e5      	bne.n	80078f6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007942:	2b01      	cmp	r3, #1
 8007944:	d12e      	bne.n	80079a4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	60bb      	str	r3, [r7, #8]
   return(result);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f023 0310 	bic.w	r3, r3, #16
 8007960:	647b      	str	r3, [r7, #68]	; 0x44
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796a:	61bb      	str	r3, [r7, #24]
 800796c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6979      	ldr	r1, [r7, #20]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	613b      	str	r3, [r7, #16]
   return(result);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e6      	bne.n	800794c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b10      	cmp	r3, #16
 800798a:	d103      	bne.n	8007994 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2210      	movs	r2, #16
 8007992:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff f931 	bl	8006c04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079a2:	e00b      	b.n	80079bc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7f9 fd35 	bl	8001414 <HAL_UART_RxCpltCallback>
}
 80079aa:	e007      	b.n	80079bc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0208 	orr.w	r2, r2, #8
 80079ba:	619a      	str	r2, [r3, #24]
}
 80079bc:	bf00      	nop
 80079be:	3758      	adds	r7, #88	; 0x58
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079c4:	b084      	sub	sp, #16
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	f107 001c 	add.w	r0, r7, #28
 80079d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d120      	bne.n	8007a1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	4b20      	ldr	r3, [pc, #128]	; (8007a70 <USB_CoreInit+0xac>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d105      	bne.n	8007a12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa96 	bl	8007f44 <USB_CoreReset>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]
 8007a1c:	e010      	b.n	8007a40 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fa8a 	bl	8007f44 <USB_CoreReset>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d10b      	bne.n	8007a5e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f043 0206 	orr.w	r2, r3, #6
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f043 0220 	orr.w	r2, r3, #32
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a6a:	b004      	add	sp, #16
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	ffbdffbf 	.word	0xffbdffbf

08007a74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f023 0201 	bic.w	r2, r3, #1
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d115      	bne.n	8007ae4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	f7fa fa4b 	bl	8001f60 <HAL_Delay>
      ms++;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3301      	adds	r3, #1
 8007ace:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fa29 	bl	8007f28 <USB_GetMode>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d01e      	beq.n	8007b1a <USB_SetCurrentMode+0x84>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b31      	cmp	r3, #49	; 0x31
 8007ae0:	d9f0      	bls.n	8007ac4 <USB_SetCurrentMode+0x2e>
 8007ae2:	e01a      	b.n	8007b1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d115      	bne.n	8007b16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007af6:	2001      	movs	r0, #1
 8007af8:	f7fa fa32 	bl	8001f60 <HAL_Delay>
      ms++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa10 	bl	8007f28 <USB_GetMode>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <USB_SetCurrentMode+0x84>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b31      	cmp	r3, #49	; 0x31
 8007b12:	d9f0      	bls.n	8007af6 <USB_SetCurrentMode+0x60>
 8007b14:	e001      	b.n	8007b1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e005      	b.n	8007b26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b32      	cmp	r3, #50	; 0x32
 8007b1e:	d101      	bne.n	8007b24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e000      	b.n	8007b26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b30:	b084      	sub	sp, #16
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	e009      	b.n	8007b64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3340      	adds	r3, #64	; 0x40
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	3301      	adds	r3, #1
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b0e      	cmp	r3, #14
 8007b68:	d9f2      	bls.n	8007b50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d11c      	bne.n	8007baa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b7e:	f043 0302 	orr.w	r3, r3, #2
 8007b82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	e005      	b.n	8007bb6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc8:	4619      	mov	r1, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	680b      	ldr	r3, [r1, #0]
 8007bd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d10c      	bne.n	8007bf6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d104      	bne.n	8007bec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007be2:	2100      	movs	r1, #0
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f965 	bl	8007eb4 <USB_SetDevSpeed>
 8007bea:	e008      	b.n	8007bfe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bec:	2101      	movs	r1, #1
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f960 	bl	8007eb4 <USB_SetDevSpeed>
 8007bf4:	e003      	b.n	8007bfe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bf6:	2103      	movs	r1, #3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f95b 	bl	8007eb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bfe:	2110      	movs	r1, #16
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f8f3 	bl	8007dec <USB_FlushTxFifo>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f91f 	bl	8007e54 <USB_FlushRxFifo>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	461a      	mov	r2, r3
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c32:	461a      	mov	r2, r3
 8007c34:	2300      	movs	r3, #0
 8007c36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3e:	461a      	mov	r2, r3
 8007c40:	2300      	movs	r3, #0
 8007c42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c44:	2300      	movs	r3, #0
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	e043      	b.n	8007cd2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c60:	d118      	bne.n	8007c94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c74:	461a      	mov	r2, r3
 8007c76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c7a:	6013      	str	r3, [r2, #0]
 8007c7c:	e013      	b.n	8007ca6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	e008      	b.n	8007ca6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d3b7      	bcc.n	8007c4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	e043      	b.n	8007d68 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cf6:	d118      	bne.n	8007d2a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	e013      	b.n	8007d3c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d20:	461a      	mov	r2, r3
 8007d22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	e008      	b.n	8007d3c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	461a      	mov	r2, r3
 8007d38:	2300      	movs	r3, #0
 8007d3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d48:	461a      	mov	r2, r3
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3301      	adds	r3, #1
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d3b7      	bcc.n	8007ce0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d105      	bne.n	8007da4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	f043 0210 	orr.w	r2, r3, #16
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <USB_DevInit+0x2b4>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f043 0208 	orr.w	r2, r3, #8
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d105      	bne.n	8007dd4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699a      	ldr	r2, [r3, #24]
 8007dcc:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <USB_DevInit+0x2b8>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007de0:	b004      	add	sp, #16
 8007de2:	4770      	bx	lr
 8007de4:	803c3800 	.word	0x803c3800
 8007de8:	40000004 	.word	0x40000004

08007dec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4a13      	ldr	r2, [pc, #76]	; (8007e50 <USB_FlushTxFifo+0x64>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d901      	bls.n	8007e0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e01b      	b.n	8007e44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	daf2      	bge.n	8007dfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	019b      	lsls	r3, r3, #6
 8007e1c:	f043 0220 	orr.w	r2, r3, #32
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a08      	ldr	r2, [pc, #32]	; (8007e50 <USB_FlushTxFifo+0x64>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d901      	bls.n	8007e36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e006      	b.n	8007e44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	d0f0      	beq.n	8007e24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	00030d40 	.word	0x00030d40

08007e54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4a11      	ldr	r2, [pc, #68]	; (8007eb0 <USB_FlushRxFifo+0x5c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d901      	bls.n	8007e72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e018      	b.n	8007ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	daf2      	bge.n	8007e60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2210      	movs	r2, #16
 8007e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4a08      	ldr	r2, [pc, #32]	; (8007eb0 <USB_FlushRxFifo+0x5c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d901      	bls.n	8007e96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e006      	b.n	8007ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	f003 0310 	and.w	r3, r3, #16
 8007e9e:	2b10      	cmp	r3, #16
 8007ea0:	d0f0      	beq.n	8007e84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	00030d40 	.word	0x00030d40

08007eb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	68f9      	ldr	r1, [r7, #12]
 8007ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f00:	f023 0303 	bic.w	r3, r3, #3
 8007f04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f14:	f043 0302 	orr.w	r3, r3, #2
 8007f18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	f003 0301 	and.w	r3, r3, #1
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4a13      	ldr	r2, [pc, #76]	; (8007fa8 <USB_CoreReset+0x64>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d901      	bls.n	8007f62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e01b      	b.n	8007f9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	daf2      	bge.n	8007f50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f043 0201 	orr.w	r2, r3, #1
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a09      	ldr	r2, [pc, #36]	; (8007fa8 <USB_CoreReset+0x64>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d901      	bls.n	8007f8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e006      	b.n	8007f9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d0f0      	beq.n	8007f7a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	00030d40 	.word	0x00030d40

08007fac <atoi>:
 8007fac:	220a      	movs	r2, #10
 8007fae:	2100      	movs	r1, #0
 8007fb0:	f000 bd3e 	b.w	8008a30 <strtol>

08007fb4 <__errno>:
 8007fb4:	4b01      	ldr	r3, [pc, #4]	; (8007fbc <__errno+0x8>)
 8007fb6:	6818      	ldr	r0, [r3, #0]
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	20000010 	.word	0x20000010

08007fc0 <__libc_init_array>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	4d0d      	ldr	r5, [pc, #52]	; (8007ff8 <__libc_init_array+0x38>)
 8007fc4:	4c0d      	ldr	r4, [pc, #52]	; (8007ffc <__libc_init_array+0x3c>)
 8007fc6:	1b64      	subs	r4, r4, r5
 8007fc8:	10a4      	asrs	r4, r4, #2
 8007fca:	2600      	movs	r6, #0
 8007fcc:	42a6      	cmp	r6, r4
 8007fce:	d109      	bne.n	8007fe4 <__libc_init_array+0x24>
 8007fd0:	4d0b      	ldr	r5, [pc, #44]	; (8008000 <__libc_init_array+0x40>)
 8007fd2:	4c0c      	ldr	r4, [pc, #48]	; (8008004 <__libc_init_array+0x44>)
 8007fd4:	f002 ff90 	bl	800aef8 <_init>
 8007fd8:	1b64      	subs	r4, r4, r5
 8007fda:	10a4      	asrs	r4, r4, #2
 8007fdc:	2600      	movs	r6, #0
 8007fde:	42a6      	cmp	r6, r4
 8007fe0:	d105      	bne.n	8007fee <__libc_init_array+0x2e>
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe8:	4798      	blx	r3
 8007fea:	3601      	adds	r6, #1
 8007fec:	e7ee      	b.n	8007fcc <__libc_init_array+0xc>
 8007fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff2:	4798      	blx	r3
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	e7f2      	b.n	8007fde <__libc_init_array+0x1e>
 8007ff8:	0800b31c 	.word	0x0800b31c
 8007ffc:	0800b31c 	.word	0x0800b31c
 8008000:	0800b31c 	.word	0x0800b31c
 8008004:	0800b320 	.word	0x0800b320

08008008 <memset>:
 8008008:	4402      	add	r2, r0
 800800a:	4603      	mov	r3, r0
 800800c:	4293      	cmp	r3, r2
 800800e:	d100      	bne.n	8008012 <memset+0xa>
 8008010:	4770      	bx	lr
 8008012:	f803 1b01 	strb.w	r1, [r3], #1
 8008016:	e7f9      	b.n	800800c <memset+0x4>

08008018 <__cvt>:
 8008018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	ec55 4b10 	vmov	r4, r5, d0
 8008020:	2d00      	cmp	r5, #0
 8008022:	460e      	mov	r6, r1
 8008024:	4619      	mov	r1, r3
 8008026:	462b      	mov	r3, r5
 8008028:	bfbb      	ittet	lt
 800802a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800802e:	461d      	movlt	r5, r3
 8008030:	2300      	movge	r3, #0
 8008032:	232d      	movlt	r3, #45	; 0x2d
 8008034:	700b      	strb	r3, [r1, #0]
 8008036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008038:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800803c:	4691      	mov	r9, r2
 800803e:	f023 0820 	bic.w	r8, r3, #32
 8008042:	bfbc      	itt	lt
 8008044:	4622      	movlt	r2, r4
 8008046:	4614      	movlt	r4, r2
 8008048:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800804c:	d005      	beq.n	800805a <__cvt+0x42>
 800804e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008052:	d100      	bne.n	8008056 <__cvt+0x3e>
 8008054:	3601      	adds	r6, #1
 8008056:	2102      	movs	r1, #2
 8008058:	e000      	b.n	800805c <__cvt+0x44>
 800805a:	2103      	movs	r1, #3
 800805c:	ab03      	add	r3, sp, #12
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	ab02      	add	r3, sp, #8
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	ec45 4b10 	vmov	d0, r4, r5
 8008068:	4653      	mov	r3, sl
 800806a:	4632      	mov	r2, r6
 800806c:	f000 fd78 	bl	8008b60 <_dtoa_r>
 8008070:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008074:	4607      	mov	r7, r0
 8008076:	d102      	bne.n	800807e <__cvt+0x66>
 8008078:	f019 0f01 	tst.w	r9, #1
 800807c:	d022      	beq.n	80080c4 <__cvt+0xac>
 800807e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008082:	eb07 0906 	add.w	r9, r7, r6
 8008086:	d110      	bne.n	80080aa <__cvt+0x92>
 8008088:	783b      	ldrb	r3, [r7, #0]
 800808a:	2b30      	cmp	r3, #48	; 0x30
 800808c:	d10a      	bne.n	80080a4 <__cvt+0x8c>
 800808e:	2200      	movs	r2, #0
 8008090:	2300      	movs	r3, #0
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	f7f8 fd37 	bl	8000b08 <__aeabi_dcmpeq>
 800809a:	b918      	cbnz	r0, 80080a4 <__cvt+0x8c>
 800809c:	f1c6 0601 	rsb	r6, r6, #1
 80080a0:	f8ca 6000 	str.w	r6, [sl]
 80080a4:	f8da 3000 	ldr.w	r3, [sl]
 80080a8:	4499      	add	r9, r3
 80080aa:	2200      	movs	r2, #0
 80080ac:	2300      	movs	r3, #0
 80080ae:	4620      	mov	r0, r4
 80080b0:	4629      	mov	r1, r5
 80080b2:	f7f8 fd29 	bl	8000b08 <__aeabi_dcmpeq>
 80080b6:	b108      	cbz	r0, 80080bc <__cvt+0xa4>
 80080b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80080bc:	2230      	movs	r2, #48	; 0x30
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	454b      	cmp	r3, r9
 80080c2:	d307      	bcc.n	80080d4 <__cvt+0xbc>
 80080c4:	9b03      	ldr	r3, [sp, #12]
 80080c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080c8:	1bdb      	subs	r3, r3, r7
 80080ca:	4638      	mov	r0, r7
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	b004      	add	sp, #16
 80080d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d4:	1c59      	adds	r1, r3, #1
 80080d6:	9103      	str	r1, [sp, #12]
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	e7f0      	b.n	80080be <__cvt+0xa6>

080080dc <__exponent>:
 80080dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080de:	4603      	mov	r3, r0
 80080e0:	2900      	cmp	r1, #0
 80080e2:	bfb8      	it	lt
 80080e4:	4249      	neglt	r1, r1
 80080e6:	f803 2b02 	strb.w	r2, [r3], #2
 80080ea:	bfb4      	ite	lt
 80080ec:	222d      	movlt	r2, #45	; 0x2d
 80080ee:	222b      	movge	r2, #43	; 0x2b
 80080f0:	2909      	cmp	r1, #9
 80080f2:	7042      	strb	r2, [r0, #1]
 80080f4:	dd2a      	ble.n	800814c <__exponent+0x70>
 80080f6:	f10d 0407 	add.w	r4, sp, #7
 80080fa:	46a4      	mov	ip, r4
 80080fc:	270a      	movs	r7, #10
 80080fe:	46a6      	mov	lr, r4
 8008100:	460a      	mov	r2, r1
 8008102:	fb91 f6f7 	sdiv	r6, r1, r7
 8008106:	fb07 1516 	mls	r5, r7, r6, r1
 800810a:	3530      	adds	r5, #48	; 0x30
 800810c:	2a63      	cmp	r2, #99	; 0x63
 800810e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008112:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008116:	4631      	mov	r1, r6
 8008118:	dcf1      	bgt.n	80080fe <__exponent+0x22>
 800811a:	3130      	adds	r1, #48	; 0x30
 800811c:	f1ae 0502 	sub.w	r5, lr, #2
 8008120:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008124:	1c44      	adds	r4, r0, #1
 8008126:	4629      	mov	r1, r5
 8008128:	4561      	cmp	r1, ip
 800812a:	d30a      	bcc.n	8008142 <__exponent+0x66>
 800812c:	f10d 0209 	add.w	r2, sp, #9
 8008130:	eba2 020e 	sub.w	r2, r2, lr
 8008134:	4565      	cmp	r5, ip
 8008136:	bf88      	it	hi
 8008138:	2200      	movhi	r2, #0
 800813a:	4413      	add	r3, r2
 800813c:	1a18      	subs	r0, r3, r0
 800813e:	b003      	add	sp, #12
 8008140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008146:	f804 2f01 	strb.w	r2, [r4, #1]!
 800814a:	e7ed      	b.n	8008128 <__exponent+0x4c>
 800814c:	2330      	movs	r3, #48	; 0x30
 800814e:	3130      	adds	r1, #48	; 0x30
 8008150:	7083      	strb	r3, [r0, #2]
 8008152:	70c1      	strb	r1, [r0, #3]
 8008154:	1d03      	adds	r3, r0, #4
 8008156:	e7f1      	b.n	800813c <__exponent+0x60>

08008158 <_printf_float>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	ed2d 8b02 	vpush	{d8}
 8008160:	b08d      	sub	sp, #52	; 0x34
 8008162:	460c      	mov	r4, r1
 8008164:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008168:	4616      	mov	r6, r2
 800816a:	461f      	mov	r7, r3
 800816c:	4605      	mov	r5, r0
 800816e:	f001 fae5 	bl	800973c <_localeconv_r>
 8008172:	f8d0 a000 	ldr.w	sl, [r0]
 8008176:	4650      	mov	r0, sl
 8008178:	f7f8 f84a 	bl	8000210 <strlen>
 800817c:	2300      	movs	r3, #0
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	9305      	str	r3, [sp, #20]
 8008184:	f8d8 3000 	ldr.w	r3, [r8]
 8008188:	f894 b018 	ldrb.w	fp, [r4, #24]
 800818c:	3307      	adds	r3, #7
 800818e:	f023 0307 	bic.w	r3, r3, #7
 8008192:	f103 0208 	add.w	r2, r3, #8
 8008196:	f8c8 2000 	str.w	r2, [r8]
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081aa:	9307      	str	r3, [sp, #28]
 80081ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80081b0:	ee08 0a10 	vmov	s16, r0
 80081b4:	4b9f      	ldr	r3, [pc, #636]	; (8008434 <_printf_float+0x2dc>)
 80081b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081ba:	f04f 32ff 	mov.w	r2, #4294967295
 80081be:	f7f8 fcd5 	bl	8000b6c <__aeabi_dcmpun>
 80081c2:	bb88      	cbnz	r0, 8008228 <_printf_float+0xd0>
 80081c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081c8:	4b9a      	ldr	r3, [pc, #616]	; (8008434 <_printf_float+0x2dc>)
 80081ca:	f04f 32ff 	mov.w	r2, #4294967295
 80081ce:	f7f8 fcaf 	bl	8000b30 <__aeabi_dcmple>
 80081d2:	bb48      	cbnz	r0, 8008228 <_printf_float+0xd0>
 80081d4:	2200      	movs	r2, #0
 80081d6:	2300      	movs	r3, #0
 80081d8:	4640      	mov	r0, r8
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f8 fc9e 	bl	8000b1c <__aeabi_dcmplt>
 80081e0:	b110      	cbz	r0, 80081e8 <_printf_float+0x90>
 80081e2:	232d      	movs	r3, #45	; 0x2d
 80081e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e8:	4b93      	ldr	r3, [pc, #588]	; (8008438 <_printf_float+0x2e0>)
 80081ea:	4894      	ldr	r0, [pc, #592]	; (800843c <_printf_float+0x2e4>)
 80081ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081f0:	bf94      	ite	ls
 80081f2:	4698      	movls	r8, r3
 80081f4:	4680      	movhi	r8, r0
 80081f6:	2303      	movs	r3, #3
 80081f8:	6123      	str	r3, [r4, #16]
 80081fa:	9b05      	ldr	r3, [sp, #20]
 80081fc:	f023 0204 	bic.w	r2, r3, #4
 8008200:	6022      	str	r2, [r4, #0]
 8008202:	f04f 0900 	mov.w	r9, #0
 8008206:	9700      	str	r7, [sp, #0]
 8008208:	4633      	mov	r3, r6
 800820a:	aa0b      	add	r2, sp, #44	; 0x2c
 800820c:	4621      	mov	r1, r4
 800820e:	4628      	mov	r0, r5
 8008210:	f000 f9d8 	bl	80085c4 <_printf_common>
 8008214:	3001      	adds	r0, #1
 8008216:	f040 8090 	bne.w	800833a <_printf_float+0x1e2>
 800821a:	f04f 30ff 	mov.w	r0, #4294967295
 800821e:	b00d      	add	sp, #52	; 0x34
 8008220:	ecbd 8b02 	vpop	{d8}
 8008224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008228:	4642      	mov	r2, r8
 800822a:	464b      	mov	r3, r9
 800822c:	4640      	mov	r0, r8
 800822e:	4649      	mov	r1, r9
 8008230:	f7f8 fc9c 	bl	8000b6c <__aeabi_dcmpun>
 8008234:	b140      	cbz	r0, 8008248 <_printf_float+0xf0>
 8008236:	464b      	mov	r3, r9
 8008238:	2b00      	cmp	r3, #0
 800823a:	bfbc      	itt	lt
 800823c:	232d      	movlt	r3, #45	; 0x2d
 800823e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008242:	487f      	ldr	r0, [pc, #508]	; (8008440 <_printf_float+0x2e8>)
 8008244:	4b7f      	ldr	r3, [pc, #508]	; (8008444 <_printf_float+0x2ec>)
 8008246:	e7d1      	b.n	80081ec <_printf_float+0x94>
 8008248:	6863      	ldr	r3, [r4, #4]
 800824a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800824e:	9206      	str	r2, [sp, #24]
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	d13f      	bne.n	80082d4 <_printf_float+0x17c>
 8008254:	2306      	movs	r3, #6
 8008256:	6063      	str	r3, [r4, #4]
 8008258:	9b05      	ldr	r3, [sp, #20]
 800825a:	6861      	ldr	r1, [r4, #4]
 800825c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008260:	2300      	movs	r3, #0
 8008262:	9303      	str	r3, [sp, #12]
 8008264:	ab0a      	add	r3, sp, #40	; 0x28
 8008266:	e9cd b301 	strd	fp, r3, [sp, #4]
 800826a:	ab09      	add	r3, sp, #36	; 0x24
 800826c:	ec49 8b10 	vmov	d0, r8, r9
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	6022      	str	r2, [r4, #0]
 8008274:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008278:	4628      	mov	r0, r5
 800827a:	f7ff fecd 	bl	8008018 <__cvt>
 800827e:	9b06      	ldr	r3, [sp, #24]
 8008280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008282:	2b47      	cmp	r3, #71	; 0x47
 8008284:	4680      	mov	r8, r0
 8008286:	d108      	bne.n	800829a <_printf_float+0x142>
 8008288:	1cc8      	adds	r0, r1, #3
 800828a:	db02      	blt.n	8008292 <_printf_float+0x13a>
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	4299      	cmp	r1, r3
 8008290:	dd41      	ble.n	8008316 <_printf_float+0x1be>
 8008292:	f1ab 0b02 	sub.w	fp, fp, #2
 8008296:	fa5f fb8b 	uxtb.w	fp, fp
 800829a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800829e:	d820      	bhi.n	80082e2 <_printf_float+0x18a>
 80082a0:	3901      	subs	r1, #1
 80082a2:	465a      	mov	r2, fp
 80082a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082a8:	9109      	str	r1, [sp, #36]	; 0x24
 80082aa:	f7ff ff17 	bl	80080dc <__exponent>
 80082ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b0:	1813      	adds	r3, r2, r0
 80082b2:	2a01      	cmp	r2, #1
 80082b4:	4681      	mov	r9, r0
 80082b6:	6123      	str	r3, [r4, #16]
 80082b8:	dc02      	bgt.n	80082c0 <_printf_float+0x168>
 80082ba:	6822      	ldr	r2, [r4, #0]
 80082bc:	07d2      	lsls	r2, r2, #31
 80082be:	d501      	bpl.n	80082c4 <_printf_float+0x16c>
 80082c0:	3301      	adds	r3, #1
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d09c      	beq.n	8008206 <_printf_float+0xae>
 80082cc:	232d      	movs	r3, #45	; 0x2d
 80082ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d2:	e798      	b.n	8008206 <_printf_float+0xae>
 80082d4:	9a06      	ldr	r2, [sp, #24]
 80082d6:	2a47      	cmp	r2, #71	; 0x47
 80082d8:	d1be      	bne.n	8008258 <_printf_float+0x100>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1bc      	bne.n	8008258 <_printf_float+0x100>
 80082de:	2301      	movs	r3, #1
 80082e0:	e7b9      	b.n	8008256 <_printf_float+0xfe>
 80082e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082e6:	d118      	bne.n	800831a <_printf_float+0x1c2>
 80082e8:	2900      	cmp	r1, #0
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	dd0b      	ble.n	8008306 <_printf_float+0x1ae>
 80082ee:	6121      	str	r1, [r4, #16]
 80082f0:	b913      	cbnz	r3, 80082f8 <_printf_float+0x1a0>
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	07d0      	lsls	r0, r2, #31
 80082f6:	d502      	bpl.n	80082fe <_printf_float+0x1a6>
 80082f8:	3301      	adds	r3, #1
 80082fa:	440b      	add	r3, r1
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008300:	f04f 0900 	mov.w	r9, #0
 8008304:	e7de      	b.n	80082c4 <_printf_float+0x16c>
 8008306:	b913      	cbnz	r3, 800830e <_printf_float+0x1b6>
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	07d2      	lsls	r2, r2, #31
 800830c:	d501      	bpl.n	8008312 <_printf_float+0x1ba>
 800830e:	3302      	adds	r3, #2
 8008310:	e7f4      	b.n	80082fc <_printf_float+0x1a4>
 8008312:	2301      	movs	r3, #1
 8008314:	e7f2      	b.n	80082fc <_printf_float+0x1a4>
 8008316:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800831a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800831c:	4299      	cmp	r1, r3
 800831e:	db05      	blt.n	800832c <_printf_float+0x1d4>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	6121      	str	r1, [r4, #16]
 8008324:	07d8      	lsls	r0, r3, #31
 8008326:	d5ea      	bpl.n	80082fe <_printf_float+0x1a6>
 8008328:	1c4b      	adds	r3, r1, #1
 800832a:	e7e7      	b.n	80082fc <_printf_float+0x1a4>
 800832c:	2900      	cmp	r1, #0
 800832e:	bfd4      	ite	le
 8008330:	f1c1 0202 	rsble	r2, r1, #2
 8008334:	2201      	movgt	r2, #1
 8008336:	4413      	add	r3, r2
 8008338:	e7e0      	b.n	80082fc <_printf_float+0x1a4>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	055a      	lsls	r2, r3, #21
 800833e:	d407      	bmi.n	8008350 <_printf_float+0x1f8>
 8008340:	6923      	ldr	r3, [r4, #16]
 8008342:	4642      	mov	r2, r8
 8008344:	4631      	mov	r1, r6
 8008346:	4628      	mov	r0, r5
 8008348:	47b8      	blx	r7
 800834a:	3001      	adds	r0, #1
 800834c:	d12c      	bne.n	80083a8 <_printf_float+0x250>
 800834e:	e764      	b.n	800821a <_printf_float+0xc2>
 8008350:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008354:	f240 80e0 	bls.w	8008518 <_printf_float+0x3c0>
 8008358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800835c:	2200      	movs	r2, #0
 800835e:	2300      	movs	r3, #0
 8008360:	f7f8 fbd2 	bl	8000b08 <__aeabi_dcmpeq>
 8008364:	2800      	cmp	r0, #0
 8008366:	d034      	beq.n	80083d2 <_printf_float+0x27a>
 8008368:	4a37      	ldr	r2, [pc, #220]	; (8008448 <_printf_float+0x2f0>)
 800836a:	2301      	movs	r3, #1
 800836c:	4631      	mov	r1, r6
 800836e:	4628      	mov	r0, r5
 8008370:	47b8      	blx	r7
 8008372:	3001      	adds	r0, #1
 8008374:	f43f af51 	beq.w	800821a <_printf_float+0xc2>
 8008378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800837c:	429a      	cmp	r2, r3
 800837e:	db02      	blt.n	8008386 <_printf_float+0x22e>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	07d8      	lsls	r0, r3, #31
 8008384:	d510      	bpl.n	80083a8 <_printf_float+0x250>
 8008386:	ee18 3a10 	vmov	r3, s16
 800838a:	4652      	mov	r2, sl
 800838c:	4631      	mov	r1, r6
 800838e:	4628      	mov	r0, r5
 8008390:	47b8      	blx	r7
 8008392:	3001      	adds	r0, #1
 8008394:	f43f af41 	beq.w	800821a <_printf_float+0xc2>
 8008398:	f04f 0800 	mov.w	r8, #0
 800839c:	f104 091a 	add.w	r9, r4, #26
 80083a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a2:	3b01      	subs	r3, #1
 80083a4:	4543      	cmp	r3, r8
 80083a6:	dc09      	bgt.n	80083bc <_printf_float+0x264>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	079b      	lsls	r3, r3, #30
 80083ac:	f100 8105 	bmi.w	80085ba <_printf_float+0x462>
 80083b0:	68e0      	ldr	r0, [r4, #12]
 80083b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b4:	4298      	cmp	r0, r3
 80083b6:	bfb8      	it	lt
 80083b8:	4618      	movlt	r0, r3
 80083ba:	e730      	b.n	800821e <_printf_float+0xc6>
 80083bc:	2301      	movs	r3, #1
 80083be:	464a      	mov	r2, r9
 80083c0:	4631      	mov	r1, r6
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	f43f af27 	beq.w	800821a <_printf_float+0xc2>
 80083cc:	f108 0801 	add.w	r8, r8, #1
 80083d0:	e7e6      	b.n	80083a0 <_printf_float+0x248>
 80083d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dc39      	bgt.n	800844c <_printf_float+0x2f4>
 80083d8:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <_printf_float+0x2f0>)
 80083da:	2301      	movs	r3, #1
 80083dc:	4631      	mov	r1, r6
 80083de:	4628      	mov	r0, r5
 80083e0:	47b8      	blx	r7
 80083e2:	3001      	adds	r0, #1
 80083e4:	f43f af19 	beq.w	800821a <_printf_float+0xc2>
 80083e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083ec:	4313      	orrs	r3, r2
 80083ee:	d102      	bne.n	80083f6 <_printf_float+0x29e>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	07d9      	lsls	r1, r3, #31
 80083f4:	d5d8      	bpl.n	80083a8 <_printf_float+0x250>
 80083f6:	ee18 3a10 	vmov	r3, s16
 80083fa:	4652      	mov	r2, sl
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	f43f af09 	beq.w	800821a <_printf_float+0xc2>
 8008408:	f04f 0900 	mov.w	r9, #0
 800840c:	f104 0a1a 	add.w	sl, r4, #26
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	425b      	negs	r3, r3
 8008414:	454b      	cmp	r3, r9
 8008416:	dc01      	bgt.n	800841c <_printf_float+0x2c4>
 8008418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841a:	e792      	b.n	8008342 <_printf_float+0x1ea>
 800841c:	2301      	movs	r3, #1
 800841e:	4652      	mov	r2, sl
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	47b8      	blx	r7
 8008426:	3001      	adds	r0, #1
 8008428:	f43f aef7 	beq.w	800821a <_printf_float+0xc2>
 800842c:	f109 0901 	add.w	r9, r9, #1
 8008430:	e7ee      	b.n	8008410 <_printf_float+0x2b8>
 8008432:	bf00      	nop
 8008434:	7fefffff 	.word	0x7fefffff
 8008438:	0800af3c 	.word	0x0800af3c
 800843c:	0800af40 	.word	0x0800af40
 8008440:	0800af48 	.word	0x0800af48
 8008444:	0800af44 	.word	0x0800af44
 8008448:	0800af4c 	.word	0x0800af4c
 800844c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008450:	429a      	cmp	r2, r3
 8008452:	bfa8      	it	ge
 8008454:	461a      	movge	r2, r3
 8008456:	2a00      	cmp	r2, #0
 8008458:	4691      	mov	r9, r2
 800845a:	dc37      	bgt.n	80084cc <_printf_float+0x374>
 800845c:	f04f 0b00 	mov.w	fp, #0
 8008460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008464:	f104 021a 	add.w	r2, r4, #26
 8008468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800846a:	9305      	str	r3, [sp, #20]
 800846c:	eba3 0309 	sub.w	r3, r3, r9
 8008470:	455b      	cmp	r3, fp
 8008472:	dc33      	bgt.n	80084dc <_printf_float+0x384>
 8008474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008478:	429a      	cmp	r2, r3
 800847a:	db3b      	blt.n	80084f4 <_printf_float+0x39c>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	07da      	lsls	r2, r3, #31
 8008480:	d438      	bmi.n	80084f4 <_printf_float+0x39c>
 8008482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008484:	9a05      	ldr	r2, [sp, #20]
 8008486:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008488:	1a9a      	subs	r2, r3, r2
 800848a:	eba3 0901 	sub.w	r9, r3, r1
 800848e:	4591      	cmp	r9, r2
 8008490:	bfa8      	it	ge
 8008492:	4691      	movge	r9, r2
 8008494:	f1b9 0f00 	cmp.w	r9, #0
 8008498:	dc35      	bgt.n	8008506 <_printf_float+0x3ae>
 800849a:	f04f 0800 	mov.w	r8, #0
 800849e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084a2:	f104 0a1a 	add.w	sl, r4, #26
 80084a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084aa:	1a9b      	subs	r3, r3, r2
 80084ac:	eba3 0309 	sub.w	r3, r3, r9
 80084b0:	4543      	cmp	r3, r8
 80084b2:	f77f af79 	ble.w	80083a8 <_printf_float+0x250>
 80084b6:	2301      	movs	r3, #1
 80084b8:	4652      	mov	r2, sl
 80084ba:	4631      	mov	r1, r6
 80084bc:	4628      	mov	r0, r5
 80084be:	47b8      	blx	r7
 80084c0:	3001      	adds	r0, #1
 80084c2:	f43f aeaa 	beq.w	800821a <_printf_float+0xc2>
 80084c6:	f108 0801 	add.w	r8, r8, #1
 80084ca:	e7ec      	b.n	80084a6 <_printf_float+0x34e>
 80084cc:	4613      	mov	r3, r2
 80084ce:	4631      	mov	r1, r6
 80084d0:	4642      	mov	r2, r8
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	d1c0      	bne.n	800845c <_printf_float+0x304>
 80084da:	e69e      	b.n	800821a <_printf_float+0xc2>
 80084dc:	2301      	movs	r3, #1
 80084de:	4631      	mov	r1, r6
 80084e0:	4628      	mov	r0, r5
 80084e2:	9205      	str	r2, [sp, #20]
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	f43f ae97 	beq.w	800821a <_printf_float+0xc2>
 80084ec:	9a05      	ldr	r2, [sp, #20]
 80084ee:	f10b 0b01 	add.w	fp, fp, #1
 80084f2:	e7b9      	b.n	8008468 <_printf_float+0x310>
 80084f4:	ee18 3a10 	vmov	r3, s16
 80084f8:	4652      	mov	r2, sl
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	d1be      	bne.n	8008482 <_printf_float+0x32a>
 8008504:	e689      	b.n	800821a <_printf_float+0xc2>
 8008506:	9a05      	ldr	r2, [sp, #20]
 8008508:	464b      	mov	r3, r9
 800850a:	4442      	add	r2, r8
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	d1c1      	bne.n	800849a <_printf_float+0x342>
 8008516:	e680      	b.n	800821a <_printf_float+0xc2>
 8008518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800851a:	2a01      	cmp	r2, #1
 800851c:	dc01      	bgt.n	8008522 <_printf_float+0x3ca>
 800851e:	07db      	lsls	r3, r3, #31
 8008520:	d538      	bpl.n	8008594 <_printf_float+0x43c>
 8008522:	2301      	movs	r3, #1
 8008524:	4642      	mov	r2, r8
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	47b8      	blx	r7
 800852c:	3001      	adds	r0, #1
 800852e:	f43f ae74 	beq.w	800821a <_printf_float+0xc2>
 8008532:	ee18 3a10 	vmov	r3, s16
 8008536:	4652      	mov	r2, sl
 8008538:	4631      	mov	r1, r6
 800853a:	4628      	mov	r0, r5
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	f43f ae6b 	beq.w	800821a <_printf_float+0xc2>
 8008544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008548:	2200      	movs	r2, #0
 800854a:	2300      	movs	r3, #0
 800854c:	f7f8 fadc 	bl	8000b08 <__aeabi_dcmpeq>
 8008550:	b9d8      	cbnz	r0, 800858a <_printf_float+0x432>
 8008552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008554:	f108 0201 	add.w	r2, r8, #1
 8008558:	3b01      	subs	r3, #1
 800855a:	4631      	mov	r1, r6
 800855c:	4628      	mov	r0, r5
 800855e:	47b8      	blx	r7
 8008560:	3001      	adds	r0, #1
 8008562:	d10e      	bne.n	8008582 <_printf_float+0x42a>
 8008564:	e659      	b.n	800821a <_printf_float+0xc2>
 8008566:	2301      	movs	r3, #1
 8008568:	4652      	mov	r2, sl
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	f43f ae52 	beq.w	800821a <_printf_float+0xc2>
 8008576:	f108 0801 	add.w	r8, r8, #1
 800857a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857c:	3b01      	subs	r3, #1
 800857e:	4543      	cmp	r3, r8
 8008580:	dcf1      	bgt.n	8008566 <_printf_float+0x40e>
 8008582:	464b      	mov	r3, r9
 8008584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008588:	e6dc      	b.n	8008344 <_printf_float+0x1ec>
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	f104 0a1a 	add.w	sl, r4, #26
 8008592:	e7f2      	b.n	800857a <_printf_float+0x422>
 8008594:	2301      	movs	r3, #1
 8008596:	4642      	mov	r2, r8
 8008598:	e7df      	b.n	800855a <_printf_float+0x402>
 800859a:	2301      	movs	r3, #1
 800859c:	464a      	mov	r2, r9
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f ae38 	beq.w	800821a <_printf_float+0xc2>
 80085aa:	f108 0801 	add.w	r8, r8, #1
 80085ae:	68e3      	ldr	r3, [r4, #12]
 80085b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085b2:	1a5b      	subs	r3, r3, r1
 80085b4:	4543      	cmp	r3, r8
 80085b6:	dcf0      	bgt.n	800859a <_printf_float+0x442>
 80085b8:	e6fa      	b.n	80083b0 <_printf_float+0x258>
 80085ba:	f04f 0800 	mov.w	r8, #0
 80085be:	f104 0919 	add.w	r9, r4, #25
 80085c2:	e7f4      	b.n	80085ae <_printf_float+0x456>

080085c4 <_printf_common>:
 80085c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	4616      	mov	r6, r2
 80085ca:	4699      	mov	r9, r3
 80085cc:	688a      	ldr	r2, [r1, #8]
 80085ce:	690b      	ldr	r3, [r1, #16]
 80085d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085d4:	4293      	cmp	r3, r2
 80085d6:	bfb8      	it	lt
 80085d8:	4613      	movlt	r3, r2
 80085da:	6033      	str	r3, [r6, #0]
 80085dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085e0:	4607      	mov	r7, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	b10a      	cbz	r2, 80085ea <_printf_common+0x26>
 80085e6:	3301      	adds	r3, #1
 80085e8:	6033      	str	r3, [r6, #0]
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	0699      	lsls	r1, r3, #26
 80085ee:	bf42      	ittt	mi
 80085f0:	6833      	ldrmi	r3, [r6, #0]
 80085f2:	3302      	addmi	r3, #2
 80085f4:	6033      	strmi	r3, [r6, #0]
 80085f6:	6825      	ldr	r5, [r4, #0]
 80085f8:	f015 0506 	ands.w	r5, r5, #6
 80085fc:	d106      	bne.n	800860c <_printf_common+0x48>
 80085fe:	f104 0a19 	add.w	sl, r4, #25
 8008602:	68e3      	ldr	r3, [r4, #12]
 8008604:	6832      	ldr	r2, [r6, #0]
 8008606:	1a9b      	subs	r3, r3, r2
 8008608:	42ab      	cmp	r3, r5
 800860a:	dc26      	bgt.n	800865a <_printf_common+0x96>
 800860c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008610:	1e13      	subs	r3, r2, #0
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	bf18      	it	ne
 8008616:	2301      	movne	r3, #1
 8008618:	0692      	lsls	r2, r2, #26
 800861a:	d42b      	bmi.n	8008674 <_printf_common+0xb0>
 800861c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008620:	4649      	mov	r1, r9
 8008622:	4638      	mov	r0, r7
 8008624:	47c0      	blx	r8
 8008626:	3001      	adds	r0, #1
 8008628:	d01e      	beq.n	8008668 <_printf_common+0xa4>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	68e5      	ldr	r5, [r4, #12]
 800862e:	6832      	ldr	r2, [r6, #0]
 8008630:	f003 0306 	and.w	r3, r3, #6
 8008634:	2b04      	cmp	r3, #4
 8008636:	bf08      	it	eq
 8008638:	1aad      	subeq	r5, r5, r2
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	6922      	ldr	r2, [r4, #16]
 800863e:	bf0c      	ite	eq
 8008640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008644:	2500      	movne	r5, #0
 8008646:	4293      	cmp	r3, r2
 8008648:	bfc4      	itt	gt
 800864a:	1a9b      	subgt	r3, r3, r2
 800864c:	18ed      	addgt	r5, r5, r3
 800864e:	2600      	movs	r6, #0
 8008650:	341a      	adds	r4, #26
 8008652:	42b5      	cmp	r5, r6
 8008654:	d11a      	bne.n	800868c <_printf_common+0xc8>
 8008656:	2000      	movs	r0, #0
 8008658:	e008      	b.n	800866c <_printf_common+0xa8>
 800865a:	2301      	movs	r3, #1
 800865c:	4652      	mov	r2, sl
 800865e:	4649      	mov	r1, r9
 8008660:	4638      	mov	r0, r7
 8008662:	47c0      	blx	r8
 8008664:	3001      	adds	r0, #1
 8008666:	d103      	bne.n	8008670 <_printf_common+0xac>
 8008668:	f04f 30ff 	mov.w	r0, #4294967295
 800866c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008670:	3501      	adds	r5, #1
 8008672:	e7c6      	b.n	8008602 <_printf_common+0x3e>
 8008674:	18e1      	adds	r1, r4, r3
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	2030      	movs	r0, #48	; 0x30
 800867a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800867e:	4422      	add	r2, r4
 8008680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008688:	3302      	adds	r3, #2
 800868a:	e7c7      	b.n	800861c <_printf_common+0x58>
 800868c:	2301      	movs	r3, #1
 800868e:	4622      	mov	r2, r4
 8008690:	4649      	mov	r1, r9
 8008692:	4638      	mov	r0, r7
 8008694:	47c0      	blx	r8
 8008696:	3001      	adds	r0, #1
 8008698:	d0e6      	beq.n	8008668 <_printf_common+0xa4>
 800869a:	3601      	adds	r6, #1
 800869c:	e7d9      	b.n	8008652 <_printf_common+0x8e>
	...

080086a0 <_printf_i>:
 80086a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	7e0f      	ldrb	r7, [r1, #24]
 80086a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086a8:	2f78      	cmp	r7, #120	; 0x78
 80086aa:	4691      	mov	r9, r2
 80086ac:	4680      	mov	r8, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	469a      	mov	sl, r3
 80086b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086b6:	d807      	bhi.n	80086c8 <_printf_i+0x28>
 80086b8:	2f62      	cmp	r7, #98	; 0x62
 80086ba:	d80a      	bhi.n	80086d2 <_printf_i+0x32>
 80086bc:	2f00      	cmp	r7, #0
 80086be:	f000 80d8 	beq.w	8008872 <_printf_i+0x1d2>
 80086c2:	2f58      	cmp	r7, #88	; 0x58
 80086c4:	f000 80a3 	beq.w	800880e <_printf_i+0x16e>
 80086c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086d0:	e03a      	b.n	8008748 <_printf_i+0xa8>
 80086d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086d6:	2b15      	cmp	r3, #21
 80086d8:	d8f6      	bhi.n	80086c8 <_printf_i+0x28>
 80086da:	a101      	add	r1, pc, #4	; (adr r1, 80086e0 <_printf_i+0x40>)
 80086dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e0:	08008739 	.word	0x08008739
 80086e4:	0800874d 	.word	0x0800874d
 80086e8:	080086c9 	.word	0x080086c9
 80086ec:	080086c9 	.word	0x080086c9
 80086f0:	080086c9 	.word	0x080086c9
 80086f4:	080086c9 	.word	0x080086c9
 80086f8:	0800874d 	.word	0x0800874d
 80086fc:	080086c9 	.word	0x080086c9
 8008700:	080086c9 	.word	0x080086c9
 8008704:	080086c9 	.word	0x080086c9
 8008708:	080086c9 	.word	0x080086c9
 800870c:	08008859 	.word	0x08008859
 8008710:	0800877d 	.word	0x0800877d
 8008714:	0800883b 	.word	0x0800883b
 8008718:	080086c9 	.word	0x080086c9
 800871c:	080086c9 	.word	0x080086c9
 8008720:	0800887b 	.word	0x0800887b
 8008724:	080086c9 	.word	0x080086c9
 8008728:	0800877d 	.word	0x0800877d
 800872c:	080086c9 	.word	0x080086c9
 8008730:	080086c9 	.word	0x080086c9
 8008734:	08008843 	.word	0x08008843
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	1d1a      	adds	r2, r3, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	602a      	str	r2, [r5, #0]
 8008740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008748:	2301      	movs	r3, #1
 800874a:	e0a3      	b.n	8008894 <_printf_i+0x1f4>
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	6829      	ldr	r1, [r5, #0]
 8008750:	0606      	lsls	r6, r0, #24
 8008752:	f101 0304 	add.w	r3, r1, #4
 8008756:	d50a      	bpl.n	800876e <_printf_i+0xce>
 8008758:	680e      	ldr	r6, [r1, #0]
 800875a:	602b      	str	r3, [r5, #0]
 800875c:	2e00      	cmp	r6, #0
 800875e:	da03      	bge.n	8008768 <_printf_i+0xc8>
 8008760:	232d      	movs	r3, #45	; 0x2d
 8008762:	4276      	negs	r6, r6
 8008764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008768:	485e      	ldr	r0, [pc, #376]	; (80088e4 <_printf_i+0x244>)
 800876a:	230a      	movs	r3, #10
 800876c:	e019      	b.n	80087a2 <_printf_i+0x102>
 800876e:	680e      	ldr	r6, [r1, #0]
 8008770:	602b      	str	r3, [r5, #0]
 8008772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008776:	bf18      	it	ne
 8008778:	b236      	sxthne	r6, r6
 800877a:	e7ef      	b.n	800875c <_printf_i+0xbc>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	6820      	ldr	r0, [r4, #0]
 8008780:	1d19      	adds	r1, r3, #4
 8008782:	6029      	str	r1, [r5, #0]
 8008784:	0601      	lsls	r1, r0, #24
 8008786:	d501      	bpl.n	800878c <_printf_i+0xec>
 8008788:	681e      	ldr	r6, [r3, #0]
 800878a:	e002      	b.n	8008792 <_printf_i+0xf2>
 800878c:	0646      	lsls	r6, r0, #25
 800878e:	d5fb      	bpl.n	8008788 <_printf_i+0xe8>
 8008790:	881e      	ldrh	r6, [r3, #0]
 8008792:	4854      	ldr	r0, [pc, #336]	; (80088e4 <_printf_i+0x244>)
 8008794:	2f6f      	cmp	r7, #111	; 0x6f
 8008796:	bf0c      	ite	eq
 8008798:	2308      	moveq	r3, #8
 800879a:	230a      	movne	r3, #10
 800879c:	2100      	movs	r1, #0
 800879e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087a2:	6865      	ldr	r5, [r4, #4]
 80087a4:	60a5      	str	r5, [r4, #8]
 80087a6:	2d00      	cmp	r5, #0
 80087a8:	bfa2      	ittt	ge
 80087aa:	6821      	ldrge	r1, [r4, #0]
 80087ac:	f021 0104 	bicge.w	r1, r1, #4
 80087b0:	6021      	strge	r1, [r4, #0]
 80087b2:	b90e      	cbnz	r6, 80087b8 <_printf_i+0x118>
 80087b4:	2d00      	cmp	r5, #0
 80087b6:	d04d      	beq.n	8008854 <_printf_i+0x1b4>
 80087b8:	4615      	mov	r5, r2
 80087ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80087be:	fb03 6711 	mls	r7, r3, r1, r6
 80087c2:	5dc7      	ldrb	r7, [r0, r7]
 80087c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087c8:	4637      	mov	r7, r6
 80087ca:	42bb      	cmp	r3, r7
 80087cc:	460e      	mov	r6, r1
 80087ce:	d9f4      	bls.n	80087ba <_printf_i+0x11a>
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d10b      	bne.n	80087ec <_printf_i+0x14c>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	07de      	lsls	r6, r3, #31
 80087d8:	d508      	bpl.n	80087ec <_printf_i+0x14c>
 80087da:	6923      	ldr	r3, [r4, #16]
 80087dc:	6861      	ldr	r1, [r4, #4]
 80087de:	4299      	cmp	r1, r3
 80087e0:	bfde      	ittt	le
 80087e2:	2330      	movle	r3, #48	; 0x30
 80087e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087ec:	1b52      	subs	r2, r2, r5
 80087ee:	6122      	str	r2, [r4, #16]
 80087f0:	f8cd a000 	str.w	sl, [sp]
 80087f4:	464b      	mov	r3, r9
 80087f6:	aa03      	add	r2, sp, #12
 80087f8:	4621      	mov	r1, r4
 80087fa:	4640      	mov	r0, r8
 80087fc:	f7ff fee2 	bl	80085c4 <_printf_common>
 8008800:	3001      	adds	r0, #1
 8008802:	d14c      	bne.n	800889e <_printf_i+0x1fe>
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	b004      	add	sp, #16
 800880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880e:	4835      	ldr	r0, [pc, #212]	; (80088e4 <_printf_i+0x244>)
 8008810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008814:	6829      	ldr	r1, [r5, #0]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	f851 6b04 	ldr.w	r6, [r1], #4
 800881c:	6029      	str	r1, [r5, #0]
 800881e:	061d      	lsls	r5, r3, #24
 8008820:	d514      	bpl.n	800884c <_printf_i+0x1ac>
 8008822:	07df      	lsls	r7, r3, #31
 8008824:	bf44      	itt	mi
 8008826:	f043 0320 	orrmi.w	r3, r3, #32
 800882a:	6023      	strmi	r3, [r4, #0]
 800882c:	b91e      	cbnz	r6, 8008836 <_printf_i+0x196>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	f023 0320 	bic.w	r3, r3, #32
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	2310      	movs	r3, #16
 8008838:	e7b0      	b.n	800879c <_printf_i+0xfc>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	f043 0320 	orr.w	r3, r3, #32
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	2378      	movs	r3, #120	; 0x78
 8008844:	4828      	ldr	r0, [pc, #160]	; (80088e8 <_printf_i+0x248>)
 8008846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800884a:	e7e3      	b.n	8008814 <_printf_i+0x174>
 800884c:	0659      	lsls	r1, r3, #25
 800884e:	bf48      	it	mi
 8008850:	b2b6      	uxthmi	r6, r6
 8008852:	e7e6      	b.n	8008822 <_printf_i+0x182>
 8008854:	4615      	mov	r5, r2
 8008856:	e7bb      	b.n	80087d0 <_printf_i+0x130>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	6826      	ldr	r6, [r4, #0]
 800885c:	6961      	ldr	r1, [r4, #20]
 800885e:	1d18      	adds	r0, r3, #4
 8008860:	6028      	str	r0, [r5, #0]
 8008862:	0635      	lsls	r5, r6, #24
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	d501      	bpl.n	800886c <_printf_i+0x1cc>
 8008868:	6019      	str	r1, [r3, #0]
 800886a:	e002      	b.n	8008872 <_printf_i+0x1d2>
 800886c:	0670      	lsls	r0, r6, #25
 800886e:	d5fb      	bpl.n	8008868 <_printf_i+0x1c8>
 8008870:	8019      	strh	r1, [r3, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	6123      	str	r3, [r4, #16]
 8008876:	4615      	mov	r5, r2
 8008878:	e7ba      	b.n	80087f0 <_printf_i+0x150>
 800887a:	682b      	ldr	r3, [r5, #0]
 800887c:	1d1a      	adds	r2, r3, #4
 800887e:	602a      	str	r2, [r5, #0]
 8008880:	681d      	ldr	r5, [r3, #0]
 8008882:	6862      	ldr	r2, [r4, #4]
 8008884:	2100      	movs	r1, #0
 8008886:	4628      	mov	r0, r5
 8008888:	f7f7 fcca 	bl	8000220 <memchr>
 800888c:	b108      	cbz	r0, 8008892 <_printf_i+0x1f2>
 800888e:	1b40      	subs	r0, r0, r5
 8008890:	6060      	str	r0, [r4, #4]
 8008892:	6863      	ldr	r3, [r4, #4]
 8008894:	6123      	str	r3, [r4, #16]
 8008896:	2300      	movs	r3, #0
 8008898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889c:	e7a8      	b.n	80087f0 <_printf_i+0x150>
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	462a      	mov	r2, r5
 80088a2:	4649      	mov	r1, r9
 80088a4:	4640      	mov	r0, r8
 80088a6:	47d0      	blx	sl
 80088a8:	3001      	adds	r0, #1
 80088aa:	d0ab      	beq.n	8008804 <_printf_i+0x164>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	079b      	lsls	r3, r3, #30
 80088b0:	d413      	bmi.n	80088da <_printf_i+0x23a>
 80088b2:	68e0      	ldr	r0, [r4, #12]
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	4298      	cmp	r0, r3
 80088b8:	bfb8      	it	lt
 80088ba:	4618      	movlt	r0, r3
 80088bc:	e7a4      	b.n	8008808 <_printf_i+0x168>
 80088be:	2301      	movs	r3, #1
 80088c0:	4632      	mov	r2, r6
 80088c2:	4649      	mov	r1, r9
 80088c4:	4640      	mov	r0, r8
 80088c6:	47d0      	blx	sl
 80088c8:	3001      	adds	r0, #1
 80088ca:	d09b      	beq.n	8008804 <_printf_i+0x164>
 80088cc:	3501      	adds	r5, #1
 80088ce:	68e3      	ldr	r3, [r4, #12]
 80088d0:	9903      	ldr	r1, [sp, #12]
 80088d2:	1a5b      	subs	r3, r3, r1
 80088d4:	42ab      	cmp	r3, r5
 80088d6:	dcf2      	bgt.n	80088be <_printf_i+0x21e>
 80088d8:	e7eb      	b.n	80088b2 <_printf_i+0x212>
 80088da:	2500      	movs	r5, #0
 80088dc:	f104 0619 	add.w	r6, r4, #25
 80088e0:	e7f5      	b.n	80088ce <_printf_i+0x22e>
 80088e2:	bf00      	nop
 80088e4:	0800af4e 	.word	0x0800af4e
 80088e8:	0800af5f 	.word	0x0800af5f

080088ec <siprintf>:
 80088ec:	b40e      	push	{r1, r2, r3}
 80088ee:	b500      	push	{lr}
 80088f0:	b09c      	sub	sp, #112	; 0x70
 80088f2:	ab1d      	add	r3, sp, #116	; 0x74
 80088f4:	9002      	str	r0, [sp, #8]
 80088f6:	9006      	str	r0, [sp, #24]
 80088f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088fc:	4809      	ldr	r0, [pc, #36]	; (8008924 <siprintf+0x38>)
 80088fe:	9107      	str	r1, [sp, #28]
 8008900:	9104      	str	r1, [sp, #16]
 8008902:	4909      	ldr	r1, [pc, #36]	; (8008928 <siprintf+0x3c>)
 8008904:	f853 2b04 	ldr.w	r2, [r3], #4
 8008908:	9105      	str	r1, [sp, #20]
 800890a:	6800      	ldr	r0, [r0, #0]
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	a902      	add	r1, sp, #8
 8008910:	f001 fc04 	bl	800a11c <_svfiprintf_r>
 8008914:	9b02      	ldr	r3, [sp, #8]
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	b01c      	add	sp, #112	; 0x70
 800891c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008920:	b003      	add	sp, #12
 8008922:	4770      	bx	lr
 8008924:	20000010 	.word	0x20000010
 8008928:	ffff0208 	.word	0xffff0208

0800892c <_strtol_l.constprop.0>:
 800892c:	2b01      	cmp	r3, #1
 800892e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008932:	d001      	beq.n	8008938 <_strtol_l.constprop.0+0xc>
 8008934:	2b24      	cmp	r3, #36	; 0x24
 8008936:	d906      	bls.n	8008946 <_strtol_l.constprop.0+0x1a>
 8008938:	f7ff fb3c 	bl	8007fb4 <__errno>
 800893c:	2316      	movs	r3, #22
 800893e:	6003      	str	r3, [r0, #0]
 8008940:	2000      	movs	r0, #0
 8008942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008946:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a2c <_strtol_l.constprop.0+0x100>
 800894a:	460d      	mov	r5, r1
 800894c:	462e      	mov	r6, r5
 800894e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008952:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008956:	f017 0708 	ands.w	r7, r7, #8
 800895a:	d1f7      	bne.n	800894c <_strtol_l.constprop.0+0x20>
 800895c:	2c2d      	cmp	r4, #45	; 0x2d
 800895e:	d132      	bne.n	80089c6 <_strtol_l.constprop.0+0x9a>
 8008960:	782c      	ldrb	r4, [r5, #0]
 8008962:	2701      	movs	r7, #1
 8008964:	1cb5      	adds	r5, r6, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d05b      	beq.n	8008a22 <_strtol_l.constprop.0+0xf6>
 800896a:	2b10      	cmp	r3, #16
 800896c:	d109      	bne.n	8008982 <_strtol_l.constprop.0+0x56>
 800896e:	2c30      	cmp	r4, #48	; 0x30
 8008970:	d107      	bne.n	8008982 <_strtol_l.constprop.0+0x56>
 8008972:	782c      	ldrb	r4, [r5, #0]
 8008974:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008978:	2c58      	cmp	r4, #88	; 0x58
 800897a:	d14d      	bne.n	8008a18 <_strtol_l.constprop.0+0xec>
 800897c:	786c      	ldrb	r4, [r5, #1]
 800897e:	2310      	movs	r3, #16
 8008980:	3502      	adds	r5, #2
 8008982:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008986:	f108 38ff 	add.w	r8, r8, #4294967295
 800898a:	f04f 0c00 	mov.w	ip, #0
 800898e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008992:	4666      	mov	r6, ip
 8008994:	fb03 8a19 	mls	sl, r3, r9, r8
 8008998:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800899c:	f1be 0f09 	cmp.w	lr, #9
 80089a0:	d816      	bhi.n	80089d0 <_strtol_l.constprop.0+0xa4>
 80089a2:	4674      	mov	r4, lr
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	dd24      	ble.n	80089f2 <_strtol_l.constprop.0+0xc6>
 80089a8:	f1bc 0f00 	cmp.w	ip, #0
 80089ac:	db1e      	blt.n	80089ec <_strtol_l.constprop.0+0xc0>
 80089ae:	45b1      	cmp	r9, r6
 80089b0:	d31c      	bcc.n	80089ec <_strtol_l.constprop.0+0xc0>
 80089b2:	d101      	bne.n	80089b8 <_strtol_l.constprop.0+0x8c>
 80089b4:	45a2      	cmp	sl, r4
 80089b6:	db19      	blt.n	80089ec <_strtol_l.constprop.0+0xc0>
 80089b8:	fb06 4603 	mla	r6, r6, r3, r4
 80089bc:	f04f 0c01 	mov.w	ip, #1
 80089c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089c4:	e7e8      	b.n	8008998 <_strtol_l.constprop.0+0x6c>
 80089c6:	2c2b      	cmp	r4, #43	; 0x2b
 80089c8:	bf04      	itt	eq
 80089ca:	782c      	ldrbeq	r4, [r5, #0]
 80089cc:	1cb5      	addeq	r5, r6, #2
 80089ce:	e7ca      	b.n	8008966 <_strtol_l.constprop.0+0x3a>
 80089d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80089d4:	f1be 0f19 	cmp.w	lr, #25
 80089d8:	d801      	bhi.n	80089de <_strtol_l.constprop.0+0xb2>
 80089da:	3c37      	subs	r4, #55	; 0x37
 80089dc:	e7e2      	b.n	80089a4 <_strtol_l.constprop.0+0x78>
 80089de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80089e2:	f1be 0f19 	cmp.w	lr, #25
 80089e6:	d804      	bhi.n	80089f2 <_strtol_l.constprop.0+0xc6>
 80089e8:	3c57      	subs	r4, #87	; 0x57
 80089ea:	e7db      	b.n	80089a4 <_strtol_l.constprop.0+0x78>
 80089ec:	f04f 3cff 	mov.w	ip, #4294967295
 80089f0:	e7e6      	b.n	80089c0 <_strtol_l.constprop.0+0x94>
 80089f2:	f1bc 0f00 	cmp.w	ip, #0
 80089f6:	da05      	bge.n	8008a04 <_strtol_l.constprop.0+0xd8>
 80089f8:	2322      	movs	r3, #34	; 0x22
 80089fa:	6003      	str	r3, [r0, #0]
 80089fc:	4646      	mov	r6, r8
 80089fe:	b942      	cbnz	r2, 8008a12 <_strtol_l.constprop.0+0xe6>
 8008a00:	4630      	mov	r0, r6
 8008a02:	e79e      	b.n	8008942 <_strtol_l.constprop.0+0x16>
 8008a04:	b107      	cbz	r7, 8008a08 <_strtol_l.constprop.0+0xdc>
 8008a06:	4276      	negs	r6, r6
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	d0f9      	beq.n	8008a00 <_strtol_l.constprop.0+0xd4>
 8008a0c:	f1bc 0f00 	cmp.w	ip, #0
 8008a10:	d000      	beq.n	8008a14 <_strtol_l.constprop.0+0xe8>
 8008a12:	1e69      	subs	r1, r5, #1
 8008a14:	6011      	str	r1, [r2, #0]
 8008a16:	e7f3      	b.n	8008a00 <_strtol_l.constprop.0+0xd4>
 8008a18:	2430      	movs	r4, #48	; 0x30
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1b1      	bne.n	8008982 <_strtol_l.constprop.0+0x56>
 8008a1e:	2308      	movs	r3, #8
 8008a20:	e7af      	b.n	8008982 <_strtol_l.constprop.0+0x56>
 8008a22:	2c30      	cmp	r4, #48	; 0x30
 8008a24:	d0a5      	beq.n	8008972 <_strtol_l.constprop.0+0x46>
 8008a26:	230a      	movs	r3, #10
 8008a28:	e7ab      	b.n	8008982 <_strtol_l.constprop.0+0x56>
 8008a2a:	bf00      	nop
 8008a2c:	0800af71 	.word	0x0800af71

08008a30 <strtol>:
 8008a30:	4613      	mov	r3, r2
 8008a32:	460a      	mov	r2, r1
 8008a34:	4601      	mov	r1, r0
 8008a36:	4802      	ldr	r0, [pc, #8]	; (8008a40 <strtol+0x10>)
 8008a38:	6800      	ldr	r0, [r0, #0]
 8008a3a:	f7ff bf77 	b.w	800892c <_strtol_l.constprop.0>
 8008a3e:	bf00      	nop
 8008a40:	20000010 	.word	0x20000010

08008a44 <quorem>:
 8008a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	6903      	ldr	r3, [r0, #16]
 8008a4a:	690c      	ldr	r4, [r1, #16]
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	4607      	mov	r7, r0
 8008a50:	f2c0 8081 	blt.w	8008b56 <quorem+0x112>
 8008a54:	3c01      	subs	r4, #1
 8008a56:	f101 0814 	add.w	r8, r1, #20
 8008a5a:	f100 0514 	add.w	r5, r0, #20
 8008a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a78:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a7c:	d331      	bcc.n	8008ae2 <quorem+0x9e>
 8008a7e:	f04f 0e00 	mov.w	lr, #0
 8008a82:	4640      	mov	r0, r8
 8008a84:	46ac      	mov	ip, r5
 8008a86:	46f2      	mov	sl, lr
 8008a88:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a8c:	b293      	uxth	r3, r2
 8008a8e:	fb06 e303 	mla	r3, r6, r3, lr
 8008a92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	ebaa 0303 	sub.w	r3, sl, r3
 8008a9c:	f8dc a000 	ldr.w	sl, [ip]
 8008aa0:	0c12      	lsrs	r2, r2, #16
 8008aa2:	fa13 f38a 	uxtah	r3, r3, sl
 8008aa6:	fb06 e202 	mla	r2, r6, r2, lr
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	9b00      	ldr	r3, [sp, #0]
 8008aae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ab2:	b292      	uxth	r2, r2
 8008ab4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008abc:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ac0:	4581      	cmp	r9, r0
 8008ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ac6:	f84c 3b04 	str.w	r3, [ip], #4
 8008aca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ace:	d2db      	bcs.n	8008a88 <quorem+0x44>
 8008ad0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ad4:	b92b      	cbnz	r3, 8008ae2 <quorem+0x9e>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	429d      	cmp	r5, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	d32e      	bcc.n	8008b3e <quorem+0xfa>
 8008ae0:	613c      	str	r4, [r7, #16]
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	f001 f8c6 	bl	8009c74 <__mcmp>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	db24      	blt.n	8008b36 <quorem+0xf2>
 8008aec:	3601      	adds	r6, #1
 8008aee:	4628      	mov	r0, r5
 8008af0:	f04f 0c00 	mov.w	ip, #0
 8008af4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008af8:	f8d0 e000 	ldr.w	lr, [r0]
 8008afc:	b293      	uxth	r3, r2
 8008afe:	ebac 0303 	sub.w	r3, ip, r3
 8008b02:	0c12      	lsrs	r2, r2, #16
 8008b04:	fa13 f38e 	uxtah	r3, r3, lr
 8008b08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b16:	45c1      	cmp	r9, r8
 8008b18:	f840 3b04 	str.w	r3, [r0], #4
 8008b1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b20:	d2e8      	bcs.n	8008af4 <quorem+0xb0>
 8008b22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b2a:	b922      	cbnz	r2, 8008b36 <quorem+0xf2>
 8008b2c:	3b04      	subs	r3, #4
 8008b2e:	429d      	cmp	r5, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	d30a      	bcc.n	8008b4a <quorem+0x106>
 8008b34:	613c      	str	r4, [r7, #16]
 8008b36:	4630      	mov	r0, r6
 8008b38:	b003      	add	sp, #12
 8008b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	3b04      	subs	r3, #4
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	d1cc      	bne.n	8008ae0 <quorem+0x9c>
 8008b46:	3c01      	subs	r4, #1
 8008b48:	e7c7      	b.n	8008ada <quorem+0x96>
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	d1f0      	bne.n	8008b34 <quorem+0xf0>
 8008b52:	3c01      	subs	r4, #1
 8008b54:	e7eb      	b.n	8008b2e <quorem+0xea>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e7ee      	b.n	8008b38 <quorem+0xf4>
 8008b5a:	0000      	movs	r0, r0
 8008b5c:	0000      	movs	r0, r0
	...

08008b60 <_dtoa_r>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	ed2d 8b04 	vpush	{d8-d9}
 8008b68:	ec57 6b10 	vmov	r6, r7, d0
 8008b6c:	b093      	sub	sp, #76	; 0x4c
 8008b6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b74:	9106      	str	r1, [sp, #24]
 8008b76:	ee10 aa10 	vmov	sl, s0
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b80:	46bb      	mov	fp, r7
 8008b82:	b975      	cbnz	r5, 8008ba2 <_dtoa_r+0x42>
 8008b84:	2010      	movs	r0, #16
 8008b86:	f000 fddd 	bl	8009744 <malloc>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	6260      	str	r0, [r4, #36]	; 0x24
 8008b8e:	b920      	cbnz	r0, 8008b9a <_dtoa_r+0x3a>
 8008b90:	4ba7      	ldr	r3, [pc, #668]	; (8008e30 <_dtoa_r+0x2d0>)
 8008b92:	21ea      	movs	r1, #234	; 0xea
 8008b94:	48a7      	ldr	r0, [pc, #668]	; (8008e34 <_dtoa_r+0x2d4>)
 8008b96:	f001 fbd1 	bl	800a33c <__assert_func>
 8008b9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b9e:	6005      	str	r5, [r0, #0]
 8008ba0:	60c5      	str	r5, [r0, #12]
 8008ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba4:	6819      	ldr	r1, [r3, #0]
 8008ba6:	b151      	cbz	r1, 8008bbe <_dtoa_r+0x5e>
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	604a      	str	r2, [r1, #4]
 8008bac:	2301      	movs	r3, #1
 8008bae:	4093      	lsls	r3, r2
 8008bb0:	608b      	str	r3, [r1, #8]
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fe1c 	bl	80097f0 <_Bfree>
 8008bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bba:	2200      	movs	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	1e3b      	subs	r3, r7, #0
 8008bc0:	bfaa      	itet	ge
 8008bc2:	2300      	movge	r3, #0
 8008bc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008bc8:	f8c8 3000 	strge.w	r3, [r8]
 8008bcc:	4b9a      	ldr	r3, [pc, #616]	; (8008e38 <_dtoa_r+0x2d8>)
 8008bce:	bfbc      	itt	lt
 8008bd0:	2201      	movlt	r2, #1
 8008bd2:	f8c8 2000 	strlt.w	r2, [r8]
 8008bd6:	ea33 030b 	bics.w	r3, r3, fp
 8008bda:	d11b      	bne.n	8008c14 <_dtoa_r+0xb4>
 8008bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bde:	f242 730f 	movw	r3, #9999	; 0x270f
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008be8:	4333      	orrs	r3, r6
 8008bea:	f000 8592 	beq.w	8009712 <_dtoa_r+0xbb2>
 8008bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bf0:	b963      	cbnz	r3, 8008c0c <_dtoa_r+0xac>
 8008bf2:	4b92      	ldr	r3, [pc, #584]	; (8008e3c <_dtoa_r+0x2dc>)
 8008bf4:	e022      	b.n	8008c3c <_dtoa_r+0xdc>
 8008bf6:	4b92      	ldr	r3, [pc, #584]	; (8008e40 <_dtoa_r+0x2e0>)
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	9801      	ldr	r0, [sp, #4]
 8008c02:	b013      	add	sp, #76	; 0x4c
 8008c04:	ecbd 8b04 	vpop	{d8-d9}
 8008c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0c:	4b8b      	ldr	r3, [pc, #556]	; (8008e3c <_dtoa_r+0x2dc>)
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	3303      	adds	r3, #3
 8008c12:	e7f3      	b.n	8008bfc <_dtoa_r+0x9c>
 8008c14:	2200      	movs	r2, #0
 8008c16:	2300      	movs	r3, #0
 8008c18:	4650      	mov	r0, sl
 8008c1a:	4659      	mov	r1, fp
 8008c1c:	f7f7 ff74 	bl	8000b08 <__aeabi_dcmpeq>
 8008c20:	ec4b ab19 	vmov	d9, sl, fp
 8008c24:	4680      	mov	r8, r0
 8008c26:	b158      	cbz	r0, 8008c40 <_dtoa_r+0xe0>
 8008c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 856b 	beq.w	800970c <_dtoa_r+0xbac>
 8008c36:	4883      	ldr	r0, [pc, #524]	; (8008e44 <_dtoa_r+0x2e4>)
 8008c38:	6018      	str	r0, [r3, #0]
 8008c3a:	1e43      	subs	r3, r0, #1
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	e7df      	b.n	8008c00 <_dtoa_r+0xa0>
 8008c40:	ec4b ab10 	vmov	d0, sl, fp
 8008c44:	aa10      	add	r2, sp, #64	; 0x40
 8008c46:	a911      	add	r1, sp, #68	; 0x44
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f001 f8b9 	bl	8009dc0 <__d2b>
 8008c4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c52:	ee08 0a10 	vmov	s16, r0
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	f000 8084 	beq.w	8008d64 <_dtoa_r+0x204>
 8008c5c:	ee19 3a90 	vmov	r3, s19
 8008c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c68:	4656      	mov	r6, sl
 8008c6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c76:	4b74      	ldr	r3, [pc, #464]	; (8008e48 <_dtoa_r+0x2e8>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	4639      	mov	r1, r7
 8008c7e:	f7f7 fb23 	bl	80002c8 <__aeabi_dsub>
 8008c82:	a365      	add	r3, pc, #404	; (adr r3, 8008e18 <_dtoa_r+0x2b8>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f7f7 fcd6 	bl	8000638 <__aeabi_dmul>
 8008c8c:	a364      	add	r3, pc, #400	; (adr r3, 8008e20 <_dtoa_r+0x2c0>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f7f7 fb1b 	bl	80002cc <__adddf3>
 8008c96:	4606      	mov	r6, r0
 8008c98:	4628      	mov	r0, r5
 8008c9a:	460f      	mov	r7, r1
 8008c9c:	f7f7 fc62 	bl	8000564 <__aeabi_i2d>
 8008ca0:	a361      	add	r3, pc, #388	; (adr r3, 8008e28 <_dtoa_r+0x2c8>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fcc7 	bl	8000638 <__aeabi_dmul>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fb0b 	bl	80002cc <__adddf3>
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460f      	mov	r7, r1
 8008cba:	f7f7 ff6d 	bl	8000b98 <__aeabi_d2iz>
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	9000      	str	r0, [sp, #0]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	f7f7 ff28 	bl	8000b1c <__aeabi_dcmplt>
 8008ccc:	b150      	cbz	r0, 8008ce4 <_dtoa_r+0x184>
 8008cce:	9800      	ldr	r0, [sp, #0]
 8008cd0:	f7f7 fc48 	bl	8000564 <__aeabi_i2d>
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	f7f7 ff16 	bl	8000b08 <__aeabi_dcmpeq>
 8008cdc:	b910      	cbnz	r0, 8008ce4 <_dtoa_r+0x184>
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	2b16      	cmp	r3, #22
 8008ce8:	d85a      	bhi.n	8008da0 <_dtoa_r+0x240>
 8008cea:	9a00      	ldr	r2, [sp, #0]
 8008cec:	4b57      	ldr	r3, [pc, #348]	; (8008e4c <_dtoa_r+0x2ec>)
 8008cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	ec51 0b19 	vmov	r0, r1, d9
 8008cfa:	f7f7 ff0f 	bl	8000b1c <__aeabi_dcmplt>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d050      	beq.n	8008da4 <_dtoa_r+0x244>
 8008d02:	9b00      	ldr	r3, [sp, #0]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	2300      	movs	r3, #0
 8008d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d0e:	1b5d      	subs	r5, r3, r5
 8008d10:	1e6b      	subs	r3, r5, #1
 8008d12:	9305      	str	r3, [sp, #20]
 8008d14:	bf45      	ittet	mi
 8008d16:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d1a:	9304      	strmi	r3, [sp, #16]
 8008d1c:	2300      	movpl	r3, #0
 8008d1e:	2300      	movmi	r3, #0
 8008d20:	bf4c      	ite	mi
 8008d22:	9305      	strmi	r3, [sp, #20]
 8008d24:	9304      	strpl	r3, [sp, #16]
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	db3d      	blt.n	8008da8 <_dtoa_r+0x248>
 8008d2c:	9b05      	ldr	r3, [sp, #20]
 8008d2e:	9a00      	ldr	r2, [sp, #0]
 8008d30:	920a      	str	r2, [sp, #40]	; 0x28
 8008d32:	4413      	add	r3, r2
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9307      	str	r3, [sp, #28]
 8008d3a:	9b06      	ldr	r3, [sp, #24]
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	f200 8089 	bhi.w	8008e54 <_dtoa_r+0x2f4>
 8008d42:	2b05      	cmp	r3, #5
 8008d44:	bfc4      	itt	gt
 8008d46:	3b04      	subgt	r3, #4
 8008d48:	9306      	strgt	r3, [sp, #24]
 8008d4a:	9b06      	ldr	r3, [sp, #24]
 8008d4c:	f1a3 0302 	sub.w	r3, r3, #2
 8008d50:	bfcc      	ite	gt
 8008d52:	2500      	movgt	r5, #0
 8008d54:	2501      	movle	r5, #1
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	f200 8087 	bhi.w	8008e6a <_dtoa_r+0x30a>
 8008d5c:	e8df f003 	tbb	[pc, r3]
 8008d60:	59383a2d 	.word	0x59383a2d
 8008d64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d68:	441d      	add	r5, r3
 8008d6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	bfc1      	itttt	gt
 8008d72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d82:	bfda      	itte	le
 8008d84:	f1c3 0320 	rsble	r3, r3, #32
 8008d88:	fa06 f003 	lslle.w	r0, r6, r3
 8008d8c:	4318      	orrgt	r0, r3
 8008d8e:	f7f7 fbd9 	bl	8000544 <__aeabi_ui2d>
 8008d92:	2301      	movs	r3, #1
 8008d94:	4606      	mov	r6, r0
 8008d96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d9a:	3d01      	subs	r5, #1
 8008d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8008d9e:	e76a      	b.n	8008c76 <_dtoa_r+0x116>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e7b2      	b.n	8008d0a <_dtoa_r+0x1aa>
 8008da4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008da6:	e7b1      	b.n	8008d0c <_dtoa_r+0x1ac>
 8008da8:	9b04      	ldr	r3, [sp, #16]
 8008daa:	9a00      	ldr	r2, [sp, #0]
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	9304      	str	r3, [sp, #16]
 8008db0:	4253      	negs	r3, r2
 8008db2:	9307      	str	r3, [sp, #28]
 8008db4:	2300      	movs	r3, #0
 8008db6:	930a      	str	r3, [sp, #40]	; 0x28
 8008db8:	e7bf      	b.n	8008d3a <_dtoa_r+0x1da>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9308      	str	r3, [sp, #32]
 8008dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dc55      	bgt.n	8008e70 <_dtoa_r+0x310>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dce:	e00c      	b.n	8008dea <_dtoa_r+0x28a>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e7f3      	b.n	8008dbc <_dtoa_r+0x25c>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd8:	9308      	str	r3, [sp, #32]
 8008dda:	9b00      	ldr	r3, [sp, #0]
 8008ddc:	4413      	add	r3, r2
 8008dde:	9302      	str	r3, [sp, #8]
 8008de0:	3301      	adds	r3, #1
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	9303      	str	r3, [sp, #12]
 8008de6:	bfb8      	it	lt
 8008de8:	2301      	movlt	r3, #1
 8008dea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008dec:	2200      	movs	r2, #0
 8008dee:	6042      	str	r2, [r0, #4]
 8008df0:	2204      	movs	r2, #4
 8008df2:	f102 0614 	add.w	r6, r2, #20
 8008df6:	429e      	cmp	r6, r3
 8008df8:	6841      	ldr	r1, [r0, #4]
 8008dfa:	d93d      	bls.n	8008e78 <_dtoa_r+0x318>
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fcb7 	bl	8009770 <_Balloc>
 8008e02:	9001      	str	r0, [sp, #4]
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d13b      	bne.n	8008e80 <_dtoa_r+0x320>
 8008e08:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <_dtoa_r+0x2f0>)
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e10:	e6c0      	b.n	8008b94 <_dtoa_r+0x34>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e7df      	b.n	8008dd6 <_dtoa_r+0x276>
 8008e16:	bf00      	nop
 8008e18:	636f4361 	.word	0x636f4361
 8008e1c:	3fd287a7 	.word	0x3fd287a7
 8008e20:	8b60c8b3 	.word	0x8b60c8b3
 8008e24:	3fc68a28 	.word	0x3fc68a28
 8008e28:	509f79fb 	.word	0x509f79fb
 8008e2c:	3fd34413 	.word	0x3fd34413
 8008e30:	0800b07e 	.word	0x0800b07e
 8008e34:	0800b095 	.word	0x0800b095
 8008e38:	7ff00000 	.word	0x7ff00000
 8008e3c:	0800b07a 	.word	0x0800b07a
 8008e40:	0800b071 	.word	0x0800b071
 8008e44:	0800af4d 	.word	0x0800af4d
 8008e48:	3ff80000 	.word	0x3ff80000
 8008e4c:	0800b188 	.word	0x0800b188
 8008e50:	0800b0f0 	.word	0x0800b0f0
 8008e54:	2501      	movs	r5, #1
 8008e56:	2300      	movs	r3, #0
 8008e58:	9306      	str	r3, [sp, #24]
 8008e5a:	9508      	str	r5, [sp, #32]
 8008e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e64:	2200      	movs	r2, #0
 8008e66:	2312      	movs	r3, #18
 8008e68:	e7b0      	b.n	8008dcc <_dtoa_r+0x26c>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	9308      	str	r3, [sp, #32]
 8008e6e:	e7f5      	b.n	8008e5c <_dtoa_r+0x2fc>
 8008e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e76:	e7b8      	b.n	8008dea <_dtoa_r+0x28a>
 8008e78:	3101      	adds	r1, #1
 8008e7a:	6041      	str	r1, [r0, #4]
 8008e7c:	0052      	lsls	r2, r2, #1
 8008e7e:	e7b8      	b.n	8008df2 <_dtoa_r+0x292>
 8008e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e82:	9a01      	ldr	r2, [sp, #4]
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	2b0e      	cmp	r3, #14
 8008e8a:	f200 809d 	bhi.w	8008fc8 <_dtoa_r+0x468>
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	f000 809a 	beq.w	8008fc8 <_dtoa_r+0x468>
 8008e94:	9b00      	ldr	r3, [sp, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	dd32      	ble.n	8008f00 <_dtoa_r+0x3a0>
 8008e9a:	4ab7      	ldr	r2, [pc, #732]	; (8009178 <_dtoa_r+0x618>)
 8008e9c:	f003 030f 	and.w	r3, r3, #15
 8008ea0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ea4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ea8:	9b00      	ldr	r3, [sp, #0]
 8008eaa:	05d8      	lsls	r0, r3, #23
 8008eac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008eb0:	d516      	bpl.n	8008ee0 <_dtoa_r+0x380>
 8008eb2:	4bb2      	ldr	r3, [pc, #712]	; (800917c <_dtoa_r+0x61c>)
 8008eb4:	ec51 0b19 	vmov	r0, r1, d9
 8008eb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ebc:	f7f7 fce6 	bl	800088c <__aeabi_ddiv>
 8008ec0:	f007 070f 	and.w	r7, r7, #15
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	468b      	mov	fp, r1
 8008ec8:	2503      	movs	r5, #3
 8008eca:	4eac      	ldr	r6, [pc, #688]	; (800917c <_dtoa_r+0x61c>)
 8008ecc:	b957      	cbnz	r7, 8008ee4 <_dtoa_r+0x384>
 8008ece:	4642      	mov	r2, r8
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	4659      	mov	r1, fp
 8008ed6:	f7f7 fcd9 	bl	800088c <__aeabi_ddiv>
 8008eda:	4682      	mov	sl, r0
 8008edc:	468b      	mov	fp, r1
 8008ede:	e028      	b.n	8008f32 <_dtoa_r+0x3d2>
 8008ee0:	2502      	movs	r5, #2
 8008ee2:	e7f2      	b.n	8008eca <_dtoa_r+0x36a>
 8008ee4:	07f9      	lsls	r1, r7, #31
 8008ee6:	d508      	bpl.n	8008efa <_dtoa_r+0x39a>
 8008ee8:	4640      	mov	r0, r8
 8008eea:	4649      	mov	r1, r9
 8008eec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ef0:	f7f7 fba2 	bl	8000638 <__aeabi_dmul>
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	4689      	mov	r9, r1
 8008efa:	107f      	asrs	r7, r7, #1
 8008efc:	3608      	adds	r6, #8
 8008efe:	e7e5      	b.n	8008ecc <_dtoa_r+0x36c>
 8008f00:	f000 809b 	beq.w	800903a <_dtoa_r+0x4da>
 8008f04:	9b00      	ldr	r3, [sp, #0]
 8008f06:	4f9d      	ldr	r7, [pc, #628]	; (800917c <_dtoa_r+0x61c>)
 8008f08:	425e      	negs	r6, r3
 8008f0a:	4b9b      	ldr	r3, [pc, #620]	; (8009178 <_dtoa_r+0x618>)
 8008f0c:	f006 020f 	and.w	r2, r6, #15
 8008f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	ec51 0b19 	vmov	r0, r1, d9
 8008f1c:	f7f7 fb8c 	bl	8000638 <__aeabi_dmul>
 8008f20:	1136      	asrs	r6, r6, #4
 8008f22:	4682      	mov	sl, r0
 8008f24:	468b      	mov	fp, r1
 8008f26:	2300      	movs	r3, #0
 8008f28:	2502      	movs	r5, #2
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	d17a      	bne.n	8009024 <_dtoa_r+0x4c4>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1d3      	bne.n	8008eda <_dtoa_r+0x37a>
 8008f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 8082 	beq.w	800903e <_dtoa_r+0x4de>
 8008f3a:	4b91      	ldr	r3, [pc, #580]	; (8009180 <_dtoa_r+0x620>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4650      	mov	r0, sl
 8008f40:	4659      	mov	r1, fp
 8008f42:	f7f7 fdeb 	bl	8000b1c <__aeabi_dcmplt>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d079      	beq.n	800903e <_dtoa_r+0x4de>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d076      	beq.n	800903e <_dtoa_r+0x4de>
 8008f50:	9b02      	ldr	r3, [sp, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	dd36      	ble.n	8008fc4 <_dtoa_r+0x464>
 8008f56:	9b00      	ldr	r3, [sp, #0]
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	1e5f      	subs	r7, r3, #1
 8008f5e:	2200      	movs	r2, #0
 8008f60:	4b88      	ldr	r3, [pc, #544]	; (8009184 <_dtoa_r+0x624>)
 8008f62:	f7f7 fb69 	bl	8000638 <__aeabi_dmul>
 8008f66:	9e02      	ldr	r6, [sp, #8]
 8008f68:	4682      	mov	sl, r0
 8008f6a:	468b      	mov	fp, r1
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f7f7 faf8 	bl	8000564 <__aeabi_i2d>
 8008f74:	4652      	mov	r2, sl
 8008f76:	465b      	mov	r3, fp
 8008f78:	f7f7 fb5e 	bl	8000638 <__aeabi_dmul>
 8008f7c:	4b82      	ldr	r3, [pc, #520]	; (8009188 <_dtoa_r+0x628>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f7f7 f9a4 	bl	80002cc <__adddf3>
 8008f84:	46d0      	mov	r8, sl
 8008f86:	46d9      	mov	r9, fp
 8008f88:	4682      	mov	sl, r0
 8008f8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	d158      	bne.n	8009044 <_dtoa_r+0x4e4>
 8008f92:	4b7e      	ldr	r3, [pc, #504]	; (800918c <_dtoa_r+0x62c>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	4640      	mov	r0, r8
 8008f98:	4649      	mov	r1, r9
 8008f9a:	f7f7 f995 	bl	80002c8 <__aeabi_dsub>
 8008f9e:	4652      	mov	r2, sl
 8008fa0:	465b      	mov	r3, fp
 8008fa2:	4680      	mov	r8, r0
 8008fa4:	4689      	mov	r9, r1
 8008fa6:	f7f7 fdd7 	bl	8000b58 <__aeabi_dcmpgt>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f040 8295 	bne.w	80094da <_dtoa_r+0x97a>
 8008fb0:	4652      	mov	r2, sl
 8008fb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	4649      	mov	r1, r9
 8008fba:	f7f7 fdaf 	bl	8000b1c <__aeabi_dcmplt>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f040 8289 	bne.w	80094d6 <_dtoa_r+0x976>
 8008fc4:	ec5b ab19 	vmov	sl, fp, d9
 8008fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f2c0 8148 	blt.w	8009260 <_dtoa_r+0x700>
 8008fd0:	9a00      	ldr	r2, [sp, #0]
 8008fd2:	2a0e      	cmp	r2, #14
 8008fd4:	f300 8144 	bgt.w	8009260 <_dtoa_r+0x700>
 8008fd8:	4b67      	ldr	r3, [pc, #412]	; (8009178 <_dtoa_r+0x618>)
 8008fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f280 80d5 	bge.w	8009194 <_dtoa_r+0x634>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f300 80d1 	bgt.w	8009194 <_dtoa_r+0x634>
 8008ff2:	f040 826f 	bne.w	80094d4 <_dtoa_r+0x974>
 8008ff6:	4b65      	ldr	r3, [pc, #404]	; (800918c <_dtoa_r+0x62c>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 fb1b 	bl	8000638 <__aeabi_dmul>
 8009002:	4652      	mov	r2, sl
 8009004:	465b      	mov	r3, fp
 8009006:	f7f7 fd9d 	bl	8000b44 <__aeabi_dcmpge>
 800900a:	9e03      	ldr	r6, [sp, #12]
 800900c:	4637      	mov	r7, r6
 800900e:	2800      	cmp	r0, #0
 8009010:	f040 8245 	bne.w	800949e <_dtoa_r+0x93e>
 8009014:	9d01      	ldr	r5, [sp, #4]
 8009016:	2331      	movs	r3, #49	; 0x31
 8009018:	f805 3b01 	strb.w	r3, [r5], #1
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	e240      	b.n	80094a6 <_dtoa_r+0x946>
 8009024:	07f2      	lsls	r2, r6, #31
 8009026:	d505      	bpl.n	8009034 <_dtoa_r+0x4d4>
 8009028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800902c:	f7f7 fb04 	bl	8000638 <__aeabi_dmul>
 8009030:	3501      	adds	r5, #1
 8009032:	2301      	movs	r3, #1
 8009034:	1076      	asrs	r6, r6, #1
 8009036:	3708      	adds	r7, #8
 8009038:	e777      	b.n	8008f2a <_dtoa_r+0x3ca>
 800903a:	2502      	movs	r5, #2
 800903c:	e779      	b.n	8008f32 <_dtoa_r+0x3d2>
 800903e:	9f00      	ldr	r7, [sp, #0]
 8009040:	9e03      	ldr	r6, [sp, #12]
 8009042:	e794      	b.n	8008f6e <_dtoa_r+0x40e>
 8009044:	9901      	ldr	r1, [sp, #4]
 8009046:	4b4c      	ldr	r3, [pc, #304]	; (8009178 <_dtoa_r+0x618>)
 8009048:	4431      	add	r1, r6
 800904a:	910d      	str	r1, [sp, #52]	; 0x34
 800904c:	9908      	ldr	r1, [sp, #32]
 800904e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009052:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009056:	2900      	cmp	r1, #0
 8009058:	d043      	beq.n	80090e2 <_dtoa_r+0x582>
 800905a:	494d      	ldr	r1, [pc, #308]	; (8009190 <_dtoa_r+0x630>)
 800905c:	2000      	movs	r0, #0
 800905e:	f7f7 fc15 	bl	800088c <__aeabi_ddiv>
 8009062:	4652      	mov	r2, sl
 8009064:	465b      	mov	r3, fp
 8009066:	f7f7 f92f 	bl	80002c8 <__aeabi_dsub>
 800906a:	9d01      	ldr	r5, [sp, #4]
 800906c:	4682      	mov	sl, r0
 800906e:	468b      	mov	fp, r1
 8009070:	4649      	mov	r1, r9
 8009072:	4640      	mov	r0, r8
 8009074:	f7f7 fd90 	bl	8000b98 <__aeabi_d2iz>
 8009078:	4606      	mov	r6, r0
 800907a:	f7f7 fa73 	bl	8000564 <__aeabi_i2d>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 f91f 	bl	80002c8 <__aeabi_dsub>
 800908a:	3630      	adds	r6, #48	; 0x30
 800908c:	f805 6b01 	strb.w	r6, [r5], #1
 8009090:	4652      	mov	r2, sl
 8009092:	465b      	mov	r3, fp
 8009094:	4680      	mov	r8, r0
 8009096:	4689      	mov	r9, r1
 8009098:	f7f7 fd40 	bl	8000b1c <__aeabi_dcmplt>
 800909c:	2800      	cmp	r0, #0
 800909e:	d163      	bne.n	8009168 <_dtoa_r+0x608>
 80090a0:	4642      	mov	r2, r8
 80090a2:	464b      	mov	r3, r9
 80090a4:	4936      	ldr	r1, [pc, #216]	; (8009180 <_dtoa_r+0x620>)
 80090a6:	2000      	movs	r0, #0
 80090a8:	f7f7 f90e 	bl	80002c8 <__aeabi_dsub>
 80090ac:	4652      	mov	r2, sl
 80090ae:	465b      	mov	r3, fp
 80090b0:	f7f7 fd34 	bl	8000b1c <__aeabi_dcmplt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f040 80b5 	bne.w	8009224 <_dtoa_r+0x6c4>
 80090ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090bc:	429d      	cmp	r5, r3
 80090be:	d081      	beq.n	8008fc4 <_dtoa_r+0x464>
 80090c0:	4b30      	ldr	r3, [pc, #192]	; (8009184 <_dtoa_r+0x624>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	4650      	mov	r0, sl
 80090c6:	4659      	mov	r1, fp
 80090c8:	f7f7 fab6 	bl	8000638 <__aeabi_dmul>
 80090cc:	4b2d      	ldr	r3, [pc, #180]	; (8009184 <_dtoa_r+0x624>)
 80090ce:	4682      	mov	sl, r0
 80090d0:	468b      	mov	fp, r1
 80090d2:	4640      	mov	r0, r8
 80090d4:	4649      	mov	r1, r9
 80090d6:	2200      	movs	r2, #0
 80090d8:	f7f7 faae 	bl	8000638 <__aeabi_dmul>
 80090dc:	4680      	mov	r8, r0
 80090de:	4689      	mov	r9, r1
 80090e0:	e7c6      	b.n	8009070 <_dtoa_r+0x510>
 80090e2:	4650      	mov	r0, sl
 80090e4:	4659      	mov	r1, fp
 80090e6:	f7f7 faa7 	bl	8000638 <__aeabi_dmul>
 80090ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ec:	9d01      	ldr	r5, [sp, #4]
 80090ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80090f0:	4682      	mov	sl, r0
 80090f2:	468b      	mov	fp, r1
 80090f4:	4649      	mov	r1, r9
 80090f6:	4640      	mov	r0, r8
 80090f8:	f7f7 fd4e 	bl	8000b98 <__aeabi_d2iz>
 80090fc:	4606      	mov	r6, r0
 80090fe:	f7f7 fa31 	bl	8000564 <__aeabi_i2d>
 8009102:	3630      	adds	r6, #48	; 0x30
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4640      	mov	r0, r8
 800910a:	4649      	mov	r1, r9
 800910c:	f7f7 f8dc 	bl	80002c8 <__aeabi_dsub>
 8009110:	f805 6b01 	strb.w	r6, [r5], #1
 8009114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009116:	429d      	cmp	r5, r3
 8009118:	4680      	mov	r8, r0
 800911a:	4689      	mov	r9, r1
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	d124      	bne.n	800916c <_dtoa_r+0x60c>
 8009122:	4b1b      	ldr	r3, [pc, #108]	; (8009190 <_dtoa_r+0x630>)
 8009124:	4650      	mov	r0, sl
 8009126:	4659      	mov	r1, fp
 8009128:	f7f7 f8d0 	bl	80002cc <__adddf3>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4640      	mov	r0, r8
 8009132:	4649      	mov	r1, r9
 8009134:	f7f7 fd10 	bl	8000b58 <__aeabi_dcmpgt>
 8009138:	2800      	cmp	r0, #0
 800913a:	d173      	bne.n	8009224 <_dtoa_r+0x6c4>
 800913c:	4652      	mov	r2, sl
 800913e:	465b      	mov	r3, fp
 8009140:	4913      	ldr	r1, [pc, #76]	; (8009190 <_dtoa_r+0x630>)
 8009142:	2000      	movs	r0, #0
 8009144:	f7f7 f8c0 	bl	80002c8 <__aeabi_dsub>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4640      	mov	r0, r8
 800914e:	4649      	mov	r1, r9
 8009150:	f7f7 fce4 	bl	8000b1c <__aeabi_dcmplt>
 8009154:	2800      	cmp	r0, #0
 8009156:	f43f af35 	beq.w	8008fc4 <_dtoa_r+0x464>
 800915a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800915c:	1e6b      	subs	r3, r5, #1
 800915e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009160:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009164:	2b30      	cmp	r3, #48	; 0x30
 8009166:	d0f8      	beq.n	800915a <_dtoa_r+0x5fa>
 8009168:	9700      	str	r7, [sp, #0]
 800916a:	e049      	b.n	8009200 <_dtoa_r+0x6a0>
 800916c:	4b05      	ldr	r3, [pc, #20]	; (8009184 <_dtoa_r+0x624>)
 800916e:	f7f7 fa63 	bl	8000638 <__aeabi_dmul>
 8009172:	4680      	mov	r8, r0
 8009174:	4689      	mov	r9, r1
 8009176:	e7bd      	b.n	80090f4 <_dtoa_r+0x594>
 8009178:	0800b188 	.word	0x0800b188
 800917c:	0800b160 	.word	0x0800b160
 8009180:	3ff00000 	.word	0x3ff00000
 8009184:	40240000 	.word	0x40240000
 8009188:	401c0000 	.word	0x401c0000
 800918c:	40140000 	.word	0x40140000
 8009190:	3fe00000 	.word	0x3fe00000
 8009194:	9d01      	ldr	r5, [sp, #4]
 8009196:	4656      	mov	r6, sl
 8009198:	465f      	mov	r7, fp
 800919a:	4642      	mov	r2, r8
 800919c:	464b      	mov	r3, r9
 800919e:	4630      	mov	r0, r6
 80091a0:	4639      	mov	r1, r7
 80091a2:	f7f7 fb73 	bl	800088c <__aeabi_ddiv>
 80091a6:	f7f7 fcf7 	bl	8000b98 <__aeabi_d2iz>
 80091aa:	4682      	mov	sl, r0
 80091ac:	f7f7 f9da 	bl	8000564 <__aeabi_i2d>
 80091b0:	4642      	mov	r2, r8
 80091b2:	464b      	mov	r3, r9
 80091b4:	f7f7 fa40 	bl	8000638 <__aeabi_dmul>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4630      	mov	r0, r6
 80091be:	4639      	mov	r1, r7
 80091c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80091c4:	f7f7 f880 	bl	80002c8 <__aeabi_dsub>
 80091c8:	f805 6b01 	strb.w	r6, [r5], #1
 80091cc:	9e01      	ldr	r6, [sp, #4]
 80091ce:	9f03      	ldr	r7, [sp, #12]
 80091d0:	1bae      	subs	r6, r5, r6
 80091d2:	42b7      	cmp	r7, r6
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	d135      	bne.n	8009246 <_dtoa_r+0x6e6>
 80091da:	f7f7 f877 	bl	80002cc <__adddf3>
 80091de:	4642      	mov	r2, r8
 80091e0:	464b      	mov	r3, r9
 80091e2:	4606      	mov	r6, r0
 80091e4:	460f      	mov	r7, r1
 80091e6:	f7f7 fcb7 	bl	8000b58 <__aeabi_dcmpgt>
 80091ea:	b9d0      	cbnz	r0, 8009222 <_dtoa_r+0x6c2>
 80091ec:	4642      	mov	r2, r8
 80091ee:	464b      	mov	r3, r9
 80091f0:	4630      	mov	r0, r6
 80091f2:	4639      	mov	r1, r7
 80091f4:	f7f7 fc88 	bl	8000b08 <__aeabi_dcmpeq>
 80091f8:	b110      	cbz	r0, 8009200 <_dtoa_r+0x6a0>
 80091fa:	f01a 0f01 	tst.w	sl, #1
 80091fe:	d110      	bne.n	8009222 <_dtoa_r+0x6c2>
 8009200:	4620      	mov	r0, r4
 8009202:	ee18 1a10 	vmov	r1, s16
 8009206:	f000 faf3 	bl	80097f0 <_Bfree>
 800920a:	2300      	movs	r3, #0
 800920c:	9800      	ldr	r0, [sp, #0]
 800920e:	702b      	strb	r3, [r5, #0]
 8009210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009212:	3001      	adds	r0, #1
 8009214:	6018      	str	r0, [r3, #0]
 8009216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009218:	2b00      	cmp	r3, #0
 800921a:	f43f acf1 	beq.w	8008c00 <_dtoa_r+0xa0>
 800921e:	601d      	str	r5, [r3, #0]
 8009220:	e4ee      	b.n	8008c00 <_dtoa_r+0xa0>
 8009222:	9f00      	ldr	r7, [sp, #0]
 8009224:	462b      	mov	r3, r5
 8009226:	461d      	mov	r5, r3
 8009228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800922c:	2a39      	cmp	r2, #57	; 0x39
 800922e:	d106      	bne.n	800923e <_dtoa_r+0x6de>
 8009230:	9a01      	ldr	r2, [sp, #4]
 8009232:	429a      	cmp	r2, r3
 8009234:	d1f7      	bne.n	8009226 <_dtoa_r+0x6c6>
 8009236:	9901      	ldr	r1, [sp, #4]
 8009238:	2230      	movs	r2, #48	; 0x30
 800923a:	3701      	adds	r7, #1
 800923c:	700a      	strb	r2, [r1, #0]
 800923e:	781a      	ldrb	r2, [r3, #0]
 8009240:	3201      	adds	r2, #1
 8009242:	701a      	strb	r2, [r3, #0]
 8009244:	e790      	b.n	8009168 <_dtoa_r+0x608>
 8009246:	4ba6      	ldr	r3, [pc, #664]	; (80094e0 <_dtoa_r+0x980>)
 8009248:	2200      	movs	r2, #0
 800924a:	f7f7 f9f5 	bl	8000638 <__aeabi_dmul>
 800924e:	2200      	movs	r2, #0
 8009250:	2300      	movs	r3, #0
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	f7f7 fc57 	bl	8000b08 <__aeabi_dcmpeq>
 800925a:	2800      	cmp	r0, #0
 800925c:	d09d      	beq.n	800919a <_dtoa_r+0x63a>
 800925e:	e7cf      	b.n	8009200 <_dtoa_r+0x6a0>
 8009260:	9a08      	ldr	r2, [sp, #32]
 8009262:	2a00      	cmp	r2, #0
 8009264:	f000 80d7 	beq.w	8009416 <_dtoa_r+0x8b6>
 8009268:	9a06      	ldr	r2, [sp, #24]
 800926a:	2a01      	cmp	r2, #1
 800926c:	f300 80ba 	bgt.w	80093e4 <_dtoa_r+0x884>
 8009270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009272:	2a00      	cmp	r2, #0
 8009274:	f000 80b2 	beq.w	80093dc <_dtoa_r+0x87c>
 8009278:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800927c:	9e07      	ldr	r6, [sp, #28]
 800927e:	9d04      	ldr	r5, [sp, #16]
 8009280:	9a04      	ldr	r2, [sp, #16]
 8009282:	441a      	add	r2, r3
 8009284:	9204      	str	r2, [sp, #16]
 8009286:	9a05      	ldr	r2, [sp, #20]
 8009288:	2101      	movs	r1, #1
 800928a:	441a      	add	r2, r3
 800928c:	4620      	mov	r0, r4
 800928e:	9205      	str	r2, [sp, #20]
 8009290:	f000 fb66 	bl	8009960 <__i2b>
 8009294:	4607      	mov	r7, r0
 8009296:	2d00      	cmp	r5, #0
 8009298:	dd0c      	ble.n	80092b4 <_dtoa_r+0x754>
 800929a:	9b05      	ldr	r3, [sp, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	dd09      	ble.n	80092b4 <_dtoa_r+0x754>
 80092a0:	42ab      	cmp	r3, r5
 80092a2:	9a04      	ldr	r2, [sp, #16]
 80092a4:	bfa8      	it	ge
 80092a6:	462b      	movge	r3, r5
 80092a8:	1ad2      	subs	r2, r2, r3
 80092aa:	9204      	str	r2, [sp, #16]
 80092ac:	9a05      	ldr	r2, [sp, #20]
 80092ae:	1aed      	subs	r5, r5, r3
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	9b07      	ldr	r3, [sp, #28]
 80092b6:	b31b      	cbz	r3, 8009300 <_dtoa_r+0x7a0>
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 80af 	beq.w	800941e <_dtoa_r+0x8be>
 80092c0:	2e00      	cmp	r6, #0
 80092c2:	dd13      	ble.n	80092ec <_dtoa_r+0x78c>
 80092c4:	4639      	mov	r1, r7
 80092c6:	4632      	mov	r2, r6
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 fc09 	bl	8009ae0 <__pow5mult>
 80092ce:	ee18 2a10 	vmov	r2, s16
 80092d2:	4601      	mov	r1, r0
 80092d4:	4607      	mov	r7, r0
 80092d6:	4620      	mov	r0, r4
 80092d8:	f000 fb58 	bl	800998c <__multiply>
 80092dc:	ee18 1a10 	vmov	r1, s16
 80092e0:	4680      	mov	r8, r0
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fa84 	bl	80097f0 <_Bfree>
 80092e8:	ee08 8a10 	vmov	s16, r8
 80092ec:	9b07      	ldr	r3, [sp, #28]
 80092ee:	1b9a      	subs	r2, r3, r6
 80092f0:	d006      	beq.n	8009300 <_dtoa_r+0x7a0>
 80092f2:	ee18 1a10 	vmov	r1, s16
 80092f6:	4620      	mov	r0, r4
 80092f8:	f000 fbf2 	bl	8009ae0 <__pow5mult>
 80092fc:	ee08 0a10 	vmov	s16, r0
 8009300:	2101      	movs	r1, #1
 8009302:	4620      	mov	r0, r4
 8009304:	f000 fb2c 	bl	8009960 <__i2b>
 8009308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930a:	2b00      	cmp	r3, #0
 800930c:	4606      	mov	r6, r0
 800930e:	f340 8088 	ble.w	8009422 <_dtoa_r+0x8c2>
 8009312:	461a      	mov	r2, r3
 8009314:	4601      	mov	r1, r0
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fbe2 	bl	8009ae0 <__pow5mult>
 800931c:	9b06      	ldr	r3, [sp, #24]
 800931e:	2b01      	cmp	r3, #1
 8009320:	4606      	mov	r6, r0
 8009322:	f340 8081 	ble.w	8009428 <_dtoa_r+0x8c8>
 8009326:	f04f 0800 	mov.w	r8, #0
 800932a:	6933      	ldr	r3, [r6, #16]
 800932c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009330:	6918      	ldr	r0, [r3, #16]
 8009332:	f000 fac5 	bl	80098c0 <__hi0bits>
 8009336:	f1c0 0020 	rsb	r0, r0, #32
 800933a:	9b05      	ldr	r3, [sp, #20]
 800933c:	4418      	add	r0, r3
 800933e:	f010 001f 	ands.w	r0, r0, #31
 8009342:	f000 8092 	beq.w	800946a <_dtoa_r+0x90a>
 8009346:	f1c0 0320 	rsb	r3, r0, #32
 800934a:	2b04      	cmp	r3, #4
 800934c:	f340 808a 	ble.w	8009464 <_dtoa_r+0x904>
 8009350:	f1c0 001c 	rsb	r0, r0, #28
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	4403      	add	r3, r0
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	9b05      	ldr	r3, [sp, #20]
 800935c:	4403      	add	r3, r0
 800935e:	4405      	add	r5, r0
 8009360:	9305      	str	r3, [sp, #20]
 8009362:	9b04      	ldr	r3, [sp, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd07      	ble.n	8009378 <_dtoa_r+0x818>
 8009368:	ee18 1a10 	vmov	r1, s16
 800936c:	461a      	mov	r2, r3
 800936e:	4620      	mov	r0, r4
 8009370:	f000 fc10 	bl	8009b94 <__lshift>
 8009374:	ee08 0a10 	vmov	s16, r0
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	dd05      	ble.n	800938a <_dtoa_r+0x82a>
 800937e:	4631      	mov	r1, r6
 8009380:	461a      	mov	r2, r3
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fc06 	bl	8009b94 <__lshift>
 8009388:	4606      	mov	r6, r0
 800938a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d06e      	beq.n	800946e <_dtoa_r+0x90e>
 8009390:	ee18 0a10 	vmov	r0, s16
 8009394:	4631      	mov	r1, r6
 8009396:	f000 fc6d 	bl	8009c74 <__mcmp>
 800939a:	2800      	cmp	r0, #0
 800939c:	da67      	bge.n	800946e <_dtoa_r+0x90e>
 800939e:	9b00      	ldr	r3, [sp, #0]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	ee18 1a10 	vmov	r1, s16
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	220a      	movs	r2, #10
 80093aa:	2300      	movs	r3, #0
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fa41 	bl	8009834 <__multadd>
 80093b2:	9b08      	ldr	r3, [sp, #32]
 80093b4:	ee08 0a10 	vmov	s16, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 81b1 	beq.w	8009720 <_dtoa_r+0xbc0>
 80093be:	2300      	movs	r3, #0
 80093c0:	4639      	mov	r1, r7
 80093c2:	220a      	movs	r2, #10
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 fa35 	bl	8009834 <__multadd>
 80093ca:	9b02      	ldr	r3, [sp, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	4607      	mov	r7, r0
 80093d0:	f300 808e 	bgt.w	80094f0 <_dtoa_r+0x990>
 80093d4:	9b06      	ldr	r3, [sp, #24]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	dc51      	bgt.n	800947e <_dtoa_r+0x91e>
 80093da:	e089      	b.n	80094f0 <_dtoa_r+0x990>
 80093dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093e2:	e74b      	b.n	800927c <_dtoa_r+0x71c>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	1e5e      	subs	r6, r3, #1
 80093e8:	9b07      	ldr	r3, [sp, #28]
 80093ea:	42b3      	cmp	r3, r6
 80093ec:	bfbf      	itttt	lt
 80093ee:	9b07      	ldrlt	r3, [sp, #28]
 80093f0:	9607      	strlt	r6, [sp, #28]
 80093f2:	1af2      	sublt	r2, r6, r3
 80093f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093f6:	bfb6      	itet	lt
 80093f8:	189b      	addlt	r3, r3, r2
 80093fa:	1b9e      	subge	r6, r3, r6
 80093fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093fe:	9b03      	ldr	r3, [sp, #12]
 8009400:	bfb8      	it	lt
 8009402:	2600      	movlt	r6, #0
 8009404:	2b00      	cmp	r3, #0
 8009406:	bfb7      	itett	lt
 8009408:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800940c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009410:	1a9d      	sublt	r5, r3, r2
 8009412:	2300      	movlt	r3, #0
 8009414:	e734      	b.n	8009280 <_dtoa_r+0x720>
 8009416:	9e07      	ldr	r6, [sp, #28]
 8009418:	9d04      	ldr	r5, [sp, #16]
 800941a:	9f08      	ldr	r7, [sp, #32]
 800941c:	e73b      	b.n	8009296 <_dtoa_r+0x736>
 800941e:	9a07      	ldr	r2, [sp, #28]
 8009420:	e767      	b.n	80092f2 <_dtoa_r+0x792>
 8009422:	9b06      	ldr	r3, [sp, #24]
 8009424:	2b01      	cmp	r3, #1
 8009426:	dc18      	bgt.n	800945a <_dtoa_r+0x8fa>
 8009428:	f1ba 0f00 	cmp.w	sl, #0
 800942c:	d115      	bne.n	800945a <_dtoa_r+0x8fa>
 800942e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009432:	b993      	cbnz	r3, 800945a <_dtoa_r+0x8fa>
 8009434:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009438:	0d1b      	lsrs	r3, r3, #20
 800943a:	051b      	lsls	r3, r3, #20
 800943c:	b183      	cbz	r3, 8009460 <_dtoa_r+0x900>
 800943e:	9b04      	ldr	r3, [sp, #16]
 8009440:	3301      	adds	r3, #1
 8009442:	9304      	str	r3, [sp, #16]
 8009444:	9b05      	ldr	r3, [sp, #20]
 8009446:	3301      	adds	r3, #1
 8009448:	9305      	str	r3, [sp, #20]
 800944a:	f04f 0801 	mov.w	r8, #1
 800944e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009450:	2b00      	cmp	r3, #0
 8009452:	f47f af6a 	bne.w	800932a <_dtoa_r+0x7ca>
 8009456:	2001      	movs	r0, #1
 8009458:	e76f      	b.n	800933a <_dtoa_r+0x7da>
 800945a:	f04f 0800 	mov.w	r8, #0
 800945e:	e7f6      	b.n	800944e <_dtoa_r+0x8ee>
 8009460:	4698      	mov	r8, r3
 8009462:	e7f4      	b.n	800944e <_dtoa_r+0x8ee>
 8009464:	f43f af7d 	beq.w	8009362 <_dtoa_r+0x802>
 8009468:	4618      	mov	r0, r3
 800946a:	301c      	adds	r0, #28
 800946c:	e772      	b.n	8009354 <_dtoa_r+0x7f4>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dc37      	bgt.n	80094e4 <_dtoa_r+0x984>
 8009474:	9b06      	ldr	r3, [sp, #24]
 8009476:	2b02      	cmp	r3, #2
 8009478:	dd34      	ble.n	80094e4 <_dtoa_r+0x984>
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	9302      	str	r3, [sp, #8]
 800947e:	9b02      	ldr	r3, [sp, #8]
 8009480:	b96b      	cbnz	r3, 800949e <_dtoa_r+0x93e>
 8009482:	4631      	mov	r1, r6
 8009484:	2205      	movs	r2, #5
 8009486:	4620      	mov	r0, r4
 8009488:	f000 f9d4 	bl	8009834 <__multadd>
 800948c:	4601      	mov	r1, r0
 800948e:	4606      	mov	r6, r0
 8009490:	ee18 0a10 	vmov	r0, s16
 8009494:	f000 fbee 	bl	8009c74 <__mcmp>
 8009498:	2800      	cmp	r0, #0
 800949a:	f73f adbb 	bgt.w	8009014 <_dtoa_r+0x4b4>
 800949e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a0:	9d01      	ldr	r5, [sp, #4]
 80094a2:	43db      	mvns	r3, r3
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	f04f 0800 	mov.w	r8, #0
 80094aa:	4631      	mov	r1, r6
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 f99f 	bl	80097f0 <_Bfree>
 80094b2:	2f00      	cmp	r7, #0
 80094b4:	f43f aea4 	beq.w	8009200 <_dtoa_r+0x6a0>
 80094b8:	f1b8 0f00 	cmp.w	r8, #0
 80094bc:	d005      	beq.n	80094ca <_dtoa_r+0x96a>
 80094be:	45b8      	cmp	r8, r7
 80094c0:	d003      	beq.n	80094ca <_dtoa_r+0x96a>
 80094c2:	4641      	mov	r1, r8
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 f993 	bl	80097f0 <_Bfree>
 80094ca:	4639      	mov	r1, r7
 80094cc:	4620      	mov	r0, r4
 80094ce:	f000 f98f 	bl	80097f0 <_Bfree>
 80094d2:	e695      	b.n	8009200 <_dtoa_r+0x6a0>
 80094d4:	2600      	movs	r6, #0
 80094d6:	4637      	mov	r7, r6
 80094d8:	e7e1      	b.n	800949e <_dtoa_r+0x93e>
 80094da:	9700      	str	r7, [sp, #0]
 80094dc:	4637      	mov	r7, r6
 80094de:	e599      	b.n	8009014 <_dtoa_r+0x4b4>
 80094e0:	40240000 	.word	0x40240000
 80094e4:	9b08      	ldr	r3, [sp, #32]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 80ca 	beq.w	8009680 <_dtoa_r+0xb20>
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	9302      	str	r3, [sp, #8]
 80094f0:	2d00      	cmp	r5, #0
 80094f2:	dd05      	ble.n	8009500 <_dtoa_r+0x9a0>
 80094f4:	4639      	mov	r1, r7
 80094f6:	462a      	mov	r2, r5
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 fb4b 	bl	8009b94 <__lshift>
 80094fe:	4607      	mov	r7, r0
 8009500:	f1b8 0f00 	cmp.w	r8, #0
 8009504:	d05b      	beq.n	80095be <_dtoa_r+0xa5e>
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	4620      	mov	r0, r4
 800950a:	f000 f931 	bl	8009770 <_Balloc>
 800950e:	4605      	mov	r5, r0
 8009510:	b928      	cbnz	r0, 800951e <_dtoa_r+0x9be>
 8009512:	4b87      	ldr	r3, [pc, #540]	; (8009730 <_dtoa_r+0xbd0>)
 8009514:	4602      	mov	r2, r0
 8009516:	f240 21ea 	movw	r1, #746	; 0x2ea
 800951a:	f7ff bb3b 	b.w	8008b94 <_dtoa_r+0x34>
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	3202      	adds	r2, #2
 8009522:	0092      	lsls	r2, r2, #2
 8009524:	f107 010c 	add.w	r1, r7, #12
 8009528:	300c      	adds	r0, #12
 800952a:	f000 f913 	bl	8009754 <memcpy>
 800952e:	2201      	movs	r2, #1
 8009530:	4629      	mov	r1, r5
 8009532:	4620      	mov	r0, r4
 8009534:	f000 fb2e 	bl	8009b94 <__lshift>
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	f103 0901 	add.w	r9, r3, #1
 800953e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009542:	4413      	add	r3, r2
 8009544:	9305      	str	r3, [sp, #20]
 8009546:	f00a 0301 	and.w	r3, sl, #1
 800954a:	46b8      	mov	r8, r7
 800954c:	9304      	str	r3, [sp, #16]
 800954e:	4607      	mov	r7, r0
 8009550:	4631      	mov	r1, r6
 8009552:	ee18 0a10 	vmov	r0, s16
 8009556:	f7ff fa75 	bl	8008a44 <quorem>
 800955a:	4641      	mov	r1, r8
 800955c:	9002      	str	r0, [sp, #8]
 800955e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009562:	ee18 0a10 	vmov	r0, s16
 8009566:	f000 fb85 	bl	8009c74 <__mcmp>
 800956a:	463a      	mov	r2, r7
 800956c:	9003      	str	r0, [sp, #12]
 800956e:	4631      	mov	r1, r6
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fb9b 	bl	8009cac <__mdiff>
 8009576:	68c2      	ldr	r2, [r0, #12]
 8009578:	f109 3bff 	add.w	fp, r9, #4294967295
 800957c:	4605      	mov	r5, r0
 800957e:	bb02      	cbnz	r2, 80095c2 <_dtoa_r+0xa62>
 8009580:	4601      	mov	r1, r0
 8009582:	ee18 0a10 	vmov	r0, s16
 8009586:	f000 fb75 	bl	8009c74 <__mcmp>
 800958a:	4602      	mov	r2, r0
 800958c:	4629      	mov	r1, r5
 800958e:	4620      	mov	r0, r4
 8009590:	9207      	str	r2, [sp, #28]
 8009592:	f000 f92d 	bl	80097f0 <_Bfree>
 8009596:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800959a:	ea43 0102 	orr.w	r1, r3, r2
 800959e:	9b04      	ldr	r3, [sp, #16]
 80095a0:	430b      	orrs	r3, r1
 80095a2:	464d      	mov	r5, r9
 80095a4:	d10f      	bne.n	80095c6 <_dtoa_r+0xa66>
 80095a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095aa:	d02a      	beq.n	8009602 <_dtoa_r+0xaa2>
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	dd02      	ble.n	80095b8 <_dtoa_r+0xa58>
 80095b2:	9b02      	ldr	r3, [sp, #8]
 80095b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80095b8:	f88b a000 	strb.w	sl, [fp]
 80095bc:	e775      	b.n	80094aa <_dtoa_r+0x94a>
 80095be:	4638      	mov	r0, r7
 80095c0:	e7ba      	b.n	8009538 <_dtoa_r+0x9d8>
 80095c2:	2201      	movs	r2, #1
 80095c4:	e7e2      	b.n	800958c <_dtoa_r+0xa2c>
 80095c6:	9b03      	ldr	r3, [sp, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	db04      	blt.n	80095d6 <_dtoa_r+0xa76>
 80095cc:	9906      	ldr	r1, [sp, #24]
 80095ce:	430b      	orrs	r3, r1
 80095d0:	9904      	ldr	r1, [sp, #16]
 80095d2:	430b      	orrs	r3, r1
 80095d4:	d122      	bne.n	800961c <_dtoa_r+0xabc>
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	ddee      	ble.n	80095b8 <_dtoa_r+0xa58>
 80095da:	ee18 1a10 	vmov	r1, s16
 80095de:	2201      	movs	r2, #1
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fad7 	bl	8009b94 <__lshift>
 80095e6:	4631      	mov	r1, r6
 80095e8:	ee08 0a10 	vmov	s16, r0
 80095ec:	f000 fb42 	bl	8009c74 <__mcmp>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	dc03      	bgt.n	80095fc <_dtoa_r+0xa9c>
 80095f4:	d1e0      	bne.n	80095b8 <_dtoa_r+0xa58>
 80095f6:	f01a 0f01 	tst.w	sl, #1
 80095fa:	d0dd      	beq.n	80095b8 <_dtoa_r+0xa58>
 80095fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009600:	d1d7      	bne.n	80095b2 <_dtoa_r+0xa52>
 8009602:	2339      	movs	r3, #57	; 0x39
 8009604:	f88b 3000 	strb.w	r3, [fp]
 8009608:	462b      	mov	r3, r5
 800960a:	461d      	mov	r5, r3
 800960c:	3b01      	subs	r3, #1
 800960e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009612:	2a39      	cmp	r2, #57	; 0x39
 8009614:	d071      	beq.n	80096fa <_dtoa_r+0xb9a>
 8009616:	3201      	adds	r2, #1
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	e746      	b.n	80094aa <_dtoa_r+0x94a>
 800961c:	2a00      	cmp	r2, #0
 800961e:	dd07      	ble.n	8009630 <_dtoa_r+0xad0>
 8009620:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009624:	d0ed      	beq.n	8009602 <_dtoa_r+0xaa2>
 8009626:	f10a 0301 	add.w	r3, sl, #1
 800962a:	f88b 3000 	strb.w	r3, [fp]
 800962e:	e73c      	b.n	80094aa <_dtoa_r+0x94a>
 8009630:	9b05      	ldr	r3, [sp, #20]
 8009632:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009636:	4599      	cmp	r9, r3
 8009638:	d047      	beq.n	80096ca <_dtoa_r+0xb6a>
 800963a:	ee18 1a10 	vmov	r1, s16
 800963e:	2300      	movs	r3, #0
 8009640:	220a      	movs	r2, #10
 8009642:	4620      	mov	r0, r4
 8009644:	f000 f8f6 	bl	8009834 <__multadd>
 8009648:	45b8      	cmp	r8, r7
 800964a:	ee08 0a10 	vmov	s16, r0
 800964e:	f04f 0300 	mov.w	r3, #0
 8009652:	f04f 020a 	mov.w	r2, #10
 8009656:	4641      	mov	r1, r8
 8009658:	4620      	mov	r0, r4
 800965a:	d106      	bne.n	800966a <_dtoa_r+0xb0a>
 800965c:	f000 f8ea 	bl	8009834 <__multadd>
 8009660:	4680      	mov	r8, r0
 8009662:	4607      	mov	r7, r0
 8009664:	f109 0901 	add.w	r9, r9, #1
 8009668:	e772      	b.n	8009550 <_dtoa_r+0x9f0>
 800966a:	f000 f8e3 	bl	8009834 <__multadd>
 800966e:	4639      	mov	r1, r7
 8009670:	4680      	mov	r8, r0
 8009672:	2300      	movs	r3, #0
 8009674:	220a      	movs	r2, #10
 8009676:	4620      	mov	r0, r4
 8009678:	f000 f8dc 	bl	8009834 <__multadd>
 800967c:	4607      	mov	r7, r0
 800967e:	e7f1      	b.n	8009664 <_dtoa_r+0xb04>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	9302      	str	r3, [sp, #8]
 8009684:	9d01      	ldr	r5, [sp, #4]
 8009686:	ee18 0a10 	vmov	r0, s16
 800968a:	4631      	mov	r1, r6
 800968c:	f7ff f9da 	bl	8008a44 <quorem>
 8009690:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	f805 ab01 	strb.w	sl, [r5], #1
 800969a:	1aea      	subs	r2, r5, r3
 800969c:	9b02      	ldr	r3, [sp, #8]
 800969e:	4293      	cmp	r3, r2
 80096a0:	dd09      	ble.n	80096b6 <_dtoa_r+0xb56>
 80096a2:	ee18 1a10 	vmov	r1, s16
 80096a6:	2300      	movs	r3, #0
 80096a8:	220a      	movs	r2, #10
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 f8c2 	bl	8009834 <__multadd>
 80096b0:	ee08 0a10 	vmov	s16, r0
 80096b4:	e7e7      	b.n	8009686 <_dtoa_r+0xb26>
 80096b6:	9b02      	ldr	r3, [sp, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfc8      	it	gt
 80096bc:	461d      	movgt	r5, r3
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	bfd8      	it	le
 80096c2:	2501      	movle	r5, #1
 80096c4:	441d      	add	r5, r3
 80096c6:	f04f 0800 	mov.w	r8, #0
 80096ca:	ee18 1a10 	vmov	r1, s16
 80096ce:	2201      	movs	r2, #1
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 fa5f 	bl	8009b94 <__lshift>
 80096d6:	4631      	mov	r1, r6
 80096d8:	ee08 0a10 	vmov	s16, r0
 80096dc:	f000 faca 	bl	8009c74 <__mcmp>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	dc91      	bgt.n	8009608 <_dtoa_r+0xaa8>
 80096e4:	d102      	bne.n	80096ec <_dtoa_r+0xb8c>
 80096e6:	f01a 0f01 	tst.w	sl, #1
 80096ea:	d18d      	bne.n	8009608 <_dtoa_r+0xaa8>
 80096ec:	462b      	mov	r3, r5
 80096ee:	461d      	mov	r5, r3
 80096f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096f4:	2a30      	cmp	r2, #48	; 0x30
 80096f6:	d0fa      	beq.n	80096ee <_dtoa_r+0xb8e>
 80096f8:	e6d7      	b.n	80094aa <_dtoa_r+0x94a>
 80096fa:	9a01      	ldr	r2, [sp, #4]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d184      	bne.n	800960a <_dtoa_r+0xaaa>
 8009700:	9b00      	ldr	r3, [sp, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	2331      	movs	r3, #49	; 0x31
 8009708:	7013      	strb	r3, [r2, #0]
 800970a:	e6ce      	b.n	80094aa <_dtoa_r+0x94a>
 800970c:	4b09      	ldr	r3, [pc, #36]	; (8009734 <_dtoa_r+0xbd4>)
 800970e:	f7ff ba95 	b.w	8008c3c <_dtoa_r+0xdc>
 8009712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009714:	2b00      	cmp	r3, #0
 8009716:	f47f aa6e 	bne.w	8008bf6 <_dtoa_r+0x96>
 800971a:	4b07      	ldr	r3, [pc, #28]	; (8009738 <_dtoa_r+0xbd8>)
 800971c:	f7ff ba8e 	b.w	8008c3c <_dtoa_r+0xdc>
 8009720:	9b02      	ldr	r3, [sp, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	dcae      	bgt.n	8009684 <_dtoa_r+0xb24>
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	2b02      	cmp	r3, #2
 800972a:	f73f aea8 	bgt.w	800947e <_dtoa_r+0x91e>
 800972e:	e7a9      	b.n	8009684 <_dtoa_r+0xb24>
 8009730:	0800b0f0 	.word	0x0800b0f0
 8009734:	0800af4c 	.word	0x0800af4c
 8009738:	0800b071 	.word	0x0800b071

0800973c <_localeconv_r>:
 800973c:	4800      	ldr	r0, [pc, #0]	; (8009740 <_localeconv_r+0x4>)
 800973e:	4770      	bx	lr
 8009740:	20000164 	.word	0x20000164

08009744 <malloc>:
 8009744:	4b02      	ldr	r3, [pc, #8]	; (8009750 <malloc+0xc>)
 8009746:	4601      	mov	r1, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f000 bc17 	b.w	8009f7c <_malloc_r>
 800974e:	bf00      	nop
 8009750:	20000010 	.word	0x20000010

08009754 <memcpy>:
 8009754:	440a      	add	r2, r1
 8009756:	4291      	cmp	r1, r2
 8009758:	f100 33ff 	add.w	r3, r0, #4294967295
 800975c:	d100      	bne.n	8009760 <memcpy+0xc>
 800975e:	4770      	bx	lr
 8009760:	b510      	push	{r4, lr}
 8009762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800976a:	4291      	cmp	r1, r2
 800976c:	d1f9      	bne.n	8009762 <memcpy+0xe>
 800976e:	bd10      	pop	{r4, pc}

08009770 <_Balloc>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009774:	4604      	mov	r4, r0
 8009776:	460d      	mov	r5, r1
 8009778:	b976      	cbnz	r6, 8009798 <_Balloc+0x28>
 800977a:	2010      	movs	r0, #16
 800977c:	f7ff ffe2 	bl	8009744 <malloc>
 8009780:	4602      	mov	r2, r0
 8009782:	6260      	str	r0, [r4, #36]	; 0x24
 8009784:	b920      	cbnz	r0, 8009790 <_Balloc+0x20>
 8009786:	4b18      	ldr	r3, [pc, #96]	; (80097e8 <_Balloc+0x78>)
 8009788:	4818      	ldr	r0, [pc, #96]	; (80097ec <_Balloc+0x7c>)
 800978a:	2166      	movs	r1, #102	; 0x66
 800978c:	f000 fdd6 	bl	800a33c <__assert_func>
 8009790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009794:	6006      	str	r6, [r0, #0]
 8009796:	60c6      	str	r6, [r0, #12]
 8009798:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800979a:	68f3      	ldr	r3, [r6, #12]
 800979c:	b183      	cbz	r3, 80097c0 <_Balloc+0x50>
 800979e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097a6:	b9b8      	cbnz	r0, 80097d8 <_Balloc+0x68>
 80097a8:	2101      	movs	r1, #1
 80097aa:	fa01 f605 	lsl.w	r6, r1, r5
 80097ae:	1d72      	adds	r2, r6, #5
 80097b0:	0092      	lsls	r2, r2, #2
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 fb60 	bl	8009e78 <_calloc_r>
 80097b8:	b160      	cbz	r0, 80097d4 <_Balloc+0x64>
 80097ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097be:	e00e      	b.n	80097de <_Balloc+0x6e>
 80097c0:	2221      	movs	r2, #33	; 0x21
 80097c2:	2104      	movs	r1, #4
 80097c4:	4620      	mov	r0, r4
 80097c6:	f000 fb57 	bl	8009e78 <_calloc_r>
 80097ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097cc:	60f0      	str	r0, [r6, #12]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e4      	bne.n	800979e <_Balloc+0x2e>
 80097d4:	2000      	movs	r0, #0
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	6802      	ldr	r2, [r0, #0]
 80097da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097de:	2300      	movs	r3, #0
 80097e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097e4:	e7f7      	b.n	80097d6 <_Balloc+0x66>
 80097e6:	bf00      	nop
 80097e8:	0800b07e 	.word	0x0800b07e
 80097ec:	0800b101 	.word	0x0800b101

080097f0 <_Bfree>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097f4:	4605      	mov	r5, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	b976      	cbnz	r6, 8009818 <_Bfree+0x28>
 80097fa:	2010      	movs	r0, #16
 80097fc:	f7ff ffa2 	bl	8009744 <malloc>
 8009800:	4602      	mov	r2, r0
 8009802:	6268      	str	r0, [r5, #36]	; 0x24
 8009804:	b920      	cbnz	r0, 8009810 <_Bfree+0x20>
 8009806:	4b09      	ldr	r3, [pc, #36]	; (800982c <_Bfree+0x3c>)
 8009808:	4809      	ldr	r0, [pc, #36]	; (8009830 <_Bfree+0x40>)
 800980a:	218a      	movs	r1, #138	; 0x8a
 800980c:	f000 fd96 	bl	800a33c <__assert_func>
 8009810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009814:	6006      	str	r6, [r0, #0]
 8009816:	60c6      	str	r6, [r0, #12]
 8009818:	b13c      	cbz	r4, 800982a <_Bfree+0x3a>
 800981a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800981c:	6862      	ldr	r2, [r4, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009824:	6021      	str	r1, [r4, #0]
 8009826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	0800b07e 	.word	0x0800b07e
 8009830:	0800b101 	.word	0x0800b101

08009834 <__multadd>:
 8009834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009838:	690d      	ldr	r5, [r1, #16]
 800983a:	4607      	mov	r7, r0
 800983c:	460c      	mov	r4, r1
 800983e:	461e      	mov	r6, r3
 8009840:	f101 0c14 	add.w	ip, r1, #20
 8009844:	2000      	movs	r0, #0
 8009846:	f8dc 3000 	ldr.w	r3, [ip]
 800984a:	b299      	uxth	r1, r3
 800984c:	fb02 6101 	mla	r1, r2, r1, r6
 8009850:	0c1e      	lsrs	r6, r3, #16
 8009852:	0c0b      	lsrs	r3, r1, #16
 8009854:	fb02 3306 	mla	r3, r2, r6, r3
 8009858:	b289      	uxth	r1, r1
 800985a:	3001      	adds	r0, #1
 800985c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009860:	4285      	cmp	r5, r0
 8009862:	f84c 1b04 	str.w	r1, [ip], #4
 8009866:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800986a:	dcec      	bgt.n	8009846 <__multadd+0x12>
 800986c:	b30e      	cbz	r6, 80098b2 <__multadd+0x7e>
 800986e:	68a3      	ldr	r3, [r4, #8]
 8009870:	42ab      	cmp	r3, r5
 8009872:	dc19      	bgt.n	80098a8 <__multadd+0x74>
 8009874:	6861      	ldr	r1, [r4, #4]
 8009876:	4638      	mov	r0, r7
 8009878:	3101      	adds	r1, #1
 800987a:	f7ff ff79 	bl	8009770 <_Balloc>
 800987e:	4680      	mov	r8, r0
 8009880:	b928      	cbnz	r0, 800988e <__multadd+0x5a>
 8009882:	4602      	mov	r2, r0
 8009884:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <__multadd+0x84>)
 8009886:	480d      	ldr	r0, [pc, #52]	; (80098bc <__multadd+0x88>)
 8009888:	21b5      	movs	r1, #181	; 0xb5
 800988a:	f000 fd57 	bl	800a33c <__assert_func>
 800988e:	6922      	ldr	r2, [r4, #16]
 8009890:	3202      	adds	r2, #2
 8009892:	f104 010c 	add.w	r1, r4, #12
 8009896:	0092      	lsls	r2, r2, #2
 8009898:	300c      	adds	r0, #12
 800989a:	f7ff ff5b 	bl	8009754 <memcpy>
 800989e:	4621      	mov	r1, r4
 80098a0:	4638      	mov	r0, r7
 80098a2:	f7ff ffa5 	bl	80097f0 <_Bfree>
 80098a6:	4644      	mov	r4, r8
 80098a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098ac:	3501      	adds	r5, #1
 80098ae:	615e      	str	r6, [r3, #20]
 80098b0:	6125      	str	r5, [r4, #16]
 80098b2:	4620      	mov	r0, r4
 80098b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b8:	0800b0f0 	.word	0x0800b0f0
 80098bc:	0800b101 	.word	0x0800b101

080098c0 <__hi0bits>:
 80098c0:	0c03      	lsrs	r3, r0, #16
 80098c2:	041b      	lsls	r3, r3, #16
 80098c4:	b9d3      	cbnz	r3, 80098fc <__hi0bits+0x3c>
 80098c6:	0400      	lsls	r0, r0, #16
 80098c8:	2310      	movs	r3, #16
 80098ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098ce:	bf04      	itt	eq
 80098d0:	0200      	lsleq	r0, r0, #8
 80098d2:	3308      	addeq	r3, #8
 80098d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80098d8:	bf04      	itt	eq
 80098da:	0100      	lsleq	r0, r0, #4
 80098dc:	3304      	addeq	r3, #4
 80098de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80098e2:	bf04      	itt	eq
 80098e4:	0080      	lsleq	r0, r0, #2
 80098e6:	3302      	addeq	r3, #2
 80098e8:	2800      	cmp	r0, #0
 80098ea:	db05      	blt.n	80098f8 <__hi0bits+0x38>
 80098ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80098f0:	f103 0301 	add.w	r3, r3, #1
 80098f4:	bf08      	it	eq
 80098f6:	2320      	moveq	r3, #32
 80098f8:	4618      	mov	r0, r3
 80098fa:	4770      	bx	lr
 80098fc:	2300      	movs	r3, #0
 80098fe:	e7e4      	b.n	80098ca <__hi0bits+0xa>

08009900 <__lo0bits>:
 8009900:	6803      	ldr	r3, [r0, #0]
 8009902:	f013 0207 	ands.w	r2, r3, #7
 8009906:	4601      	mov	r1, r0
 8009908:	d00b      	beq.n	8009922 <__lo0bits+0x22>
 800990a:	07da      	lsls	r2, r3, #31
 800990c:	d423      	bmi.n	8009956 <__lo0bits+0x56>
 800990e:	0798      	lsls	r0, r3, #30
 8009910:	bf49      	itett	mi
 8009912:	085b      	lsrmi	r3, r3, #1
 8009914:	089b      	lsrpl	r3, r3, #2
 8009916:	2001      	movmi	r0, #1
 8009918:	600b      	strmi	r3, [r1, #0]
 800991a:	bf5c      	itt	pl
 800991c:	600b      	strpl	r3, [r1, #0]
 800991e:	2002      	movpl	r0, #2
 8009920:	4770      	bx	lr
 8009922:	b298      	uxth	r0, r3
 8009924:	b9a8      	cbnz	r0, 8009952 <__lo0bits+0x52>
 8009926:	0c1b      	lsrs	r3, r3, #16
 8009928:	2010      	movs	r0, #16
 800992a:	b2da      	uxtb	r2, r3
 800992c:	b90a      	cbnz	r2, 8009932 <__lo0bits+0x32>
 800992e:	3008      	adds	r0, #8
 8009930:	0a1b      	lsrs	r3, r3, #8
 8009932:	071a      	lsls	r2, r3, #28
 8009934:	bf04      	itt	eq
 8009936:	091b      	lsreq	r3, r3, #4
 8009938:	3004      	addeq	r0, #4
 800993a:	079a      	lsls	r2, r3, #30
 800993c:	bf04      	itt	eq
 800993e:	089b      	lsreq	r3, r3, #2
 8009940:	3002      	addeq	r0, #2
 8009942:	07da      	lsls	r2, r3, #31
 8009944:	d403      	bmi.n	800994e <__lo0bits+0x4e>
 8009946:	085b      	lsrs	r3, r3, #1
 8009948:	f100 0001 	add.w	r0, r0, #1
 800994c:	d005      	beq.n	800995a <__lo0bits+0x5a>
 800994e:	600b      	str	r3, [r1, #0]
 8009950:	4770      	bx	lr
 8009952:	4610      	mov	r0, r2
 8009954:	e7e9      	b.n	800992a <__lo0bits+0x2a>
 8009956:	2000      	movs	r0, #0
 8009958:	4770      	bx	lr
 800995a:	2020      	movs	r0, #32
 800995c:	4770      	bx	lr
	...

08009960 <__i2b>:
 8009960:	b510      	push	{r4, lr}
 8009962:	460c      	mov	r4, r1
 8009964:	2101      	movs	r1, #1
 8009966:	f7ff ff03 	bl	8009770 <_Balloc>
 800996a:	4602      	mov	r2, r0
 800996c:	b928      	cbnz	r0, 800997a <__i2b+0x1a>
 800996e:	4b05      	ldr	r3, [pc, #20]	; (8009984 <__i2b+0x24>)
 8009970:	4805      	ldr	r0, [pc, #20]	; (8009988 <__i2b+0x28>)
 8009972:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009976:	f000 fce1 	bl	800a33c <__assert_func>
 800997a:	2301      	movs	r3, #1
 800997c:	6144      	str	r4, [r0, #20]
 800997e:	6103      	str	r3, [r0, #16]
 8009980:	bd10      	pop	{r4, pc}
 8009982:	bf00      	nop
 8009984:	0800b0f0 	.word	0x0800b0f0
 8009988:	0800b101 	.word	0x0800b101

0800998c <__multiply>:
 800998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009990:	4691      	mov	r9, r2
 8009992:	690a      	ldr	r2, [r1, #16]
 8009994:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009998:	429a      	cmp	r2, r3
 800999a:	bfb8      	it	lt
 800999c:	460b      	movlt	r3, r1
 800999e:	460c      	mov	r4, r1
 80099a0:	bfbc      	itt	lt
 80099a2:	464c      	movlt	r4, r9
 80099a4:	4699      	movlt	r9, r3
 80099a6:	6927      	ldr	r7, [r4, #16]
 80099a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80099ac:	68a3      	ldr	r3, [r4, #8]
 80099ae:	6861      	ldr	r1, [r4, #4]
 80099b0:	eb07 060a 	add.w	r6, r7, sl
 80099b4:	42b3      	cmp	r3, r6
 80099b6:	b085      	sub	sp, #20
 80099b8:	bfb8      	it	lt
 80099ba:	3101      	addlt	r1, #1
 80099bc:	f7ff fed8 	bl	8009770 <_Balloc>
 80099c0:	b930      	cbnz	r0, 80099d0 <__multiply+0x44>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4b44      	ldr	r3, [pc, #272]	; (8009ad8 <__multiply+0x14c>)
 80099c6:	4845      	ldr	r0, [pc, #276]	; (8009adc <__multiply+0x150>)
 80099c8:	f240 115d 	movw	r1, #349	; 0x15d
 80099cc:	f000 fcb6 	bl	800a33c <__assert_func>
 80099d0:	f100 0514 	add.w	r5, r0, #20
 80099d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80099d8:	462b      	mov	r3, r5
 80099da:	2200      	movs	r2, #0
 80099dc:	4543      	cmp	r3, r8
 80099de:	d321      	bcc.n	8009a24 <__multiply+0x98>
 80099e0:	f104 0314 	add.w	r3, r4, #20
 80099e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80099e8:	f109 0314 	add.w	r3, r9, #20
 80099ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80099f0:	9202      	str	r2, [sp, #8]
 80099f2:	1b3a      	subs	r2, r7, r4
 80099f4:	3a15      	subs	r2, #21
 80099f6:	f022 0203 	bic.w	r2, r2, #3
 80099fa:	3204      	adds	r2, #4
 80099fc:	f104 0115 	add.w	r1, r4, #21
 8009a00:	428f      	cmp	r7, r1
 8009a02:	bf38      	it	cc
 8009a04:	2204      	movcc	r2, #4
 8009a06:	9201      	str	r2, [sp, #4]
 8009a08:	9a02      	ldr	r2, [sp, #8]
 8009a0a:	9303      	str	r3, [sp, #12]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d80c      	bhi.n	8009a2a <__multiply+0x9e>
 8009a10:	2e00      	cmp	r6, #0
 8009a12:	dd03      	ble.n	8009a1c <__multiply+0x90>
 8009a14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d05a      	beq.n	8009ad2 <__multiply+0x146>
 8009a1c:	6106      	str	r6, [r0, #16]
 8009a1e:	b005      	add	sp, #20
 8009a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a24:	f843 2b04 	str.w	r2, [r3], #4
 8009a28:	e7d8      	b.n	80099dc <__multiply+0x50>
 8009a2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a2e:	f1ba 0f00 	cmp.w	sl, #0
 8009a32:	d024      	beq.n	8009a7e <__multiply+0xf2>
 8009a34:	f104 0e14 	add.w	lr, r4, #20
 8009a38:	46a9      	mov	r9, r5
 8009a3a:	f04f 0c00 	mov.w	ip, #0
 8009a3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a42:	f8d9 1000 	ldr.w	r1, [r9]
 8009a46:	fa1f fb82 	uxth.w	fp, r2
 8009a4a:	b289      	uxth	r1, r1
 8009a4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009a54:	f8d9 2000 	ldr.w	r2, [r9]
 8009a58:	4461      	add	r1, ip
 8009a5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009a62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a66:	b289      	uxth	r1, r1
 8009a68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a6c:	4577      	cmp	r7, lr
 8009a6e:	f849 1b04 	str.w	r1, [r9], #4
 8009a72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a76:	d8e2      	bhi.n	8009a3e <__multiply+0xb2>
 8009a78:	9a01      	ldr	r2, [sp, #4]
 8009a7a:	f845 c002 	str.w	ip, [r5, r2]
 8009a7e:	9a03      	ldr	r2, [sp, #12]
 8009a80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a84:	3304      	adds	r3, #4
 8009a86:	f1b9 0f00 	cmp.w	r9, #0
 8009a8a:	d020      	beq.n	8009ace <__multiply+0x142>
 8009a8c:	6829      	ldr	r1, [r5, #0]
 8009a8e:	f104 0c14 	add.w	ip, r4, #20
 8009a92:	46ae      	mov	lr, r5
 8009a94:	f04f 0a00 	mov.w	sl, #0
 8009a98:	f8bc b000 	ldrh.w	fp, [ip]
 8009a9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009aa0:	fb09 220b 	mla	r2, r9, fp, r2
 8009aa4:	4492      	add	sl, r2
 8009aa6:	b289      	uxth	r1, r1
 8009aa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009aac:	f84e 1b04 	str.w	r1, [lr], #4
 8009ab0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ab4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ab8:	0c12      	lsrs	r2, r2, #16
 8009aba:	fb09 1102 	mla	r1, r9, r2, r1
 8009abe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ac2:	4567      	cmp	r7, ip
 8009ac4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ac8:	d8e6      	bhi.n	8009a98 <__multiply+0x10c>
 8009aca:	9a01      	ldr	r2, [sp, #4]
 8009acc:	50a9      	str	r1, [r5, r2]
 8009ace:	3504      	adds	r5, #4
 8009ad0:	e79a      	b.n	8009a08 <__multiply+0x7c>
 8009ad2:	3e01      	subs	r6, #1
 8009ad4:	e79c      	b.n	8009a10 <__multiply+0x84>
 8009ad6:	bf00      	nop
 8009ad8:	0800b0f0 	.word	0x0800b0f0
 8009adc:	0800b101 	.word	0x0800b101

08009ae0 <__pow5mult>:
 8009ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae4:	4615      	mov	r5, r2
 8009ae6:	f012 0203 	ands.w	r2, r2, #3
 8009aea:	4606      	mov	r6, r0
 8009aec:	460f      	mov	r7, r1
 8009aee:	d007      	beq.n	8009b00 <__pow5mult+0x20>
 8009af0:	4c25      	ldr	r4, [pc, #148]	; (8009b88 <__pow5mult+0xa8>)
 8009af2:	3a01      	subs	r2, #1
 8009af4:	2300      	movs	r3, #0
 8009af6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009afa:	f7ff fe9b 	bl	8009834 <__multadd>
 8009afe:	4607      	mov	r7, r0
 8009b00:	10ad      	asrs	r5, r5, #2
 8009b02:	d03d      	beq.n	8009b80 <__pow5mult+0xa0>
 8009b04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b06:	b97c      	cbnz	r4, 8009b28 <__pow5mult+0x48>
 8009b08:	2010      	movs	r0, #16
 8009b0a:	f7ff fe1b 	bl	8009744 <malloc>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	6270      	str	r0, [r6, #36]	; 0x24
 8009b12:	b928      	cbnz	r0, 8009b20 <__pow5mult+0x40>
 8009b14:	4b1d      	ldr	r3, [pc, #116]	; (8009b8c <__pow5mult+0xac>)
 8009b16:	481e      	ldr	r0, [pc, #120]	; (8009b90 <__pow5mult+0xb0>)
 8009b18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b1c:	f000 fc0e 	bl	800a33c <__assert_func>
 8009b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b24:	6004      	str	r4, [r0, #0]
 8009b26:	60c4      	str	r4, [r0, #12]
 8009b28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b30:	b94c      	cbnz	r4, 8009b46 <__pow5mult+0x66>
 8009b32:	f240 2171 	movw	r1, #625	; 0x271
 8009b36:	4630      	mov	r0, r6
 8009b38:	f7ff ff12 	bl	8009960 <__i2b>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b42:	4604      	mov	r4, r0
 8009b44:	6003      	str	r3, [r0, #0]
 8009b46:	f04f 0900 	mov.w	r9, #0
 8009b4a:	07eb      	lsls	r3, r5, #31
 8009b4c:	d50a      	bpl.n	8009b64 <__pow5mult+0x84>
 8009b4e:	4639      	mov	r1, r7
 8009b50:	4622      	mov	r2, r4
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7ff ff1a 	bl	800998c <__multiply>
 8009b58:	4639      	mov	r1, r7
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f7ff fe47 	bl	80097f0 <_Bfree>
 8009b62:	4647      	mov	r7, r8
 8009b64:	106d      	asrs	r5, r5, #1
 8009b66:	d00b      	beq.n	8009b80 <__pow5mult+0xa0>
 8009b68:	6820      	ldr	r0, [r4, #0]
 8009b6a:	b938      	cbnz	r0, 8009b7c <__pow5mult+0x9c>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4630      	mov	r0, r6
 8009b72:	f7ff ff0b 	bl	800998c <__multiply>
 8009b76:	6020      	str	r0, [r4, #0]
 8009b78:	f8c0 9000 	str.w	r9, [r0]
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	e7e4      	b.n	8009b4a <__pow5mult+0x6a>
 8009b80:	4638      	mov	r0, r7
 8009b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b86:	bf00      	nop
 8009b88:	0800b250 	.word	0x0800b250
 8009b8c:	0800b07e 	.word	0x0800b07e
 8009b90:	0800b101 	.word	0x0800b101

08009b94 <__lshift>:
 8009b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	460c      	mov	r4, r1
 8009b9a:	6849      	ldr	r1, [r1, #4]
 8009b9c:	6923      	ldr	r3, [r4, #16]
 8009b9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ba2:	68a3      	ldr	r3, [r4, #8]
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	4691      	mov	r9, r2
 8009ba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bac:	f108 0601 	add.w	r6, r8, #1
 8009bb0:	42b3      	cmp	r3, r6
 8009bb2:	db0b      	blt.n	8009bcc <__lshift+0x38>
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	f7ff fddb 	bl	8009770 <_Balloc>
 8009bba:	4605      	mov	r5, r0
 8009bbc:	b948      	cbnz	r0, 8009bd2 <__lshift+0x3e>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	4b2a      	ldr	r3, [pc, #168]	; (8009c6c <__lshift+0xd8>)
 8009bc2:	482b      	ldr	r0, [pc, #172]	; (8009c70 <__lshift+0xdc>)
 8009bc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009bc8:	f000 fbb8 	bl	800a33c <__assert_func>
 8009bcc:	3101      	adds	r1, #1
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	e7ee      	b.n	8009bb0 <__lshift+0x1c>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f100 0114 	add.w	r1, r0, #20
 8009bd8:	f100 0210 	add.w	r2, r0, #16
 8009bdc:	4618      	mov	r0, r3
 8009bde:	4553      	cmp	r3, sl
 8009be0:	db37      	blt.n	8009c52 <__lshift+0xbe>
 8009be2:	6920      	ldr	r0, [r4, #16]
 8009be4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009be8:	f104 0314 	add.w	r3, r4, #20
 8009bec:	f019 091f 	ands.w	r9, r9, #31
 8009bf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009bf8:	d02f      	beq.n	8009c5a <__lshift+0xc6>
 8009bfa:	f1c9 0e20 	rsb	lr, r9, #32
 8009bfe:	468a      	mov	sl, r1
 8009c00:	f04f 0c00 	mov.w	ip, #0
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	fa02 f209 	lsl.w	r2, r2, r9
 8009c0a:	ea42 020c 	orr.w	r2, r2, ip
 8009c0e:	f84a 2b04 	str.w	r2, [sl], #4
 8009c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c16:	4298      	cmp	r0, r3
 8009c18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009c1c:	d8f2      	bhi.n	8009c04 <__lshift+0x70>
 8009c1e:	1b03      	subs	r3, r0, r4
 8009c20:	3b15      	subs	r3, #21
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	3304      	adds	r3, #4
 8009c28:	f104 0215 	add.w	r2, r4, #21
 8009c2c:	4290      	cmp	r0, r2
 8009c2e:	bf38      	it	cc
 8009c30:	2304      	movcc	r3, #4
 8009c32:	f841 c003 	str.w	ip, [r1, r3]
 8009c36:	f1bc 0f00 	cmp.w	ip, #0
 8009c3a:	d001      	beq.n	8009c40 <__lshift+0xac>
 8009c3c:	f108 0602 	add.w	r6, r8, #2
 8009c40:	3e01      	subs	r6, #1
 8009c42:	4638      	mov	r0, r7
 8009c44:	612e      	str	r6, [r5, #16]
 8009c46:	4621      	mov	r1, r4
 8009c48:	f7ff fdd2 	bl	80097f0 <_Bfree>
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c52:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c56:	3301      	adds	r3, #1
 8009c58:	e7c1      	b.n	8009bde <__lshift+0x4a>
 8009c5a:	3904      	subs	r1, #4
 8009c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c60:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c64:	4298      	cmp	r0, r3
 8009c66:	d8f9      	bhi.n	8009c5c <__lshift+0xc8>
 8009c68:	e7ea      	b.n	8009c40 <__lshift+0xac>
 8009c6a:	bf00      	nop
 8009c6c:	0800b0f0 	.word	0x0800b0f0
 8009c70:	0800b101 	.word	0x0800b101

08009c74 <__mcmp>:
 8009c74:	b530      	push	{r4, r5, lr}
 8009c76:	6902      	ldr	r2, [r0, #16]
 8009c78:	690c      	ldr	r4, [r1, #16]
 8009c7a:	1b12      	subs	r2, r2, r4
 8009c7c:	d10e      	bne.n	8009c9c <__mcmp+0x28>
 8009c7e:	f100 0314 	add.w	r3, r0, #20
 8009c82:	3114      	adds	r1, #20
 8009c84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c94:	42a5      	cmp	r5, r4
 8009c96:	d003      	beq.n	8009ca0 <__mcmp+0x2c>
 8009c98:	d305      	bcc.n	8009ca6 <__mcmp+0x32>
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	bd30      	pop	{r4, r5, pc}
 8009ca0:	4283      	cmp	r3, r0
 8009ca2:	d3f3      	bcc.n	8009c8c <__mcmp+0x18>
 8009ca4:	e7fa      	b.n	8009c9c <__mcmp+0x28>
 8009ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8009caa:	e7f7      	b.n	8009c9c <__mcmp+0x28>

08009cac <__mdiff>:
 8009cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	4690      	mov	r8, r2
 8009cba:	f7ff ffdb 	bl	8009c74 <__mcmp>
 8009cbe:	1e05      	subs	r5, r0, #0
 8009cc0:	d110      	bne.n	8009ce4 <__mdiff+0x38>
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f7ff fd53 	bl	8009770 <_Balloc>
 8009cca:	b930      	cbnz	r0, 8009cda <__mdiff+0x2e>
 8009ccc:	4b3a      	ldr	r3, [pc, #232]	; (8009db8 <__mdiff+0x10c>)
 8009cce:	4602      	mov	r2, r0
 8009cd0:	f240 2132 	movw	r1, #562	; 0x232
 8009cd4:	4839      	ldr	r0, [pc, #228]	; (8009dbc <__mdiff+0x110>)
 8009cd6:	f000 fb31 	bl	800a33c <__assert_func>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	bfa4      	itt	ge
 8009ce6:	4643      	movge	r3, r8
 8009ce8:	46a0      	movge	r8, r4
 8009cea:	4630      	mov	r0, r6
 8009cec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009cf0:	bfa6      	itte	ge
 8009cf2:	461c      	movge	r4, r3
 8009cf4:	2500      	movge	r5, #0
 8009cf6:	2501      	movlt	r5, #1
 8009cf8:	f7ff fd3a 	bl	8009770 <_Balloc>
 8009cfc:	b920      	cbnz	r0, 8009d08 <__mdiff+0x5c>
 8009cfe:	4b2e      	ldr	r3, [pc, #184]	; (8009db8 <__mdiff+0x10c>)
 8009d00:	4602      	mov	r2, r0
 8009d02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d06:	e7e5      	b.n	8009cd4 <__mdiff+0x28>
 8009d08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d0c:	6926      	ldr	r6, [r4, #16]
 8009d0e:	60c5      	str	r5, [r0, #12]
 8009d10:	f104 0914 	add.w	r9, r4, #20
 8009d14:	f108 0514 	add.w	r5, r8, #20
 8009d18:	f100 0e14 	add.w	lr, r0, #20
 8009d1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009d20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d24:	f108 0210 	add.w	r2, r8, #16
 8009d28:	46f2      	mov	sl, lr
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d34:	fa1f f883 	uxth.w	r8, r3
 8009d38:	fa11 f18b 	uxtah	r1, r1, fp
 8009d3c:	0c1b      	lsrs	r3, r3, #16
 8009d3e:	eba1 0808 	sub.w	r8, r1, r8
 8009d42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d4a:	fa1f f888 	uxth.w	r8, r8
 8009d4e:	1419      	asrs	r1, r3, #16
 8009d50:	454e      	cmp	r6, r9
 8009d52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d56:	f84a 3b04 	str.w	r3, [sl], #4
 8009d5a:	d8e7      	bhi.n	8009d2c <__mdiff+0x80>
 8009d5c:	1b33      	subs	r3, r6, r4
 8009d5e:	3b15      	subs	r3, #21
 8009d60:	f023 0303 	bic.w	r3, r3, #3
 8009d64:	3304      	adds	r3, #4
 8009d66:	3415      	adds	r4, #21
 8009d68:	42a6      	cmp	r6, r4
 8009d6a:	bf38      	it	cc
 8009d6c:	2304      	movcc	r3, #4
 8009d6e:	441d      	add	r5, r3
 8009d70:	4473      	add	r3, lr
 8009d72:	469e      	mov	lr, r3
 8009d74:	462e      	mov	r6, r5
 8009d76:	4566      	cmp	r6, ip
 8009d78:	d30e      	bcc.n	8009d98 <__mdiff+0xec>
 8009d7a:	f10c 0203 	add.w	r2, ip, #3
 8009d7e:	1b52      	subs	r2, r2, r5
 8009d80:	f022 0203 	bic.w	r2, r2, #3
 8009d84:	3d03      	subs	r5, #3
 8009d86:	45ac      	cmp	ip, r5
 8009d88:	bf38      	it	cc
 8009d8a:	2200      	movcc	r2, #0
 8009d8c:	441a      	add	r2, r3
 8009d8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d92:	b17b      	cbz	r3, 8009db4 <__mdiff+0x108>
 8009d94:	6107      	str	r7, [r0, #16]
 8009d96:	e7a3      	b.n	8009ce0 <__mdiff+0x34>
 8009d98:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d9c:	fa11 f288 	uxtah	r2, r1, r8
 8009da0:	1414      	asrs	r4, r2, #16
 8009da2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009da6:	b292      	uxth	r2, r2
 8009da8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009dac:	f84e 2b04 	str.w	r2, [lr], #4
 8009db0:	1421      	asrs	r1, r4, #16
 8009db2:	e7e0      	b.n	8009d76 <__mdiff+0xca>
 8009db4:	3f01      	subs	r7, #1
 8009db6:	e7ea      	b.n	8009d8e <__mdiff+0xe2>
 8009db8:	0800b0f0 	.word	0x0800b0f0
 8009dbc:	0800b101 	.word	0x0800b101

08009dc0 <__d2b>:
 8009dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	ec57 6b10 	vmov	r6, r7, d0
 8009dcc:	4690      	mov	r8, r2
 8009dce:	f7ff fccf 	bl	8009770 <_Balloc>
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	b930      	cbnz	r0, 8009de4 <__d2b+0x24>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	4b25      	ldr	r3, [pc, #148]	; (8009e70 <__d2b+0xb0>)
 8009dda:	4826      	ldr	r0, [pc, #152]	; (8009e74 <__d2b+0xb4>)
 8009ddc:	f240 310a 	movw	r1, #778	; 0x30a
 8009de0:	f000 faac 	bl	800a33c <__assert_func>
 8009de4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dec:	bb35      	cbnz	r5, 8009e3c <__d2b+0x7c>
 8009dee:	2e00      	cmp	r6, #0
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	d028      	beq.n	8009e46 <__d2b+0x86>
 8009df4:	4668      	mov	r0, sp
 8009df6:	9600      	str	r6, [sp, #0]
 8009df8:	f7ff fd82 	bl	8009900 <__lo0bits>
 8009dfc:	9900      	ldr	r1, [sp, #0]
 8009dfe:	b300      	cbz	r0, 8009e42 <__d2b+0x82>
 8009e00:	9a01      	ldr	r2, [sp, #4]
 8009e02:	f1c0 0320 	rsb	r3, r0, #32
 8009e06:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0a:	430b      	orrs	r3, r1
 8009e0c:	40c2      	lsrs	r2, r0
 8009e0e:	6163      	str	r3, [r4, #20]
 8009e10:	9201      	str	r2, [sp, #4]
 8009e12:	9b01      	ldr	r3, [sp, #4]
 8009e14:	61a3      	str	r3, [r4, #24]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	bf14      	ite	ne
 8009e1a:	2202      	movne	r2, #2
 8009e1c:	2201      	moveq	r2, #1
 8009e1e:	6122      	str	r2, [r4, #16]
 8009e20:	b1d5      	cbz	r5, 8009e58 <__d2b+0x98>
 8009e22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e26:	4405      	add	r5, r0
 8009e28:	f8c9 5000 	str.w	r5, [r9]
 8009e2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e30:	f8c8 0000 	str.w	r0, [r8]
 8009e34:	4620      	mov	r0, r4
 8009e36:	b003      	add	sp, #12
 8009e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e40:	e7d5      	b.n	8009dee <__d2b+0x2e>
 8009e42:	6161      	str	r1, [r4, #20]
 8009e44:	e7e5      	b.n	8009e12 <__d2b+0x52>
 8009e46:	a801      	add	r0, sp, #4
 8009e48:	f7ff fd5a 	bl	8009900 <__lo0bits>
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	6163      	str	r3, [r4, #20]
 8009e50:	2201      	movs	r2, #1
 8009e52:	6122      	str	r2, [r4, #16]
 8009e54:	3020      	adds	r0, #32
 8009e56:	e7e3      	b.n	8009e20 <__d2b+0x60>
 8009e58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e60:	f8c9 0000 	str.w	r0, [r9]
 8009e64:	6918      	ldr	r0, [r3, #16]
 8009e66:	f7ff fd2b 	bl	80098c0 <__hi0bits>
 8009e6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e6e:	e7df      	b.n	8009e30 <__d2b+0x70>
 8009e70:	0800b0f0 	.word	0x0800b0f0
 8009e74:	0800b101 	.word	0x0800b101

08009e78 <_calloc_r>:
 8009e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e7a:	fba1 2402 	umull	r2, r4, r1, r2
 8009e7e:	b94c      	cbnz	r4, 8009e94 <_calloc_r+0x1c>
 8009e80:	4611      	mov	r1, r2
 8009e82:	9201      	str	r2, [sp, #4]
 8009e84:	f000 f87a 	bl	8009f7c <_malloc_r>
 8009e88:	9a01      	ldr	r2, [sp, #4]
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	b930      	cbnz	r0, 8009e9c <_calloc_r+0x24>
 8009e8e:	4628      	mov	r0, r5
 8009e90:	b003      	add	sp, #12
 8009e92:	bd30      	pop	{r4, r5, pc}
 8009e94:	220c      	movs	r2, #12
 8009e96:	6002      	str	r2, [r0, #0]
 8009e98:	2500      	movs	r5, #0
 8009e9a:	e7f8      	b.n	8009e8e <_calloc_r+0x16>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	f7fe f8b3 	bl	8008008 <memset>
 8009ea2:	e7f4      	b.n	8009e8e <_calloc_r+0x16>

08009ea4 <_free_r>:
 8009ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ea6:	2900      	cmp	r1, #0
 8009ea8:	d044      	beq.n	8009f34 <_free_r+0x90>
 8009eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eae:	9001      	str	r0, [sp, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8009eb6:	bfb8      	it	lt
 8009eb8:	18e4      	addlt	r4, r4, r3
 8009eba:	f000 fa9b 	bl	800a3f4 <__malloc_lock>
 8009ebe:	4a1e      	ldr	r2, [pc, #120]	; (8009f38 <_free_r+0x94>)
 8009ec0:	9801      	ldr	r0, [sp, #4]
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	b933      	cbnz	r3, 8009ed4 <_free_r+0x30>
 8009ec6:	6063      	str	r3, [r4, #4]
 8009ec8:	6014      	str	r4, [r2, #0]
 8009eca:	b003      	add	sp, #12
 8009ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ed0:	f000 ba96 	b.w	800a400 <__malloc_unlock>
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	d908      	bls.n	8009eea <_free_r+0x46>
 8009ed8:	6825      	ldr	r5, [r4, #0]
 8009eda:	1961      	adds	r1, r4, r5
 8009edc:	428b      	cmp	r3, r1
 8009ede:	bf01      	itttt	eq
 8009ee0:	6819      	ldreq	r1, [r3, #0]
 8009ee2:	685b      	ldreq	r3, [r3, #4]
 8009ee4:	1949      	addeq	r1, r1, r5
 8009ee6:	6021      	streq	r1, [r4, #0]
 8009ee8:	e7ed      	b.n	8009ec6 <_free_r+0x22>
 8009eea:	461a      	mov	r2, r3
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	b10b      	cbz	r3, 8009ef4 <_free_r+0x50>
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	d9fa      	bls.n	8009eea <_free_r+0x46>
 8009ef4:	6811      	ldr	r1, [r2, #0]
 8009ef6:	1855      	adds	r5, r2, r1
 8009ef8:	42a5      	cmp	r5, r4
 8009efa:	d10b      	bne.n	8009f14 <_free_r+0x70>
 8009efc:	6824      	ldr	r4, [r4, #0]
 8009efe:	4421      	add	r1, r4
 8009f00:	1854      	adds	r4, r2, r1
 8009f02:	42a3      	cmp	r3, r4
 8009f04:	6011      	str	r1, [r2, #0]
 8009f06:	d1e0      	bne.n	8009eca <_free_r+0x26>
 8009f08:	681c      	ldr	r4, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	6053      	str	r3, [r2, #4]
 8009f0e:	4421      	add	r1, r4
 8009f10:	6011      	str	r1, [r2, #0]
 8009f12:	e7da      	b.n	8009eca <_free_r+0x26>
 8009f14:	d902      	bls.n	8009f1c <_free_r+0x78>
 8009f16:	230c      	movs	r3, #12
 8009f18:	6003      	str	r3, [r0, #0]
 8009f1a:	e7d6      	b.n	8009eca <_free_r+0x26>
 8009f1c:	6825      	ldr	r5, [r4, #0]
 8009f1e:	1961      	adds	r1, r4, r5
 8009f20:	428b      	cmp	r3, r1
 8009f22:	bf04      	itt	eq
 8009f24:	6819      	ldreq	r1, [r3, #0]
 8009f26:	685b      	ldreq	r3, [r3, #4]
 8009f28:	6063      	str	r3, [r4, #4]
 8009f2a:	bf04      	itt	eq
 8009f2c:	1949      	addeq	r1, r1, r5
 8009f2e:	6021      	streq	r1, [r4, #0]
 8009f30:	6054      	str	r4, [r2, #4]
 8009f32:	e7ca      	b.n	8009eca <_free_r+0x26>
 8009f34:	b003      	add	sp, #12
 8009f36:	bd30      	pop	{r4, r5, pc}
 8009f38:	20000ac8 	.word	0x20000ac8

08009f3c <sbrk_aligned>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	4e0e      	ldr	r6, [pc, #56]	; (8009f78 <sbrk_aligned+0x3c>)
 8009f40:	460c      	mov	r4, r1
 8009f42:	6831      	ldr	r1, [r6, #0]
 8009f44:	4605      	mov	r5, r0
 8009f46:	b911      	cbnz	r1, 8009f4e <sbrk_aligned+0x12>
 8009f48:	f000 f9e8 	bl	800a31c <_sbrk_r>
 8009f4c:	6030      	str	r0, [r6, #0]
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4628      	mov	r0, r5
 8009f52:	f000 f9e3 	bl	800a31c <_sbrk_r>
 8009f56:	1c43      	adds	r3, r0, #1
 8009f58:	d00a      	beq.n	8009f70 <sbrk_aligned+0x34>
 8009f5a:	1cc4      	adds	r4, r0, #3
 8009f5c:	f024 0403 	bic.w	r4, r4, #3
 8009f60:	42a0      	cmp	r0, r4
 8009f62:	d007      	beq.n	8009f74 <sbrk_aligned+0x38>
 8009f64:	1a21      	subs	r1, r4, r0
 8009f66:	4628      	mov	r0, r5
 8009f68:	f000 f9d8 	bl	800a31c <_sbrk_r>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d101      	bne.n	8009f74 <sbrk_aligned+0x38>
 8009f70:	f04f 34ff 	mov.w	r4, #4294967295
 8009f74:	4620      	mov	r0, r4
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	20000acc 	.word	0x20000acc

08009f7c <_malloc_r>:
 8009f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f80:	1ccd      	adds	r5, r1, #3
 8009f82:	f025 0503 	bic.w	r5, r5, #3
 8009f86:	3508      	adds	r5, #8
 8009f88:	2d0c      	cmp	r5, #12
 8009f8a:	bf38      	it	cc
 8009f8c:	250c      	movcc	r5, #12
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	4607      	mov	r7, r0
 8009f92:	db01      	blt.n	8009f98 <_malloc_r+0x1c>
 8009f94:	42a9      	cmp	r1, r5
 8009f96:	d905      	bls.n	8009fa4 <_malloc_r+0x28>
 8009f98:	230c      	movs	r3, #12
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	2600      	movs	r6, #0
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa4:	4e2e      	ldr	r6, [pc, #184]	; (800a060 <_malloc_r+0xe4>)
 8009fa6:	f000 fa25 	bl	800a3f4 <__malloc_lock>
 8009faa:	6833      	ldr	r3, [r6, #0]
 8009fac:	461c      	mov	r4, r3
 8009fae:	bb34      	cbnz	r4, 8009ffe <_malloc_r+0x82>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	f7ff ffc2 	bl	8009f3c <sbrk_aligned>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	4604      	mov	r4, r0
 8009fbc:	d14d      	bne.n	800a05a <_malloc_r+0xde>
 8009fbe:	6834      	ldr	r4, [r6, #0]
 8009fc0:	4626      	mov	r6, r4
 8009fc2:	2e00      	cmp	r6, #0
 8009fc4:	d140      	bne.n	800a048 <_malloc_r+0xcc>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4638      	mov	r0, r7
 8009fcc:	eb04 0803 	add.w	r8, r4, r3
 8009fd0:	f000 f9a4 	bl	800a31c <_sbrk_r>
 8009fd4:	4580      	cmp	r8, r0
 8009fd6:	d13a      	bne.n	800a04e <_malloc_r+0xd2>
 8009fd8:	6821      	ldr	r1, [r4, #0]
 8009fda:	3503      	adds	r5, #3
 8009fdc:	1a6d      	subs	r5, r5, r1
 8009fde:	f025 0503 	bic.w	r5, r5, #3
 8009fe2:	3508      	adds	r5, #8
 8009fe4:	2d0c      	cmp	r5, #12
 8009fe6:	bf38      	it	cc
 8009fe8:	250c      	movcc	r5, #12
 8009fea:	4629      	mov	r1, r5
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff ffa5 	bl	8009f3c <sbrk_aligned>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d02b      	beq.n	800a04e <_malloc_r+0xd2>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	442b      	add	r3, r5
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	e00e      	b.n	800a01c <_malloc_r+0xa0>
 8009ffe:	6822      	ldr	r2, [r4, #0]
 800a000:	1b52      	subs	r2, r2, r5
 800a002:	d41e      	bmi.n	800a042 <_malloc_r+0xc6>
 800a004:	2a0b      	cmp	r2, #11
 800a006:	d916      	bls.n	800a036 <_malloc_r+0xba>
 800a008:	1961      	adds	r1, r4, r5
 800a00a:	42a3      	cmp	r3, r4
 800a00c:	6025      	str	r5, [r4, #0]
 800a00e:	bf18      	it	ne
 800a010:	6059      	strne	r1, [r3, #4]
 800a012:	6863      	ldr	r3, [r4, #4]
 800a014:	bf08      	it	eq
 800a016:	6031      	streq	r1, [r6, #0]
 800a018:	5162      	str	r2, [r4, r5]
 800a01a:	604b      	str	r3, [r1, #4]
 800a01c:	4638      	mov	r0, r7
 800a01e:	f104 060b 	add.w	r6, r4, #11
 800a022:	f000 f9ed 	bl	800a400 <__malloc_unlock>
 800a026:	f026 0607 	bic.w	r6, r6, #7
 800a02a:	1d23      	adds	r3, r4, #4
 800a02c:	1af2      	subs	r2, r6, r3
 800a02e:	d0b6      	beq.n	8009f9e <_malloc_r+0x22>
 800a030:	1b9b      	subs	r3, r3, r6
 800a032:	50a3      	str	r3, [r4, r2]
 800a034:	e7b3      	b.n	8009f9e <_malloc_r+0x22>
 800a036:	6862      	ldr	r2, [r4, #4]
 800a038:	42a3      	cmp	r3, r4
 800a03a:	bf0c      	ite	eq
 800a03c:	6032      	streq	r2, [r6, #0]
 800a03e:	605a      	strne	r2, [r3, #4]
 800a040:	e7ec      	b.n	800a01c <_malloc_r+0xa0>
 800a042:	4623      	mov	r3, r4
 800a044:	6864      	ldr	r4, [r4, #4]
 800a046:	e7b2      	b.n	8009fae <_malloc_r+0x32>
 800a048:	4634      	mov	r4, r6
 800a04a:	6876      	ldr	r6, [r6, #4]
 800a04c:	e7b9      	b.n	8009fc2 <_malloc_r+0x46>
 800a04e:	230c      	movs	r3, #12
 800a050:	603b      	str	r3, [r7, #0]
 800a052:	4638      	mov	r0, r7
 800a054:	f000 f9d4 	bl	800a400 <__malloc_unlock>
 800a058:	e7a1      	b.n	8009f9e <_malloc_r+0x22>
 800a05a:	6025      	str	r5, [r4, #0]
 800a05c:	e7de      	b.n	800a01c <_malloc_r+0xa0>
 800a05e:	bf00      	nop
 800a060:	20000ac8 	.word	0x20000ac8

0800a064 <__ssputs_r>:
 800a064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a068:	688e      	ldr	r6, [r1, #8]
 800a06a:	429e      	cmp	r6, r3
 800a06c:	4682      	mov	sl, r0
 800a06e:	460c      	mov	r4, r1
 800a070:	4690      	mov	r8, r2
 800a072:	461f      	mov	r7, r3
 800a074:	d838      	bhi.n	800a0e8 <__ssputs_r+0x84>
 800a076:	898a      	ldrh	r2, [r1, #12]
 800a078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a07c:	d032      	beq.n	800a0e4 <__ssputs_r+0x80>
 800a07e:	6825      	ldr	r5, [r4, #0]
 800a080:	6909      	ldr	r1, [r1, #16]
 800a082:	eba5 0901 	sub.w	r9, r5, r1
 800a086:	6965      	ldr	r5, [r4, #20]
 800a088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a08c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a090:	3301      	adds	r3, #1
 800a092:	444b      	add	r3, r9
 800a094:	106d      	asrs	r5, r5, #1
 800a096:	429d      	cmp	r5, r3
 800a098:	bf38      	it	cc
 800a09a:	461d      	movcc	r5, r3
 800a09c:	0553      	lsls	r3, r2, #21
 800a09e:	d531      	bpl.n	800a104 <__ssputs_r+0xa0>
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7ff ff6b 	bl	8009f7c <_malloc_r>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	b950      	cbnz	r0, 800a0c0 <__ssputs_r+0x5c>
 800a0aa:	230c      	movs	r3, #12
 800a0ac:	f8ca 3000 	str.w	r3, [sl]
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c0:	6921      	ldr	r1, [r4, #16]
 800a0c2:	464a      	mov	r2, r9
 800a0c4:	f7ff fb46 	bl	8009754 <memcpy>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	6126      	str	r6, [r4, #16]
 800a0d6:	6165      	str	r5, [r4, #20]
 800a0d8:	444e      	add	r6, r9
 800a0da:	eba5 0509 	sub.w	r5, r5, r9
 800a0de:	6026      	str	r6, [r4, #0]
 800a0e0:	60a5      	str	r5, [r4, #8]
 800a0e2:	463e      	mov	r6, r7
 800a0e4:	42be      	cmp	r6, r7
 800a0e6:	d900      	bls.n	800a0ea <__ssputs_r+0x86>
 800a0e8:	463e      	mov	r6, r7
 800a0ea:	6820      	ldr	r0, [r4, #0]
 800a0ec:	4632      	mov	r2, r6
 800a0ee:	4641      	mov	r1, r8
 800a0f0:	f000 f966 	bl	800a3c0 <memmove>
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	1b9b      	subs	r3, r3, r6
 800a0f8:	60a3      	str	r3, [r4, #8]
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	4433      	add	r3, r6
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	2000      	movs	r0, #0
 800a102:	e7db      	b.n	800a0bc <__ssputs_r+0x58>
 800a104:	462a      	mov	r2, r5
 800a106:	f000 f981 	bl	800a40c <_realloc_r>
 800a10a:	4606      	mov	r6, r0
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d1e1      	bne.n	800a0d4 <__ssputs_r+0x70>
 800a110:	6921      	ldr	r1, [r4, #16]
 800a112:	4650      	mov	r0, sl
 800a114:	f7ff fec6 	bl	8009ea4 <_free_r>
 800a118:	e7c7      	b.n	800a0aa <__ssputs_r+0x46>
	...

0800a11c <_svfiprintf_r>:
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	4698      	mov	r8, r3
 800a122:	898b      	ldrh	r3, [r1, #12]
 800a124:	061b      	lsls	r3, r3, #24
 800a126:	b09d      	sub	sp, #116	; 0x74
 800a128:	4607      	mov	r7, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	4614      	mov	r4, r2
 800a12e:	d50e      	bpl.n	800a14e <_svfiprintf_r+0x32>
 800a130:	690b      	ldr	r3, [r1, #16]
 800a132:	b963      	cbnz	r3, 800a14e <_svfiprintf_r+0x32>
 800a134:	2140      	movs	r1, #64	; 0x40
 800a136:	f7ff ff21 	bl	8009f7c <_malloc_r>
 800a13a:	6028      	str	r0, [r5, #0]
 800a13c:	6128      	str	r0, [r5, #16]
 800a13e:	b920      	cbnz	r0, 800a14a <_svfiprintf_r+0x2e>
 800a140:	230c      	movs	r3, #12
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	e0d1      	b.n	800a2ee <_svfiprintf_r+0x1d2>
 800a14a:	2340      	movs	r3, #64	; 0x40
 800a14c:	616b      	str	r3, [r5, #20]
 800a14e:	2300      	movs	r3, #0
 800a150:	9309      	str	r3, [sp, #36]	; 0x24
 800a152:	2320      	movs	r3, #32
 800a154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a158:	f8cd 800c 	str.w	r8, [sp, #12]
 800a15c:	2330      	movs	r3, #48	; 0x30
 800a15e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a308 <_svfiprintf_r+0x1ec>
 800a162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a166:	f04f 0901 	mov.w	r9, #1
 800a16a:	4623      	mov	r3, r4
 800a16c:	469a      	mov	sl, r3
 800a16e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a172:	b10a      	cbz	r2, 800a178 <_svfiprintf_r+0x5c>
 800a174:	2a25      	cmp	r2, #37	; 0x25
 800a176:	d1f9      	bne.n	800a16c <_svfiprintf_r+0x50>
 800a178:	ebba 0b04 	subs.w	fp, sl, r4
 800a17c:	d00b      	beq.n	800a196 <_svfiprintf_r+0x7a>
 800a17e:	465b      	mov	r3, fp
 800a180:	4622      	mov	r2, r4
 800a182:	4629      	mov	r1, r5
 800a184:	4638      	mov	r0, r7
 800a186:	f7ff ff6d 	bl	800a064 <__ssputs_r>
 800a18a:	3001      	adds	r0, #1
 800a18c:	f000 80aa 	beq.w	800a2e4 <_svfiprintf_r+0x1c8>
 800a190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a192:	445a      	add	r2, fp
 800a194:	9209      	str	r2, [sp, #36]	; 0x24
 800a196:	f89a 3000 	ldrb.w	r3, [sl]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80a2 	beq.w	800a2e4 <_svfiprintf_r+0x1c8>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1aa:	f10a 0a01 	add.w	sl, sl, #1
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	9307      	str	r3, [sp, #28]
 800a1b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1b8:	4654      	mov	r4, sl
 800a1ba:	2205      	movs	r2, #5
 800a1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c0:	4851      	ldr	r0, [pc, #324]	; (800a308 <_svfiprintf_r+0x1ec>)
 800a1c2:	f7f6 f82d 	bl	8000220 <memchr>
 800a1c6:	9a04      	ldr	r2, [sp, #16]
 800a1c8:	b9d8      	cbnz	r0, 800a202 <_svfiprintf_r+0xe6>
 800a1ca:	06d0      	lsls	r0, r2, #27
 800a1cc:	bf44      	itt	mi
 800a1ce:	2320      	movmi	r3, #32
 800a1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d4:	0711      	lsls	r1, r2, #28
 800a1d6:	bf44      	itt	mi
 800a1d8:	232b      	movmi	r3, #43	; 0x2b
 800a1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1de:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e4:	d015      	beq.n	800a212 <_svfiprintf_r+0xf6>
 800a1e6:	9a07      	ldr	r2, [sp, #28]
 800a1e8:	4654      	mov	r4, sl
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	f04f 0c0a 	mov.w	ip, #10
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1f6:	3b30      	subs	r3, #48	; 0x30
 800a1f8:	2b09      	cmp	r3, #9
 800a1fa:	d94e      	bls.n	800a29a <_svfiprintf_r+0x17e>
 800a1fc:	b1b0      	cbz	r0, 800a22c <_svfiprintf_r+0x110>
 800a1fe:	9207      	str	r2, [sp, #28]
 800a200:	e014      	b.n	800a22c <_svfiprintf_r+0x110>
 800a202:	eba0 0308 	sub.w	r3, r0, r8
 800a206:	fa09 f303 	lsl.w	r3, r9, r3
 800a20a:	4313      	orrs	r3, r2
 800a20c:	9304      	str	r3, [sp, #16]
 800a20e:	46a2      	mov	sl, r4
 800a210:	e7d2      	b.n	800a1b8 <_svfiprintf_r+0x9c>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	1d19      	adds	r1, r3, #4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	9103      	str	r1, [sp, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bfbb      	ittet	lt
 800a21e:	425b      	neglt	r3, r3
 800a220:	f042 0202 	orrlt.w	r2, r2, #2
 800a224:	9307      	strge	r3, [sp, #28]
 800a226:	9307      	strlt	r3, [sp, #28]
 800a228:	bfb8      	it	lt
 800a22a:	9204      	strlt	r2, [sp, #16]
 800a22c:	7823      	ldrb	r3, [r4, #0]
 800a22e:	2b2e      	cmp	r3, #46	; 0x2e
 800a230:	d10c      	bne.n	800a24c <_svfiprintf_r+0x130>
 800a232:	7863      	ldrb	r3, [r4, #1]
 800a234:	2b2a      	cmp	r3, #42	; 0x2a
 800a236:	d135      	bne.n	800a2a4 <_svfiprintf_r+0x188>
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	1d1a      	adds	r2, r3, #4
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	9203      	str	r2, [sp, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	bfb8      	it	lt
 800a244:	f04f 33ff 	movlt.w	r3, #4294967295
 800a248:	3402      	adds	r4, #2
 800a24a:	9305      	str	r3, [sp, #20]
 800a24c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a318 <_svfiprintf_r+0x1fc>
 800a250:	7821      	ldrb	r1, [r4, #0]
 800a252:	2203      	movs	r2, #3
 800a254:	4650      	mov	r0, sl
 800a256:	f7f5 ffe3 	bl	8000220 <memchr>
 800a25a:	b140      	cbz	r0, 800a26e <_svfiprintf_r+0x152>
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	eba0 000a 	sub.w	r0, r0, sl
 800a262:	fa03 f000 	lsl.w	r0, r3, r0
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	4303      	orrs	r3, r0
 800a26a:	3401      	adds	r4, #1
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a272:	4826      	ldr	r0, [pc, #152]	; (800a30c <_svfiprintf_r+0x1f0>)
 800a274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a278:	2206      	movs	r2, #6
 800a27a:	f7f5 ffd1 	bl	8000220 <memchr>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d038      	beq.n	800a2f4 <_svfiprintf_r+0x1d8>
 800a282:	4b23      	ldr	r3, [pc, #140]	; (800a310 <_svfiprintf_r+0x1f4>)
 800a284:	bb1b      	cbnz	r3, 800a2ce <_svfiprintf_r+0x1b2>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	3307      	adds	r3, #7
 800a28a:	f023 0307 	bic.w	r3, r3, #7
 800a28e:	3308      	adds	r3, #8
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a294:	4433      	add	r3, r6
 800a296:	9309      	str	r3, [sp, #36]	; 0x24
 800a298:	e767      	b.n	800a16a <_svfiprintf_r+0x4e>
 800a29a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a29e:	460c      	mov	r4, r1
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	e7a5      	b.n	800a1f0 <_svfiprintf_r+0xd4>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	3401      	adds	r4, #1
 800a2a8:	9305      	str	r3, [sp, #20]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	f04f 0c0a 	mov.w	ip, #10
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b6:	3a30      	subs	r2, #48	; 0x30
 800a2b8:	2a09      	cmp	r2, #9
 800a2ba:	d903      	bls.n	800a2c4 <_svfiprintf_r+0x1a8>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0c5      	beq.n	800a24c <_svfiprintf_r+0x130>
 800a2c0:	9105      	str	r1, [sp, #20]
 800a2c2:	e7c3      	b.n	800a24c <_svfiprintf_r+0x130>
 800a2c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e7f0      	b.n	800a2b0 <_svfiprintf_r+0x194>
 800a2ce:	ab03      	add	r3, sp, #12
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <_svfiprintf_r+0x1f8>)
 800a2d6:	a904      	add	r1, sp, #16
 800a2d8:	4638      	mov	r0, r7
 800a2da:	f7fd ff3d 	bl	8008158 <_printf_float>
 800a2de:	1c42      	adds	r2, r0, #1
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	d1d6      	bne.n	800a292 <_svfiprintf_r+0x176>
 800a2e4:	89ab      	ldrh	r3, [r5, #12]
 800a2e6:	065b      	lsls	r3, r3, #25
 800a2e8:	f53f af2c 	bmi.w	800a144 <_svfiprintf_r+0x28>
 800a2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ee:	b01d      	add	sp, #116	; 0x74
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f4:	ab03      	add	r3, sp, #12
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	462a      	mov	r2, r5
 800a2fa:	4b06      	ldr	r3, [pc, #24]	; (800a314 <_svfiprintf_r+0x1f8>)
 800a2fc:	a904      	add	r1, sp, #16
 800a2fe:	4638      	mov	r0, r7
 800a300:	f7fe f9ce 	bl	80086a0 <_printf_i>
 800a304:	e7eb      	b.n	800a2de <_svfiprintf_r+0x1c2>
 800a306:	bf00      	nop
 800a308:	0800b25c 	.word	0x0800b25c
 800a30c:	0800b266 	.word	0x0800b266
 800a310:	08008159 	.word	0x08008159
 800a314:	0800a065 	.word	0x0800a065
 800a318:	0800b262 	.word	0x0800b262

0800a31c <_sbrk_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d06      	ldr	r5, [pc, #24]	; (800a338 <_sbrk_r+0x1c>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	f7f7 fab2 	bl	8001890 <_sbrk>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d102      	bne.n	800a336 <_sbrk_r+0x1a>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	b103      	cbz	r3, 800a336 <_sbrk_r+0x1a>
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	20000ad0 	.word	0x20000ad0

0800a33c <__assert_func>:
 800a33c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a33e:	4614      	mov	r4, r2
 800a340:	461a      	mov	r2, r3
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <__assert_func+0x2c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4605      	mov	r5, r0
 800a348:	68d8      	ldr	r0, [r3, #12]
 800a34a:	b14c      	cbz	r4, 800a360 <__assert_func+0x24>
 800a34c:	4b07      	ldr	r3, [pc, #28]	; (800a36c <__assert_func+0x30>)
 800a34e:	9100      	str	r1, [sp, #0]
 800a350:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a354:	4906      	ldr	r1, [pc, #24]	; (800a370 <__assert_func+0x34>)
 800a356:	462b      	mov	r3, r5
 800a358:	f000 f80e 	bl	800a378 <fiprintf>
 800a35c:	f000 faac 	bl	800a8b8 <abort>
 800a360:	4b04      	ldr	r3, [pc, #16]	; (800a374 <__assert_func+0x38>)
 800a362:	461c      	mov	r4, r3
 800a364:	e7f3      	b.n	800a34e <__assert_func+0x12>
 800a366:	bf00      	nop
 800a368:	20000010 	.word	0x20000010
 800a36c:	0800b26d 	.word	0x0800b26d
 800a370:	0800b27a 	.word	0x0800b27a
 800a374:	0800b2a8 	.word	0x0800b2a8

0800a378 <fiprintf>:
 800a378:	b40e      	push	{r1, r2, r3}
 800a37a:	b503      	push	{r0, r1, lr}
 800a37c:	4601      	mov	r1, r0
 800a37e:	ab03      	add	r3, sp, #12
 800a380:	4805      	ldr	r0, [pc, #20]	; (800a398 <fiprintf+0x20>)
 800a382:	f853 2b04 	ldr.w	r2, [r3], #4
 800a386:	6800      	ldr	r0, [r0, #0]
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	f000 f897 	bl	800a4bc <_vfiprintf_r>
 800a38e:	b002      	add	sp, #8
 800a390:	f85d eb04 	ldr.w	lr, [sp], #4
 800a394:	b003      	add	sp, #12
 800a396:	4770      	bx	lr
 800a398:	20000010 	.word	0x20000010

0800a39c <__ascii_mbtowc>:
 800a39c:	b082      	sub	sp, #8
 800a39e:	b901      	cbnz	r1, 800a3a2 <__ascii_mbtowc+0x6>
 800a3a0:	a901      	add	r1, sp, #4
 800a3a2:	b142      	cbz	r2, 800a3b6 <__ascii_mbtowc+0x1a>
 800a3a4:	b14b      	cbz	r3, 800a3ba <__ascii_mbtowc+0x1e>
 800a3a6:	7813      	ldrb	r3, [r2, #0]
 800a3a8:	600b      	str	r3, [r1, #0]
 800a3aa:	7812      	ldrb	r2, [r2, #0]
 800a3ac:	1e10      	subs	r0, r2, #0
 800a3ae:	bf18      	it	ne
 800a3b0:	2001      	movne	r0, #1
 800a3b2:	b002      	add	sp, #8
 800a3b4:	4770      	bx	lr
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	e7fb      	b.n	800a3b2 <__ascii_mbtowc+0x16>
 800a3ba:	f06f 0001 	mvn.w	r0, #1
 800a3be:	e7f8      	b.n	800a3b2 <__ascii_mbtowc+0x16>

0800a3c0 <memmove>:
 800a3c0:	4288      	cmp	r0, r1
 800a3c2:	b510      	push	{r4, lr}
 800a3c4:	eb01 0402 	add.w	r4, r1, r2
 800a3c8:	d902      	bls.n	800a3d0 <memmove+0x10>
 800a3ca:	4284      	cmp	r4, r0
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	d807      	bhi.n	800a3e0 <memmove+0x20>
 800a3d0:	1e43      	subs	r3, r0, #1
 800a3d2:	42a1      	cmp	r1, r4
 800a3d4:	d008      	beq.n	800a3e8 <memmove+0x28>
 800a3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3de:	e7f8      	b.n	800a3d2 <memmove+0x12>
 800a3e0:	4402      	add	r2, r0
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	428a      	cmp	r2, r1
 800a3e6:	d100      	bne.n	800a3ea <memmove+0x2a>
 800a3e8:	bd10      	pop	{r4, pc}
 800a3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3f2:	e7f7      	b.n	800a3e4 <memmove+0x24>

0800a3f4 <__malloc_lock>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	; (800a3fc <__malloc_lock+0x8>)
 800a3f6:	f000 bc1f 	b.w	800ac38 <__retarget_lock_acquire_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	20000ad4 	.word	0x20000ad4

0800a400 <__malloc_unlock>:
 800a400:	4801      	ldr	r0, [pc, #4]	; (800a408 <__malloc_unlock+0x8>)
 800a402:	f000 bc1a 	b.w	800ac3a <__retarget_lock_release_recursive>
 800a406:	bf00      	nop
 800a408:	20000ad4 	.word	0x20000ad4

0800a40c <_realloc_r>:
 800a40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a410:	4680      	mov	r8, r0
 800a412:	4614      	mov	r4, r2
 800a414:	460e      	mov	r6, r1
 800a416:	b921      	cbnz	r1, 800a422 <_realloc_r+0x16>
 800a418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a41c:	4611      	mov	r1, r2
 800a41e:	f7ff bdad 	b.w	8009f7c <_malloc_r>
 800a422:	b92a      	cbnz	r2, 800a430 <_realloc_r+0x24>
 800a424:	f7ff fd3e 	bl	8009ea4 <_free_r>
 800a428:	4625      	mov	r5, r4
 800a42a:	4628      	mov	r0, r5
 800a42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a430:	f000 fc6a 	bl	800ad08 <_malloc_usable_size_r>
 800a434:	4284      	cmp	r4, r0
 800a436:	4607      	mov	r7, r0
 800a438:	d802      	bhi.n	800a440 <_realloc_r+0x34>
 800a43a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a43e:	d812      	bhi.n	800a466 <_realloc_r+0x5a>
 800a440:	4621      	mov	r1, r4
 800a442:	4640      	mov	r0, r8
 800a444:	f7ff fd9a 	bl	8009f7c <_malloc_r>
 800a448:	4605      	mov	r5, r0
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d0ed      	beq.n	800a42a <_realloc_r+0x1e>
 800a44e:	42bc      	cmp	r4, r7
 800a450:	4622      	mov	r2, r4
 800a452:	4631      	mov	r1, r6
 800a454:	bf28      	it	cs
 800a456:	463a      	movcs	r2, r7
 800a458:	f7ff f97c 	bl	8009754 <memcpy>
 800a45c:	4631      	mov	r1, r6
 800a45e:	4640      	mov	r0, r8
 800a460:	f7ff fd20 	bl	8009ea4 <_free_r>
 800a464:	e7e1      	b.n	800a42a <_realloc_r+0x1e>
 800a466:	4635      	mov	r5, r6
 800a468:	e7df      	b.n	800a42a <_realloc_r+0x1e>

0800a46a <__sfputc_r>:
 800a46a:	6893      	ldr	r3, [r2, #8]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	b410      	push	{r4}
 800a472:	6093      	str	r3, [r2, #8]
 800a474:	da08      	bge.n	800a488 <__sfputc_r+0x1e>
 800a476:	6994      	ldr	r4, [r2, #24]
 800a478:	42a3      	cmp	r3, r4
 800a47a:	db01      	blt.n	800a480 <__sfputc_r+0x16>
 800a47c:	290a      	cmp	r1, #10
 800a47e:	d103      	bne.n	800a488 <__sfputc_r+0x1e>
 800a480:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a484:	f000 b94a 	b.w	800a71c <__swbuf_r>
 800a488:	6813      	ldr	r3, [r2, #0]
 800a48a:	1c58      	adds	r0, r3, #1
 800a48c:	6010      	str	r0, [r2, #0]
 800a48e:	7019      	strb	r1, [r3, #0]
 800a490:	4608      	mov	r0, r1
 800a492:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <__sfputs_r>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	4606      	mov	r6, r0
 800a49c:	460f      	mov	r7, r1
 800a49e:	4614      	mov	r4, r2
 800a4a0:	18d5      	adds	r5, r2, r3
 800a4a2:	42ac      	cmp	r4, r5
 800a4a4:	d101      	bne.n	800a4aa <__sfputs_r+0x12>
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	e007      	b.n	800a4ba <__sfputs_r+0x22>
 800a4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ae:	463a      	mov	r2, r7
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7ff ffda 	bl	800a46a <__sfputc_r>
 800a4b6:	1c43      	adds	r3, r0, #1
 800a4b8:	d1f3      	bne.n	800a4a2 <__sfputs_r+0xa>
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a4bc <_vfiprintf_r>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	460d      	mov	r5, r1
 800a4c2:	b09d      	sub	sp, #116	; 0x74
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	4698      	mov	r8, r3
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	b118      	cbz	r0, 800a4d4 <_vfiprintf_r+0x18>
 800a4cc:	6983      	ldr	r3, [r0, #24]
 800a4ce:	b90b      	cbnz	r3, 800a4d4 <_vfiprintf_r+0x18>
 800a4d0:	f000 fb14 	bl	800aafc <__sinit>
 800a4d4:	4b89      	ldr	r3, [pc, #548]	; (800a6fc <_vfiprintf_r+0x240>)
 800a4d6:	429d      	cmp	r5, r3
 800a4d8:	d11b      	bne.n	800a512 <_vfiprintf_r+0x56>
 800a4da:	6875      	ldr	r5, [r6, #4]
 800a4dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4de:	07d9      	lsls	r1, r3, #31
 800a4e0:	d405      	bmi.n	800a4ee <_vfiprintf_r+0x32>
 800a4e2:	89ab      	ldrh	r3, [r5, #12]
 800a4e4:	059a      	lsls	r2, r3, #22
 800a4e6:	d402      	bmi.n	800a4ee <_vfiprintf_r+0x32>
 800a4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ea:	f000 fba5 	bl	800ac38 <__retarget_lock_acquire_recursive>
 800a4ee:	89ab      	ldrh	r3, [r5, #12]
 800a4f0:	071b      	lsls	r3, r3, #28
 800a4f2:	d501      	bpl.n	800a4f8 <_vfiprintf_r+0x3c>
 800a4f4:	692b      	ldr	r3, [r5, #16]
 800a4f6:	b9eb      	cbnz	r3, 800a534 <_vfiprintf_r+0x78>
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f000 f96e 	bl	800a7dc <__swsetup_r>
 800a500:	b1c0      	cbz	r0, 800a534 <_vfiprintf_r+0x78>
 800a502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a504:	07dc      	lsls	r4, r3, #31
 800a506:	d50e      	bpl.n	800a526 <_vfiprintf_r+0x6a>
 800a508:	f04f 30ff 	mov.w	r0, #4294967295
 800a50c:	b01d      	add	sp, #116	; 0x74
 800a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a512:	4b7b      	ldr	r3, [pc, #492]	; (800a700 <_vfiprintf_r+0x244>)
 800a514:	429d      	cmp	r5, r3
 800a516:	d101      	bne.n	800a51c <_vfiprintf_r+0x60>
 800a518:	68b5      	ldr	r5, [r6, #8]
 800a51a:	e7df      	b.n	800a4dc <_vfiprintf_r+0x20>
 800a51c:	4b79      	ldr	r3, [pc, #484]	; (800a704 <_vfiprintf_r+0x248>)
 800a51e:	429d      	cmp	r5, r3
 800a520:	bf08      	it	eq
 800a522:	68f5      	ldreq	r5, [r6, #12]
 800a524:	e7da      	b.n	800a4dc <_vfiprintf_r+0x20>
 800a526:	89ab      	ldrh	r3, [r5, #12]
 800a528:	0598      	lsls	r0, r3, #22
 800a52a:	d4ed      	bmi.n	800a508 <_vfiprintf_r+0x4c>
 800a52c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a52e:	f000 fb84 	bl	800ac3a <__retarget_lock_release_recursive>
 800a532:	e7e9      	b.n	800a508 <_vfiprintf_r+0x4c>
 800a534:	2300      	movs	r3, #0
 800a536:	9309      	str	r3, [sp, #36]	; 0x24
 800a538:	2320      	movs	r3, #32
 800a53a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a53e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a542:	2330      	movs	r3, #48	; 0x30
 800a544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a708 <_vfiprintf_r+0x24c>
 800a548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a54c:	f04f 0901 	mov.w	r9, #1
 800a550:	4623      	mov	r3, r4
 800a552:	469a      	mov	sl, r3
 800a554:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a558:	b10a      	cbz	r2, 800a55e <_vfiprintf_r+0xa2>
 800a55a:	2a25      	cmp	r2, #37	; 0x25
 800a55c:	d1f9      	bne.n	800a552 <_vfiprintf_r+0x96>
 800a55e:	ebba 0b04 	subs.w	fp, sl, r4
 800a562:	d00b      	beq.n	800a57c <_vfiprintf_r+0xc0>
 800a564:	465b      	mov	r3, fp
 800a566:	4622      	mov	r2, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7ff ff94 	bl	800a498 <__sfputs_r>
 800a570:	3001      	adds	r0, #1
 800a572:	f000 80aa 	beq.w	800a6ca <_vfiprintf_r+0x20e>
 800a576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a578:	445a      	add	r2, fp
 800a57a:	9209      	str	r2, [sp, #36]	; 0x24
 800a57c:	f89a 3000 	ldrb.w	r3, [sl]
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 80a2 	beq.w	800a6ca <_vfiprintf_r+0x20e>
 800a586:	2300      	movs	r3, #0
 800a588:	f04f 32ff 	mov.w	r2, #4294967295
 800a58c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a590:	f10a 0a01 	add.w	sl, sl, #1
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	9307      	str	r3, [sp, #28]
 800a598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a59c:	931a      	str	r3, [sp, #104]	; 0x68
 800a59e:	4654      	mov	r4, sl
 800a5a0:	2205      	movs	r2, #5
 800a5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a6:	4858      	ldr	r0, [pc, #352]	; (800a708 <_vfiprintf_r+0x24c>)
 800a5a8:	f7f5 fe3a 	bl	8000220 <memchr>
 800a5ac:	9a04      	ldr	r2, [sp, #16]
 800a5ae:	b9d8      	cbnz	r0, 800a5e8 <_vfiprintf_r+0x12c>
 800a5b0:	06d1      	lsls	r1, r2, #27
 800a5b2:	bf44      	itt	mi
 800a5b4:	2320      	movmi	r3, #32
 800a5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ba:	0713      	lsls	r3, r2, #28
 800a5bc:	bf44      	itt	mi
 800a5be:	232b      	movmi	r3, #43	; 0x2b
 800a5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ca:	d015      	beq.n	800a5f8 <_vfiprintf_r+0x13c>
 800a5cc:	9a07      	ldr	r2, [sp, #28]
 800a5ce:	4654      	mov	r4, sl
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	f04f 0c0a 	mov.w	ip, #10
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5dc:	3b30      	subs	r3, #48	; 0x30
 800a5de:	2b09      	cmp	r3, #9
 800a5e0:	d94e      	bls.n	800a680 <_vfiprintf_r+0x1c4>
 800a5e2:	b1b0      	cbz	r0, 800a612 <_vfiprintf_r+0x156>
 800a5e4:	9207      	str	r2, [sp, #28]
 800a5e6:	e014      	b.n	800a612 <_vfiprintf_r+0x156>
 800a5e8:	eba0 0308 	sub.w	r3, r0, r8
 800a5ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	9304      	str	r3, [sp, #16]
 800a5f4:	46a2      	mov	sl, r4
 800a5f6:	e7d2      	b.n	800a59e <_vfiprintf_r+0xe2>
 800a5f8:	9b03      	ldr	r3, [sp, #12]
 800a5fa:	1d19      	adds	r1, r3, #4
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	9103      	str	r1, [sp, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	bfbb      	ittet	lt
 800a604:	425b      	neglt	r3, r3
 800a606:	f042 0202 	orrlt.w	r2, r2, #2
 800a60a:	9307      	strge	r3, [sp, #28]
 800a60c:	9307      	strlt	r3, [sp, #28]
 800a60e:	bfb8      	it	lt
 800a610:	9204      	strlt	r2, [sp, #16]
 800a612:	7823      	ldrb	r3, [r4, #0]
 800a614:	2b2e      	cmp	r3, #46	; 0x2e
 800a616:	d10c      	bne.n	800a632 <_vfiprintf_r+0x176>
 800a618:	7863      	ldrb	r3, [r4, #1]
 800a61a:	2b2a      	cmp	r3, #42	; 0x2a
 800a61c:	d135      	bne.n	800a68a <_vfiprintf_r+0x1ce>
 800a61e:	9b03      	ldr	r3, [sp, #12]
 800a620:	1d1a      	adds	r2, r3, #4
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	9203      	str	r2, [sp, #12]
 800a626:	2b00      	cmp	r3, #0
 800a628:	bfb8      	it	lt
 800a62a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a62e:	3402      	adds	r4, #2
 800a630:	9305      	str	r3, [sp, #20]
 800a632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a718 <_vfiprintf_r+0x25c>
 800a636:	7821      	ldrb	r1, [r4, #0]
 800a638:	2203      	movs	r2, #3
 800a63a:	4650      	mov	r0, sl
 800a63c:	f7f5 fdf0 	bl	8000220 <memchr>
 800a640:	b140      	cbz	r0, 800a654 <_vfiprintf_r+0x198>
 800a642:	2340      	movs	r3, #64	; 0x40
 800a644:	eba0 000a 	sub.w	r0, r0, sl
 800a648:	fa03 f000 	lsl.w	r0, r3, r0
 800a64c:	9b04      	ldr	r3, [sp, #16]
 800a64e:	4303      	orrs	r3, r0
 800a650:	3401      	adds	r4, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a658:	482c      	ldr	r0, [pc, #176]	; (800a70c <_vfiprintf_r+0x250>)
 800a65a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a65e:	2206      	movs	r2, #6
 800a660:	f7f5 fdde 	bl	8000220 <memchr>
 800a664:	2800      	cmp	r0, #0
 800a666:	d03f      	beq.n	800a6e8 <_vfiprintf_r+0x22c>
 800a668:	4b29      	ldr	r3, [pc, #164]	; (800a710 <_vfiprintf_r+0x254>)
 800a66a:	bb1b      	cbnz	r3, 800a6b4 <_vfiprintf_r+0x1f8>
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	3307      	adds	r3, #7
 800a670:	f023 0307 	bic.w	r3, r3, #7
 800a674:	3308      	adds	r3, #8
 800a676:	9303      	str	r3, [sp, #12]
 800a678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a67a:	443b      	add	r3, r7
 800a67c:	9309      	str	r3, [sp, #36]	; 0x24
 800a67e:	e767      	b.n	800a550 <_vfiprintf_r+0x94>
 800a680:	fb0c 3202 	mla	r2, ip, r2, r3
 800a684:	460c      	mov	r4, r1
 800a686:	2001      	movs	r0, #1
 800a688:	e7a5      	b.n	800a5d6 <_vfiprintf_r+0x11a>
 800a68a:	2300      	movs	r3, #0
 800a68c:	3401      	adds	r4, #1
 800a68e:	9305      	str	r3, [sp, #20]
 800a690:	4619      	mov	r1, r3
 800a692:	f04f 0c0a 	mov.w	ip, #10
 800a696:	4620      	mov	r0, r4
 800a698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a69c:	3a30      	subs	r2, #48	; 0x30
 800a69e:	2a09      	cmp	r2, #9
 800a6a0:	d903      	bls.n	800a6aa <_vfiprintf_r+0x1ee>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0c5      	beq.n	800a632 <_vfiprintf_r+0x176>
 800a6a6:	9105      	str	r1, [sp, #20]
 800a6a8:	e7c3      	b.n	800a632 <_vfiprintf_r+0x176>
 800a6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e7f0      	b.n	800a696 <_vfiprintf_r+0x1da>
 800a6b4:	ab03      	add	r3, sp, #12
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	4b16      	ldr	r3, [pc, #88]	; (800a714 <_vfiprintf_r+0x258>)
 800a6bc:	a904      	add	r1, sp, #16
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7fd fd4a 	bl	8008158 <_printf_float>
 800a6c4:	4607      	mov	r7, r0
 800a6c6:	1c78      	adds	r0, r7, #1
 800a6c8:	d1d6      	bne.n	800a678 <_vfiprintf_r+0x1bc>
 800a6ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6cc:	07d9      	lsls	r1, r3, #31
 800a6ce:	d405      	bmi.n	800a6dc <_vfiprintf_r+0x220>
 800a6d0:	89ab      	ldrh	r3, [r5, #12]
 800a6d2:	059a      	lsls	r2, r3, #22
 800a6d4:	d402      	bmi.n	800a6dc <_vfiprintf_r+0x220>
 800a6d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6d8:	f000 faaf 	bl	800ac3a <__retarget_lock_release_recursive>
 800a6dc:	89ab      	ldrh	r3, [r5, #12]
 800a6de:	065b      	lsls	r3, r3, #25
 800a6e0:	f53f af12 	bmi.w	800a508 <_vfiprintf_r+0x4c>
 800a6e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6e6:	e711      	b.n	800a50c <_vfiprintf_r+0x50>
 800a6e8:	ab03      	add	r3, sp, #12
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <_vfiprintf_r+0x258>)
 800a6f0:	a904      	add	r1, sp, #16
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f7fd ffd4 	bl	80086a0 <_printf_i>
 800a6f8:	e7e4      	b.n	800a6c4 <_vfiprintf_r+0x208>
 800a6fa:	bf00      	nop
 800a6fc:	0800b2d4 	.word	0x0800b2d4
 800a700:	0800b2f4 	.word	0x0800b2f4
 800a704:	0800b2b4 	.word	0x0800b2b4
 800a708:	0800b25c 	.word	0x0800b25c
 800a70c:	0800b266 	.word	0x0800b266
 800a710:	08008159 	.word	0x08008159
 800a714:	0800a499 	.word	0x0800a499
 800a718:	0800b262 	.word	0x0800b262

0800a71c <__swbuf_r>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	460e      	mov	r6, r1
 800a720:	4614      	mov	r4, r2
 800a722:	4605      	mov	r5, r0
 800a724:	b118      	cbz	r0, 800a72e <__swbuf_r+0x12>
 800a726:	6983      	ldr	r3, [r0, #24]
 800a728:	b90b      	cbnz	r3, 800a72e <__swbuf_r+0x12>
 800a72a:	f000 f9e7 	bl	800aafc <__sinit>
 800a72e:	4b21      	ldr	r3, [pc, #132]	; (800a7b4 <__swbuf_r+0x98>)
 800a730:	429c      	cmp	r4, r3
 800a732:	d12b      	bne.n	800a78c <__swbuf_r+0x70>
 800a734:	686c      	ldr	r4, [r5, #4]
 800a736:	69a3      	ldr	r3, [r4, #24]
 800a738:	60a3      	str	r3, [r4, #8]
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	071a      	lsls	r2, r3, #28
 800a73e:	d52f      	bpl.n	800a7a0 <__swbuf_r+0x84>
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	b36b      	cbz	r3, 800a7a0 <__swbuf_r+0x84>
 800a744:	6923      	ldr	r3, [r4, #16]
 800a746:	6820      	ldr	r0, [r4, #0]
 800a748:	1ac0      	subs	r0, r0, r3
 800a74a:	6963      	ldr	r3, [r4, #20]
 800a74c:	b2f6      	uxtb	r6, r6
 800a74e:	4283      	cmp	r3, r0
 800a750:	4637      	mov	r7, r6
 800a752:	dc04      	bgt.n	800a75e <__swbuf_r+0x42>
 800a754:	4621      	mov	r1, r4
 800a756:	4628      	mov	r0, r5
 800a758:	f000 f93c 	bl	800a9d4 <_fflush_r>
 800a75c:	bb30      	cbnz	r0, 800a7ac <__swbuf_r+0x90>
 800a75e:	68a3      	ldr	r3, [r4, #8]
 800a760:	3b01      	subs	r3, #1
 800a762:	60a3      	str	r3, [r4, #8]
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	6022      	str	r2, [r4, #0]
 800a76a:	701e      	strb	r6, [r3, #0]
 800a76c:	6963      	ldr	r3, [r4, #20]
 800a76e:	3001      	adds	r0, #1
 800a770:	4283      	cmp	r3, r0
 800a772:	d004      	beq.n	800a77e <__swbuf_r+0x62>
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	07db      	lsls	r3, r3, #31
 800a778:	d506      	bpl.n	800a788 <__swbuf_r+0x6c>
 800a77a:	2e0a      	cmp	r6, #10
 800a77c:	d104      	bne.n	800a788 <__swbuf_r+0x6c>
 800a77e:	4621      	mov	r1, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f000 f927 	bl	800a9d4 <_fflush_r>
 800a786:	b988      	cbnz	r0, 800a7ac <__swbuf_r+0x90>
 800a788:	4638      	mov	r0, r7
 800a78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <__swbuf_r+0x9c>)
 800a78e:	429c      	cmp	r4, r3
 800a790:	d101      	bne.n	800a796 <__swbuf_r+0x7a>
 800a792:	68ac      	ldr	r4, [r5, #8]
 800a794:	e7cf      	b.n	800a736 <__swbuf_r+0x1a>
 800a796:	4b09      	ldr	r3, [pc, #36]	; (800a7bc <__swbuf_r+0xa0>)
 800a798:	429c      	cmp	r4, r3
 800a79a:	bf08      	it	eq
 800a79c:	68ec      	ldreq	r4, [r5, #12]
 800a79e:	e7ca      	b.n	800a736 <__swbuf_r+0x1a>
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f000 f81a 	bl	800a7dc <__swsetup_r>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d0cb      	beq.n	800a744 <__swbuf_r+0x28>
 800a7ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a7b0:	e7ea      	b.n	800a788 <__swbuf_r+0x6c>
 800a7b2:	bf00      	nop
 800a7b4:	0800b2d4 	.word	0x0800b2d4
 800a7b8:	0800b2f4 	.word	0x0800b2f4
 800a7bc:	0800b2b4 	.word	0x0800b2b4

0800a7c0 <__ascii_wctomb>:
 800a7c0:	b149      	cbz	r1, 800a7d6 <__ascii_wctomb+0x16>
 800a7c2:	2aff      	cmp	r2, #255	; 0xff
 800a7c4:	bf85      	ittet	hi
 800a7c6:	238a      	movhi	r3, #138	; 0x8a
 800a7c8:	6003      	strhi	r3, [r0, #0]
 800a7ca:	700a      	strbls	r2, [r1, #0]
 800a7cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7d0:	bf98      	it	ls
 800a7d2:	2001      	movls	r0, #1
 800a7d4:	4770      	bx	lr
 800a7d6:	4608      	mov	r0, r1
 800a7d8:	4770      	bx	lr
	...

0800a7dc <__swsetup_r>:
 800a7dc:	4b32      	ldr	r3, [pc, #200]	; (800a8a8 <__swsetup_r+0xcc>)
 800a7de:	b570      	push	{r4, r5, r6, lr}
 800a7e0:	681d      	ldr	r5, [r3, #0]
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	b125      	cbz	r5, 800a7f2 <__swsetup_r+0x16>
 800a7e8:	69ab      	ldr	r3, [r5, #24]
 800a7ea:	b913      	cbnz	r3, 800a7f2 <__swsetup_r+0x16>
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f000 f985 	bl	800aafc <__sinit>
 800a7f2:	4b2e      	ldr	r3, [pc, #184]	; (800a8ac <__swsetup_r+0xd0>)
 800a7f4:	429c      	cmp	r4, r3
 800a7f6:	d10f      	bne.n	800a818 <__swsetup_r+0x3c>
 800a7f8:	686c      	ldr	r4, [r5, #4]
 800a7fa:	89a3      	ldrh	r3, [r4, #12]
 800a7fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a800:	0719      	lsls	r1, r3, #28
 800a802:	d42c      	bmi.n	800a85e <__swsetup_r+0x82>
 800a804:	06dd      	lsls	r5, r3, #27
 800a806:	d411      	bmi.n	800a82c <__swsetup_r+0x50>
 800a808:	2309      	movs	r3, #9
 800a80a:	6033      	str	r3, [r6, #0]
 800a80c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a810:	81a3      	strh	r3, [r4, #12]
 800a812:	f04f 30ff 	mov.w	r0, #4294967295
 800a816:	e03e      	b.n	800a896 <__swsetup_r+0xba>
 800a818:	4b25      	ldr	r3, [pc, #148]	; (800a8b0 <__swsetup_r+0xd4>)
 800a81a:	429c      	cmp	r4, r3
 800a81c:	d101      	bne.n	800a822 <__swsetup_r+0x46>
 800a81e:	68ac      	ldr	r4, [r5, #8]
 800a820:	e7eb      	b.n	800a7fa <__swsetup_r+0x1e>
 800a822:	4b24      	ldr	r3, [pc, #144]	; (800a8b4 <__swsetup_r+0xd8>)
 800a824:	429c      	cmp	r4, r3
 800a826:	bf08      	it	eq
 800a828:	68ec      	ldreq	r4, [r5, #12]
 800a82a:	e7e6      	b.n	800a7fa <__swsetup_r+0x1e>
 800a82c:	0758      	lsls	r0, r3, #29
 800a82e:	d512      	bpl.n	800a856 <__swsetup_r+0x7a>
 800a830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a832:	b141      	cbz	r1, 800a846 <__swsetup_r+0x6a>
 800a834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a838:	4299      	cmp	r1, r3
 800a83a:	d002      	beq.n	800a842 <__swsetup_r+0x66>
 800a83c:	4630      	mov	r0, r6
 800a83e:	f7ff fb31 	bl	8009ea4 <_free_r>
 800a842:	2300      	movs	r3, #0
 800a844:	6363      	str	r3, [r4, #52]	; 0x34
 800a846:	89a3      	ldrh	r3, [r4, #12]
 800a848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	2300      	movs	r3, #0
 800a850:	6063      	str	r3, [r4, #4]
 800a852:	6923      	ldr	r3, [r4, #16]
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	f043 0308 	orr.w	r3, r3, #8
 800a85c:	81a3      	strh	r3, [r4, #12]
 800a85e:	6923      	ldr	r3, [r4, #16]
 800a860:	b94b      	cbnz	r3, 800a876 <__swsetup_r+0x9a>
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a86c:	d003      	beq.n	800a876 <__swsetup_r+0x9a>
 800a86e:	4621      	mov	r1, r4
 800a870:	4630      	mov	r0, r6
 800a872:	f000 fa09 	bl	800ac88 <__smakebuf_r>
 800a876:	89a0      	ldrh	r0, [r4, #12]
 800a878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a87c:	f010 0301 	ands.w	r3, r0, #1
 800a880:	d00a      	beq.n	800a898 <__swsetup_r+0xbc>
 800a882:	2300      	movs	r3, #0
 800a884:	60a3      	str	r3, [r4, #8]
 800a886:	6963      	ldr	r3, [r4, #20]
 800a888:	425b      	negs	r3, r3
 800a88a:	61a3      	str	r3, [r4, #24]
 800a88c:	6923      	ldr	r3, [r4, #16]
 800a88e:	b943      	cbnz	r3, 800a8a2 <__swsetup_r+0xc6>
 800a890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a894:	d1ba      	bne.n	800a80c <__swsetup_r+0x30>
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	0781      	lsls	r1, r0, #30
 800a89a:	bf58      	it	pl
 800a89c:	6963      	ldrpl	r3, [r4, #20]
 800a89e:	60a3      	str	r3, [r4, #8]
 800a8a0:	e7f4      	b.n	800a88c <__swsetup_r+0xb0>
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	e7f7      	b.n	800a896 <__swsetup_r+0xba>
 800a8a6:	bf00      	nop
 800a8a8:	20000010 	.word	0x20000010
 800a8ac:	0800b2d4 	.word	0x0800b2d4
 800a8b0:	0800b2f4 	.word	0x0800b2f4
 800a8b4:	0800b2b4 	.word	0x0800b2b4

0800a8b8 <abort>:
 800a8b8:	b508      	push	{r3, lr}
 800a8ba:	2006      	movs	r0, #6
 800a8bc:	f000 fa54 	bl	800ad68 <raise>
 800a8c0:	2001      	movs	r0, #1
 800a8c2:	f7f6 ff6d 	bl	80017a0 <_exit>
	...

0800a8c8 <__sflush_r>:
 800a8c8:	898a      	ldrh	r2, [r1, #12]
 800a8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	0710      	lsls	r0, r2, #28
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	d458      	bmi.n	800a988 <__sflush_r+0xc0>
 800a8d6:	684b      	ldr	r3, [r1, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	dc05      	bgt.n	800a8e8 <__sflush_r+0x20>
 800a8dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dc02      	bgt.n	800a8e8 <__sflush_r+0x20>
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ea:	2e00      	cmp	r6, #0
 800a8ec:	d0f9      	beq.n	800a8e2 <__sflush_r+0x1a>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8f4:	682f      	ldr	r7, [r5, #0]
 800a8f6:	602b      	str	r3, [r5, #0]
 800a8f8:	d032      	beq.n	800a960 <__sflush_r+0x98>
 800a8fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	075a      	lsls	r2, r3, #29
 800a900:	d505      	bpl.n	800a90e <__sflush_r+0x46>
 800a902:	6863      	ldr	r3, [r4, #4]
 800a904:	1ac0      	subs	r0, r0, r3
 800a906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a908:	b10b      	cbz	r3, 800a90e <__sflush_r+0x46>
 800a90a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a90c:	1ac0      	subs	r0, r0, r3
 800a90e:	2300      	movs	r3, #0
 800a910:	4602      	mov	r2, r0
 800a912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a914:	6a21      	ldr	r1, [r4, #32]
 800a916:	4628      	mov	r0, r5
 800a918:	47b0      	blx	r6
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	d106      	bne.n	800a92e <__sflush_r+0x66>
 800a920:	6829      	ldr	r1, [r5, #0]
 800a922:	291d      	cmp	r1, #29
 800a924:	d82c      	bhi.n	800a980 <__sflush_r+0xb8>
 800a926:	4a2a      	ldr	r2, [pc, #168]	; (800a9d0 <__sflush_r+0x108>)
 800a928:	40ca      	lsrs	r2, r1
 800a92a:	07d6      	lsls	r6, r2, #31
 800a92c:	d528      	bpl.n	800a980 <__sflush_r+0xb8>
 800a92e:	2200      	movs	r2, #0
 800a930:	6062      	str	r2, [r4, #4]
 800a932:	04d9      	lsls	r1, r3, #19
 800a934:	6922      	ldr	r2, [r4, #16]
 800a936:	6022      	str	r2, [r4, #0]
 800a938:	d504      	bpl.n	800a944 <__sflush_r+0x7c>
 800a93a:	1c42      	adds	r2, r0, #1
 800a93c:	d101      	bne.n	800a942 <__sflush_r+0x7a>
 800a93e:	682b      	ldr	r3, [r5, #0]
 800a940:	b903      	cbnz	r3, 800a944 <__sflush_r+0x7c>
 800a942:	6560      	str	r0, [r4, #84]	; 0x54
 800a944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a946:	602f      	str	r7, [r5, #0]
 800a948:	2900      	cmp	r1, #0
 800a94a:	d0ca      	beq.n	800a8e2 <__sflush_r+0x1a>
 800a94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a950:	4299      	cmp	r1, r3
 800a952:	d002      	beq.n	800a95a <__sflush_r+0x92>
 800a954:	4628      	mov	r0, r5
 800a956:	f7ff faa5 	bl	8009ea4 <_free_r>
 800a95a:	2000      	movs	r0, #0
 800a95c:	6360      	str	r0, [r4, #52]	; 0x34
 800a95e:	e7c1      	b.n	800a8e4 <__sflush_r+0x1c>
 800a960:	6a21      	ldr	r1, [r4, #32]
 800a962:	2301      	movs	r3, #1
 800a964:	4628      	mov	r0, r5
 800a966:	47b0      	blx	r6
 800a968:	1c41      	adds	r1, r0, #1
 800a96a:	d1c7      	bne.n	800a8fc <__sflush_r+0x34>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0c4      	beq.n	800a8fc <__sflush_r+0x34>
 800a972:	2b1d      	cmp	r3, #29
 800a974:	d001      	beq.n	800a97a <__sflush_r+0xb2>
 800a976:	2b16      	cmp	r3, #22
 800a978:	d101      	bne.n	800a97e <__sflush_r+0xb6>
 800a97a:	602f      	str	r7, [r5, #0]
 800a97c:	e7b1      	b.n	800a8e2 <__sflush_r+0x1a>
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a984:	81a3      	strh	r3, [r4, #12]
 800a986:	e7ad      	b.n	800a8e4 <__sflush_r+0x1c>
 800a988:	690f      	ldr	r7, [r1, #16]
 800a98a:	2f00      	cmp	r7, #0
 800a98c:	d0a9      	beq.n	800a8e2 <__sflush_r+0x1a>
 800a98e:	0793      	lsls	r3, r2, #30
 800a990:	680e      	ldr	r6, [r1, #0]
 800a992:	bf08      	it	eq
 800a994:	694b      	ldreq	r3, [r1, #20]
 800a996:	600f      	str	r7, [r1, #0]
 800a998:	bf18      	it	ne
 800a99a:	2300      	movne	r3, #0
 800a99c:	eba6 0807 	sub.w	r8, r6, r7
 800a9a0:	608b      	str	r3, [r1, #8]
 800a9a2:	f1b8 0f00 	cmp.w	r8, #0
 800a9a6:	dd9c      	ble.n	800a8e2 <__sflush_r+0x1a>
 800a9a8:	6a21      	ldr	r1, [r4, #32]
 800a9aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9ac:	4643      	mov	r3, r8
 800a9ae:	463a      	mov	r2, r7
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b0      	blx	r6
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	dc06      	bgt.n	800a9c6 <__sflush_r+0xfe>
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	e78e      	b.n	800a8e4 <__sflush_r+0x1c>
 800a9c6:	4407      	add	r7, r0
 800a9c8:	eba8 0800 	sub.w	r8, r8, r0
 800a9cc:	e7e9      	b.n	800a9a2 <__sflush_r+0xda>
 800a9ce:	bf00      	nop
 800a9d0:	20400001 	.word	0x20400001

0800a9d4 <_fflush_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	690b      	ldr	r3, [r1, #16]
 800a9d8:	4605      	mov	r5, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	b913      	cbnz	r3, 800a9e4 <_fflush_r+0x10>
 800a9de:	2500      	movs	r5, #0
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	b118      	cbz	r0, 800a9ee <_fflush_r+0x1a>
 800a9e6:	6983      	ldr	r3, [r0, #24]
 800a9e8:	b90b      	cbnz	r3, 800a9ee <_fflush_r+0x1a>
 800a9ea:	f000 f887 	bl	800aafc <__sinit>
 800a9ee:	4b14      	ldr	r3, [pc, #80]	; (800aa40 <_fflush_r+0x6c>)
 800a9f0:	429c      	cmp	r4, r3
 800a9f2:	d11b      	bne.n	800aa2c <_fflush_r+0x58>
 800a9f4:	686c      	ldr	r4, [r5, #4]
 800a9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0ef      	beq.n	800a9de <_fflush_r+0xa>
 800a9fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa00:	07d0      	lsls	r0, r2, #31
 800aa02:	d404      	bmi.n	800aa0e <_fflush_r+0x3a>
 800aa04:	0599      	lsls	r1, r3, #22
 800aa06:	d402      	bmi.n	800aa0e <_fflush_r+0x3a>
 800aa08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa0a:	f000 f915 	bl	800ac38 <__retarget_lock_acquire_recursive>
 800aa0e:	4628      	mov	r0, r5
 800aa10:	4621      	mov	r1, r4
 800aa12:	f7ff ff59 	bl	800a8c8 <__sflush_r>
 800aa16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa18:	07da      	lsls	r2, r3, #31
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	d4e0      	bmi.n	800a9e0 <_fflush_r+0xc>
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	059b      	lsls	r3, r3, #22
 800aa22:	d4dd      	bmi.n	800a9e0 <_fflush_r+0xc>
 800aa24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa26:	f000 f908 	bl	800ac3a <__retarget_lock_release_recursive>
 800aa2a:	e7d9      	b.n	800a9e0 <_fflush_r+0xc>
 800aa2c:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <_fflush_r+0x70>)
 800aa2e:	429c      	cmp	r4, r3
 800aa30:	d101      	bne.n	800aa36 <_fflush_r+0x62>
 800aa32:	68ac      	ldr	r4, [r5, #8]
 800aa34:	e7df      	b.n	800a9f6 <_fflush_r+0x22>
 800aa36:	4b04      	ldr	r3, [pc, #16]	; (800aa48 <_fflush_r+0x74>)
 800aa38:	429c      	cmp	r4, r3
 800aa3a:	bf08      	it	eq
 800aa3c:	68ec      	ldreq	r4, [r5, #12]
 800aa3e:	e7da      	b.n	800a9f6 <_fflush_r+0x22>
 800aa40:	0800b2d4 	.word	0x0800b2d4
 800aa44:	0800b2f4 	.word	0x0800b2f4
 800aa48:	0800b2b4 	.word	0x0800b2b4

0800aa4c <std>:
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	b510      	push	{r4, lr}
 800aa50:	4604      	mov	r4, r0
 800aa52:	e9c0 3300 	strd	r3, r3, [r0]
 800aa56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa5a:	6083      	str	r3, [r0, #8]
 800aa5c:	8181      	strh	r1, [r0, #12]
 800aa5e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa60:	81c2      	strh	r2, [r0, #14]
 800aa62:	6183      	str	r3, [r0, #24]
 800aa64:	4619      	mov	r1, r3
 800aa66:	2208      	movs	r2, #8
 800aa68:	305c      	adds	r0, #92	; 0x5c
 800aa6a:	f7fd facd 	bl	8008008 <memset>
 800aa6e:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <std+0x38>)
 800aa70:	6263      	str	r3, [r4, #36]	; 0x24
 800aa72:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <std+0x3c>)
 800aa74:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa76:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <std+0x40>)
 800aa78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa7a:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <std+0x44>)
 800aa7c:	6224      	str	r4, [r4, #32]
 800aa7e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa80:	bd10      	pop	{r4, pc}
 800aa82:	bf00      	nop
 800aa84:	0800ada1 	.word	0x0800ada1
 800aa88:	0800adc3 	.word	0x0800adc3
 800aa8c:	0800adfb 	.word	0x0800adfb
 800aa90:	0800ae1f 	.word	0x0800ae1f

0800aa94 <_cleanup_r>:
 800aa94:	4901      	ldr	r1, [pc, #4]	; (800aa9c <_cleanup_r+0x8>)
 800aa96:	f000 b8af 	b.w	800abf8 <_fwalk_reent>
 800aa9a:	bf00      	nop
 800aa9c:	0800a9d5 	.word	0x0800a9d5

0800aaa0 <__sfmoreglue>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	2268      	movs	r2, #104	; 0x68
 800aaa4:	1e4d      	subs	r5, r1, #1
 800aaa6:	4355      	muls	r5, r2
 800aaa8:	460e      	mov	r6, r1
 800aaaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aaae:	f7ff fa65 	bl	8009f7c <_malloc_r>
 800aab2:	4604      	mov	r4, r0
 800aab4:	b140      	cbz	r0, 800aac8 <__sfmoreglue+0x28>
 800aab6:	2100      	movs	r1, #0
 800aab8:	e9c0 1600 	strd	r1, r6, [r0]
 800aabc:	300c      	adds	r0, #12
 800aabe:	60a0      	str	r0, [r4, #8]
 800aac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aac4:	f7fd faa0 	bl	8008008 <memset>
 800aac8:	4620      	mov	r0, r4
 800aaca:	bd70      	pop	{r4, r5, r6, pc}

0800aacc <__sfp_lock_acquire>:
 800aacc:	4801      	ldr	r0, [pc, #4]	; (800aad4 <__sfp_lock_acquire+0x8>)
 800aace:	f000 b8b3 	b.w	800ac38 <__retarget_lock_acquire_recursive>
 800aad2:	bf00      	nop
 800aad4:	20000ad5 	.word	0x20000ad5

0800aad8 <__sfp_lock_release>:
 800aad8:	4801      	ldr	r0, [pc, #4]	; (800aae0 <__sfp_lock_release+0x8>)
 800aada:	f000 b8ae 	b.w	800ac3a <__retarget_lock_release_recursive>
 800aade:	bf00      	nop
 800aae0:	20000ad5 	.word	0x20000ad5

0800aae4 <__sinit_lock_acquire>:
 800aae4:	4801      	ldr	r0, [pc, #4]	; (800aaec <__sinit_lock_acquire+0x8>)
 800aae6:	f000 b8a7 	b.w	800ac38 <__retarget_lock_acquire_recursive>
 800aaea:	bf00      	nop
 800aaec:	20000ad6 	.word	0x20000ad6

0800aaf0 <__sinit_lock_release>:
 800aaf0:	4801      	ldr	r0, [pc, #4]	; (800aaf8 <__sinit_lock_release+0x8>)
 800aaf2:	f000 b8a2 	b.w	800ac3a <__retarget_lock_release_recursive>
 800aaf6:	bf00      	nop
 800aaf8:	20000ad6 	.word	0x20000ad6

0800aafc <__sinit>:
 800aafc:	b510      	push	{r4, lr}
 800aafe:	4604      	mov	r4, r0
 800ab00:	f7ff fff0 	bl	800aae4 <__sinit_lock_acquire>
 800ab04:	69a3      	ldr	r3, [r4, #24]
 800ab06:	b11b      	cbz	r3, 800ab10 <__sinit+0x14>
 800ab08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab0c:	f7ff bff0 	b.w	800aaf0 <__sinit_lock_release>
 800ab10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab14:	6523      	str	r3, [r4, #80]	; 0x50
 800ab16:	4b13      	ldr	r3, [pc, #76]	; (800ab64 <__sinit+0x68>)
 800ab18:	4a13      	ldr	r2, [pc, #76]	; (800ab68 <__sinit+0x6c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab1e:	42a3      	cmp	r3, r4
 800ab20:	bf04      	itt	eq
 800ab22:	2301      	moveq	r3, #1
 800ab24:	61a3      	streq	r3, [r4, #24]
 800ab26:	4620      	mov	r0, r4
 800ab28:	f000 f820 	bl	800ab6c <__sfp>
 800ab2c:	6060      	str	r0, [r4, #4]
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 f81c 	bl	800ab6c <__sfp>
 800ab34:	60a0      	str	r0, [r4, #8]
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 f818 	bl	800ab6c <__sfp>
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	60e0      	str	r0, [r4, #12]
 800ab40:	2104      	movs	r1, #4
 800ab42:	6860      	ldr	r0, [r4, #4]
 800ab44:	f7ff ff82 	bl	800aa4c <std>
 800ab48:	68a0      	ldr	r0, [r4, #8]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	2109      	movs	r1, #9
 800ab4e:	f7ff ff7d 	bl	800aa4c <std>
 800ab52:	68e0      	ldr	r0, [r4, #12]
 800ab54:	2202      	movs	r2, #2
 800ab56:	2112      	movs	r1, #18
 800ab58:	f7ff ff78 	bl	800aa4c <std>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	61a3      	str	r3, [r4, #24]
 800ab60:	e7d2      	b.n	800ab08 <__sinit+0xc>
 800ab62:	bf00      	nop
 800ab64:	0800af38 	.word	0x0800af38
 800ab68:	0800aa95 	.word	0x0800aa95

0800ab6c <__sfp>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	4607      	mov	r7, r0
 800ab70:	f7ff ffac 	bl	800aacc <__sfp_lock_acquire>
 800ab74:	4b1e      	ldr	r3, [pc, #120]	; (800abf0 <__sfp+0x84>)
 800ab76:	681e      	ldr	r6, [r3, #0]
 800ab78:	69b3      	ldr	r3, [r6, #24]
 800ab7a:	b913      	cbnz	r3, 800ab82 <__sfp+0x16>
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff ffbd 	bl	800aafc <__sinit>
 800ab82:	3648      	adds	r6, #72	; 0x48
 800ab84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	d503      	bpl.n	800ab94 <__sfp+0x28>
 800ab8c:	6833      	ldr	r3, [r6, #0]
 800ab8e:	b30b      	cbz	r3, 800abd4 <__sfp+0x68>
 800ab90:	6836      	ldr	r6, [r6, #0]
 800ab92:	e7f7      	b.n	800ab84 <__sfp+0x18>
 800ab94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab98:	b9d5      	cbnz	r5, 800abd0 <__sfp+0x64>
 800ab9a:	4b16      	ldr	r3, [pc, #88]	; (800abf4 <__sfp+0x88>)
 800ab9c:	60e3      	str	r3, [r4, #12]
 800ab9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aba2:	6665      	str	r5, [r4, #100]	; 0x64
 800aba4:	f000 f847 	bl	800ac36 <__retarget_lock_init_recursive>
 800aba8:	f7ff ff96 	bl	800aad8 <__sfp_lock_release>
 800abac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abb4:	6025      	str	r5, [r4, #0]
 800abb6:	61a5      	str	r5, [r4, #24]
 800abb8:	2208      	movs	r2, #8
 800abba:	4629      	mov	r1, r5
 800abbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abc0:	f7fd fa22 	bl	8008008 <memset>
 800abc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abcc:	4620      	mov	r0, r4
 800abce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd0:	3468      	adds	r4, #104	; 0x68
 800abd2:	e7d9      	b.n	800ab88 <__sfp+0x1c>
 800abd4:	2104      	movs	r1, #4
 800abd6:	4638      	mov	r0, r7
 800abd8:	f7ff ff62 	bl	800aaa0 <__sfmoreglue>
 800abdc:	4604      	mov	r4, r0
 800abde:	6030      	str	r0, [r6, #0]
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d1d5      	bne.n	800ab90 <__sfp+0x24>
 800abe4:	f7ff ff78 	bl	800aad8 <__sfp_lock_release>
 800abe8:	230c      	movs	r3, #12
 800abea:	603b      	str	r3, [r7, #0]
 800abec:	e7ee      	b.n	800abcc <__sfp+0x60>
 800abee:	bf00      	nop
 800abf0:	0800af38 	.word	0x0800af38
 800abf4:	ffff0001 	.word	0xffff0001

0800abf8 <_fwalk_reent>:
 800abf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abfc:	4606      	mov	r6, r0
 800abfe:	4688      	mov	r8, r1
 800ac00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac04:	2700      	movs	r7, #0
 800ac06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac0a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac0e:	d505      	bpl.n	800ac1c <_fwalk_reent+0x24>
 800ac10:	6824      	ldr	r4, [r4, #0]
 800ac12:	2c00      	cmp	r4, #0
 800ac14:	d1f7      	bne.n	800ac06 <_fwalk_reent+0xe>
 800ac16:	4638      	mov	r0, r7
 800ac18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac1c:	89ab      	ldrh	r3, [r5, #12]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d907      	bls.n	800ac32 <_fwalk_reent+0x3a>
 800ac22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac26:	3301      	adds	r3, #1
 800ac28:	d003      	beq.n	800ac32 <_fwalk_reent+0x3a>
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	47c0      	blx	r8
 800ac30:	4307      	orrs	r7, r0
 800ac32:	3568      	adds	r5, #104	; 0x68
 800ac34:	e7e9      	b.n	800ac0a <_fwalk_reent+0x12>

0800ac36 <__retarget_lock_init_recursive>:
 800ac36:	4770      	bx	lr

0800ac38 <__retarget_lock_acquire_recursive>:
 800ac38:	4770      	bx	lr

0800ac3a <__retarget_lock_release_recursive>:
 800ac3a:	4770      	bx	lr

0800ac3c <__swhatbuf_r>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	460e      	mov	r6, r1
 800ac40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac44:	2900      	cmp	r1, #0
 800ac46:	b096      	sub	sp, #88	; 0x58
 800ac48:	4614      	mov	r4, r2
 800ac4a:	461d      	mov	r5, r3
 800ac4c:	da08      	bge.n	800ac60 <__swhatbuf_r+0x24>
 800ac4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	602a      	str	r2, [r5, #0]
 800ac56:	061a      	lsls	r2, r3, #24
 800ac58:	d410      	bmi.n	800ac7c <__swhatbuf_r+0x40>
 800ac5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac5e:	e00e      	b.n	800ac7e <__swhatbuf_r+0x42>
 800ac60:	466a      	mov	r2, sp
 800ac62:	f000 f903 	bl	800ae6c <_fstat_r>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	dbf1      	blt.n	800ac4e <__swhatbuf_r+0x12>
 800ac6a:	9a01      	ldr	r2, [sp, #4]
 800ac6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac74:	425a      	negs	r2, r3
 800ac76:	415a      	adcs	r2, r3
 800ac78:	602a      	str	r2, [r5, #0]
 800ac7a:	e7ee      	b.n	800ac5a <__swhatbuf_r+0x1e>
 800ac7c:	2340      	movs	r3, #64	; 0x40
 800ac7e:	2000      	movs	r0, #0
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	b016      	add	sp, #88	; 0x58
 800ac84:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac88 <__smakebuf_r>:
 800ac88:	898b      	ldrh	r3, [r1, #12]
 800ac8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac8c:	079d      	lsls	r5, r3, #30
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460c      	mov	r4, r1
 800ac92:	d507      	bpl.n	800aca4 <__smakebuf_r+0x1c>
 800ac94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	6123      	str	r3, [r4, #16]
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	6163      	str	r3, [r4, #20]
 800aca0:	b002      	add	sp, #8
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	ab01      	add	r3, sp, #4
 800aca6:	466a      	mov	r2, sp
 800aca8:	f7ff ffc8 	bl	800ac3c <__swhatbuf_r>
 800acac:	9900      	ldr	r1, [sp, #0]
 800acae:	4605      	mov	r5, r0
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff f963 	bl	8009f7c <_malloc_r>
 800acb6:	b948      	cbnz	r0, 800accc <__smakebuf_r+0x44>
 800acb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acbc:	059a      	lsls	r2, r3, #22
 800acbe:	d4ef      	bmi.n	800aca0 <__smakebuf_r+0x18>
 800acc0:	f023 0303 	bic.w	r3, r3, #3
 800acc4:	f043 0302 	orr.w	r3, r3, #2
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	e7e3      	b.n	800ac94 <__smakebuf_r+0xc>
 800accc:	4b0d      	ldr	r3, [pc, #52]	; (800ad04 <__smakebuf_r+0x7c>)
 800acce:	62b3      	str	r3, [r6, #40]	; 0x28
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	6020      	str	r0, [r4, #0]
 800acd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	9b00      	ldr	r3, [sp, #0]
 800acdc:	6163      	str	r3, [r4, #20]
 800acde:	9b01      	ldr	r3, [sp, #4]
 800ace0:	6120      	str	r0, [r4, #16]
 800ace2:	b15b      	cbz	r3, 800acfc <__smakebuf_r+0x74>
 800ace4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace8:	4630      	mov	r0, r6
 800acea:	f000 f8d1 	bl	800ae90 <_isatty_r>
 800acee:	b128      	cbz	r0, 800acfc <__smakebuf_r+0x74>
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	f023 0303 	bic.w	r3, r3, #3
 800acf6:	f043 0301 	orr.w	r3, r3, #1
 800acfa:	81a3      	strh	r3, [r4, #12]
 800acfc:	89a0      	ldrh	r0, [r4, #12]
 800acfe:	4305      	orrs	r5, r0
 800ad00:	81a5      	strh	r5, [r4, #12]
 800ad02:	e7cd      	b.n	800aca0 <__smakebuf_r+0x18>
 800ad04:	0800aa95 	.word	0x0800aa95

0800ad08 <_malloc_usable_size_r>:
 800ad08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad0c:	1f18      	subs	r0, r3, #4
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	bfbc      	itt	lt
 800ad12:	580b      	ldrlt	r3, [r1, r0]
 800ad14:	18c0      	addlt	r0, r0, r3
 800ad16:	4770      	bx	lr

0800ad18 <_raise_r>:
 800ad18:	291f      	cmp	r1, #31
 800ad1a:	b538      	push	{r3, r4, r5, lr}
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	460d      	mov	r5, r1
 800ad20:	d904      	bls.n	800ad2c <_raise_r+0x14>
 800ad22:	2316      	movs	r3, #22
 800ad24:	6003      	str	r3, [r0, #0]
 800ad26:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad2e:	b112      	cbz	r2, 800ad36 <_raise_r+0x1e>
 800ad30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad34:	b94b      	cbnz	r3, 800ad4a <_raise_r+0x32>
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 f830 	bl	800ad9c <_getpid_r>
 800ad3c:	462a      	mov	r2, r5
 800ad3e:	4601      	mov	r1, r0
 800ad40:	4620      	mov	r0, r4
 800ad42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad46:	f000 b817 	b.w	800ad78 <_kill_r>
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d00a      	beq.n	800ad64 <_raise_r+0x4c>
 800ad4e:	1c59      	adds	r1, r3, #1
 800ad50:	d103      	bne.n	800ad5a <_raise_r+0x42>
 800ad52:	2316      	movs	r3, #22
 800ad54:	6003      	str	r3, [r0, #0]
 800ad56:	2001      	movs	r0, #1
 800ad58:	e7e7      	b.n	800ad2a <_raise_r+0x12>
 800ad5a:	2400      	movs	r4, #0
 800ad5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad60:	4628      	mov	r0, r5
 800ad62:	4798      	blx	r3
 800ad64:	2000      	movs	r0, #0
 800ad66:	e7e0      	b.n	800ad2a <_raise_r+0x12>

0800ad68 <raise>:
 800ad68:	4b02      	ldr	r3, [pc, #8]	; (800ad74 <raise+0xc>)
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	6818      	ldr	r0, [r3, #0]
 800ad6e:	f7ff bfd3 	b.w	800ad18 <_raise_r>
 800ad72:	bf00      	nop
 800ad74:	20000010 	.word	0x20000010

0800ad78 <_kill_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4d07      	ldr	r5, [pc, #28]	; (800ad98 <_kill_r+0x20>)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4604      	mov	r4, r0
 800ad80:	4608      	mov	r0, r1
 800ad82:	4611      	mov	r1, r2
 800ad84:	602b      	str	r3, [r5, #0]
 800ad86:	f7f6 fcfb 	bl	8001780 <_kill>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	d102      	bne.n	800ad94 <_kill_r+0x1c>
 800ad8e:	682b      	ldr	r3, [r5, #0]
 800ad90:	b103      	cbz	r3, 800ad94 <_kill_r+0x1c>
 800ad92:	6023      	str	r3, [r4, #0]
 800ad94:	bd38      	pop	{r3, r4, r5, pc}
 800ad96:	bf00      	nop
 800ad98:	20000ad0 	.word	0x20000ad0

0800ad9c <_getpid_r>:
 800ad9c:	f7f6 bce8 	b.w	8001770 <_getpid>

0800ada0 <__sread>:
 800ada0:	b510      	push	{r4, lr}
 800ada2:	460c      	mov	r4, r1
 800ada4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada8:	f000 f894 	bl	800aed4 <_read_r>
 800adac:	2800      	cmp	r0, #0
 800adae:	bfab      	itete	ge
 800adb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adb2:	89a3      	ldrhlt	r3, [r4, #12]
 800adb4:	181b      	addge	r3, r3, r0
 800adb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adba:	bfac      	ite	ge
 800adbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800adbe:	81a3      	strhlt	r3, [r4, #12]
 800adc0:	bd10      	pop	{r4, pc}

0800adc2 <__swrite>:
 800adc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc6:	461f      	mov	r7, r3
 800adc8:	898b      	ldrh	r3, [r1, #12]
 800adca:	05db      	lsls	r3, r3, #23
 800adcc:	4605      	mov	r5, r0
 800adce:	460c      	mov	r4, r1
 800add0:	4616      	mov	r6, r2
 800add2:	d505      	bpl.n	800ade0 <__swrite+0x1e>
 800add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add8:	2302      	movs	r3, #2
 800adda:	2200      	movs	r2, #0
 800addc:	f000 f868 	bl	800aeb0 <_lseek_r>
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ade6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	4632      	mov	r2, r6
 800adee:	463b      	mov	r3, r7
 800adf0:	4628      	mov	r0, r5
 800adf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adf6:	f000 b817 	b.w	800ae28 <_write_r>

0800adfa <__sseek>:
 800adfa:	b510      	push	{r4, lr}
 800adfc:	460c      	mov	r4, r1
 800adfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae02:	f000 f855 	bl	800aeb0 <_lseek_r>
 800ae06:	1c43      	adds	r3, r0, #1
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	bf15      	itete	ne
 800ae0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae16:	81a3      	strheq	r3, [r4, #12]
 800ae18:	bf18      	it	ne
 800ae1a:	81a3      	strhne	r3, [r4, #12]
 800ae1c:	bd10      	pop	{r4, pc}

0800ae1e <__sclose>:
 800ae1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae22:	f000 b813 	b.w	800ae4c <_close_r>
	...

0800ae28 <_write_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d07      	ldr	r5, [pc, #28]	; (800ae48 <_write_r+0x20>)
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	4608      	mov	r0, r1
 800ae30:	4611      	mov	r1, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	602a      	str	r2, [r5, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f7f6 fcd9 	bl	80017ee <_write>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_write_r+0x1e>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_write_r+0x1e>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	20000ad0 	.word	0x20000ad0

0800ae4c <_close_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d06      	ldr	r5, [pc, #24]	; (800ae68 <_close_r+0x1c>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	602b      	str	r3, [r5, #0]
 800ae58:	f7f6 fce5 	bl	8001826 <_close>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_close_r+0x1a>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_close_r+0x1a>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	20000ad0 	.word	0x20000ad0

0800ae6c <_fstat_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4d07      	ldr	r5, [pc, #28]	; (800ae8c <_fstat_r+0x20>)
 800ae70:	2300      	movs	r3, #0
 800ae72:	4604      	mov	r4, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	4611      	mov	r1, r2
 800ae78:	602b      	str	r3, [r5, #0]
 800ae7a:	f7f6 fce0 	bl	800183e <_fstat>
 800ae7e:	1c43      	adds	r3, r0, #1
 800ae80:	d102      	bne.n	800ae88 <_fstat_r+0x1c>
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	b103      	cbz	r3, 800ae88 <_fstat_r+0x1c>
 800ae86:	6023      	str	r3, [r4, #0]
 800ae88:	bd38      	pop	{r3, r4, r5, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000ad0 	.word	0x20000ad0

0800ae90 <_isatty_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d06      	ldr	r5, [pc, #24]	; (800aeac <_isatty_r+0x1c>)
 800ae94:	2300      	movs	r3, #0
 800ae96:	4604      	mov	r4, r0
 800ae98:	4608      	mov	r0, r1
 800ae9a:	602b      	str	r3, [r5, #0]
 800ae9c:	f7f6 fcdf 	bl	800185e <_isatty>
 800aea0:	1c43      	adds	r3, r0, #1
 800aea2:	d102      	bne.n	800aeaa <_isatty_r+0x1a>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	b103      	cbz	r3, 800aeaa <_isatty_r+0x1a>
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}
 800aeac:	20000ad0 	.word	0x20000ad0

0800aeb0 <_lseek_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4d07      	ldr	r5, [pc, #28]	; (800aed0 <_lseek_r+0x20>)
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	4608      	mov	r0, r1
 800aeb8:	4611      	mov	r1, r2
 800aeba:	2200      	movs	r2, #0
 800aebc:	602a      	str	r2, [r5, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	f7f6 fcd8 	bl	8001874 <_lseek>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_lseek_r+0x1e>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_lseek_r+0x1e>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	20000ad0 	.word	0x20000ad0

0800aed4 <_read_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d07      	ldr	r5, [pc, #28]	; (800aef4 <_read_r+0x20>)
 800aed8:	4604      	mov	r4, r0
 800aeda:	4608      	mov	r0, r1
 800aedc:	4611      	mov	r1, r2
 800aede:	2200      	movs	r2, #0
 800aee0:	602a      	str	r2, [r5, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7f6 fc66 	bl	80017b4 <_read>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_read_r+0x1e>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_read_r+0x1e>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20000ad0 	.word	0x20000ad0

0800aef8 <_init>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	bf00      	nop
 800aefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefe:	bc08      	pop	{r3}
 800af00:	469e      	mov	lr, r3
 800af02:	4770      	bx	lr

0800af04 <_fini>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	bf00      	nop
 800af08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0a:	bc08      	pop	{r3}
 800af0c:	469e      	mov	lr, r3
 800af0e:	4770      	bx	lr
