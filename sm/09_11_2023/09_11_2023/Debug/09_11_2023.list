
09_11_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080ac  080080ac  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  080080ac  080080ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b4  080080b4  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080b8  080080b8  000180b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080080bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  08008134  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  080081d4  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007f4  200001b8  08008274  000201b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200009ac  08008274  000209ac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d28b  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003938  00000000  00000000  0003d473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001690  00000000  00000000  00040db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014f8  00000000  00000000  00042440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000290c6  00000000  00000000  00043938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d3df  00000000  00000000  0006c9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f992e  00000000  00000000  00089ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018370b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000642c  00000000  00000000  0018375c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f14 	.word	0x08007f14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	08007f14 	.word	0x08007f14

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <bh1750Init>:
#include "BH1750.h"

void bh1750Init(I2C_HandleTypeDef* hi2c)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	temp = 0b1; //power on
 80005cc:	2301      	movs	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hi2c, (0x23 << 1), &temp, 1, 100);
 80005d0:	f107 020f 	add.w	r2, r7, #15
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	2146      	movs	r1, #70	; 0x46
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f001 ff93 	bl	8002508 <HAL_I2C_Master_Transmit>
	temp = 0b10000; //con h-res
 80005e2:	2310      	movs	r3, #16
 80005e4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hi2c, (0x23 << 1), &temp, 1, 100);
 80005e6:	f107 020f 	add.w	r2, r7, #15
 80005ea:	2364      	movs	r3, #100	; 0x64
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	2146      	movs	r1, #70	; 0x46
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f001 ff88 	bl	8002508 <HAL_I2C_Master_Transmit>
	HAL_Delay(240);
 80005f8:	20f0      	movs	r0, #240	; 0xf0
 80005fa:	f001 f841 	bl	8001680 <HAL_Delay>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <bh1750GetMes>:

float bh1750GetMes(I2C_HandleTypeDef* hi2c)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
	const float k = 1 / 1.2;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <bh1750GetMes+0x5c>)
 8000612:	617b      	str	r3, [r7, #20]
	uint8_t temp[2];
	HAL_I2C_Master_Receive(hi2c, (0x23 << 1) , temp, 2, 100);
 8000614:	f107 0208 	add.w	r2, r7, #8
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2302      	movs	r3, #2
 800061e:	2146      	movs	r1, #70	; 0x46
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f002 f865 	bl	80026f0 <HAL_I2C_Master_Receive>
	uint16_t mes = ((uint16_t)(temp[0]) << 8) + (uint16_t)(temp[1]);
 8000626:	7a3b      	ldrb	r3, [r7, #8]
 8000628:	b29b      	uxth	r3, r3
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	b29a      	uxth	r2, r3
 800062e:	7a7b      	ldrb	r3, [r7, #9]
 8000630:	b29b      	uxth	r3, r3
 8000632:	4413      	add	r3, r2
 8000634:	827b      	strh	r3, [r7, #18]
	float lux = (float)(mes) * 1000 * k;
 8000636:	8a7b      	ldrh	r3, [r7, #18]
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000640:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000668 <bh1750GetMes+0x60>
 8000644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000648:	ed97 7a05 	vldr	s14, [r7, #20]
 800064c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000650:	edc7 7a03 	vstr	s15, [r7, #12]

	return lux;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	ee07 3a90 	vmov	s15, r3
}
 800065a:	eeb0 0a67 	vmov.f32	s0, s15
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	3f555555 	.word	0x3f555555
 8000668:	447a0000 	.word	0x447a0000

0800066c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ETH_Init+0x84>)
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <MX_ETH_Init+0x88>)
 8000674:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ETH_Init+0x8c>)
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000684:	22e1      	movs	r2, #225	; 0xe1
 8000686:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ETH_Init+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000690:	2200      	movs	r2, #0
 8000692:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000696:	2200      	movs	r2, #0
 8000698:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_ETH_Init+0x84>)
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <MX_ETH_Init+0x8c>)
 800069e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_ETH_Init+0x84>)
 80006a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006a6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_ETH_Init+0x84>)
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <MX_ETH_Init+0x90>)
 80006ac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_ETH_Init+0x84>)
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_ETH_Init+0x94>)
 80006b2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_ETH_Init+0x84>)
 80006b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006ba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <MX_ETH_Init+0x84>)
 80006be:	f001 f9a7 	bl	8001a10 <HAL_ETH_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006c8:	f000 fb84 	bl	8000dd4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006cc:	2238      	movs	r2, #56	; 0x38
 80006ce:	2100      	movs	r1, #0
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ETH_Init+0x98>)
 80006d2:	f006 fedb 	bl	800748c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_ETH_Init+0x98>)
 80006d8:	2221      	movs	r2, #33	; 0x21
 80006da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_ETH_Init+0x98>)
 80006de:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_ETH_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000020c 	.word	0x2000020c
 80006f4:	40028000 	.word	0x40028000
 80006f8:	200002bc 	.word	0x200002bc
 80006fc:	20000118 	.word	0x20000118
 8000700:	20000078 	.word	0x20000078
 8000704:	200001d4 	.word	0x200001d4

08000708 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08e      	sub	sp, #56	; 0x38
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a4e      	ldr	r2, [pc, #312]	; (8000860 <HAL_ETH_MspInit+0x158>)
 8000726:	4293      	cmp	r3, r2
 8000728:	f040 8096 	bne.w	8000858 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800072c:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	4a4c      	ldr	r2, [pc, #304]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000736:	6313      	str	r3, [r2, #48]	; 0x30
 8000738:	4b4a      	ldr	r3, [pc, #296]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000740:	623b      	str	r3, [r7, #32]
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	4b47      	ldr	r3, [pc, #284]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	4a46      	ldr	r2, [pc, #280]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 800074a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800074e:	6313      	str	r3, [r2, #48]	; 0x30
 8000750:	4b44      	ldr	r3, [pc, #272]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a40      	ldr	r2, [pc, #256]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 8000762:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
 8000768:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000774:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6313      	str	r3, [r2, #48]	; 0x30
 8000780:	4b38      	ldr	r3, [pc, #224]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	4a34      	ldr	r2, [pc, #208]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6313      	str	r3, [r2, #48]	; 0x30
 8000798:	4b32      	ldr	r3, [pc, #200]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	6313      	str	r3, [r2, #48]	; 0x30
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a28      	ldr	r2, [pc, #160]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 80007c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <HAL_ETH_MspInit+0x15c>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007d4:	2332      	movs	r3, #50	; 0x32
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	481e      	ldr	r0, [pc, #120]	; (8000868 <HAL_ETH_MspInit+0x160>)
 80007f0:	f001 fc34 	bl	800205c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007f4:	2386      	movs	r3, #134	; 0x86
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000804:	230b      	movs	r3, #11
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080c:	4619      	mov	r1, r3
 800080e:	4817      	ldr	r0, [pc, #92]	; (800086c <HAL_ETH_MspInit+0x164>)
 8000810:	f001 fc24 	bl	800205c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000826:	230b      	movs	r3, #11
 8000828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	480f      	ldr	r0, [pc, #60]	; (8000870 <HAL_ETH_MspInit+0x168>)
 8000832:	f001 fc13 	bl	800205c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000836:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000848:	230b      	movs	r3, #11
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000850:	4619      	mov	r1, r3
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <HAL_ETH_MspInit+0x16c>)
 8000854:	f001 fc02 	bl	800205c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3738      	adds	r7, #56	; 0x38
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40028000 	.word	0x40028000
 8000864:	40023800 	.word	0x40023800
 8000868:	40020800 	.word	0x40020800
 800086c:	40020000 	.word	0x40020000
 8000870:	40020400 	.word	0x40020400
 8000874:	40021800 	.word	0x40021800

08000878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b4d      	ldr	r3, [pc, #308]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a4c      	ldr	r2, [pc, #304]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <MX_GPIO_Init+0x14c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b47      	ldr	r3, [pc, #284]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a46      	ldr	r2, [pc, #280]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b44      	ldr	r3, [pc, #272]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b41      	ldr	r3, [pc, #260]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a40      	ldr	r2, [pc, #256]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a3a      	ldr	r2, [pc, #232]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a34      	ldr	r2, [pc, #208]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2e      	ldr	r2, [pc, #184]	; (80009c4 <MX_GPIO_Init+0x14c>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <MX_GPIO_Init+0x14c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f244 0181 	movw	r1, #16513	; 0x4081
 800093c:	4822      	ldr	r0, [pc, #136]	; (80009c8 <MX_GPIO_Init+0x150>)
 800093e:	f001 fd39 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_GPIO_Init+0x154>)
 8000948:	f001 fd34 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	481b      	ldr	r0, [pc, #108]	; (80009d0 <MX_GPIO_Init+0x158>)
 8000964:	f001 fb7a 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000968:	f244 0381 	movw	r3, #16513	; 0x4081
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4811      	ldr	r0, [pc, #68]	; (80009c8 <MX_GPIO_Init+0x150>)
 8000982:	f001 fb6b 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0x154>)
 800099e:	f001 fb5d 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_GPIO_Init+0x154>)
 80009b6:	f001 fb51 	bl	800205c <HAL_GPIO_Init>

}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40021800 	.word	0x40021800
 80009d0:	40020800 	.word	0x40020800

080009d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C1_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_I2C1_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00305FFF;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_I2C1_Init+0x74>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_I2C1_Init+0x7c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_I2C1_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_I2C1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_I2C1_Init+0x74>)
 8000a10:	f001 fcea 	bl	80023e8 <HAL_I2C_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f000 f9db 	bl	8000dd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_I2C1_Init+0x74>)
 8000a22:	f002 f9c7 	bl	8002db4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f000 f9d2 	bl	8000dd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_I2C1_Init+0x74>)
 8000a34:	f002 fa09 	bl	8002e4a <HAL_I2CEx_ConfigDigitalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 f9c9 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200002c4 	.word	0x200002c4
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	00305fff 	.word	0x00305fff

08000a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0aa      	sub	sp, #168	; 0xa8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2284      	movs	r2, #132	; 0x84
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f006 fd09 	bl	800748c <memset>
  if(i2cHandle->Instance==I2C1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <HAL_I2C_MspInit+0xb4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d13c      	bne.n	8000afe <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 f848 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a9e:	f000 f999 	bl	8000dd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000abe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <HAL_I2C_MspInit+0xbc>)
 8000ae2:	f001 fabb 	bl	800205c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000afe:	bf00      	nop
 8000b00:	37a8      	adds	r7, #168	; 0xa8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020400 	.word	0x40020400

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b18:	f000 fd55 	bl	80015c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1c:	f000 f834 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b20:	f7ff feaa 	bl	8000878 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b24:	f7ff fda2 	bl	800066c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b28:	f000 fbe4 	bl	80012f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b2c:	f000 fc7a 	bl	8001424 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000b30:	f7ff ff50 	bl	80009d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000b34:	f000 fab4 	bl	80010a0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b38:	f000 fa06 	bl	8000f48 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b3c:	f000 fafe 	bl	800113c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_I2C_Init(&hi2c1);
  bh1750Init(&hi2c1);
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <main+0x60>)
 8000b42:	f7ff fd3f 	bl	80005c4 <bh1750Init>
  setRedFill(50);
 8000b46:	2032      	movs	r0, #50	; 0x32
 8000b48:	f000 f886 	bl	8000c58 <setRedFill>
  HAL_TIM_Base_Start(&htim1);
 8000b4c:	480a      	ldr	r0, [pc, #40]	; (8000b78 <main+0x64>)
 8000b4e:	f003 fc33 	bl	80043b8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000b52:	480a      	ldr	r0, [pc, #40]	; (8000b7c <main+0x68>)
 8000b54:	f003 fca0 	bl	8004498 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim3);
  pwmStartAll();
 8000b58:	f000 f89a 	bl	8000c90 <pwmStartAll>
  HAL_UART_Receive_IT(&huart3, cmd, strlen(cmd));
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <main+0x6c>)
 8000b5e:	f7ff fb57 	bl	8000210 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	4905      	ldr	r1, [pc, #20]	; (8000b80 <main+0x6c>)
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <main+0x70>)
 8000b6c:	f004 ff47 	bl	80059fe <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <main+0x5c>
 8000b72:	bf00      	nop
 8000b74:	200002c4 	.word	0x200002c4
 8000b78:	20000324 	.word	0x20000324
 8000b7c:	20000370 	.word	0x20000370
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000408 	.word	0x20000408

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	2230      	movs	r2, #48	; 0x30
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f006 fc78 	bl	800748c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bac:	f002 fae2 	bl	8003174 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <SystemClock_Config+0xc8>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <SystemClock_Config+0xc8>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <SystemClock_Config+0xc8>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bd0:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bfc:	2348      	movs	r3, #72	; 0x48
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c04:	2303      	movs	r3, #3
 8000c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fac1 	bl	8003194 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c18:	f000 f8dc 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c20:	2302      	movs	r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2102      	movs	r1, #2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fd4f 	bl	80036dc <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c44:	f000 f8c6 	bl	8000dd4 <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	; 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40007000 	.word	0x40007000

08000c58 <setRedFill>:

/* USER CODE BEGIN 4 */
void setRedFill(uint8_t fill)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	if (fill > 100) fill = 100;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b64      	cmp	r3, #100	; 0x64
 8000c66:	d901      	bls.n	8000c6c <setRedFill+0x14>
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fill * 10);
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <setRedFill+0x34>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000324 	.word	0x20000324

08000c90 <pwmStartAll>:

void pwmStartAll()
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c94:	2100      	movs	r1, #0
 8000c96:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <pwmStartAll+0x10>)
 8000c98:	f003 fcd8 	bl	800464c <HAL_TIM_PWM_Start>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000324 	.word	0x20000324

08000ca4 <HAL_TIM_PeriodElapsedCallback>:

static uint8_t r = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	; 0x50
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d12b      	bne.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		mes = bh1750GetMes(&hi2c1);
 8000cb4:	4823      	ldr	r0, [pc, #140]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cb6:	f7ff fca7 	bl	8000608 <bh1750GetMes>
 8000cba:	eef0 7a40 	vmov.f32	s15, s0
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cc0:	edc3 7a00 	vstr	s15, [r3]
		uint32_t temp = (uint32_t)(mes);
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cce:	ee17 3a90 	vmov	r3, s15
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		char msg[64];
		itoa(temp, msg, 10);
 8000cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cd6:	f107 010c 	add.w	r1, r7, #12
 8000cda:	220a      	movs	r2, #10
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 fbd3 	bl	8007488 <itoa>
#if 0
		HAL_UART_Transmit(&huart3, msg, strlen(msg), 100);
#else
		sprintf(msg, "%i; %i\n\r", temp, r);
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f107 000c 	add.w	r0, r7, #12
 8000cea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cec:	4918      	ldr	r1, [pc, #96]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cee:	f006 fbd5 	bl	800749c <siprintf>
		HAL_UART_Transmit(&huart3, msg, strlen(msg), 100);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fa8a 	bl	8000210 <strlen>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	f107 010c 	add.w	r1, r7, #12
 8000d04:	2364      	movs	r3, #100	; 0x64
 8000d06:	4813      	ldr	r0, [pc, #76]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d08:	f004 fdf6 	bl	80058f8 <HAL_UART_Transmit>
#endif
	}
	if(htim == &htim3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d111      	bne.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		r += 10;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	330a      	adds	r3, #10
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d1e:	701a      	strb	r2, [r3, #0]
		if(r > 100) r = 0;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b64      	cmp	r3, #100	; 0x64
 8000d26:	d902      	bls.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x8a>
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
		setRedFill(r);
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff90 	bl	8000c58 <setRedFill>
	}
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	; 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000370 	.word	0x20000370
 8000d44:	200002c4 	.word	0x200002c4
 8000d48:	20000318 	.word	0x20000318
 8000d4c:	2000031c 	.word	0x2000031c
 8000d50:	08007f2c 	.word	0x08007f2c
 8000d54:	20000408 	.word	0x20000408
 8000d58:	200003bc 	.word	0x200003bc

08000d5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_UART_RxCpltCallback+0x68>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d127      	bne.n	8000dbc <HAL_UART_RxCpltCallback+0x60>
	{
		// patrz dokumentacja atoi
		uint8_t fill = atoi(&cmd[1]); //R050 -> 50
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <HAL_UART_RxCpltCallback+0x6c>)
 8000d6e:	f006 fb45 	bl	80073fc <atoi>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
		switch(cmd[0])
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_RxCpltCallback+0x70>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b72      	cmp	r3, #114	; 0x72
 8000d7c:	d104      	bne.n	8000d88 <HAL_UART_RxCpltCallback+0x2c>
		{
			case 'r':
				setRedFill(fill);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff69 	bl	8000c58 <setRedFill>
				break;
 8000d86:	e00f      	b.n	8000da8 <HAL_UART_RxCpltCallback+0x4c>
			default:
			{
				char msg[] = "err";
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_UART_RxCpltCallback+0x74>)
 8000d8a:	60bb      	str	r3, [r7, #8]
				HAL_UART_Transmit(&huart3, msg, strlen(msg), 100);
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fa3d 	bl	8000210 <strlen>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	f107 0108 	add.w	r1, r7, #8
 8000d9e:	2364      	movs	r3, #100	; 0x64
 8000da0:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <HAL_UART_RxCpltCallback+0x68>)
 8000da2:	f004 fda9 	bl	80058f8 <HAL_UART_Transmit>
			} break;
 8000da6:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart3, cmd, strlen(cmd));
 8000da8:	4808      	ldr	r0, [pc, #32]	; (8000dcc <HAL_UART_RxCpltCallback+0x70>)
 8000daa:	f7ff fa31 	bl	8000210 <strlen>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	4905      	ldr	r1, [pc, #20]	; (8000dcc <HAL_UART_RxCpltCallback+0x70>)
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <HAL_UART_RxCpltCallback+0x68>)
 8000db8:	f004 fe21 	bl	80059fe <HAL_UART_Receive_IT>

	}
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000408 	.word	0x20000408
 8000dc8:	20000001 	.word	0x20000001
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	00727265 	.word	0x00727265

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x44>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_MspInit+0x44>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x44>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x44>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x44>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x44>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 fbe4 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM2_IRQHandler+0x10>)
 8000e82:	f003 fcdd 	bl	8004840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000370 	.word	0x20000370

08000e90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM3_IRQHandler+0x10>)
 8000e96:	f003 fcd3 	bl	8004840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200003bc 	.word	0x200003bc

08000ea4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <USART3_IRQHandler+0x10>)
 8000eaa:	f004 fded 	bl	8005a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000408 	.word	0x20000408

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f006 fa8c 	bl	8007404 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20050000 	.word	0x20050000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	20000320 	.word	0x20000320
 8000f20:	200009b0 	.word	0x200009b0

08000f24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09a      	sub	sp, #104	; 0x68
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	222c      	movs	r2, #44	; 0x2c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 fa82 	bl	800748c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f88:	4b43      	ldr	r3, [pc, #268]	; (8001098 <MX_TIM1_Init+0x150>)
 8000f8a:	4a44      	ldr	r2, [pc, #272]	; (800109c <MX_TIM1_Init+0x154>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8000f8e:	4b42      	ldr	r3, [pc, #264]	; (8001098 <MX_TIM1_Init+0x150>)
 8000f90:	2247      	movs	r2, #71	; 0x47
 8000f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <MX_TIM1_Init+0x150>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_TIM1_Init+0x150>)
 8000f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <MX_TIM1_Init+0x150>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb4:	4838      	ldr	r0, [pc, #224]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fb6:	f003 f9a7 	bl	8004308 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fc0:	f7ff ff08 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4831      	ldr	r0, [pc, #196]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fd2:	f003 fe69 	bl	8004ca8 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fdc:	f7ff fefa 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fe0:	482d      	ldr	r0, [pc, #180]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fe2:	f003 fad1 	bl	8004588 <HAL_TIM_PWM_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fec:	f7ff fef2 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001000:	4619      	mov	r1, r3
 8001002:	4825      	ldr	r0, [pc, #148]	; (8001098 <MX_TIM1_Init+0x150>)
 8001004:	f004 fb00 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800100e:	f7ff fee1 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001012:	2360      	movs	r3, #96	; 0x60
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101e:	2300      	movs	r3, #0
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	4818      	ldr	r0, [pc, #96]	; (8001098 <MX_TIM1_Init+0x150>)
 8001038:	f003 fd22 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001042:	f7ff fec7 	bl	8000dd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800105a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM1_Init+0x150>)
 800107c:	f004 fb52 	bl	8005724 <HAL_TIMEx_ConfigBreakDeadTime>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001086:	f7ff fea5 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_TIM1_Init+0x150>)
 800108c:	f000 f8fa 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8001090:	bf00      	nop
 8001092:	3768      	adds	r7, #104	; 0x68
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000324 	.word	0x20000324
 800109c:	40010000 	.word	0x40010000

080010a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_TIM2_Init+0x98>)
 80010c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_TIM2_Init+0x98>)
 80010c8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80010cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_TIM2_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_TIM2_Init+0x98>)
 80010d6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80010da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_TIM2_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_TIM2_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_TIM2_Init+0x98>)
 80010ea:	f003 f90d 	bl	8004308 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80010f4:	f7ff fe6e 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_TIM2_Init+0x98>)
 8001106:	f003 fdcf 	bl	8004ca8 <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001110:	f7ff fe60 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_TIM2_Init+0x98>)
 8001122:	f004 fa71 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800112c:	f7ff fe52 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000370 	.word	0x20000370

0800113c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_TIM3_Init+0x98>)
 800115c:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <MX_TIM3_Init+0x9c>)
 800115e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200 - 1;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_TIM3_Init+0x98>)
 8001162:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001166:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_TIM3_Init+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000 -1;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_TIM3_Init+0x98>)
 8001170:	f241 3287 	movw	r2, #4999	; 0x1387
 8001174:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_TIM3_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_TIM3_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001182:	4814      	ldr	r0, [pc, #80]	; (80011d4 <MX_TIM3_Init+0x98>)
 8001184:	f003 f8c0 	bl	8004308 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800118e:	f7ff fe21 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_TIM3_Init+0x98>)
 80011a0:	f003 fd82 	bl	8004ca8 <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80011aa:	f7ff fe13 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_TIM3_Init+0x98>)
 80011bc:	f004 fa24 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80011c6:	f7ff fe05 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200003bc 	.word	0x200003bc
 80011d8:	40000400 	.word	0x40000400

080011dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a23      	ldr	r2, [pc, #140]	; (8001278 <HAL_TIM_Base_MspInit+0x9c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10c      	bne.n	8001208 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <HAL_TIM_Base_MspInit+0xa0>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <HAL_TIM_Base_MspInit+0xa0>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_TIM_Base_MspInit+0xa0>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001206:	e032      	b.n	800126e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001210:	d114      	bne.n	800123c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_TIM_Base_MspInit+0xa0>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a19      	ldr	r2, [pc, #100]	; (800127c <HAL_TIM_Base_MspInit+0xa0>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_TIM_Base_MspInit+0xa0>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	201c      	movs	r0, #28
 8001230:	f000 fb25 	bl	800187e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001234:	201c      	movs	r0, #28
 8001236:	f000 fb3e 	bl	80018b6 <HAL_NVIC_EnableIRQ>
}
 800123a:	e018      	b.n	800126e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_TIM_Base_MspInit+0xa4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d113      	bne.n	800126e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_TIM_Base_MspInit+0xa0>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_TIM_Base_MspInit+0xa0>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_TIM_Base_MspInit+0xa0>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	201d      	movs	r0, #29
 8001264:	f000 fb0b 	bl	800187e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001268:	201d      	movs	r0, #29
 800126a:	f000 fb24 	bl	80018b6 <HAL_NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40010000 	.word	0x40010000
 800127c:	40023800 	.word	0x40023800
 8001280:	40000400 	.word	0x40000400

08001284 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_TIM_MspPostInit+0x64>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d11c      	bne.n	80012e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_TIM_MspPostInit+0x68>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_TIM_MspPostInit+0x68>)
 80012ac:	f043 0310 	orr.w	r3, r3, #16
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_TIM_MspPostInit+0x68>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012dc:	f000 febe 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40010000 	.word	0x40010000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40021000 	.word	0x40021000

080012f4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USART3_UART_Init+0x58>)
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <MX_USART3_UART_Init+0x5c>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_USART3_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART3_UART_Init+0x58>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART3_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001338:	f004 fa90 	bl	800585c <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001342:	f7ff fd47 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000408 	.word	0x20000408
 8001350:	40004800 	.word	0x40004800

08001354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0aa      	sub	sp, #168	; 0xa8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2284      	movs	r2, #132	; 0x84
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f006 f889 	bl	800748c <memset>
  if(uartHandle->Instance==USART3)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a26      	ldr	r2, [pc, #152]	; (8001418 <HAL_UART_MspInit+0xc4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d144      	bne.n	800140e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800138a:	2300      	movs	r3, #0
 800138c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fbc8 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800139e:	f7ff fd19 	bl	8000dd4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ec:	2307      	movs	r3, #7
 80013ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013f6:	4619      	mov	r1, r3
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <HAL_UART_MspInit+0xcc>)
 80013fa:	f000 fe2f 	bl	800205c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2027      	movs	r0, #39	; 0x27
 8001404:	f000 fa3b 	bl	800187e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001408:	2027      	movs	r0, #39	; 0x27
 800140a:	f000 fa54 	bl	80018b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800140e:	bf00      	nop
 8001410:	37a8      	adds	r7, #168	; 0xa8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004800 	.word	0x40004800
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00

08001424 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800142e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	2206      	movs	r2, #6
 8001434:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001438:	2202      	movs	r2, #2
 800143a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001444:	2202      	movs	r2, #2
 8001446:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144a:	2201      	movs	r2, #1
 800144c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145c:	2201      	movs	r2, #1
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001468:	f001 fd3b 	bl	8002ee2 <HAL_PCD_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001472:	f7ff fcaf 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000490 	.word	0x20000490

08001480 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0ac      	sub	sp, #176	; 0xb0
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	2284      	movs	r2, #132	; 0x84
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 fff3 	bl	800748c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ae:	d159      	bne.n	8001564 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80014b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fb31 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80014cc:	f7ff fc82 	bl	8000dd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_PCD_MspInit+0xec>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <HAL_PCD_MspInit+0xec>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_PCD_MspInit+0xec>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001502:	230a      	movs	r3, #10
 8001504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800150c:	4619      	mov	r1, r3
 800150e:	4818      	ldr	r0, [pc, #96]	; (8001570 <HAL_PCD_MspInit+0xf0>)
 8001510:	f000 fda4 	bl	800205c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800152c:	4619      	mov	r1, r3
 800152e:	4810      	ldr	r0, [pc, #64]	; (8001570 <HAL_PCD_MspInit+0xf0>)
 8001530:	f000 fd94 	bl	800205c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_PCD_MspInit+0xec>)
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	4a0c      	ldr	r2, [pc, #48]	; (800156c <HAL_PCD_MspInit+0xec>)
 800153a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153e:	6353      	str	r3, [r2, #52]	; 0x34
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_PCD_MspInit+0xec>)
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_PCD_MspInit+0xec>)
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_PCD_MspInit+0xec>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	6453      	str	r3, [r2, #68]	; 0x44
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_PCD_MspInit+0xec>)
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001564:	bf00      	nop
 8001566:	37b0      	adds	r7, #176	; 0xb0
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800157a:	490e      	ldr	r1, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001590:	4c0b      	ldr	r4, [pc, #44]	; (80015c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159e:	f7ff fcc1 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a2:	f005 ff35 	bl	8007410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a6:	f7ff fab5 	bl	8000b14 <main>
  bx  lr    
 80015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80015b8:	080080bc 	.word	0x080080bc
  ldr r2, =_sbss
 80015bc:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80015c0:	200009ac 	.word	0x200009ac

080015c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC_IRQHandler>

080015c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ca:	2003      	movs	r0, #3
 80015cc:	f000 f94c 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f000 f805 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d6:	f7ff fc03 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f967 	bl	80018d2 <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f92f 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000008 	.word	0x20000008
 8001638:	20000010 	.word	0x20000010
 800163c:	2000000c 	.word	0x2000000c

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000010 	.word	0x20000010
 8001664:	20000998 	.word	0x20000998

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000998 	.word	0x20000998

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000010 	.word	0x20000010

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0000 	.word	0x05fa0000

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff8e 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff29 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff3e 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff8e 	bl	80017bc <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5d 	bl	8001768 <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff31 	bl	800172c <__NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa2 	bl	8001824 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff feb6 	bl	8001668 <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d008      	beq.n	800191c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e052      	b.n	80019c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0216 	bic.w	r2, r2, #22
 800192a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	2b00      	cmp	r3, #0
 8001942:	d103      	bne.n	800194c <HAL_DMA_Abort+0x62>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0208 	bic.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196c:	e013      	b.n	8001996 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196e:	f7ff fe7b 	bl	8001668 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b05      	cmp	r3, #5
 800197a:	d90c      	bls.n	8001996 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2220      	movs	r2, #32
 8001980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2203      	movs	r2, #3
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e015      	b.n	80019c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e4      	bne.n	800196e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	223f      	movs	r2, #63	; 0x3f
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d004      	beq.n	80019e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e00c      	b.n	8001a02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2205      	movs	r2, #5
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06a      	b.n	8001af8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d106      	bne.n	8001a3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2223      	movs	r2, #35	; 0x23
 8001a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7fe fe67 	bl	8000708 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_ETH_Init+0xf0>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a30      	ldr	r2, [pc, #192]	; (8001b00 <HAL_ETH_Init+0xf0>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <HAL_ETH_Init+0xf0>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <HAL_ETH_Init+0xf4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a2b      	ldr	r2, [pc, #172]	; (8001b04 <HAL_ETH_Init+0xf4>)
 8001a58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a5c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_ETH_Init+0xf4>)
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4927      	ldr	r1, [pc, #156]	; (8001b04 <HAL_ETH_Init+0xf4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_ETH_Init+0xf4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a88:	f7ff fdee 	bl	8001668 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a8e:	e011      	b.n	8001ab4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a90:	f7ff fdea 	bl	8001668 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a9e:	d909      	bls.n	8001ab4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	22e0      	movs	r2, #224	; 0xe0
 8001aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e021      	b.n	8001af8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1e4      	bne.n	8001a90 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f958 	bl	8001d7c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f9ff 	bl	8001ed0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fa55 	bl	8001f82 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	461a      	mov	r2, r3
 8001ade:	2100      	movs	r1, #0
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f9bd 	bl	8001e60 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2210      	movs	r2, #16
 8001af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40013800 	.word	0x40013800

08001b08 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4b51      	ldr	r3, [pc, #324]	; (8001c64 <ETH_SetMACConfig+0x15c>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7c1b      	ldrb	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <ETH_SetMACConfig+0x28>
 8001b2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b2e:	e000      	b.n	8001b32 <ETH_SetMACConfig+0x2a>
 8001b30:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	7c5b      	ldrb	r3, [r3, #17]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <ETH_SetMACConfig+0x38>
 8001b3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b3e:	e000      	b.n	8001b42 <ETH_SetMACConfig+0x3a>
 8001b40:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b42:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b48:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	7fdb      	ldrb	r3, [r3, #31]
 8001b4e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b50:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	7f92      	ldrb	r2, [r2, #30]
 8001b5c:	2a00      	cmp	r2, #0
 8001b5e:	d102      	bne.n	8001b66 <ETH_SetMACConfig+0x5e>
 8001b60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b64:	e000      	b.n	8001b68 <ETH_SetMACConfig+0x60>
 8001b66:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	7f1b      	ldrb	r3, [r3, #28]
 8001b6e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b70:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b76:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	791b      	ldrb	r3, [r3, #4]
 8001b7c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d102      	bne.n	8001b90 <ETH_SetMACConfig+0x88>
 8001b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8e:	e000      	b.n	8001b92 <ETH_SetMACConfig+0x8a>
 8001b90:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7bdb      	ldrb	r3, [r3, #15]
 8001b98:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b9a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ba0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ba8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001baa:	4313      	orrs	r3, r2
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f7ff fd5c 	bl	8001680 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001bde:	4013      	ands	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	d101      	bne.n	8001bf6 <ETH_SetMACConfig+0xee>
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	e000      	b.n	8001bf8 <ETH_SetMACConfig+0xf0>
 8001bf6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bf8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001bfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001c06:	2a01      	cmp	r2, #1
 8001c08:	d101      	bne.n	8001c0e <ETH_SetMACConfig+0x106>
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	e000      	b.n	8001c10 <ETH_SetMACConfig+0x108>
 8001c0e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001c10:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001c18:	2a01      	cmp	r2, #1
 8001c1a:	d101      	bne.n	8001c20 <ETH_SetMACConfig+0x118>
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	e000      	b.n	8001c22 <ETH_SetMACConfig+0x11a>
 8001c20:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001c2a:	2a01      	cmp	r2, #1
 8001c2c:	d101      	bne.n	8001c32 <ETH_SetMACConfig+0x12a>
 8001c2e:	2202      	movs	r2, #2
 8001c30:	e000      	b.n	8001c34 <ETH_SetMACConfig+0x12c>
 8001c32:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c34:	4313      	orrs	r3, r2
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff fd17 	bl	8001680 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	ff20810f 	.word	0xff20810f

08001c68 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <ETH_SetDMAConfig+0x110>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	7b1b      	ldrb	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <ETH_SetDMAConfig+0x2c>
 8001c8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c92:	e000      	b.n	8001c96 <ETH_SetDMAConfig+0x2e>
 8001c94:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	7b5b      	ldrb	r3, [r3, #13]
 8001c9a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c9c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	7f52      	ldrb	r2, [r2, #29]
 8001ca2:	2a00      	cmp	r2, #0
 8001ca4:	d102      	bne.n	8001cac <ETH_SetDMAConfig+0x44>
 8001ca6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001caa:	e000      	b.n	8001cae <ETH_SetDMAConfig+0x46>
 8001cac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	7b9b      	ldrb	r3, [r3, #14]
 8001cb4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cb6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cbc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	7f1b      	ldrb	r3, [r3, #28]
 8001cc2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001cc4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	7f9b      	ldrb	r3, [r3, #30]
 8001cca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ccc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cda:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cec:	461a      	mov	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff fcbe 	bl	8001680 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d1c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d22:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d28:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d30:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d32:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d3a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d40:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d4e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7ff fc8f 	bl	8001680 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	f8de3f23 	.word	0xf8de3f23

08001d7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0a6      	sub	sp, #152	; 0x98
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001db8:	2300      	movs	r3, #0
 8001dba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001dde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001de2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001de4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df4:	4619      	mov	r1, r3
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fe86 	bl	8001b08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e30:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e36:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ff08 	bl	8001c68 <ETH_SetDMAConfig>
}
 8001e58:	bf00      	nop
 8001e5a:	3798      	adds	r7, #152	; 0x98
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3305      	adds	r3, #5
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	3204      	adds	r2, #4
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <ETH_MACAddressConfig+0x68>)
 8001e82:	4413      	add	r3, r2
 8001e84:	461a      	mov	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	061a      	lsls	r2, r3, #24
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3302      	adds	r3, #2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <ETH_MACAddressConfig+0x6c>)
 8001eb2:	4413      	add	r3, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	6013      	str	r3, [r2, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40028040 	.word	0x40028040
 8001ecc:	40028044 	.word	0x40028044

08001ed0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e03e      	b.n	8001f5c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68d9      	ldr	r1, [r3, #12]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	3206      	adds	r2, #6
 8001f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d80c      	bhi.n	8001f40 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68d9      	ldr	r1, [r3, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	e004      	b.n	8001f4a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d9bd      	bls.n	8001ede <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f74:	611a      	str	r2, [r3, #16]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e046      	b.n	800201e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6919      	ldr	r1, [r3, #16]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2200      	movs	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001fd4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	3212      	adds	r2, #18
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d80c      	bhi.n	800200e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6919      	ldr	r1, [r3, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	461a      	mov	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	e004      	b.n	8002018 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3301      	adds	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d9b5      	bls.n	8001f90 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204e:	60da      	str	r2, [r3, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	e175      	b.n	8002368 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8164 	bne.w	8002362 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d005      	beq.n	80020b2 <HAL_GPIO_Init+0x56>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d130      	bne.n	8002114 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 0201 	and.w	r2, r3, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b03      	cmp	r3, #3
 800211e:	d017      	beq.n	8002150 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d123      	bne.n	80021a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80be 	beq.w	8002362 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	4b66      	ldr	r3, [pc, #408]	; (8002380 <HAL_GPIO_Init+0x324>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a65      	ldr	r2, [pc, #404]	; (8002380 <HAL_GPIO_Init+0x324>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_GPIO_Init+0x324>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021fe:	4a61      	ldr	r2, [pc, #388]	; (8002384 <HAL_GPIO_Init+0x328>)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_GPIO_Init+0x32c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d037      	beq.n	800229a <HAL_GPIO_Init+0x23e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_GPIO_Init+0x330>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d031      	beq.n	8002296 <HAL_GPIO_Init+0x23a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a56      	ldr	r2, [pc, #344]	; (8002390 <HAL_GPIO_Init+0x334>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02b      	beq.n	8002292 <HAL_GPIO_Init+0x236>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a55      	ldr	r2, [pc, #340]	; (8002394 <HAL_GPIO_Init+0x338>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d025      	beq.n	800228e <HAL_GPIO_Init+0x232>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a54      	ldr	r2, [pc, #336]	; (8002398 <HAL_GPIO_Init+0x33c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01f      	beq.n	800228a <HAL_GPIO_Init+0x22e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a53      	ldr	r2, [pc, #332]	; (800239c <HAL_GPIO_Init+0x340>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x22a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_GPIO_Init+0x344>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x226>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_GPIO_Init+0x348>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x222>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a50      	ldr	r2, [pc, #320]	; (80023a8 <HAL_GPIO_Init+0x34c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x21e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4f      	ldr	r2, [pc, #316]	; (80023ac <HAL_GPIO_Init+0x350>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x21a>
 8002272:	2309      	movs	r3, #9
 8002274:	e012      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002276:	230a      	movs	r3, #10
 8002278:	e010      	b.n	800229c <HAL_GPIO_Init+0x240>
 800227a:	2308      	movs	r3, #8
 800227c:	e00e      	b.n	800229c <HAL_GPIO_Init+0x240>
 800227e:	2307      	movs	r3, #7
 8002280:	e00c      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002282:	2306      	movs	r3, #6
 8002284:	e00a      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002286:	2305      	movs	r3, #5
 8002288:	e008      	b.n	800229c <HAL_GPIO_Init+0x240>
 800228a:	2304      	movs	r3, #4
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x240>
 800228e:	2303      	movs	r3, #3
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x240>
 800229a:	2300      	movs	r3, #0
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022ac:	4935      	ldr	r1, [pc, #212]	; (8002384 <HAL_GPIO_Init+0x328>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_GPIO_Init+0x354>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <HAL_GPIO_Init+0x354>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e4:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_GPIO_Init+0x354>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002308:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <HAL_GPIO_Init+0x354>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_GPIO_Init+0x354>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002332:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_GPIO_Init+0x354>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_GPIO_Init+0x354>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <HAL_GPIO_Init+0x354>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	f67f ae86 	bls.w	800207c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021000 	.word	0x40021000
 800239c:	40021400 	.word	0x40021400
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40021c00 	.word	0x40021c00
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40022400 	.word	0x40022400
 80023b0:	40013c00 	.word	0x40013c00

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023d0:	e003      	b.n	80023da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	041a      	lsls	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e07f      	b.n	80024fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fb20 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	; 0x24
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	e006      	b.n	8002470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800246e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d104      	bne.n	8002482 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002480:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_I2C_Init+0x11c>)
 800248e:	430b      	orrs	r3, r1
 8002490:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69d9      	ldr	r1, [r3, #28]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	02008000 	.word	0x02008000

08002508 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	461a      	mov	r2, r3
 8002514:	460b      	mov	r3, r1
 8002516:	817b      	strh	r3, [r7, #10]
 8002518:	4613      	mov	r3, r2
 800251a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b20      	cmp	r3, #32
 8002526:	f040 80da 	bne.w	80026de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x30>
 8002534:	2302      	movs	r3, #2
 8002536:	e0d3      	b.n	80026e0 <HAL_I2C_Master_Transmit+0x1d8>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002540:	f7ff f892 	bl	8001668 <HAL_GetTick>
 8002544:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2319      	movs	r3, #25
 800254c:	2201      	movs	r2, #1
 800254e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f9e6 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0be      	b.n	80026e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2221      	movs	r2, #33	; 0x21
 8002566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2210      	movs	r2, #16
 800256e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	893a      	ldrh	r2, [r7, #8]
 8002582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	2bff      	cmp	r3, #255	; 0xff
 8002592:	d90e      	bls.n	80025b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	22ff      	movs	r2, #255	; 0xff
 8002598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	8979      	ldrh	r1, [r7, #10]
 80025a2:	4b51      	ldr	r3, [pc, #324]	; (80026e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fbd0 	bl	8002d50 <I2C_TransferConfig>
 80025b0:	e06c      	b.n	800268c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	8979      	ldrh	r1, [r7, #10]
 80025c4:	4b48      	ldr	r3, [pc, #288]	; (80026e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fbbf 	bl	8002d50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025d2:	e05b      	b.n	800268c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	6a39      	ldr	r1, [r7, #32]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f9e3 	bl	80029a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e07b      	b.n	80026e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d034      	beq.n	800268c <HAL_I2C_Master_Transmit+0x184>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d130      	bne.n	800268c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	2200      	movs	r2, #0
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f975 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e04d      	b.n	80026e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d90e      	bls.n	800266c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	b2da      	uxtb	r2, r3
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	2300      	movs	r3, #0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fb73 	bl	8002d50 <I2C_TransferConfig>
 800266a:	e00f      	b.n	800268c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	b2da      	uxtb	r2, r3
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fb62 	bl	8002d50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d19e      	bne.n	80025d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f9c2 	bl	8002a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e01a      	b.n	80026e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2220      	movs	r2, #32
 80026b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_I2C_Master_Transmit+0x1e4>)
 80026be:	400b      	ands	r3, r1
 80026c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80026de:	2302      	movs	r3, #2
  }
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	80002000 	.word	0x80002000
 80026ec:	fe00e800 	.word	0xfe00e800

080026f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	460b      	mov	r3, r1
 80026fe:	817b      	strh	r3, [r7, #10]
 8002700:	4613      	mov	r3, r2
 8002702:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b20      	cmp	r3, #32
 800270e:	f040 80db 	bne.w	80028c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_I2C_Master_Receive+0x30>
 800271c:	2302      	movs	r3, #2
 800271e:	e0d4      	b.n	80028ca <HAL_I2C_Master_Receive+0x1da>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002728:	f7fe ff9e 	bl	8001668 <HAL_GetTick>
 800272c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2319      	movs	r3, #25
 8002734:	2201      	movs	r2, #1
 8002736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f8f2 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0bf      	b.n	80028ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2222      	movs	r2, #34	; 0x22
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2210      	movs	r2, #16
 8002756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	893a      	ldrh	r2, [r7, #8]
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2bff      	cmp	r3, #255	; 0xff
 800277a:	d90e      	bls.n	800279a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	22ff      	movs	r2, #255	; 0xff
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	b2da      	uxtb	r2, r3
 8002788:	8979      	ldrh	r1, [r7, #10]
 800278a:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <HAL_I2C_Master_Receive+0x1e4>)
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fadc 	bl	8002d50 <I2C_TransferConfig>
 8002798:	e06d      	b.n	8002876 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	8979      	ldrh	r1, [r7, #10]
 80027ac:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <HAL_I2C_Master_Receive+0x1e4>)
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 facb 	bl	8002d50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027ba:	e05c      	b.n	8002876 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	6a39      	ldr	r1, [r7, #32]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f96b 	bl	8002a9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e07c      	b.n	80028ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d034      	beq.n	8002876 <HAL_I2C_Master_Receive+0x186>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d130      	bne.n	8002876 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2200      	movs	r2, #0
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f880 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e04d      	b.n	80028ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	2bff      	cmp	r3, #255	; 0xff
 8002836:	d90e      	bls.n	8002856 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	22ff      	movs	r2, #255	; 0xff
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	b2da      	uxtb	r2, r3
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	2300      	movs	r3, #0
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fa7e 	bl	8002d50 <I2C_TransferConfig>
 8002854:	e00f      	b.n	8002876 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	b2da      	uxtb	r2, r3
 8002866:	8979      	ldrh	r1, [r7, #10]
 8002868:	2300      	movs	r3, #0
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fa6d 	bl	8002d50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d19d      	bne.n	80027bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	6a39      	ldr	r1, [r7, #32]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f8cd 	bl	8002a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e01a      	b.n	80028ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2220      	movs	r2, #32
 800289a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_I2C_Master_Receive+0x1e8>)
 80028a8:	400b      	ands	r3, r1
 80028aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e000      	b.n	80028ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
  }
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	80002400 	.word	0x80002400
 80028d8:	fe00e800 	.word	0xfe00e800

080028dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d103      	bne.n	80028fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2200      	movs	r2, #0
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d007      	beq.n	8002918 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	619a      	str	r2, [r3, #24]
  }
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002934:	e022      	b.n	800297c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d01e      	beq.n	800297c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293e:	f7fe fe93 	bl	8001668 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d113      	bne.n	800297c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e00f      	b.n	800299c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4013      	ands	r3, r2
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	429a      	cmp	r2, r3
 8002998:	d0cd      	beq.n	8002936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b0:	e02c      	b.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f8ea 	bl	8002b90 <I2C_IsErrorOccurred>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e02a      	b.n	8002a1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d01e      	beq.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7fe fe4b 	bl	8001668 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d113      	bne.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d1cb      	bne.n	80029b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a30:	e028      	b.n	8002a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f8aa 	bl	8002b90 <I2C_IsErrorOccurred>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e026      	b.n	8002a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7fe fe0f 	bl	8001668 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d113      	bne.n	8002a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e007      	b.n	8002a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d1cf      	bne.n	8002a32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aa8:	e064      	b.n	8002b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f86e 	bl	8002b90 <I2C_IsErrorOccurred>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e062      	b.n	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d138      	bne.n	8002b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d105      	bne.n	8002ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e04e      	b.n	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d107      	bne.n	8002b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2210      	movs	r2, #16
 8002afa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2204      	movs	r2, #4
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
 8002b02:	e002      	b.n	8002b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002b1e:	400b      	ands	r3, r1
 8002b20:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e022      	b.n	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fe fd93 	bl	8001668 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10f      	bne.n	8002b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e007      	b.n	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d193      	bne.n	8002aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	fe00e800 	.word	0xfe00e800

08002b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d068      	beq.n	8002c8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bc4:	e049      	b.n	8002c5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d045      	beq.n	8002c5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fe fd4b 	bl	8001668 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_IsErrorOccurred+0x54>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d13a      	bne.n	8002c5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c06:	d121      	bne.n	8002c4c <I2C_IsErrorOccurred+0xbc>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0e:	d01d      	beq.n	8002c4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d01a      	beq.n	8002c4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c26:	f7fe fd1f 	bl	8001668 <HAL_GetTick>
 8002c2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c2c:	e00e      	b.n	8002c4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c2e:	f7fe fd1b 	bl	8001668 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b19      	cmp	r3, #25
 8002c3a:	d907      	bls.n	8002c4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c4a:	e006      	b.n	8002c5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d1e9      	bne.n	8002c2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d003      	beq.n	8002c70 <I2C_IsErrorOccurred+0xe0>
 8002c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0aa      	beq.n	8002bc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01c      	beq.n	8002d3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff fde9 	bl	80028dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <I2C_IsErrorOccurred+0x1bc>)
 8002d16:	400b      	ands	r3, r1
 8002d18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3728      	adds	r7, #40	; 0x28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	fe00e800 	.word	0xfe00e800

08002d50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d68:	7a7b      	ldrb	r3, [r7, #9]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	0d5b      	lsrs	r3, r3, #21
 8002d8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <I2C_TransferConfig+0x60>)
 8002d90:	430b      	orrs	r3, r1
 8002d92:	43db      	mvns	r3, r3
 8002d94:	ea02 0103 	and.w	r1, r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	03ff63ff 	.word	0x03ff63ff

08002db4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d138      	bne.n	8002e3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e032      	b.n	8002e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d139      	bne.n	8002ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e033      	b.n	8002ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2224      	movs	r2, #36	; 0x24
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee4:	b08f      	sub	sp, #60	; 0x3c
 8002ee6:	af0a      	add	r7, sp, #40	; 0x28
 8002ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e116      	b.n	8003122 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe fab6 	bl	8001480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2203      	movs	r2, #3
 8002f18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 ffc6 	bl	8006ec4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	687e      	ldr	r6, [r7, #4]
 8002f40:	466d      	mov	r5, sp
 8002f42:	f106 0410 	add.w	r4, r6, #16
 8002f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f56:	1d33      	adds	r3, r6, #4
 8002f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f5a:	6838      	ldr	r0, [r7, #0]
 8002f5c:	f003 ff5a 	bl	8006e14 <USB_CoreInit>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0d7      	b.n	8003122 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2100      	movs	r1, #0
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 ffb4 	bl	8006ee6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	e04a      	b.n	800301a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	333d      	adds	r3, #61	; 0x3d
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	333c      	adds	r3, #60	; 0x3c
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	b298      	uxth	r0, r3
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3344      	adds	r3, #68	; 0x44
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3340      	adds	r3, #64	; 0x40
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3348      	adds	r3, #72	; 0x48
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	334c      	adds	r3, #76	; 0x4c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3354      	adds	r3, #84	; 0x54
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	3301      	adds	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d3af      	bcc.n	8002f84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	e044      	b.n	80030b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	3301      	adds	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3b5      	bcc.n	800302a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	687e      	ldr	r6, [r7, #4]
 80030c6:	466d      	mov	r5, sp
 80030c8:	f106 0410 	add.w	r4, r6, #16
 80030cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80030dc:	1d33      	adds	r3, r6, #4
 80030de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e0:	6838      	ldr	r0, [r7, #0]
 80030e2:	f003 ff4d 	bl	8006f80 <USB_DevInit>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e014      	b.n	8003122 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2b01      	cmp	r3, #1
 800310e:	d102      	bne.n	8003116 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f80b 	bl	800312c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f004 f90b 	bl	8007336 <USB_DevDisconnect>

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800312c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_PCDEx_ActivateLPM+0x44>)
 800315c:	4313      	orrs	r3, r2
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	10000003 	.word	0x10000003

08003174 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a04      	ldr	r2, [pc, #16]	; (8003190 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800317e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003182:	6013      	str	r3, [r2, #0]
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40007000 	.word	0x40007000

08003194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800319c:	2300      	movs	r3, #0
 800319e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e291      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8087 	beq.w	80032c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b8:	4b96      	ldr	r3, [pc, #600]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d00c      	beq.n	80031de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c4:	4b93      	ldr	r3, [pc, #588]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d112      	bne.n	80031f6 <HAL_RCC_OscConfig+0x62>
 80031d0:	4b90      	ldr	r3, [pc, #576]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031de:	4b8d      	ldr	r3, [pc, #564]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d06c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x130>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d168      	bne.n	80032c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e26b      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x7a>
 8003200:	4b84      	ldr	r3, [pc, #528]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a83      	ldr	r2, [pc, #524]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e02e      	b.n	800326c <HAL_RCC_OscConfig+0xd8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x9c>
 8003216:	4b7f      	ldr	r3, [pc, #508]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7e      	ldr	r2, [pc, #504]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b7c      	ldr	r3, [pc, #496]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7b      	ldr	r2, [pc, #492]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xd8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0xc0>
 800323a:	4b76      	ldr	r3, [pc, #472]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a75      	ldr	r2, [pc, #468]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b73      	ldr	r3, [pc, #460]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a72      	ldr	r2, [pc, #456]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xd8>
 8003254:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6e      	ldr	r2, [pc, #440]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6b      	ldr	r2, [pc, #428]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f9f8 	bl	8001668 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe f9f4 	bl	8001668 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e21f      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b61      	ldr	r3, [pc, #388]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xe8>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe f9e4 	bl	8001668 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe f9e0 	bl	8001668 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e20b      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b57      	ldr	r3, [pc, #348]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x110>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d069      	beq.n	80033a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032d2:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b4d      	ldr	r3, [pc, #308]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x190>
 80032ea:	4b4a      	ldr	r3, [pc, #296]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x17a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1df      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	493d      	ldr	r1, [pc, #244]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e040      	b.n	80033a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d023      	beq.n	8003374 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b39      	ldr	r3, [pc, #228]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a38      	ldr	r2, [pc, #224]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe f996 	bl	8001668 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003340:	f7fe f992 	bl	8001668 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1bd      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4929      	ldr	r1, [pc, #164]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
 8003372:	e018      	b.n	80033a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a26      	ldr	r2, [pc, #152]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe f972 	bl	8001668 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003388:	f7fe f96e 	bl	8001668 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e199      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d038      	beq.n	8003424 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d019      	beq.n	80033ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	4a15      	ldr	r2, [pc, #84]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fe f94f 	bl	8001668 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ce:	f7fe f94b 	bl	8001668 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e176      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80033e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x23a>
 80033ec:	e01a      	b.n	8003424 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	4a08      	ldr	r2, [pc, #32]	; (8003414 <HAL_RCC_OscConfig+0x280>)
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe f935 	bl	8001668 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003402:	f7fe f931 	bl	8001668 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d903      	bls.n	8003418 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e15c      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
 8003414:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	4b91      	ldr	r3, [pc, #580]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 800341a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ee      	bne.n	8003402 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a4 	beq.w	800357a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003432:	4b8b      	ldr	r3, [pc, #556]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10d      	bne.n	800345a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	4b88      	ldr	r3, [pc, #544]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a87      	ldr	r2, [pc, #540]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b85      	ldr	r3, [pc, #532]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345a:	4b82      	ldr	r3, [pc, #520]	; (8003664 <HAL_RCC_OscConfig+0x4d0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d118      	bne.n	8003498 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003466:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <HAL_RCC_OscConfig+0x4d0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a7e      	ldr	r2, [pc, #504]	; (8003664 <HAL_RCC_OscConfig+0x4d0>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7fe f8f9 	bl	8001668 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fe f8f5 	bl	8001668 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b64      	cmp	r3, #100	; 0x64
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e120      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348c:	4b75      	ldr	r3, [pc, #468]	; (8003664 <HAL_RCC_OscConfig+0x4d0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x31a>
 80034a0:	4b6f      	ldr	r3, [pc, #444]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a6e      	ldr	r2, [pc, #440]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	e02d      	b.n	800350a <HAL_RCC_OscConfig+0x376>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x33c>
 80034b6:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	4a69      	ldr	r2, [pc, #420]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6713      	str	r3, [r2, #112]	; 0x70
 80034c2:	4b67      	ldr	r3, [pc, #412]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	4a66      	ldr	r2, [pc, #408]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034c8:	f023 0304 	bic.w	r3, r3, #4
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70
 80034ce:	e01c      	b.n	800350a <HAL_RCC_OscConfig+0x376>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d10c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x35e>
 80034d8:	4b61      	ldr	r3, [pc, #388]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a60      	ldr	r2, [pc, #384]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a5d      	ldr	r2, [pc, #372]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e00b      	b.n	800350a <HAL_RCC_OscConfig+0x376>
 80034f2:	4b5b      	ldr	r3, [pc, #364]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a5a      	ldr	r2, [pc, #360]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
 80034fe:	4b58      	ldr	r3, [pc, #352]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a57      	ldr	r2, [pc, #348]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d015      	beq.n	800353e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7fe f8a9 	bl	8001668 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe f8a5 	bl	8001668 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0ce      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003530:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ee      	beq.n	800351a <HAL_RCC_OscConfig+0x386>
 800353c:	e014      	b.n	8003568 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353e:	f7fe f893 	bl	8001668 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe f88f 	bl	8001668 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	; 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0b8      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355c:	4b40      	ldr	r3, [pc, #256]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ee      	bne.n	8003546 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d105      	bne.n	800357a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356e:	4b3c      	ldr	r3, [pc, #240]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a3b      	ldr	r2, [pc, #236]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 80a4 	beq.w	80036cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003584:	4b36      	ldr	r3, [pc, #216]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d06b      	beq.n	8003668 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d149      	bne.n	800362c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b31      	ldr	r3, [pc, #196]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a30      	ldr	r2, [pc, #192]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 800359e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe f860 	bl	8001668 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe f85c 	bl	8001668 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e087      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	4b28      	ldr	r3, [pc, #160]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	3b01      	subs	r3, #1
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	4313      	orrs	r3, r2
 80035f0:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80035f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a18      	ldr	r2, [pc, #96]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 80035fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe f830 	bl	8001668 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fe f82c 	bl	8001668 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e057      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x478>
 800362a:	e04f      	b.n	80036cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe f816 	bl	8001668 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe f812 	bl	8001668 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e03d      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCC_OscConfig+0x4cc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x4ac>
 800365e:	e035      	b.n	80036cc <HAL_RCC_OscConfig+0x538>
 8003660:	40023800 	.word	0x40023800
 8003664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_RCC_OscConfig+0x544>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d028      	beq.n	80036c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d121      	bne.n	80036c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d11a      	bne.n	80036c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800369e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d111      	bne.n	80036c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	3b01      	subs	r3, #1
 80036b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800

080036dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0d0      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d910      	bls.n	8003724 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 020f 	bic.w	r2, r3, #15
 800370a:	4965      	ldr	r1, [pc, #404]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b63      	ldr	r3, [pc, #396]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0b8      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d020      	beq.n	8003772 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800373c:	4b59      	ldr	r3, [pc, #356]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a58      	ldr	r2, [pc, #352]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003742:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003746:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003754:	4b53      	ldr	r3, [pc, #332]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4a52      	ldr	r2, [pc, #328]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800375a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800375e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	494d      	ldr	r1, [pc, #308]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d040      	beq.n	8003800 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d115      	bne.n	80037be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e07f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e073      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06b      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037be:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4936      	ldr	r1, [pc, #216]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fd ff4a 	bl	8001668 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7fd ff46 	bl	8001668 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e053      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 020c 	and.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1eb      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003800:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d210      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 020f 	bic.w	r2, r3, #15
 8003816:	4922      	ldr	r1, [pc, #136]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e032      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4916      	ldr	r1, [pc, #88]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	490e      	ldr	r1, [pc, #56]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800386e:	f000 f821 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	490a      	ldr	r1, [pc, #40]	; (80038a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	fa22 f303 	lsr.w	r3, r2, r3
 8003886:	4a09      	ldr	r2, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x1d0>)
 8003888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x1d4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fd fea6 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023c00 	.word	0x40023c00
 80038a4:	40023800 	.word	0x40023800
 80038a8:	08007f38 	.word	0x08007f38
 80038ac:	20000008 	.word	0x20000008
 80038b0:	2000000c 	.word	0x2000000c

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b8:	b094      	sub	sp, #80	; 0x50
 80038ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	647b      	str	r3, [r7, #68]	; 0x44
 80038c0:	2300      	movs	r3, #0
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c4:	2300      	movs	r3, #0
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038cc:	4b79      	ldr	r3, [pc, #484]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d00d      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x40>
 80038d8:	2b08      	cmp	r3, #8
 80038da:	f200 80e1 	bhi.w	8003aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x34>
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d003      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x3a>
 80038e6:	e0db      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4b73      	ldr	r3, [pc, #460]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ec:	e0db      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ee:	4b73      	ldr	r3, [pc, #460]	; (8003abc <HAL_RCC_GetSysClockFreq+0x208>)
 80038f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f2:	e0d8      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f4:	4b6f      	ldr	r3, [pc, #444]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038fe:	4b6d      	ldr	r3, [pc, #436]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d063      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390a:	4b6a      	ldr	r3, [pc, #424]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	099b      	lsrs	r3, r3, #6
 8003910:	2200      	movs	r2, #0
 8003912:	63bb      	str	r3, [r7, #56]	; 0x38
 8003914:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391c:	633b      	str	r3, [r7, #48]	; 0x30
 800391e:	2300      	movs	r3, #0
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
 8003922:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003926:	4622      	mov	r2, r4
 8003928:	462b      	mov	r3, r5
 800392a:	f04f 0000 	mov.w	r0, #0
 800392e:	f04f 0100 	mov.w	r1, #0
 8003932:	0159      	lsls	r1, r3, #5
 8003934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003938:	0150      	lsls	r0, r2, #5
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4621      	mov	r1, r4
 8003940:	1a51      	subs	r1, r2, r1
 8003942:	6139      	str	r1, [r7, #16]
 8003944:	4629      	mov	r1, r5
 8003946:	eb63 0301 	sbc.w	r3, r3, r1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003958:	4659      	mov	r1, fp
 800395a:	018b      	lsls	r3, r1, #6
 800395c:	4651      	mov	r1, sl
 800395e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003962:	4651      	mov	r1, sl
 8003964:	018a      	lsls	r2, r1, #6
 8003966:	4651      	mov	r1, sl
 8003968:	ebb2 0801 	subs.w	r8, r2, r1
 800396c:	4659      	mov	r1, fp
 800396e:	eb63 0901 	sbc.w	r9, r3, r1
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800397e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003986:	4690      	mov	r8, r2
 8003988:	4699      	mov	r9, r3
 800398a:	4623      	mov	r3, r4
 800398c:	eb18 0303 	adds.w	r3, r8, r3
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	462b      	mov	r3, r5
 8003994:	eb49 0303 	adc.w	r3, r9, r3
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039a6:	4629      	mov	r1, r5
 80039a8:	024b      	lsls	r3, r1, #9
 80039aa:	4621      	mov	r1, r4
 80039ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039b0:	4621      	mov	r1, r4
 80039b2:	024a      	lsls	r2, r1, #9
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ba:	2200      	movs	r2, #0
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039c4:	f7fc fc7c 	bl	80002c0 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4613      	mov	r3, r2
 80039ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d0:	e058      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d2:	4b38      	ldr	r3, [pc, #224]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	2200      	movs	r2, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	4611      	mov	r1, r2
 80039de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039e2:	623b      	str	r3, [r7, #32]
 80039e4:	2300      	movs	r3, #0
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039ec:	4642      	mov	r2, r8
 80039ee:	464b      	mov	r3, r9
 80039f0:	f04f 0000 	mov.w	r0, #0
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	0159      	lsls	r1, r3, #5
 80039fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039fe:	0150      	lsls	r0, r2, #5
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4641      	mov	r1, r8
 8003a06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a24:	ebb2 040a 	subs.w	r4, r2, sl
 8003a28:	eb63 050b 	sbc.w	r5, r3, fp
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	00eb      	lsls	r3, r5, #3
 8003a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3a:	00e2      	lsls	r2, r4, #3
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	461d      	mov	r5, r3
 8003a40:	4643      	mov	r3, r8
 8003a42:	18e3      	adds	r3, r4, r3
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	464b      	mov	r3, r9
 8003a48:	eb45 0303 	adc.w	r3, r5, r3
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	028b      	lsls	r3, r1, #10
 8003a5e:	4621      	mov	r1, r4
 8003a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a64:	4621      	mov	r1, r4
 8003a66:	028a      	lsls	r2, r1, #10
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6e:	2200      	movs	r2, #0
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	61fa      	str	r2, [r7, #28]
 8003a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a78:	f7fc fc22 	bl	80002c0 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4613      	mov	r3, r2
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003a94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aa2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3750      	adds	r7, #80	; 0x50
 8003aac:	46bd      	mov	sp, r7
 8003aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	00f42400 	.word	0x00f42400
 8003abc:	007a1200 	.word	0x007a1200

08003ac0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000008 	.word	0x20000008

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003adc:	f7ff fff0 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0a9b      	lsrs	r3, r3, #10
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	08007f48 	.word	0x08007f48

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b04:	f7ff ffdc 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0b5b      	lsrs	r3, r3, #13
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	08007f48 	.word	0x08007f48

08003b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d012      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b50:	4b69      	ldr	r3, [pc, #420]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4a68      	ldr	r2, [pc, #416]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b5a:	6093      	str	r3, [r2, #8]
 8003b5c:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	4964      	ldr	r1, [pc, #400]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b72:	2301      	movs	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d017      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b82:	4b5d      	ldr	r3, [pc, #372]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	4959      	ldr	r1, [pc, #356]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d017      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bbe:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	494a      	ldr	r1, [pc, #296]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bde:	2301      	movs	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bea:	2301      	movs	r3, #1
 8003bec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 808b 	beq.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c0c:	4b3a      	ldr	r3, [pc, #232]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	4a39      	ldr	r2, [pc, #228]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	6413      	str	r3, [r2, #64]	; 0x40
 8003c18:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a34      	ldr	r2, [pc, #208]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd fd1a 	bl	8001668 <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c38:	f7fd fd16 	bl	8001668 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e357      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c56:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d035      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d02e      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c74:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c96:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c9c:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d114      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fcde 	bl	8001668 <HAL_GetTick>
 8003cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fd fcda 	bl	8001668 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e319      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0ee      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cde:	d111      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cee:	400b      	ands	r3, r1
 8003cf0:	4901      	ldr	r1, [pc, #4]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	0ffffcff 	.word	0x0ffffcff
 8003d04:	4baa      	ldr	r3, [pc, #680]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4aa9      	ldr	r2, [pc, #676]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d0e:	6093      	str	r3, [r2, #8]
 8003d10:	4ba7      	ldr	r3, [pc, #668]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1c:	49a4      	ldr	r1, [pc, #656]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d010      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d2e:	4ba0      	ldr	r3, [pc, #640]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d34:	4a9e      	ldr	r2, [pc, #632]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d3e:	4b9c      	ldr	r3, [pc, #624]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	4999      	ldr	r1, [pc, #612]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d5c:	4b94      	ldr	r3, [pc, #592]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6a:	4991      	ldr	r1, [pc, #580]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d7e:	4b8c      	ldr	r3, [pc, #560]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d8c:	4988      	ldr	r1, [pc, #544]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003da0:	4b83      	ldr	r3, [pc, #524]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dae:	4980      	ldr	r1, [pc, #512]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dc2:	4b7b      	ldr	r3, [pc, #492]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4977      	ldr	r1, [pc, #476]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de4:	4b72      	ldr	r3, [pc, #456]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f023 0203 	bic.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	496f      	ldr	r1, [pc, #444]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e06:	4b6a      	ldr	r3, [pc, #424]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f023 020c 	bic.w	r2, r3, #12
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e14:	4966      	ldr	r1, [pc, #408]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e28:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e36:	495e      	ldr	r1, [pc, #376]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e4a:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e58:	4955      	ldr	r1, [pc, #340]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e6c:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7a:	494d      	ldr	r1, [pc, #308]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e8e:	4b48      	ldr	r3, [pc, #288]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	4944      	ldr	r1, [pc, #272]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003eb0:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	493c      	ldr	r1, [pc, #240]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ed2:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	4933      	ldr	r1, [pc, #204]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f02:	492b      	ldr	r1, [pc, #172]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d011      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f16:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f24:	4922      	ldr	r1, [pc, #136]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f34:	d101      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f64:	4912      	ldr	r1, [pc, #72]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f88:	4909      	ldr	r1, [pc, #36]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d006      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80d9 	beq.w	8004156 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fa4:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a01      	ldr	r2, [pc, #4]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fae:	e001      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb6:	f7fd fb57 	bl	8001668 <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fbe:	f7fd fb53 	bl	8001668 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b64      	cmp	r3, #100	; 0x64
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e194      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd0:	4b6c      	ldr	r3, [pc, #432]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f0      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d021      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11d      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ff0:	4b64      	ldr	r3, [pc, #400]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ffe:	4b61      	ldr	r3, [pc, #388]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004004:	0e1b      	lsrs	r3, r3, #24
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	019a      	lsls	r2, r3, #6
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	431a      	orrs	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	061b      	lsls	r3, r3, #24
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	071b      	lsls	r3, r3, #28
 8004024:	4957      	ldr	r1, [pc, #348]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800404a:	2b00      	cmp	r3, #0
 800404c:	d02e      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004056:	d129      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004058:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800405a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004066:	4b47      	ldr	r3, [pc, #284]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406c:	0f1b      	lsrs	r3, r3, #28
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	019a      	lsls	r2, r3, #6
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	431a      	orrs	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	071b      	lsls	r3, r3, #28
 800408c:	493d      	ldr	r1, [pc, #244]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004094:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409a:	f023 021f 	bic.w	r2, r3, #31
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	3b01      	subs	r3, #1
 80040a4:	4937      	ldr	r1, [pc, #220]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01d      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040b8:	4b32      	ldr	r3, [pc, #200]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040be:	0e1b      	lsrs	r3, r3, #24
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040c6:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040cc:	0f1b      	lsrs	r3, r3, #28
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	019a      	lsls	r2, r3, #6
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	431a      	orrs	r2, r3
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	061b      	lsls	r3, r3, #24
 80040e6:	431a      	orrs	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	071b      	lsls	r3, r3, #28
 80040ec:	4925      	ldr	r1, [pc, #148]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d011      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	019a      	lsls	r2, r3, #6
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	071b      	lsls	r3, r3, #28
 800411c:	4919      	ldr	r1, [pc, #100]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004124:	4b17      	ldr	r3, [pc, #92]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a16      	ldr	r2, [pc, #88]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800412a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800412e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004130:	f7fd fa9a 	bl	8001668 <HAL_GetTick>
 8004134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004138:	f7fd fa96 	bl	8001668 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e0d7      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800414a:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b01      	cmp	r3, #1
 800415a:	f040 80cd 	bne.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a08      	ldr	r2, [pc, #32]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416a:	f7fd fa7d 	bl	8001668 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004170:	e00a      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004172:	f7fd fa79 	bl	8001668 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	; 0x64
 800417e:	d903      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0ba      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004184:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004188:	4b5e      	ldr	r3, [pc, #376]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004194:	d0ed      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02e      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d12a      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041be:	4b51      	ldr	r3, [pc, #324]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041cc:	4b4d      	ldr	r3, [pc, #308]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	0f1b      	lsrs	r3, r3, #28
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	019a      	lsls	r2, r3, #6
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	061b      	lsls	r3, r3, #24
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	071b      	lsls	r3, r3, #28
 80041f2:	4944      	ldr	r1, [pc, #272]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041fa:	4b42      	ldr	r3, [pc, #264]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004200:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	493d      	ldr	r1, [pc, #244]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d022      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004228:	d11d      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800422a:	4b36      	ldr	r3, [pc, #216]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	0e1b      	lsrs	r3, r3, #24
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004238:	4b32      	ldr	r3, [pc, #200]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	0f1b      	lsrs	r3, r3, #28
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	019a      	lsls	r2, r3, #6
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	041b      	lsls	r3, r3, #16
 8004252:	431a      	orrs	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	061b      	lsls	r3, r3, #24
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	071b      	lsls	r3, r3, #28
 800425e:	4929      	ldr	r1, [pc, #164]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d028      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	0e1b      	lsrs	r3, r3, #24
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004280:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	019a      	lsls	r2, r3, #6
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	041b      	lsls	r3, r3, #16
 8004298:	431a      	orrs	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	071b      	lsls	r3, r3, #28
 80042a6:	4917      	ldr	r1, [pc, #92]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ae:	4b15      	ldr	r3, [pc, #84]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4911      	ldr	r1, [pc, #68]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7fd f9ca 	bl	8001668 <HAL_GetTick>
 80042d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042d8:	f7fd f9c6 	bl	8001668 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e007      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f6:	d1ef      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800

08004308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e049      	b.n	80043ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fc ff54 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f000 fda0 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d001      	beq.n	80043d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e04c      	b.n	800446a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a26      	ldr	r2, [pc, #152]	; (8004478 <HAL_TIM_Base_Start+0xc0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d022      	beq.n	8004428 <HAL_TIM_Base_Start+0x70>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ea:	d01d      	beq.n	8004428 <HAL_TIM_Base_Start+0x70>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a22      	ldr	r2, [pc, #136]	; (800447c <HAL_TIM_Base_Start+0xc4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d018      	beq.n	8004428 <HAL_TIM_Base_Start+0x70>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a21      	ldr	r2, [pc, #132]	; (8004480 <HAL_TIM_Base_Start+0xc8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <HAL_TIM_Base_Start+0x70>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <HAL_TIM_Base_Start+0xcc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00e      	beq.n	8004428 <HAL_TIM_Base_Start+0x70>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <HAL_TIM_Base_Start+0xd0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_TIM_Base_Start+0x70>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1c      	ldr	r2, [pc, #112]	; (800448c <HAL_TIM_Base_Start+0xd4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_TIM_Base_Start+0x70>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1b      	ldr	r2, [pc, #108]	; (8004490 <HAL_TIM_Base_Start+0xd8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d115      	bne.n	8004454 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_TIM_Base_Start+0xdc>)
 8004430:	4013      	ands	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b06      	cmp	r3, #6
 8004438:	d015      	beq.n	8004466 <HAL_TIM_Base_Start+0xae>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004440:	d011      	beq.n	8004466 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0201 	orr.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004452:	e008      	b.n	8004466 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e000      	b.n	8004468 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004466:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40010400 	.word	0x40010400
 800448c:	40014000 	.word	0x40014000
 8004490:	40001800 	.word	0x40001800
 8004494:	00010007 	.word	0x00010007

08004498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d001      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e054      	b.n	800455a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <HAL_TIM_Base_Start_IT+0xd0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d022      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d01d      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a22      	ldr	r2, [pc, #136]	; (800456c <HAL_TIM_Base_Start_IT+0xd4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a21      	ldr	r2, [pc, #132]	; (8004570 <HAL_TIM_Base_Start_IT+0xd8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <HAL_TIM_Base_Start_IT+0xdc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_TIM_Base_Start_IT+0xe0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1c      	ldr	r2, [pc, #112]	; (800457c <HAL_TIM_Base_Start_IT+0xe4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <HAL_TIM_Base_Start_IT+0xe8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d115      	bne.n	8004544 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_TIM_Base_Start_IT+0xec>)
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b06      	cmp	r3, #6
 8004528:	d015      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004530:	d011      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	e008      	b.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e000      	b.n	8004558 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40010400 	.word	0x40010400
 800457c:	40014000 	.word	0x40014000
 8004580:	40001800 	.word	0x40001800
 8004584:	00010007 	.word	0x00010007

08004588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e049      	b.n	800462e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f841 	bl	8004636 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f000 fc60 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_TIM_PWM_Start+0x24>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e03c      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b04      	cmp	r3, #4
 8004674:	d109      	bne.n	800468a <HAL_TIM_PWM_Start+0x3e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	e02f      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d109      	bne.n	80046a4 <HAL_TIM_PWM_Start+0x58>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e022      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d109      	bne.n	80046be <HAL_TIM_PWM_Start+0x72>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	e015      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d109      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x8c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e008      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e092      	b.n	8004818 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0xb6>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004700:	e023      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0xc6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	e01b      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start+0xd6>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004720:	e013      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Start+0xe6>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004730:	e00b      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b10      	cmp	r3, #16
 8004736:	d104      	bne.n	8004742 <HAL_TIM_PWM_Start+0xf6>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004740:	e003      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2201      	movs	r2, #1
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 ff32 	bl	80055bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a30      	ldr	r2, [pc, #192]	; (8004820 <HAL_TIM_PWM_Start+0x1d4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_TIM_PWM_Start+0x120>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2f      	ldr	r2, [pc, #188]	; (8004824 <HAL_TIM_PWM_Start+0x1d8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <HAL_TIM_PWM_Start+0x124>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_TIM_PWM_Start+0x126>
 8004770:	2300      	movs	r3, #0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004784:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a25      	ldr	r2, [pc, #148]	; (8004820 <HAL_TIM_PWM_Start+0x1d4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d022      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x18a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004798:	d01d      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x18a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a22      	ldr	r2, [pc, #136]	; (8004828 <HAL_TIM_PWM_Start+0x1dc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d018      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x18a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a20      	ldr	r2, [pc, #128]	; (800482c <HAL_TIM_PWM_Start+0x1e0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x18a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_TIM_PWM_Start+0x1e4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x18a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a19      	ldr	r2, [pc, #100]	; (8004824 <HAL_TIM_PWM_Start+0x1d8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x18a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_TIM_PWM_Start+0x1e8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x18a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_TIM_PWM_Start+0x1ec>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d115      	bne.n	8004802 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <HAL_TIM_PWM_Start+0x1f0>)
 80047de:	4013      	ands	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d015      	beq.n	8004814 <HAL_TIM_PWM_Start+0x1c8>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ee:	d011      	beq.n	8004814 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004800:	e008      	b.n	8004814 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e000      	b.n	8004816 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004814:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40010000 	.word	0x40010000
 8004824:	40010400 	.word	0x40010400
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40014000 	.word	0x40014000
 8004838:	40001800 	.word	0x40001800
 800483c:	00010007 	.word	0x00010007

08004840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0202 	mvn.w	r2, #2
 800486c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fae4 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fad6 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fae7 	bl	8004e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d122      	bne.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d11b      	bne.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0204 	mvn.w	r2, #4
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 faba 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 faac 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fabd 	bl	8004e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d122      	bne.n	8004944 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d11b      	bne.n	8004944 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0208 	mvn.w	r2, #8
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2204      	movs	r2, #4
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa90 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fa82 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa93 	bl	8004e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b10      	cmp	r3, #16
 8004950:	d122      	bne.n	8004998 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b10      	cmp	r3, #16
 800495e:	d11b      	bne.n	8004998 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0210 	mvn.w	r2, #16
 8004968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2208      	movs	r2, #8
 800496e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fa66 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 8004984:	e005      	b.n	8004992 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa58 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fa69 	bl	8004e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10e      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0201 	mvn.w	r2, #1
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc f970 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d10e      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d107      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 ff22 	bl	8005834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fe:	d10e      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	2b80      	cmp	r3, #128	; 0x80
 8004a0c:	d107      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 ff15 	bl	8005848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d10e      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa17 	bl	8004e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d10e      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d107      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f06f 0220 	mvn.w	r2, #32
 8004a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fed5 	bl	8005820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e0ff      	b.n	8004c9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b14      	cmp	r3, #20
 8004aaa:	f200 80f0 	bhi.w	8004c8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004c8f 	.word	0x08004c8f
 8004abc:	08004c8f 	.word	0x08004c8f
 8004ac0:	08004c8f 	.word	0x08004c8f
 8004ac4:	08004b49 	.word	0x08004b49
 8004ac8:	08004c8f 	.word	0x08004c8f
 8004acc:	08004c8f 	.word	0x08004c8f
 8004ad0:	08004c8f 	.word	0x08004c8f
 8004ad4:	08004b8b 	.word	0x08004b8b
 8004ad8:	08004c8f 	.word	0x08004c8f
 8004adc:	08004c8f 	.word	0x08004c8f
 8004ae0:	08004c8f 	.word	0x08004c8f
 8004ae4:	08004bcb 	.word	0x08004bcb
 8004ae8:	08004c8f 	.word	0x08004c8f
 8004aec:	08004c8f 	.word	0x08004c8f
 8004af0:	08004c8f 	.word	0x08004c8f
 8004af4:	08004c0d 	.word	0x08004c0d
 8004af8:	08004c8f 	.word	0x08004c8f
 8004afc:	08004c8f 	.word	0x08004c8f
 8004b00:	08004c8f 	.word	0x08004c8f
 8004b04:	08004c4d 	.word	0x08004c4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fa5c 	bl	8004fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0208 	orr.w	r2, r2, #8
 8004b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6999      	ldr	r1, [r3, #24]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	619a      	str	r2, [r3, #24]
      break;
 8004b46:	e0a5      	b.n	8004c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 faae 	bl	80050b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6999      	ldr	r1, [r3, #24]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	021a      	lsls	r2, r3, #8
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	619a      	str	r2, [r3, #24]
      break;
 8004b88:	e084      	b.n	8004c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fb05 	bl	80051a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0208 	orr.w	r2, r2, #8
 8004ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0204 	bic.w	r2, r2, #4
 8004bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69d9      	ldr	r1, [r3, #28]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	61da      	str	r2, [r3, #28]
      break;
 8004bc8:	e064      	b.n	8004c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fb5b 	bl	800528c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69d9      	ldr	r1, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	021a      	lsls	r2, r3, #8
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	61da      	str	r2, [r3, #28]
      break;
 8004c0a:	e043      	b.n	8004c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fb92 	bl	800533c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0208 	orr.w	r2, r2, #8
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0204 	bic.w	r2, r2, #4
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c4a:	e023      	b.n	8004c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fbc4 	bl	80053e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	021a      	lsls	r2, r3, #8
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c8c:	e002      	b.n	8004c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
      break;
 8004c92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop

08004ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e0b4      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x186>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	4b56      	ldr	r3, [pc, #344]	; (8004e38 <HAL_TIM_ConfigClockSource+0x190>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfc:	d03e      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0xd4>
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d02:	f200 8087 	bhi.w	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0a:	f000 8086 	beq.w	8004e1a <HAL_TIM_ConfigClockSource+0x172>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d12:	d87f      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b70      	cmp	r3, #112	; 0x70
 8004d16:	d01a      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xa6>
 8004d18:	2b70      	cmp	r3, #112	; 0x70
 8004d1a:	d87b      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b60      	cmp	r3, #96	; 0x60
 8004d1e:	d050      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d20:	2b60      	cmp	r3, #96	; 0x60
 8004d22:	d877      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b50      	cmp	r3, #80	; 0x50
 8004d26:	d03c      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d28:	2b50      	cmp	r3, #80	; 0x50
 8004d2a:	d873      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d058      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d86f      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b30      	cmp	r3, #48	; 0x30
 8004d36:	d064      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d38:	2b30      	cmp	r3, #48	; 0x30
 8004d3a:	d86b      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d060      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d867      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d05c      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d05a      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d4c:	e062      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f000 fc0d 	bl	800557c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	609a      	str	r2, [r3, #8]
      break;
 8004d7a:	e04f      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6899      	ldr	r1, [r3, #8]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f000 fbf6 	bl	800557c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d9e:	609a      	str	r2, [r3, #8]
      break;
 8004da0:	e03c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 fb6a 	bl	8005488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2150      	movs	r1, #80	; 0x50
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fbc3 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e02c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 fb89 	bl	80054e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2160      	movs	r1, #96	; 0x60
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fbb3 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 8004de0:	e01c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f000 fb4a 	bl	8005488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2140      	movs	r1, #64	; 0x40
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fba3 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 8004e00:	e00c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f000 fb9a 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 8004e12:	e003      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      break;
 8004e18:	e000      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	fffeff88 	.word	0xfffeff88

08004e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a40      	ldr	r2, [pc, #256]	; (8004fa0 <TIM_Base_SetConfig+0x114>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d00f      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a3d      	ldr	r2, [pc, #244]	; (8004fa4 <TIM_Base_SetConfig+0x118>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3c      	ldr	r2, [pc, #240]	; (8004fa8 <TIM_Base_SetConfig+0x11c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d007      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a3b      	ldr	r2, [pc, #236]	; (8004fac <TIM_Base_SetConfig+0x120>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a3a      	ldr	r2, [pc, #232]	; (8004fb0 <TIM_Base_SetConfig+0x124>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d108      	bne.n	8004ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a2f      	ldr	r2, [pc, #188]	; (8004fa0 <TIM_Base_SetConfig+0x114>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d02b      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eec:	d027      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a2c      	ldr	r2, [pc, #176]	; (8004fa4 <TIM_Base_SetConfig+0x118>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d023      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2b      	ldr	r2, [pc, #172]	; (8004fa8 <TIM_Base_SetConfig+0x11c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01f      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2a      	ldr	r2, [pc, #168]	; (8004fac <TIM_Base_SetConfig+0x120>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01b      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a29      	ldr	r2, [pc, #164]	; (8004fb0 <TIM_Base_SetConfig+0x124>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d017      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a28      	ldr	r2, [pc, #160]	; (8004fb4 <TIM_Base_SetConfig+0x128>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a27      	ldr	r2, [pc, #156]	; (8004fb8 <TIM_Base_SetConfig+0x12c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00f      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a26      	ldr	r2, [pc, #152]	; (8004fbc <TIM_Base_SetConfig+0x130>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00b      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <TIM_Base_SetConfig+0x134>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a24      	ldr	r2, [pc, #144]	; (8004fc4 <TIM_Base_SetConfig+0x138>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a23      	ldr	r2, [pc, #140]	; (8004fc8 <TIM_Base_SetConfig+0x13c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a0a      	ldr	r2, [pc, #40]	; (8004fa0 <TIM_Base_SetConfig+0x114>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0xf8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <TIM_Base_SetConfig+0x124>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d103      	bne.n	8004f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	615a      	str	r2, [r3, #20]
}
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40000c00 	.word	0x40000c00
 8004fb0:	40010400 	.word	0x40010400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	40014800 	.word	0x40014800
 8004fc0:	40001800 	.word	0x40001800
 8004fc4:	40001c00 	.word	0x40001c00
 8004fc8:	40002000 	.word	0x40002000

08004fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f023 0201 	bic.w	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4b2b      	ldr	r3, [pc, #172]	; (80050a4 <TIM_OC1_SetConfig+0xd8>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0303 	bic.w	r3, r3, #3
 8005002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f023 0302 	bic.w	r3, r3, #2
 8005014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a21      	ldr	r2, [pc, #132]	; (80050a8 <TIM_OC1_SetConfig+0xdc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_OC1_SetConfig+0x64>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a20      	ldr	r2, [pc, #128]	; (80050ac <TIM_OC1_SetConfig+0xe0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d10c      	bne.n	800504a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f023 0308 	bic.w	r3, r3, #8
 8005036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <TIM_OC1_SetConfig+0xdc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_OC1_SetConfig+0x8e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <TIM_OC1_SetConfig+0xe0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d111      	bne.n	800507e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	621a      	str	r2, [r3, #32]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	fffeff8f 	.word	0xfffeff8f
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40010400 	.word	0x40010400

080050b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <TIM_OC2_SetConfig+0xe4>)
 80050dc:	4013      	ands	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0320 	bic.w	r3, r3, #32
 80050fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a23      	ldr	r2, [pc, #140]	; (8005198 <TIM_OC2_SetConfig+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_OC2_SetConfig+0x68>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a22      	ldr	r2, [pc, #136]	; (800519c <TIM_OC2_SetConfig+0xec>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d10d      	bne.n	8005134 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800511e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005132:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a18      	ldr	r2, [pc, #96]	; (8005198 <TIM_OC2_SetConfig+0xe8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_OC2_SetConfig+0x94>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <TIM_OC2_SetConfig+0xec>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d113      	bne.n	800516c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800514a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	feff8fff 	.word	0xfeff8fff
 8005198:	40010000 	.word	0x40010000
 800519c:	40010400 	.word	0x40010400

080051a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4b2d      	ldr	r3, [pc, #180]	; (8005280 <TIM_OC3_SetConfig+0xe0>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a22      	ldr	r2, [pc, #136]	; (8005284 <TIM_OC3_SetConfig+0xe4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_OC3_SetConfig+0x66>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a21      	ldr	r2, [pc, #132]	; (8005288 <TIM_OC3_SetConfig+0xe8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d10d      	bne.n	8005222 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800520c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a17      	ldr	r2, [pc, #92]	; (8005284 <TIM_OC3_SetConfig+0xe4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_OC3_SetConfig+0x92>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a16      	ldr	r2, [pc, #88]	; (8005288 <TIM_OC3_SetConfig+0xe8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d113      	bne.n	800525a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	fffeff8f 	.word	0xfffeff8f
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400

0800528c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <TIM_OC4_SetConfig+0xa4>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a13      	ldr	r2, [pc, #76]	; (8005334 <TIM_OC4_SetConfig+0xa8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_OC4_SetConfig+0x68>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a12      	ldr	r2, [pc, #72]	; (8005338 <TIM_OC4_SetConfig+0xac>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d109      	bne.n	8005308 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	019b      	lsls	r3, r3, #6
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	feff8fff 	.word	0xfeff8fff
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400

0800533c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <TIM_OC5_SetConfig+0x98>)
 8005368:	4013      	ands	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800537c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	041b      	lsls	r3, r3, #16
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <TIM_OC5_SetConfig+0x9c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_OC5_SetConfig+0x5e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a11      	ldr	r2, [pc, #68]	; (80053dc <TIM_OC5_SetConfig+0xa0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d109      	bne.n	80053ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	621a      	str	r2, [r3, #32]
}
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	fffeff8f 	.word	0xfffeff8f
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010400 	.word	0x40010400

080053e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4b1c      	ldr	r3, [pc, #112]	; (800547c <TIM_OC6_SetConfig+0x9c>)
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	051b      	lsls	r3, r3, #20
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a13      	ldr	r2, [pc, #76]	; (8005480 <TIM_OC6_SetConfig+0xa0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_OC6_SetConfig+0x60>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a12      	ldr	r2, [pc, #72]	; (8005484 <TIM_OC6_SetConfig+0xa4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d109      	bne.n	8005454 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005446:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	029b      	lsls	r3, r3, #10
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	feff8fff 	.word	0xfeff8fff
 8005480:	40010000 	.word	0x40010000
 8005484:	40010400 	.word	0x40010400

08005488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0201 	bic.w	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 030a 	bic.w	r3, r3, #10
 80054c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0210 	bic.w	r2, r3, #16
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	031b      	lsls	r3, r3, #12
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	f043 0307 	orr.w	r3, r3, #7
 8005568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	609a      	str	r2, [r3, #8]
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	021a      	lsls	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	431a      	orrs	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	609a      	str	r2, [r3, #8]
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	2201      	movs	r2, #1
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1a      	ldr	r2, [r3, #32]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	fa01 f303 	lsl.w	r3, r1, r3
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800561c:	2302      	movs	r3, #2
 800561e:	e06d      	b.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a30      	ldr	r2, [pc, #192]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2f      	ldr	r2, [pc, #188]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d108      	bne.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800565a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a20      	ldr	r2, [pc, #128]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d022      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005692:	d01d      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1d      	ldr	r2, [pc, #116]	; (8005710 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d018      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1a      	ldr	r2, [pc, #104]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a15      	ldr	r2, [pc, #84]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d009      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a15      	ldr	r2, [pc, #84]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10c      	bne.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400
 8005710:	40000400 	.word	0x40000400
 8005714:	40000800 	.word	0x40000800
 8005718:	40000c00 	.word	0x40000c00
 800571c:	40014000 	.word	0x40014000
 8005720:	40001800 	.word	0x40001800

08005724 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800573c:	2302      	movs	r3, #2
 800573e:	e065      	b.n	800580c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a16      	ldr	r2, [pc, #88]	; (8005818 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a14      	ldr	r2, [pc, #80]	; (800581c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d115      	bne.n	80057fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	051b      	lsls	r3, r3, #20
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	40010000 	.word	0x40010000
 800581c:	40010400 	.word	0x40010400

08005820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e040      	b.n	80058f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fd68 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fbe6 	bl	800606c <UART_SetConfig>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e022      	b.n	80058f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fe3e 	bl	8006534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fec5 	bl	8006678 <UART_CheckIdleState>
 80058ee:	4603      	mov	r3, r0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800590c:	2b20      	cmp	r3, #32
 800590e:	d171      	bne.n	80059f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_UART_Transmit+0x24>
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e06a      	b.n	80059f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2221      	movs	r2, #33	; 0x21
 800592c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800592e:	f7fb fe9b 	bl	8001668 <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594c:	d108      	bne.n	8005960 <HAL_UART_Transmit+0x68>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	e003      	b.n	8005968 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005964:	2300      	movs	r3, #0
 8005966:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005968:	e02c      	b.n	80059c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2200      	movs	r2, #0
 8005972:	2180      	movs	r1, #128	; 0x80
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 feb6 	bl	80066e6 <UART_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e038      	b.n	80059f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005998:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	3302      	adds	r3, #2
 800599e:	61bb      	str	r3, [r7, #24]
 80059a0:	e007      	b.n	80059b2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	3301      	adds	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1cc      	bne.n	800596a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2200      	movs	r2, #0
 80059d8:	2140      	movs	r1, #64	; 0x40
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fe83 	bl	80066e6 <UART_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e005      	b.n	80059f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3720      	adds	r7, #32
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b08a      	sub	sp, #40	; 0x28
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d132      	bne.n	8005a7c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_UART_Receive_IT+0x24>
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e02b      	b.n	8005a7e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d018      	beq.n	8005a6c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	613b      	str	r3, [r7, #16]
   return(result);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	69f9      	ldr	r1, [r7, #28]
 8005a5e:	6a3a      	ldr	r2, [r7, #32]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e6      	bne.n	8005a3a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fefe 	bl	8006874 <UART_Start_Receive_IT>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	e000      	b.n	8005a7e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3728      	adds	r7, #40	; 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b0ba      	sub	sp, #232	; 0xe8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ab2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d115      	bne.n	8005af0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00f      	beq.n	8005af0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8297 	beq.w	8006014 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
      }
      return;
 8005aee:	e291      	b.n	8006014 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8117 	beq.w	8005d28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b0a:	4b85      	ldr	r3, [pc, #532]	; (8005d20 <HAL_UART_IRQHandler+0x298>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 810a 	beq.w	8005d28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d011      	beq.n	8005b44 <HAL_UART_IRQHandler+0xbc>
 8005b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2201      	movs	r2, #1
 8005b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	f043 0201 	orr.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d011      	beq.n	8005b74 <HAL_UART_IRQHandler+0xec>
 8005b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2202      	movs	r2, #2
 8005b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6a:	f043 0204 	orr.w	r2, r3, #4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d011      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x11c>
 8005b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2204      	movs	r2, #4
 8005b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9a:	f043 0202 	orr.w	r2, r3, #2
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d017      	beq.n	8005be0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2208      	movs	r2, #8
 8005bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd6:	f043 0208 	orr.w	r2, r3, #8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d012      	beq.n	8005c12 <HAL_UART_IRQHandler+0x18a>
 8005bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00c      	beq.n	8005c12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 81fd 	beq.w	8006018 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00d      	beq.n	8005c46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d04f      	beq.n	8005d0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fec8 	bl	8006a00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d141      	bne.n	8005d02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1d9      	bne.n	8005c7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d013      	beq.n	8005cfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <HAL_UART_IRQHandler+0x29c>)
 8005cd8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fb fe73 	bl	80019ca <HAL_DMA_Abort_IT>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d017      	beq.n	8005d1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	e00f      	b.n	8005d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f9a0 	bl	8006040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	e00b      	b.n	8005d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f99c 	bl	8006040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	e007      	b.n	8005d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f998 	bl	8006040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005d18:	e17e      	b.n	8006018 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1a:	bf00      	nop
    return;
 8005d1c:	e17c      	b.n	8006018 <HAL_UART_IRQHandler+0x590>
 8005d1e:	bf00      	nop
 8005d20:	04000120 	.word	0x04000120
 8005d24:	08006ac9 	.word	0x08006ac9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	f040 814c 	bne.w	8005fca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8145 	beq.w	8005fca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 813e 	beq.w	8005fca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2210      	movs	r2, #16
 8005d54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	f040 80b6 	bne.w	8005ed2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8150 	beq.w	800601c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d86:	429a      	cmp	r2, r3
 8005d88:	f080 8148 	bcs.w	800601c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da0:	f000 8086 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1da      	bne.n	8005da4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e1      	bne.n	8005dee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e3      	bne.n	8005e2a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e80:	f023 0310 	bic.w	r3, r3, #16
 8005e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e4      	bne.n	8005e70 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fb fd1d 	bl	80018ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f8c2 	bl	8006054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ed0:	e0a4      	b.n	800601c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8096 	beq.w	8006020 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8091 	beq.w	8006020 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f20:	647b      	str	r3, [r7, #68]	; 0x44
 8005f22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e4      	bne.n	8005efe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	623b      	str	r3, [r7, #32]
   return(result);
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f58:	633a      	str	r2, [r7, #48]	; 0x30
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e3      	bne.n	8005f34 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e4      	bne.n	8005f80 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f846 	bl	8006054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fc8:	e02a      	b.n	8006020 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01c      	beq.n	8006024 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
    }
    return;
 8005ff2:	e017      	b.n	8006024 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <HAL_UART_IRQHandler+0x59e>
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00c      	beq.n	8006026 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fd71 	bl	8006af4 <UART_EndTransmit_IT>
    return;
 8006012:	e008      	b.n	8006026 <HAL_UART_IRQHandler+0x59e>
      return;
 8006014:	bf00      	nop
 8006016:	e006      	b.n	8006026 <HAL_UART_IRQHandler+0x59e>
    return;
 8006018:	bf00      	nop
 800601a:	e004      	b.n	8006026 <HAL_UART_IRQHandler+0x59e>
      return;
 800601c:	bf00      	nop
 800601e:	e002      	b.n	8006026 <HAL_UART_IRQHandler+0x59e>
      return;
 8006020:	bf00      	nop
 8006022:	e000      	b.n	8006026 <HAL_UART_IRQHandler+0x59e>
    return;
 8006024:	bf00      	nop
  }

}
 8006026:	37e8      	adds	r7, #232	; 0xe8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	4ba6      	ldr	r3, [pc, #664]	; (8006330 <UART_SetConfig+0x2c4>)
 8006098:	4013      	ands	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6812      	ldr	r2, [r2, #0]
 800609e:	6979      	ldr	r1, [r7, #20]
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	430a      	orrs	r2, r1
 80060dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a94      	ldr	r2, [pc, #592]	; (8006334 <UART_SetConfig+0x2c8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d120      	bne.n	800612a <UART_SetConfig+0xbe>
 80060e8:	4b93      	ldr	r3, [pc, #588]	; (8006338 <UART_SetConfig+0x2cc>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d816      	bhi.n	8006124 <UART_SetConfig+0xb8>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <UART_SetConfig+0x90>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	0800610d 	.word	0x0800610d
 8006100:	08006119 	.word	0x08006119
 8006104:	08006113 	.word	0x08006113
 8006108:	0800611f 	.word	0x0800611f
 800610c:	2301      	movs	r3, #1
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e150      	b.n	80063b4 <UART_SetConfig+0x348>
 8006112:	2302      	movs	r3, #2
 8006114:	77fb      	strb	r3, [r7, #31]
 8006116:	e14d      	b.n	80063b4 <UART_SetConfig+0x348>
 8006118:	2304      	movs	r3, #4
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e14a      	b.n	80063b4 <UART_SetConfig+0x348>
 800611e:	2308      	movs	r3, #8
 8006120:	77fb      	strb	r3, [r7, #31]
 8006122:	e147      	b.n	80063b4 <UART_SetConfig+0x348>
 8006124:	2310      	movs	r3, #16
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e144      	b.n	80063b4 <UART_SetConfig+0x348>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a83      	ldr	r2, [pc, #524]	; (800633c <UART_SetConfig+0x2d0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d132      	bne.n	800619a <UART_SetConfig+0x12e>
 8006134:	4b80      	ldr	r3, [pc, #512]	; (8006338 <UART_SetConfig+0x2cc>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	2b0c      	cmp	r3, #12
 8006140:	d828      	bhi.n	8006194 <UART_SetConfig+0x128>
 8006142:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <UART_SetConfig+0xdc>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	0800617d 	.word	0x0800617d
 800614c:	08006195 	.word	0x08006195
 8006150:	08006195 	.word	0x08006195
 8006154:	08006195 	.word	0x08006195
 8006158:	08006189 	.word	0x08006189
 800615c:	08006195 	.word	0x08006195
 8006160:	08006195 	.word	0x08006195
 8006164:	08006195 	.word	0x08006195
 8006168:	08006183 	.word	0x08006183
 800616c:	08006195 	.word	0x08006195
 8006170:	08006195 	.word	0x08006195
 8006174:	08006195 	.word	0x08006195
 8006178:	0800618f 	.word	0x0800618f
 800617c:	2300      	movs	r3, #0
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e118      	b.n	80063b4 <UART_SetConfig+0x348>
 8006182:	2302      	movs	r3, #2
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e115      	b.n	80063b4 <UART_SetConfig+0x348>
 8006188:	2304      	movs	r3, #4
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e112      	b.n	80063b4 <UART_SetConfig+0x348>
 800618e:	2308      	movs	r3, #8
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e10f      	b.n	80063b4 <UART_SetConfig+0x348>
 8006194:	2310      	movs	r3, #16
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e10c      	b.n	80063b4 <UART_SetConfig+0x348>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a68      	ldr	r2, [pc, #416]	; (8006340 <UART_SetConfig+0x2d4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d120      	bne.n	80061e6 <UART_SetConfig+0x17a>
 80061a4:	4b64      	ldr	r3, [pc, #400]	; (8006338 <UART_SetConfig+0x2cc>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061ae:	2b30      	cmp	r3, #48	; 0x30
 80061b0:	d013      	beq.n	80061da <UART_SetConfig+0x16e>
 80061b2:	2b30      	cmp	r3, #48	; 0x30
 80061b4:	d814      	bhi.n	80061e0 <UART_SetConfig+0x174>
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d009      	beq.n	80061ce <UART_SetConfig+0x162>
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d810      	bhi.n	80061e0 <UART_SetConfig+0x174>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <UART_SetConfig+0x15c>
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d006      	beq.n	80061d4 <UART_SetConfig+0x168>
 80061c6:	e00b      	b.n	80061e0 <UART_SetConfig+0x174>
 80061c8:	2300      	movs	r3, #0
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e0f2      	b.n	80063b4 <UART_SetConfig+0x348>
 80061ce:	2302      	movs	r3, #2
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e0ef      	b.n	80063b4 <UART_SetConfig+0x348>
 80061d4:	2304      	movs	r3, #4
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e0ec      	b.n	80063b4 <UART_SetConfig+0x348>
 80061da:	2308      	movs	r3, #8
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e0e9      	b.n	80063b4 <UART_SetConfig+0x348>
 80061e0:	2310      	movs	r3, #16
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e0e6      	b.n	80063b4 <UART_SetConfig+0x348>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a56      	ldr	r2, [pc, #344]	; (8006344 <UART_SetConfig+0x2d8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d120      	bne.n	8006232 <UART_SetConfig+0x1c6>
 80061f0:	4b51      	ldr	r3, [pc, #324]	; (8006338 <UART_SetConfig+0x2cc>)
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061fa:	2bc0      	cmp	r3, #192	; 0xc0
 80061fc:	d013      	beq.n	8006226 <UART_SetConfig+0x1ba>
 80061fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006200:	d814      	bhi.n	800622c <UART_SetConfig+0x1c0>
 8006202:	2b80      	cmp	r3, #128	; 0x80
 8006204:	d009      	beq.n	800621a <UART_SetConfig+0x1ae>
 8006206:	2b80      	cmp	r3, #128	; 0x80
 8006208:	d810      	bhi.n	800622c <UART_SetConfig+0x1c0>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <UART_SetConfig+0x1a8>
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d006      	beq.n	8006220 <UART_SetConfig+0x1b4>
 8006212:	e00b      	b.n	800622c <UART_SetConfig+0x1c0>
 8006214:	2300      	movs	r3, #0
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e0cc      	b.n	80063b4 <UART_SetConfig+0x348>
 800621a:	2302      	movs	r3, #2
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e0c9      	b.n	80063b4 <UART_SetConfig+0x348>
 8006220:	2304      	movs	r3, #4
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e0c6      	b.n	80063b4 <UART_SetConfig+0x348>
 8006226:	2308      	movs	r3, #8
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e0c3      	b.n	80063b4 <UART_SetConfig+0x348>
 800622c:	2310      	movs	r3, #16
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e0c0      	b.n	80063b4 <UART_SetConfig+0x348>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a44      	ldr	r2, [pc, #272]	; (8006348 <UART_SetConfig+0x2dc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d125      	bne.n	8006288 <UART_SetConfig+0x21c>
 800623c:	4b3e      	ldr	r3, [pc, #248]	; (8006338 <UART_SetConfig+0x2cc>)
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800624a:	d017      	beq.n	800627c <UART_SetConfig+0x210>
 800624c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006250:	d817      	bhi.n	8006282 <UART_SetConfig+0x216>
 8006252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006256:	d00b      	beq.n	8006270 <UART_SetConfig+0x204>
 8006258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800625c:	d811      	bhi.n	8006282 <UART_SetConfig+0x216>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <UART_SetConfig+0x1fe>
 8006262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006266:	d006      	beq.n	8006276 <UART_SetConfig+0x20a>
 8006268:	e00b      	b.n	8006282 <UART_SetConfig+0x216>
 800626a:	2300      	movs	r3, #0
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e0a1      	b.n	80063b4 <UART_SetConfig+0x348>
 8006270:	2302      	movs	r3, #2
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e09e      	b.n	80063b4 <UART_SetConfig+0x348>
 8006276:	2304      	movs	r3, #4
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e09b      	b.n	80063b4 <UART_SetConfig+0x348>
 800627c:	2308      	movs	r3, #8
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e098      	b.n	80063b4 <UART_SetConfig+0x348>
 8006282:	2310      	movs	r3, #16
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e095      	b.n	80063b4 <UART_SetConfig+0x348>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2f      	ldr	r2, [pc, #188]	; (800634c <UART_SetConfig+0x2e0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d125      	bne.n	80062de <UART_SetConfig+0x272>
 8006292:	4b29      	ldr	r3, [pc, #164]	; (8006338 <UART_SetConfig+0x2cc>)
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800629c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a0:	d017      	beq.n	80062d2 <UART_SetConfig+0x266>
 80062a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a6:	d817      	bhi.n	80062d8 <UART_SetConfig+0x26c>
 80062a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ac:	d00b      	beq.n	80062c6 <UART_SetConfig+0x25a>
 80062ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b2:	d811      	bhi.n	80062d8 <UART_SetConfig+0x26c>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <UART_SetConfig+0x254>
 80062b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062bc:	d006      	beq.n	80062cc <UART_SetConfig+0x260>
 80062be:	e00b      	b.n	80062d8 <UART_SetConfig+0x26c>
 80062c0:	2301      	movs	r3, #1
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e076      	b.n	80063b4 <UART_SetConfig+0x348>
 80062c6:	2302      	movs	r3, #2
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e073      	b.n	80063b4 <UART_SetConfig+0x348>
 80062cc:	2304      	movs	r3, #4
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e070      	b.n	80063b4 <UART_SetConfig+0x348>
 80062d2:	2308      	movs	r3, #8
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e06d      	b.n	80063b4 <UART_SetConfig+0x348>
 80062d8:	2310      	movs	r3, #16
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e06a      	b.n	80063b4 <UART_SetConfig+0x348>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <UART_SetConfig+0x2e4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d138      	bne.n	800635a <UART_SetConfig+0x2ee>
 80062e8:	4b13      	ldr	r3, [pc, #76]	; (8006338 <UART_SetConfig+0x2cc>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80062f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062f6:	d017      	beq.n	8006328 <UART_SetConfig+0x2bc>
 80062f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062fc:	d82a      	bhi.n	8006354 <UART_SetConfig+0x2e8>
 80062fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006302:	d00b      	beq.n	800631c <UART_SetConfig+0x2b0>
 8006304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006308:	d824      	bhi.n	8006354 <UART_SetConfig+0x2e8>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <UART_SetConfig+0x2aa>
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006312:	d006      	beq.n	8006322 <UART_SetConfig+0x2b6>
 8006314:	e01e      	b.n	8006354 <UART_SetConfig+0x2e8>
 8006316:	2300      	movs	r3, #0
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e04b      	b.n	80063b4 <UART_SetConfig+0x348>
 800631c:	2302      	movs	r3, #2
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e048      	b.n	80063b4 <UART_SetConfig+0x348>
 8006322:	2304      	movs	r3, #4
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e045      	b.n	80063b4 <UART_SetConfig+0x348>
 8006328:	2308      	movs	r3, #8
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e042      	b.n	80063b4 <UART_SetConfig+0x348>
 800632e:	bf00      	nop
 8006330:	efff69f3 	.word	0xefff69f3
 8006334:	40011000 	.word	0x40011000
 8006338:	40023800 	.word	0x40023800
 800633c:	40004400 	.word	0x40004400
 8006340:	40004800 	.word	0x40004800
 8006344:	40004c00 	.word	0x40004c00
 8006348:	40005000 	.word	0x40005000
 800634c:	40011400 	.word	0x40011400
 8006350:	40007800 	.word	0x40007800
 8006354:	2310      	movs	r3, #16
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e02c      	b.n	80063b4 <UART_SetConfig+0x348>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a72      	ldr	r2, [pc, #456]	; (8006528 <UART_SetConfig+0x4bc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d125      	bne.n	80063b0 <UART_SetConfig+0x344>
 8006364:	4b71      	ldr	r3, [pc, #452]	; (800652c <UART_SetConfig+0x4c0>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800636e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006372:	d017      	beq.n	80063a4 <UART_SetConfig+0x338>
 8006374:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006378:	d817      	bhi.n	80063aa <UART_SetConfig+0x33e>
 800637a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637e:	d00b      	beq.n	8006398 <UART_SetConfig+0x32c>
 8006380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006384:	d811      	bhi.n	80063aa <UART_SetConfig+0x33e>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <UART_SetConfig+0x326>
 800638a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800638e:	d006      	beq.n	800639e <UART_SetConfig+0x332>
 8006390:	e00b      	b.n	80063aa <UART_SetConfig+0x33e>
 8006392:	2300      	movs	r3, #0
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e00d      	b.n	80063b4 <UART_SetConfig+0x348>
 8006398:	2302      	movs	r3, #2
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e00a      	b.n	80063b4 <UART_SetConfig+0x348>
 800639e:	2304      	movs	r3, #4
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e007      	b.n	80063b4 <UART_SetConfig+0x348>
 80063a4:	2308      	movs	r3, #8
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e004      	b.n	80063b4 <UART_SetConfig+0x348>
 80063aa:	2310      	movs	r3, #16
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e001      	b.n	80063b4 <UART_SetConfig+0x348>
 80063b0:	2310      	movs	r3, #16
 80063b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063bc:	d15b      	bne.n	8006476 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80063be:	7ffb      	ldrb	r3, [r7, #31]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d828      	bhi.n	8006416 <UART_SetConfig+0x3aa>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <UART_SetConfig+0x360>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f9 	.word	0x080063f9
 80063d4:	08006401 	.word	0x08006401
 80063d8:	08006417 	.word	0x08006417
 80063dc:	08006407 	.word	0x08006407
 80063e0:	08006417 	.word	0x08006417
 80063e4:	08006417 	.word	0x08006417
 80063e8:	08006417 	.word	0x08006417
 80063ec:	0800640f 	.word	0x0800640f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f0:	f7fd fb72 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 80063f4:	61b8      	str	r0, [r7, #24]
        break;
 80063f6:	e013      	b.n	8006420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7fd fb82 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 80063fc:	61b8      	str	r0, [r7, #24]
        break;
 80063fe:	e00f      	b.n	8006420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006400:	4b4b      	ldr	r3, [pc, #300]	; (8006530 <UART_SetConfig+0x4c4>)
 8006402:	61bb      	str	r3, [r7, #24]
        break;
 8006404:	e00c      	b.n	8006420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006406:	f7fd fa55 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800640a:	61b8      	str	r0, [r7, #24]
        break;
 800640c:	e008      	b.n	8006420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006412:	61bb      	str	r3, [r7, #24]
        break;
 8006414:	e004      	b.n	8006420 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	77bb      	strb	r3, [r7, #30]
        break;
 800641e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d074      	beq.n	8006510 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	005a      	lsls	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	441a      	add	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	fbb2 f3f3 	udiv	r3, r2, r3
 800643a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b0f      	cmp	r3, #15
 8006440:	d916      	bls.n	8006470 <UART_SetConfig+0x404>
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006448:	d212      	bcs.n	8006470 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f023 030f 	bic.w	r3, r3, #15
 8006452:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	b29b      	uxth	r3, r3
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	b29a      	uxth	r2, r3
 8006460:	89fb      	ldrh	r3, [r7, #14]
 8006462:	4313      	orrs	r3, r2
 8006464:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	89fa      	ldrh	r2, [r7, #14]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	e04f      	b.n	8006510 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	77bb      	strb	r3, [r7, #30]
 8006474:	e04c      	b.n	8006510 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006476:	7ffb      	ldrb	r3, [r7, #31]
 8006478:	2b08      	cmp	r3, #8
 800647a:	d828      	bhi.n	80064ce <UART_SetConfig+0x462>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <UART_SetConfig+0x418>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064a9 	.word	0x080064a9
 8006488:	080064b1 	.word	0x080064b1
 800648c:	080064b9 	.word	0x080064b9
 8006490:	080064cf 	.word	0x080064cf
 8006494:	080064bf 	.word	0x080064bf
 8006498:	080064cf 	.word	0x080064cf
 800649c:	080064cf 	.word	0x080064cf
 80064a0:	080064cf 	.word	0x080064cf
 80064a4:	080064c7 	.word	0x080064c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a8:	f7fd fb16 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 80064ac:	61b8      	str	r0, [r7, #24]
        break;
 80064ae:	e013      	b.n	80064d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b0:	f7fd fb26 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 80064b4:	61b8      	str	r0, [r7, #24]
        break;
 80064b6:	e00f      	b.n	80064d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b8:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <UART_SetConfig+0x4c4>)
 80064ba:	61bb      	str	r3, [r7, #24]
        break;
 80064bc:	e00c      	b.n	80064d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064be:	f7fd f9f9 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 80064c2:	61b8      	str	r0, [r7, #24]
        break;
 80064c4:	e008      	b.n	80064d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ca:	61bb      	str	r3, [r7, #24]
        break;
 80064cc:	e004      	b.n	80064d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	77bb      	strb	r3, [r7, #30]
        break;
 80064d6:	bf00      	nop
    }

    if (pclk != 0U)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d018      	beq.n	8006510 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	085a      	lsrs	r2, r3, #1
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	441a      	add	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b0f      	cmp	r3, #15
 80064f6:	d909      	bls.n	800650c <UART_SetConfig+0x4a0>
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fe:	d205      	bcs.n	800650c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60da      	str	r2, [r3, #12]
 800650a:	e001      	b.n	8006510 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800651c:	7fbb      	ldrb	r3, [r7, #30]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3720      	adds	r7, #32
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40007c00 	.word	0x40007c00
 800652c:	40023800 	.word	0x40023800
 8006530:	00f42400 	.word	0x00f42400

08006534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01a      	beq.n	800664a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006632:	d10a      	bne.n	800664a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]
  }
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006688:	f7fa ffee 	bl	8001668 <HAL_GetTick>
 800668c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b08      	cmp	r3, #8
 800669a:	d10e      	bne.n	80066ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800669c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f81b 	bl	80066e6 <UART_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e011      	b.n	80066de <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b09c      	sub	sp, #112	; 0x70
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f6:	e0a7      	b.n	8006848 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	f000 80a3 	beq.w	8006848 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006702:	f7fa ffb1 	bl	8001668 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800670e:	429a      	cmp	r2, r3
 8006710:	d302      	bcc.n	8006718 <UART_WaitOnFlagUntilTimeout+0x32>
 8006712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006714:	2b00      	cmp	r3, #0
 8006716:	d13f      	bne.n	8006798 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006728:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800672c:	667b      	str	r3, [r7, #100]	; 0x64
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006738:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800673c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e6      	bne.n	8006718 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	f023 0301 	bic.w	r3, r3, #1
 8006760:	663b      	str	r3, [r7, #96]	; 0x60
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800676a:	64ba      	str	r2, [r7, #72]	; 0x48
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e5      	bne.n	800674a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e068      	b.n	800686a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d050      	beq.n	8006848 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b4:	d148      	bne.n	8006848 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067de:	637b      	str	r3, [r7, #52]	; 0x34
 80067e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e6      	bne.n	80067c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3308      	adds	r3, #8
 80067f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	613b      	str	r3, [r7, #16]
   return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	66bb      	str	r3, [r7, #104]	; 0x68
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006812:	623a      	str	r2, [r7, #32]
 8006814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	69f9      	ldr	r1, [r7, #28]
 8006818:	6a3a      	ldr	r2, [r7, #32]
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e5      	bne.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e010      	b.n	800686a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69da      	ldr	r2, [r3, #28]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4013      	ands	r3, r2
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	429a      	cmp	r2, r3
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	429a      	cmp	r2, r3
 8006864:	f43f af48 	beq.w	80066f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3770      	adds	r7, #112	; 0x70
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006874:	b480      	push	{r7}
 8006876:	b097      	sub	sp, #92	; 0x5c
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	88fa      	ldrh	r2, [r7, #6]
 8006894:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a6:	d10e      	bne.n	80068c6 <UART_Start_Receive_IT+0x52>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d105      	bne.n	80068bc <UART_Start_Receive_IT+0x48>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068ba:	e02d      	b.n	8006918 <UART_Start_Receive_IT+0xa4>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	22ff      	movs	r2, #255	; 0xff
 80068c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068c4:	e028      	b.n	8006918 <UART_Start_Receive_IT+0xa4>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10d      	bne.n	80068ea <UART_Start_Receive_IT+0x76>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <UART_Start_Receive_IT+0x6c>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	22ff      	movs	r2, #255	; 0xff
 80068da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068de:	e01b      	b.n	8006918 <UART_Start_Receive_IT+0xa4>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	227f      	movs	r2, #127	; 0x7f
 80068e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068e8:	e016      	b.n	8006918 <UART_Start_Receive_IT+0xa4>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068f2:	d10d      	bne.n	8006910 <UART_Start_Receive_IT+0x9c>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d104      	bne.n	8006906 <UART_Start_Receive_IT+0x92>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	227f      	movs	r2, #127	; 0x7f
 8006900:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006904:	e008      	b.n	8006918 <UART_Start_Receive_IT+0xa4>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	223f      	movs	r2, #63	; 0x3f
 800690a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800690e:	e003      	b.n	8006918 <UART_Start_Receive_IT+0xa4>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2222      	movs	r2, #34	; 0x22
 8006924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	657b      	str	r3, [r7, #84]	; 0x54
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006948:	64ba      	str	r2, [r7, #72]	; 0x48
 800694a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800694e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006964:	d107      	bne.n	8006976 <UART_Start_Receive_IT+0x102>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a21      	ldr	r2, [pc, #132]	; (80069f8 <UART_Start_Receive_IT+0x184>)
 8006972:	669a      	str	r2, [r3, #104]	; 0x68
 8006974:	e002      	b.n	800697c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4a20      	ldr	r2, [pc, #128]	; (80069fc <UART_Start_Receive_IT+0x188>)
 800697a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d019      	beq.n	80069b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006998:	64fb      	str	r3, [r7, #76]	; 0x4c
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
 80069a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e6      	bne.n	8006984 <UART_Start_Receive_IT+0x110>
 80069b6:	e018      	b.n	80069ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	613b      	str	r3, [r7, #16]
   return(result);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f043 0320 	orr.w	r3, r3, #32
 80069cc:	653b      	str	r3, [r7, #80]	; 0x50
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d6:	623b      	str	r3, [r7, #32]
 80069d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	69f9      	ldr	r1, [r7, #28]
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e6      	bne.n	80069b8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	375c      	adds	r7, #92	; 0x5c
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	08006caf 	.word	0x08006caf
 80069fc:	08006b49 	.word	0x08006b49

08006a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b095      	sub	sp, #84	; 0x54
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40
 8006a28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e6      	bne.n	8006a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d118      	bne.n	8006aa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f023 0310 	bic.w	r3, r3, #16
 8006a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6979      	ldr	r1, [r7, #20]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e6      	bne.n	8006a76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006abc:	bf00      	nop
 8006abe:	3754      	adds	r7, #84	; 0x54
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7ff faaa 	bl	8006040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6979      	ldr	r1, [r7, #20]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	613b      	str	r3, [r7, #16]
   return(result);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fa76 	bl	800602c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b40:	bf00      	nop
 8006b42:	3720      	adds	r7, #32
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b096      	sub	sp, #88	; 0x58
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b60:	2b22      	cmp	r3, #34	; 0x22
 8006b62:	f040 8098 	bne.w	8006c96 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b70:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006b74:	b2d9      	uxtb	r1, r3
 8006b76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b80:	400a      	ands	r2, r1
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d17b      	bne.n	8006ca6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e6      	bne.n	8006bae <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	623b      	str	r3, [r7, #32]
   return(result);
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c00:	633a      	str	r2, [r7, #48]	; 0x30
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e5      	bne.n	8006be0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d12e      	bne.n	8006c8e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0310 	bic.w	r3, r3, #16
 8006c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	69b9      	ldr	r1, [r7, #24]
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	617b      	str	r3, [r7, #20]
   return(result);
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e6      	bne.n	8006c36 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d103      	bne.n	8006c7e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2210      	movs	r2, #16
 8006c7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff f9e4 	bl	8006054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c8c:	e00b      	b.n	8006ca6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fa f864 	bl	8000d5c <HAL_UART_RxCpltCallback>
}
 8006c94:	e007      	b.n	8006ca6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699a      	ldr	r2, [r3, #24]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0208 	orr.w	r2, r2, #8
 8006ca4:	619a      	str	r2, [r3, #24]
}
 8006ca6:	bf00      	nop
 8006ca8:	3758      	adds	r7, #88	; 0x58
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b096      	sub	sp, #88	; 0x58
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc6:	2b22      	cmp	r3, #34	; 0x22
 8006cc8:	f040 8098 	bne.w	8006dfc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cda:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cdc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006ce0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf0:	1c9a      	adds	r2, r3, #2
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d17b      	bne.n	8006e0c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d32:	643b      	str	r3, [r7, #64]	; 0x40
 8006d34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e6      	bne.n	8006d14 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	e853 3f00 	ldrex	r3, [r3]
 8006d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f023 0301 	bic.w	r3, r3, #1
 8006d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3308      	adds	r3, #8
 8006d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d6e:	e841 2300 	strex	r3, r2, [r1]
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1e5      	bne.n	8006d46 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d12e      	bne.n	8006df4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f023 0310 	bic.w	r3, r3, #16
 8006db0:	647b      	str	r3, [r7, #68]	; 0x44
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6979      	ldr	r1, [r7, #20]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e6      	bne.n	8006d9c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b10      	cmp	r3, #16
 8006dda:	d103      	bne.n	8006de4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2210      	movs	r2, #16
 8006de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff f931 	bl	8006054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006df2:	e00b      	b.n	8006e0c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7f9 ffb1 	bl	8000d5c <HAL_UART_RxCpltCallback>
}
 8006dfa:	e007      	b.n	8006e0c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0208 	orr.w	r2, r2, #8
 8006e0a:	619a      	str	r2, [r3, #24]
}
 8006e0c:	bf00      	nop
 8006e0e:	3758      	adds	r7, #88	; 0x58
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e14:	b084      	sub	sp, #16
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	f107 001c 	add.w	r0, r7, #28
 8006e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d120      	bne.n	8006e6e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <USB_CoreInit+0xac>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d105      	bne.n	8006e62 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa96 	bl	8007394 <USB_CoreReset>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]
 8006e6c:	e010      	b.n	8006e90 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa8a 	bl	8007394 <USB_CoreReset>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d10b      	bne.n	8006eae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f043 0206 	orr.w	r2, r3, #6
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f043 0220 	orr.w	r2, r3, #32
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eba:	b004      	add	sp, #16
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	ffbdffbf 	.word	0xffbdffbf

08006ec4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f023 0201 	bic.w	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d115      	bne.n	8006f34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f14:	2001      	movs	r0, #1
 8006f16:	f7fa fbb3 	bl	8001680 <HAL_Delay>
      ms++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fa29 	bl	8007378 <USB_GetMode>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d01e      	beq.n	8006f6a <USB_SetCurrentMode+0x84>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b31      	cmp	r3, #49	; 0x31
 8006f30:	d9f0      	bls.n	8006f14 <USB_SetCurrentMode+0x2e>
 8006f32:	e01a      	b.n	8006f6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d115      	bne.n	8006f66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f46:	2001      	movs	r0, #1
 8006f48:	f7fa fb9a 	bl	8001680 <HAL_Delay>
      ms++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa10 	bl	8007378 <USB_GetMode>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <USB_SetCurrentMode+0x84>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b31      	cmp	r3, #49	; 0x31
 8006f62:	d9f0      	bls.n	8006f46 <USB_SetCurrentMode+0x60>
 8006f64:	e001      	b.n	8006f6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e005      	b.n	8006f76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b32      	cmp	r3, #50	; 0x32
 8006f6e:	d101      	bne.n	8006f74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f80:	b084      	sub	sp, #16
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b086      	sub	sp, #24
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	e009      	b.n	8006fb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3340      	adds	r3, #64	; 0x40
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	2200      	movs	r2, #0
 8006fac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b0e      	cmp	r3, #14
 8006fb8:	d9f2      	bls.n	8006fa0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d11c      	bne.n	8006ffa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fce:	f043 0302 	orr.w	r3, r3, #2
 8006fd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e005      	b.n	8007006 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800700c:	461a      	mov	r2, r3
 800700e:	2300      	movs	r3, #0
 8007010:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007018:	4619      	mov	r1, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007020:	461a      	mov	r2, r3
 8007022:	680b      	ldr	r3, [r1, #0]
 8007024:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10c      	bne.n	8007046 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007032:	2100      	movs	r1, #0
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f965 	bl	8007304 <USB_SetDevSpeed>
 800703a:	e008      	b.n	800704e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800703c:	2101      	movs	r1, #1
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f960 	bl	8007304 <USB_SetDevSpeed>
 8007044:	e003      	b.n	800704e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007046:	2103      	movs	r1, #3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f95b 	bl	8007304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800704e:	2110      	movs	r1, #16
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f8f3 	bl	800723c <USB_FlushTxFifo>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f91f 	bl	80072a4 <USB_FlushRxFifo>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007076:	461a      	mov	r2, r3
 8007078:	2300      	movs	r3, #0
 800707a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007082:	461a      	mov	r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708e:	461a      	mov	r2, r3
 8007090:	2300      	movs	r3, #0
 8007092:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007094:	2300      	movs	r3, #0
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	e043      	b.n	8007122 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b0:	d118      	bne.n	80070e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	461a      	mov	r2, r3
 80070c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	e013      	b.n	80070f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070da:	461a      	mov	r2, r3
 80070dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	e008      	b.n	80070f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f0:	461a      	mov	r2, r3
 80070f2:	2300      	movs	r3, #0
 80070f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	461a      	mov	r2, r3
 8007104:	2300      	movs	r3, #0
 8007106:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	461a      	mov	r2, r3
 8007116:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800711a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	3301      	adds	r3, #1
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	429a      	cmp	r2, r3
 8007128:	d3b7      	bcc.n	800709a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	e043      	b.n	80071b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007146:	d118      	bne.n	800717a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	461a      	mov	r2, r3
 800715c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e013      	b.n	800718c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	461a      	mov	r2, r3
 8007172:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	e008      	b.n	800718c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007186:	461a      	mov	r2, r3
 8007188:	2300      	movs	r3, #0
 800718a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007198:	461a      	mov	r2, r3
 800719a:	2300      	movs	r3, #0
 800719c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	461a      	mov	r2, r3
 80071ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3301      	adds	r3, #1
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d3b7      	bcc.n	8007130 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	f043 0210 	orr.w	r2, r3, #16
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699a      	ldr	r2, [r3, #24]
 80071f8:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <USB_DevInit+0x2b4>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f043 0208 	orr.w	r2, r3, #8
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d105      	bne.n	8007224 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <USB_DevInit+0x2b8>)
 800721e:	4313      	orrs	r3, r2
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007230:	b004      	add	sp, #16
 8007232:	4770      	bx	lr
 8007234:	803c3800 	.word	0x803c3800
 8007238:	40000004 	.word	0x40000004

0800723c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4a13      	ldr	r2, [pc, #76]	; (80072a0 <USB_FlushTxFifo+0x64>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d901      	bls.n	800725c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e01b      	b.n	8007294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	daf2      	bge.n	800724a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	019b      	lsls	r3, r3, #6
 800726c:	f043 0220 	orr.w	r2, r3, #32
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a08      	ldr	r2, [pc, #32]	; (80072a0 <USB_FlushTxFifo+0x64>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d901      	bls.n	8007286 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e006      	b.n	8007294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b20      	cmp	r3, #32
 8007290:	d0f0      	beq.n	8007274 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	00030d40 	.word	0x00030d40

080072a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4a11      	ldr	r2, [pc, #68]	; (8007300 <USB_FlushRxFifo+0x5c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d901      	bls.n	80072c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e018      	b.n	80072f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	daf2      	bge.n	80072b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2210      	movs	r2, #16
 80072d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4a08      	ldr	r2, [pc, #32]	; (8007300 <USB_FlushRxFifo+0x5c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d901      	bls.n	80072e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e006      	b.n	80072f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0310 	and.w	r3, r3, #16
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	d0f0      	beq.n	80072d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	00030d40 	.word	0x00030d40

08007304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007324:	4313      	orrs	r3, r2
 8007326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007350:	f023 0303 	bic.w	r3, r3, #3
 8007354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007364:	f043 0302 	orr.w	r3, r3, #2
 8007368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f003 0301 	and.w	r3, r3, #1
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4a13      	ldr	r2, [pc, #76]	; (80073f8 <USB_CoreReset+0x64>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d901      	bls.n	80073b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e01b      	b.n	80073ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	daf2      	bge.n	80073a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f043 0201 	orr.w	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3301      	adds	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4a09      	ldr	r2, [pc, #36]	; (80073f8 <USB_CoreReset+0x64>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d901      	bls.n	80073dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e006      	b.n	80073ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d0f0      	beq.n	80073ca <USB_CoreReset+0x36>

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	00030d40 	.word	0x00030d40

080073fc <atoi>:
 80073fc:	220a      	movs	r2, #10
 80073fe:	2100      	movs	r1, #0
 8007400:	f000 b8ee 	b.w	80075e0 <strtol>

08007404 <__errno>:
 8007404:	4b01      	ldr	r3, [pc, #4]	; (800740c <__errno+0x8>)
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000014 	.word	0x20000014

08007410 <__libc_init_array>:
 8007410:	b570      	push	{r4, r5, r6, lr}
 8007412:	4d0d      	ldr	r5, [pc, #52]	; (8007448 <__libc_init_array+0x38>)
 8007414:	4c0d      	ldr	r4, [pc, #52]	; (800744c <__libc_init_array+0x3c>)
 8007416:	1b64      	subs	r4, r4, r5
 8007418:	10a4      	asrs	r4, r4, #2
 800741a:	2600      	movs	r6, #0
 800741c:	42a6      	cmp	r6, r4
 800741e:	d109      	bne.n	8007434 <__libc_init_array+0x24>
 8007420:	4d0b      	ldr	r5, [pc, #44]	; (8007450 <__libc_init_array+0x40>)
 8007422:	4c0c      	ldr	r4, [pc, #48]	; (8007454 <__libc_init_array+0x44>)
 8007424:	f000 fd76 	bl	8007f14 <_init>
 8007428:	1b64      	subs	r4, r4, r5
 800742a:	10a4      	asrs	r4, r4, #2
 800742c:	2600      	movs	r6, #0
 800742e:	42a6      	cmp	r6, r4
 8007430:	d105      	bne.n	800743e <__libc_init_array+0x2e>
 8007432:	bd70      	pop	{r4, r5, r6, pc}
 8007434:	f855 3b04 	ldr.w	r3, [r5], #4
 8007438:	4798      	blx	r3
 800743a:	3601      	adds	r6, #1
 800743c:	e7ee      	b.n	800741c <__libc_init_array+0xc>
 800743e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007442:	4798      	blx	r3
 8007444:	3601      	adds	r6, #1
 8007446:	e7f2      	b.n	800742e <__libc_init_array+0x1e>
 8007448:	080080b4 	.word	0x080080b4
 800744c:	080080b4 	.word	0x080080b4
 8007450:	080080b4 	.word	0x080080b4
 8007454:	080080b8 	.word	0x080080b8

08007458 <__itoa>:
 8007458:	1e93      	subs	r3, r2, #2
 800745a:	2b22      	cmp	r3, #34	; 0x22
 800745c:	b510      	push	{r4, lr}
 800745e:	460c      	mov	r4, r1
 8007460:	d904      	bls.n	800746c <__itoa+0x14>
 8007462:	2300      	movs	r3, #0
 8007464:	700b      	strb	r3, [r1, #0]
 8007466:	461c      	mov	r4, r3
 8007468:	4620      	mov	r0, r4
 800746a:	bd10      	pop	{r4, pc}
 800746c:	2a0a      	cmp	r2, #10
 800746e:	d109      	bne.n	8007484 <__itoa+0x2c>
 8007470:	2800      	cmp	r0, #0
 8007472:	da07      	bge.n	8007484 <__itoa+0x2c>
 8007474:	232d      	movs	r3, #45	; 0x2d
 8007476:	700b      	strb	r3, [r1, #0]
 8007478:	4240      	negs	r0, r0
 800747a:	2101      	movs	r1, #1
 800747c:	4421      	add	r1, r4
 800747e:	f000 f8b9 	bl	80075f4 <__utoa>
 8007482:	e7f1      	b.n	8007468 <__itoa+0x10>
 8007484:	2100      	movs	r1, #0
 8007486:	e7f9      	b.n	800747c <__itoa+0x24>

08007488 <itoa>:
 8007488:	f7ff bfe6 	b.w	8007458 <__itoa>

0800748c <memset>:
 800748c:	4402      	add	r2, r0
 800748e:	4603      	mov	r3, r0
 8007490:	4293      	cmp	r3, r2
 8007492:	d100      	bne.n	8007496 <memset+0xa>
 8007494:	4770      	bx	lr
 8007496:	f803 1b01 	strb.w	r1, [r3], #1
 800749a:	e7f9      	b.n	8007490 <memset+0x4>

0800749c <siprintf>:
 800749c:	b40e      	push	{r1, r2, r3}
 800749e:	b500      	push	{lr}
 80074a0:	b09c      	sub	sp, #112	; 0x70
 80074a2:	ab1d      	add	r3, sp, #116	; 0x74
 80074a4:	9002      	str	r0, [sp, #8]
 80074a6:	9006      	str	r0, [sp, #24]
 80074a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074ac:	4809      	ldr	r0, [pc, #36]	; (80074d4 <siprintf+0x38>)
 80074ae:	9107      	str	r1, [sp, #28]
 80074b0:	9104      	str	r1, [sp, #16]
 80074b2:	4909      	ldr	r1, [pc, #36]	; (80074d8 <siprintf+0x3c>)
 80074b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b8:	9105      	str	r1, [sp, #20]
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	a902      	add	r1, sp, #8
 80074c0:	f000 f936 	bl	8007730 <_svfiprintf_r>
 80074c4:	9b02      	ldr	r3, [sp, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	b01c      	add	sp, #112	; 0x70
 80074cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074d0:	b003      	add	sp, #12
 80074d2:	4770      	bx	lr
 80074d4:	20000014 	.word	0x20000014
 80074d8:	ffff0208 	.word	0xffff0208

080074dc <_strtol_l.constprop.0>:
 80074dc:	2b01      	cmp	r3, #1
 80074de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e2:	d001      	beq.n	80074e8 <_strtol_l.constprop.0+0xc>
 80074e4:	2b24      	cmp	r3, #36	; 0x24
 80074e6:	d906      	bls.n	80074f6 <_strtol_l.constprop.0+0x1a>
 80074e8:	f7ff ff8c 	bl	8007404 <__errno>
 80074ec:	2316      	movs	r3, #22
 80074ee:	6003      	str	r3, [r0, #0]
 80074f0:	2000      	movs	r0, #0
 80074f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80075dc <_strtol_l.constprop.0+0x100>
 80074fa:	460d      	mov	r5, r1
 80074fc:	462e      	mov	r6, r5
 80074fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007502:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007506:	f017 0708 	ands.w	r7, r7, #8
 800750a:	d1f7      	bne.n	80074fc <_strtol_l.constprop.0+0x20>
 800750c:	2c2d      	cmp	r4, #45	; 0x2d
 800750e:	d132      	bne.n	8007576 <_strtol_l.constprop.0+0x9a>
 8007510:	782c      	ldrb	r4, [r5, #0]
 8007512:	2701      	movs	r7, #1
 8007514:	1cb5      	adds	r5, r6, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d05b      	beq.n	80075d2 <_strtol_l.constprop.0+0xf6>
 800751a:	2b10      	cmp	r3, #16
 800751c:	d109      	bne.n	8007532 <_strtol_l.constprop.0+0x56>
 800751e:	2c30      	cmp	r4, #48	; 0x30
 8007520:	d107      	bne.n	8007532 <_strtol_l.constprop.0+0x56>
 8007522:	782c      	ldrb	r4, [r5, #0]
 8007524:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007528:	2c58      	cmp	r4, #88	; 0x58
 800752a:	d14d      	bne.n	80075c8 <_strtol_l.constprop.0+0xec>
 800752c:	786c      	ldrb	r4, [r5, #1]
 800752e:	2310      	movs	r3, #16
 8007530:	3502      	adds	r5, #2
 8007532:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007536:	f108 38ff 	add.w	r8, r8, #4294967295
 800753a:	f04f 0c00 	mov.w	ip, #0
 800753e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007542:	4666      	mov	r6, ip
 8007544:	fb03 8a19 	mls	sl, r3, r9, r8
 8007548:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800754c:	f1be 0f09 	cmp.w	lr, #9
 8007550:	d816      	bhi.n	8007580 <_strtol_l.constprop.0+0xa4>
 8007552:	4674      	mov	r4, lr
 8007554:	42a3      	cmp	r3, r4
 8007556:	dd24      	ble.n	80075a2 <_strtol_l.constprop.0+0xc6>
 8007558:	f1bc 0f00 	cmp.w	ip, #0
 800755c:	db1e      	blt.n	800759c <_strtol_l.constprop.0+0xc0>
 800755e:	45b1      	cmp	r9, r6
 8007560:	d31c      	bcc.n	800759c <_strtol_l.constprop.0+0xc0>
 8007562:	d101      	bne.n	8007568 <_strtol_l.constprop.0+0x8c>
 8007564:	45a2      	cmp	sl, r4
 8007566:	db19      	blt.n	800759c <_strtol_l.constprop.0+0xc0>
 8007568:	fb06 4603 	mla	r6, r6, r3, r4
 800756c:	f04f 0c01 	mov.w	ip, #1
 8007570:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007574:	e7e8      	b.n	8007548 <_strtol_l.constprop.0+0x6c>
 8007576:	2c2b      	cmp	r4, #43	; 0x2b
 8007578:	bf04      	itt	eq
 800757a:	782c      	ldrbeq	r4, [r5, #0]
 800757c:	1cb5      	addeq	r5, r6, #2
 800757e:	e7ca      	b.n	8007516 <_strtol_l.constprop.0+0x3a>
 8007580:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007584:	f1be 0f19 	cmp.w	lr, #25
 8007588:	d801      	bhi.n	800758e <_strtol_l.constprop.0+0xb2>
 800758a:	3c37      	subs	r4, #55	; 0x37
 800758c:	e7e2      	b.n	8007554 <_strtol_l.constprop.0+0x78>
 800758e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007592:	f1be 0f19 	cmp.w	lr, #25
 8007596:	d804      	bhi.n	80075a2 <_strtol_l.constprop.0+0xc6>
 8007598:	3c57      	subs	r4, #87	; 0x57
 800759a:	e7db      	b.n	8007554 <_strtol_l.constprop.0+0x78>
 800759c:	f04f 3cff 	mov.w	ip, #4294967295
 80075a0:	e7e6      	b.n	8007570 <_strtol_l.constprop.0+0x94>
 80075a2:	f1bc 0f00 	cmp.w	ip, #0
 80075a6:	da05      	bge.n	80075b4 <_strtol_l.constprop.0+0xd8>
 80075a8:	2322      	movs	r3, #34	; 0x22
 80075aa:	6003      	str	r3, [r0, #0]
 80075ac:	4646      	mov	r6, r8
 80075ae:	b942      	cbnz	r2, 80075c2 <_strtol_l.constprop.0+0xe6>
 80075b0:	4630      	mov	r0, r6
 80075b2:	e79e      	b.n	80074f2 <_strtol_l.constprop.0+0x16>
 80075b4:	b107      	cbz	r7, 80075b8 <_strtol_l.constprop.0+0xdc>
 80075b6:	4276      	negs	r6, r6
 80075b8:	2a00      	cmp	r2, #0
 80075ba:	d0f9      	beq.n	80075b0 <_strtol_l.constprop.0+0xd4>
 80075bc:	f1bc 0f00 	cmp.w	ip, #0
 80075c0:	d000      	beq.n	80075c4 <_strtol_l.constprop.0+0xe8>
 80075c2:	1e69      	subs	r1, r5, #1
 80075c4:	6011      	str	r1, [r2, #0]
 80075c6:	e7f3      	b.n	80075b0 <_strtol_l.constprop.0+0xd4>
 80075c8:	2430      	movs	r4, #48	; 0x30
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1b1      	bne.n	8007532 <_strtol_l.constprop.0+0x56>
 80075ce:	2308      	movs	r3, #8
 80075d0:	e7af      	b.n	8007532 <_strtol_l.constprop.0+0x56>
 80075d2:	2c30      	cmp	r4, #48	; 0x30
 80075d4:	d0a5      	beq.n	8007522 <_strtol_l.constprop.0+0x46>
 80075d6:	230a      	movs	r3, #10
 80075d8:	e7ab      	b.n	8007532 <_strtol_l.constprop.0+0x56>
 80075da:	bf00      	nop
 80075dc:	08007f76 	.word	0x08007f76

080075e0 <strtol>:
 80075e0:	4613      	mov	r3, r2
 80075e2:	460a      	mov	r2, r1
 80075e4:	4601      	mov	r1, r0
 80075e6:	4802      	ldr	r0, [pc, #8]	; (80075f0 <strtol+0x10>)
 80075e8:	6800      	ldr	r0, [r0, #0]
 80075ea:	f7ff bf77 	b.w	80074dc <_strtol_l.constprop.0>
 80075ee:	bf00      	nop
 80075f0:	20000014 	.word	0x20000014

080075f4 <__utoa>:
 80075f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f6:	4c1f      	ldr	r4, [pc, #124]	; (8007674 <__utoa+0x80>)
 80075f8:	b08b      	sub	sp, #44	; 0x2c
 80075fa:	4605      	mov	r5, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	466e      	mov	r6, sp
 8007600:	f104 0c20 	add.w	ip, r4, #32
 8007604:	6820      	ldr	r0, [r4, #0]
 8007606:	6861      	ldr	r1, [r4, #4]
 8007608:	4637      	mov	r7, r6
 800760a:	c703      	stmia	r7!, {r0, r1}
 800760c:	3408      	adds	r4, #8
 800760e:	4564      	cmp	r4, ip
 8007610:	463e      	mov	r6, r7
 8007612:	d1f7      	bne.n	8007604 <__utoa+0x10>
 8007614:	7921      	ldrb	r1, [r4, #4]
 8007616:	7139      	strb	r1, [r7, #4]
 8007618:	1e91      	subs	r1, r2, #2
 800761a:	6820      	ldr	r0, [r4, #0]
 800761c:	6038      	str	r0, [r7, #0]
 800761e:	2922      	cmp	r1, #34	; 0x22
 8007620:	f04f 0100 	mov.w	r1, #0
 8007624:	d904      	bls.n	8007630 <__utoa+0x3c>
 8007626:	7019      	strb	r1, [r3, #0]
 8007628:	460b      	mov	r3, r1
 800762a:	4618      	mov	r0, r3
 800762c:	b00b      	add	sp, #44	; 0x2c
 800762e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007630:	1e58      	subs	r0, r3, #1
 8007632:	4684      	mov	ip, r0
 8007634:	fbb5 f7f2 	udiv	r7, r5, r2
 8007638:	fb02 5617 	mls	r6, r2, r7, r5
 800763c:	3628      	adds	r6, #40	; 0x28
 800763e:	446e      	add	r6, sp
 8007640:	460c      	mov	r4, r1
 8007642:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007646:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800764a:	462e      	mov	r6, r5
 800764c:	42b2      	cmp	r2, r6
 800764e:	f101 0101 	add.w	r1, r1, #1
 8007652:	463d      	mov	r5, r7
 8007654:	d9ee      	bls.n	8007634 <__utoa+0x40>
 8007656:	2200      	movs	r2, #0
 8007658:	545a      	strb	r2, [r3, r1]
 800765a:	1919      	adds	r1, r3, r4
 800765c:	1aa5      	subs	r5, r4, r2
 800765e:	42aa      	cmp	r2, r5
 8007660:	dae3      	bge.n	800762a <__utoa+0x36>
 8007662:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007666:	780e      	ldrb	r6, [r1, #0]
 8007668:	7006      	strb	r6, [r0, #0]
 800766a:	3201      	adds	r2, #1
 800766c:	f801 5901 	strb.w	r5, [r1], #-1
 8007670:	e7f4      	b.n	800765c <__utoa+0x68>
 8007672:	bf00      	nop
 8007674:	08007f50 	.word	0x08007f50

08007678 <__ssputs_r>:
 8007678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	688e      	ldr	r6, [r1, #8]
 800767e:	429e      	cmp	r6, r3
 8007680:	4682      	mov	sl, r0
 8007682:	460c      	mov	r4, r1
 8007684:	4690      	mov	r8, r2
 8007686:	461f      	mov	r7, r3
 8007688:	d838      	bhi.n	80076fc <__ssputs_r+0x84>
 800768a:	898a      	ldrh	r2, [r1, #12]
 800768c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007690:	d032      	beq.n	80076f8 <__ssputs_r+0x80>
 8007692:	6825      	ldr	r5, [r4, #0]
 8007694:	6909      	ldr	r1, [r1, #16]
 8007696:	eba5 0901 	sub.w	r9, r5, r1
 800769a:	6965      	ldr	r5, [r4, #20]
 800769c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076a4:	3301      	adds	r3, #1
 80076a6:	444b      	add	r3, r9
 80076a8:	106d      	asrs	r5, r5, #1
 80076aa:	429d      	cmp	r5, r3
 80076ac:	bf38      	it	cc
 80076ae:	461d      	movcc	r5, r3
 80076b0:	0553      	lsls	r3, r2, #21
 80076b2:	d531      	bpl.n	8007718 <__ssputs_r+0xa0>
 80076b4:	4629      	mov	r1, r5
 80076b6:	f000 fb63 	bl	8007d80 <_malloc_r>
 80076ba:	4606      	mov	r6, r0
 80076bc:	b950      	cbnz	r0, 80076d4 <__ssputs_r+0x5c>
 80076be:	230c      	movs	r3, #12
 80076c0:	f8ca 3000 	str.w	r3, [sl]
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295
 80076d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d4:	6921      	ldr	r1, [r4, #16]
 80076d6:	464a      	mov	r2, r9
 80076d8:	f000 fabe 	bl	8007c58 <memcpy>
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	6126      	str	r6, [r4, #16]
 80076ea:	6165      	str	r5, [r4, #20]
 80076ec:	444e      	add	r6, r9
 80076ee:	eba5 0509 	sub.w	r5, r5, r9
 80076f2:	6026      	str	r6, [r4, #0]
 80076f4:	60a5      	str	r5, [r4, #8]
 80076f6:	463e      	mov	r6, r7
 80076f8:	42be      	cmp	r6, r7
 80076fa:	d900      	bls.n	80076fe <__ssputs_r+0x86>
 80076fc:	463e      	mov	r6, r7
 80076fe:	6820      	ldr	r0, [r4, #0]
 8007700:	4632      	mov	r2, r6
 8007702:	4641      	mov	r1, r8
 8007704:	f000 fab6 	bl	8007c74 <memmove>
 8007708:	68a3      	ldr	r3, [r4, #8]
 800770a:	1b9b      	subs	r3, r3, r6
 800770c:	60a3      	str	r3, [r4, #8]
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	4433      	add	r3, r6
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	2000      	movs	r0, #0
 8007716:	e7db      	b.n	80076d0 <__ssputs_r+0x58>
 8007718:	462a      	mov	r2, r5
 800771a:	f000 fba5 	bl	8007e68 <_realloc_r>
 800771e:	4606      	mov	r6, r0
 8007720:	2800      	cmp	r0, #0
 8007722:	d1e1      	bne.n	80076e8 <__ssputs_r+0x70>
 8007724:	6921      	ldr	r1, [r4, #16]
 8007726:	4650      	mov	r0, sl
 8007728:	f000 fabe 	bl	8007ca8 <_free_r>
 800772c:	e7c7      	b.n	80076be <__ssputs_r+0x46>
	...

08007730 <_svfiprintf_r>:
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	4698      	mov	r8, r3
 8007736:	898b      	ldrh	r3, [r1, #12]
 8007738:	061b      	lsls	r3, r3, #24
 800773a:	b09d      	sub	sp, #116	; 0x74
 800773c:	4607      	mov	r7, r0
 800773e:	460d      	mov	r5, r1
 8007740:	4614      	mov	r4, r2
 8007742:	d50e      	bpl.n	8007762 <_svfiprintf_r+0x32>
 8007744:	690b      	ldr	r3, [r1, #16]
 8007746:	b963      	cbnz	r3, 8007762 <_svfiprintf_r+0x32>
 8007748:	2140      	movs	r1, #64	; 0x40
 800774a:	f000 fb19 	bl	8007d80 <_malloc_r>
 800774e:	6028      	str	r0, [r5, #0]
 8007750:	6128      	str	r0, [r5, #16]
 8007752:	b920      	cbnz	r0, 800775e <_svfiprintf_r+0x2e>
 8007754:	230c      	movs	r3, #12
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	e0d1      	b.n	8007902 <_svfiprintf_r+0x1d2>
 800775e:	2340      	movs	r3, #64	; 0x40
 8007760:	616b      	str	r3, [r5, #20]
 8007762:	2300      	movs	r3, #0
 8007764:	9309      	str	r3, [sp, #36]	; 0x24
 8007766:	2320      	movs	r3, #32
 8007768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800776c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007770:	2330      	movs	r3, #48	; 0x30
 8007772:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800791c <_svfiprintf_r+0x1ec>
 8007776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800777a:	f04f 0901 	mov.w	r9, #1
 800777e:	4623      	mov	r3, r4
 8007780:	469a      	mov	sl, r3
 8007782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007786:	b10a      	cbz	r2, 800778c <_svfiprintf_r+0x5c>
 8007788:	2a25      	cmp	r2, #37	; 0x25
 800778a:	d1f9      	bne.n	8007780 <_svfiprintf_r+0x50>
 800778c:	ebba 0b04 	subs.w	fp, sl, r4
 8007790:	d00b      	beq.n	80077aa <_svfiprintf_r+0x7a>
 8007792:	465b      	mov	r3, fp
 8007794:	4622      	mov	r2, r4
 8007796:	4629      	mov	r1, r5
 8007798:	4638      	mov	r0, r7
 800779a:	f7ff ff6d 	bl	8007678 <__ssputs_r>
 800779e:	3001      	adds	r0, #1
 80077a0:	f000 80aa 	beq.w	80078f8 <_svfiprintf_r+0x1c8>
 80077a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a6:	445a      	add	r2, fp
 80077a8:	9209      	str	r2, [sp, #36]	; 0x24
 80077aa:	f89a 3000 	ldrb.w	r3, [sl]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80a2 	beq.w	80078f8 <_svfiprintf_r+0x1c8>
 80077b4:	2300      	movs	r3, #0
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077be:	f10a 0a01 	add.w	sl, sl, #1
 80077c2:	9304      	str	r3, [sp, #16]
 80077c4:	9307      	str	r3, [sp, #28]
 80077c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ca:	931a      	str	r3, [sp, #104]	; 0x68
 80077cc:	4654      	mov	r4, sl
 80077ce:	2205      	movs	r2, #5
 80077d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d4:	4851      	ldr	r0, [pc, #324]	; (800791c <_svfiprintf_r+0x1ec>)
 80077d6:	f7f8 fd23 	bl	8000220 <memchr>
 80077da:	9a04      	ldr	r2, [sp, #16]
 80077dc:	b9d8      	cbnz	r0, 8007816 <_svfiprintf_r+0xe6>
 80077de:	06d0      	lsls	r0, r2, #27
 80077e0:	bf44      	itt	mi
 80077e2:	2320      	movmi	r3, #32
 80077e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077e8:	0711      	lsls	r1, r2, #28
 80077ea:	bf44      	itt	mi
 80077ec:	232b      	movmi	r3, #43	; 0x2b
 80077ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f2:	f89a 3000 	ldrb.w	r3, [sl]
 80077f6:	2b2a      	cmp	r3, #42	; 0x2a
 80077f8:	d015      	beq.n	8007826 <_svfiprintf_r+0xf6>
 80077fa:	9a07      	ldr	r2, [sp, #28]
 80077fc:	4654      	mov	r4, sl
 80077fe:	2000      	movs	r0, #0
 8007800:	f04f 0c0a 	mov.w	ip, #10
 8007804:	4621      	mov	r1, r4
 8007806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800780a:	3b30      	subs	r3, #48	; 0x30
 800780c:	2b09      	cmp	r3, #9
 800780e:	d94e      	bls.n	80078ae <_svfiprintf_r+0x17e>
 8007810:	b1b0      	cbz	r0, 8007840 <_svfiprintf_r+0x110>
 8007812:	9207      	str	r2, [sp, #28]
 8007814:	e014      	b.n	8007840 <_svfiprintf_r+0x110>
 8007816:	eba0 0308 	sub.w	r3, r0, r8
 800781a:	fa09 f303 	lsl.w	r3, r9, r3
 800781e:	4313      	orrs	r3, r2
 8007820:	9304      	str	r3, [sp, #16]
 8007822:	46a2      	mov	sl, r4
 8007824:	e7d2      	b.n	80077cc <_svfiprintf_r+0x9c>
 8007826:	9b03      	ldr	r3, [sp, #12]
 8007828:	1d19      	adds	r1, r3, #4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	9103      	str	r1, [sp, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfbb      	ittet	lt
 8007832:	425b      	neglt	r3, r3
 8007834:	f042 0202 	orrlt.w	r2, r2, #2
 8007838:	9307      	strge	r3, [sp, #28]
 800783a:	9307      	strlt	r3, [sp, #28]
 800783c:	bfb8      	it	lt
 800783e:	9204      	strlt	r2, [sp, #16]
 8007840:	7823      	ldrb	r3, [r4, #0]
 8007842:	2b2e      	cmp	r3, #46	; 0x2e
 8007844:	d10c      	bne.n	8007860 <_svfiprintf_r+0x130>
 8007846:	7863      	ldrb	r3, [r4, #1]
 8007848:	2b2a      	cmp	r3, #42	; 0x2a
 800784a:	d135      	bne.n	80078b8 <_svfiprintf_r+0x188>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	9203      	str	r2, [sp, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	bfb8      	it	lt
 8007858:	f04f 33ff 	movlt.w	r3, #4294967295
 800785c:	3402      	adds	r4, #2
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800792c <_svfiprintf_r+0x1fc>
 8007864:	7821      	ldrb	r1, [r4, #0]
 8007866:	2203      	movs	r2, #3
 8007868:	4650      	mov	r0, sl
 800786a:	f7f8 fcd9 	bl	8000220 <memchr>
 800786e:	b140      	cbz	r0, 8007882 <_svfiprintf_r+0x152>
 8007870:	2340      	movs	r3, #64	; 0x40
 8007872:	eba0 000a 	sub.w	r0, r0, sl
 8007876:	fa03 f000 	lsl.w	r0, r3, r0
 800787a:	9b04      	ldr	r3, [sp, #16]
 800787c:	4303      	orrs	r3, r0
 800787e:	3401      	adds	r4, #1
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007886:	4826      	ldr	r0, [pc, #152]	; (8007920 <_svfiprintf_r+0x1f0>)
 8007888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800788c:	2206      	movs	r2, #6
 800788e:	f7f8 fcc7 	bl	8000220 <memchr>
 8007892:	2800      	cmp	r0, #0
 8007894:	d038      	beq.n	8007908 <_svfiprintf_r+0x1d8>
 8007896:	4b23      	ldr	r3, [pc, #140]	; (8007924 <_svfiprintf_r+0x1f4>)
 8007898:	bb1b      	cbnz	r3, 80078e2 <_svfiprintf_r+0x1b2>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	3307      	adds	r3, #7
 800789e:	f023 0307 	bic.w	r3, r3, #7
 80078a2:	3308      	adds	r3, #8
 80078a4:	9303      	str	r3, [sp, #12]
 80078a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a8:	4433      	add	r3, r6
 80078aa:	9309      	str	r3, [sp, #36]	; 0x24
 80078ac:	e767      	b.n	800777e <_svfiprintf_r+0x4e>
 80078ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b2:	460c      	mov	r4, r1
 80078b4:	2001      	movs	r0, #1
 80078b6:	e7a5      	b.n	8007804 <_svfiprintf_r+0xd4>
 80078b8:	2300      	movs	r3, #0
 80078ba:	3401      	adds	r4, #1
 80078bc:	9305      	str	r3, [sp, #20]
 80078be:	4619      	mov	r1, r3
 80078c0:	f04f 0c0a 	mov.w	ip, #10
 80078c4:	4620      	mov	r0, r4
 80078c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ca:	3a30      	subs	r2, #48	; 0x30
 80078cc:	2a09      	cmp	r2, #9
 80078ce:	d903      	bls.n	80078d8 <_svfiprintf_r+0x1a8>
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0c5      	beq.n	8007860 <_svfiprintf_r+0x130>
 80078d4:	9105      	str	r1, [sp, #20]
 80078d6:	e7c3      	b.n	8007860 <_svfiprintf_r+0x130>
 80078d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80078dc:	4604      	mov	r4, r0
 80078de:	2301      	movs	r3, #1
 80078e0:	e7f0      	b.n	80078c4 <_svfiprintf_r+0x194>
 80078e2:	ab03      	add	r3, sp, #12
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	462a      	mov	r2, r5
 80078e8:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <_svfiprintf_r+0x1f8>)
 80078ea:	a904      	add	r1, sp, #16
 80078ec:	4638      	mov	r0, r7
 80078ee:	f3af 8000 	nop.w
 80078f2:	1c42      	adds	r2, r0, #1
 80078f4:	4606      	mov	r6, r0
 80078f6:	d1d6      	bne.n	80078a6 <_svfiprintf_r+0x176>
 80078f8:	89ab      	ldrh	r3, [r5, #12]
 80078fa:	065b      	lsls	r3, r3, #25
 80078fc:	f53f af2c 	bmi.w	8007758 <_svfiprintf_r+0x28>
 8007900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007902:	b01d      	add	sp, #116	; 0x74
 8007904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007908:	ab03      	add	r3, sp, #12
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	462a      	mov	r2, r5
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <_svfiprintf_r+0x1f8>)
 8007910:	a904      	add	r1, sp, #16
 8007912:	4638      	mov	r0, r7
 8007914:	f000 f87a 	bl	8007a0c <_printf_i>
 8007918:	e7eb      	b.n	80078f2 <_svfiprintf_r+0x1c2>
 800791a:	bf00      	nop
 800791c:	08008076 	.word	0x08008076
 8007920:	08008080 	.word	0x08008080
 8007924:	00000000 	.word	0x00000000
 8007928:	08007679 	.word	0x08007679
 800792c:	0800807c 	.word	0x0800807c

08007930 <_printf_common>:
 8007930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007934:	4616      	mov	r6, r2
 8007936:	4699      	mov	r9, r3
 8007938:	688a      	ldr	r2, [r1, #8]
 800793a:	690b      	ldr	r3, [r1, #16]
 800793c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007940:	4293      	cmp	r3, r2
 8007942:	bfb8      	it	lt
 8007944:	4613      	movlt	r3, r2
 8007946:	6033      	str	r3, [r6, #0]
 8007948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800794c:	4607      	mov	r7, r0
 800794e:	460c      	mov	r4, r1
 8007950:	b10a      	cbz	r2, 8007956 <_printf_common+0x26>
 8007952:	3301      	adds	r3, #1
 8007954:	6033      	str	r3, [r6, #0]
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	0699      	lsls	r1, r3, #26
 800795a:	bf42      	ittt	mi
 800795c:	6833      	ldrmi	r3, [r6, #0]
 800795e:	3302      	addmi	r3, #2
 8007960:	6033      	strmi	r3, [r6, #0]
 8007962:	6825      	ldr	r5, [r4, #0]
 8007964:	f015 0506 	ands.w	r5, r5, #6
 8007968:	d106      	bne.n	8007978 <_printf_common+0x48>
 800796a:	f104 0a19 	add.w	sl, r4, #25
 800796e:	68e3      	ldr	r3, [r4, #12]
 8007970:	6832      	ldr	r2, [r6, #0]
 8007972:	1a9b      	subs	r3, r3, r2
 8007974:	42ab      	cmp	r3, r5
 8007976:	dc26      	bgt.n	80079c6 <_printf_common+0x96>
 8007978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800797c:	1e13      	subs	r3, r2, #0
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	bf18      	it	ne
 8007982:	2301      	movne	r3, #1
 8007984:	0692      	lsls	r2, r2, #26
 8007986:	d42b      	bmi.n	80079e0 <_printf_common+0xb0>
 8007988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800798c:	4649      	mov	r1, r9
 800798e:	4638      	mov	r0, r7
 8007990:	47c0      	blx	r8
 8007992:	3001      	adds	r0, #1
 8007994:	d01e      	beq.n	80079d4 <_printf_common+0xa4>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	68e5      	ldr	r5, [r4, #12]
 800799a:	6832      	ldr	r2, [r6, #0]
 800799c:	f003 0306 	and.w	r3, r3, #6
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	bf08      	it	eq
 80079a4:	1aad      	subeq	r5, r5, r2
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	6922      	ldr	r2, [r4, #16]
 80079aa:	bf0c      	ite	eq
 80079ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079b0:	2500      	movne	r5, #0
 80079b2:	4293      	cmp	r3, r2
 80079b4:	bfc4      	itt	gt
 80079b6:	1a9b      	subgt	r3, r3, r2
 80079b8:	18ed      	addgt	r5, r5, r3
 80079ba:	2600      	movs	r6, #0
 80079bc:	341a      	adds	r4, #26
 80079be:	42b5      	cmp	r5, r6
 80079c0:	d11a      	bne.n	80079f8 <_printf_common+0xc8>
 80079c2:	2000      	movs	r0, #0
 80079c4:	e008      	b.n	80079d8 <_printf_common+0xa8>
 80079c6:	2301      	movs	r3, #1
 80079c8:	4652      	mov	r2, sl
 80079ca:	4649      	mov	r1, r9
 80079cc:	4638      	mov	r0, r7
 80079ce:	47c0      	blx	r8
 80079d0:	3001      	adds	r0, #1
 80079d2:	d103      	bne.n	80079dc <_printf_common+0xac>
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079dc:	3501      	adds	r5, #1
 80079de:	e7c6      	b.n	800796e <_printf_common+0x3e>
 80079e0:	18e1      	adds	r1, r4, r3
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	2030      	movs	r0, #48	; 0x30
 80079e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079ea:	4422      	add	r2, r4
 80079ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079f4:	3302      	adds	r3, #2
 80079f6:	e7c7      	b.n	8007988 <_printf_common+0x58>
 80079f8:	2301      	movs	r3, #1
 80079fa:	4622      	mov	r2, r4
 80079fc:	4649      	mov	r1, r9
 80079fe:	4638      	mov	r0, r7
 8007a00:	47c0      	blx	r8
 8007a02:	3001      	adds	r0, #1
 8007a04:	d0e6      	beq.n	80079d4 <_printf_common+0xa4>
 8007a06:	3601      	adds	r6, #1
 8007a08:	e7d9      	b.n	80079be <_printf_common+0x8e>
	...

08007a0c <_printf_i>:
 8007a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	7e0f      	ldrb	r7, [r1, #24]
 8007a12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a14:	2f78      	cmp	r7, #120	; 0x78
 8007a16:	4691      	mov	r9, r2
 8007a18:	4680      	mov	r8, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	469a      	mov	sl, r3
 8007a1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a22:	d807      	bhi.n	8007a34 <_printf_i+0x28>
 8007a24:	2f62      	cmp	r7, #98	; 0x62
 8007a26:	d80a      	bhi.n	8007a3e <_printf_i+0x32>
 8007a28:	2f00      	cmp	r7, #0
 8007a2a:	f000 80d8 	beq.w	8007bde <_printf_i+0x1d2>
 8007a2e:	2f58      	cmp	r7, #88	; 0x58
 8007a30:	f000 80a3 	beq.w	8007b7a <_printf_i+0x16e>
 8007a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a3c:	e03a      	b.n	8007ab4 <_printf_i+0xa8>
 8007a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a42:	2b15      	cmp	r3, #21
 8007a44:	d8f6      	bhi.n	8007a34 <_printf_i+0x28>
 8007a46:	a101      	add	r1, pc, #4	; (adr r1, 8007a4c <_printf_i+0x40>)
 8007a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a4c:	08007aa5 	.word	0x08007aa5
 8007a50:	08007ab9 	.word	0x08007ab9
 8007a54:	08007a35 	.word	0x08007a35
 8007a58:	08007a35 	.word	0x08007a35
 8007a5c:	08007a35 	.word	0x08007a35
 8007a60:	08007a35 	.word	0x08007a35
 8007a64:	08007ab9 	.word	0x08007ab9
 8007a68:	08007a35 	.word	0x08007a35
 8007a6c:	08007a35 	.word	0x08007a35
 8007a70:	08007a35 	.word	0x08007a35
 8007a74:	08007a35 	.word	0x08007a35
 8007a78:	08007bc5 	.word	0x08007bc5
 8007a7c:	08007ae9 	.word	0x08007ae9
 8007a80:	08007ba7 	.word	0x08007ba7
 8007a84:	08007a35 	.word	0x08007a35
 8007a88:	08007a35 	.word	0x08007a35
 8007a8c:	08007be7 	.word	0x08007be7
 8007a90:	08007a35 	.word	0x08007a35
 8007a94:	08007ae9 	.word	0x08007ae9
 8007a98:	08007a35 	.word	0x08007a35
 8007a9c:	08007a35 	.word	0x08007a35
 8007aa0:	08007baf 	.word	0x08007baf
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	1d1a      	adds	r2, r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	602a      	str	r2, [r5, #0]
 8007aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e0a3      	b.n	8007c00 <_printf_i+0x1f4>
 8007ab8:	6820      	ldr	r0, [r4, #0]
 8007aba:	6829      	ldr	r1, [r5, #0]
 8007abc:	0606      	lsls	r6, r0, #24
 8007abe:	f101 0304 	add.w	r3, r1, #4
 8007ac2:	d50a      	bpl.n	8007ada <_printf_i+0xce>
 8007ac4:	680e      	ldr	r6, [r1, #0]
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	2e00      	cmp	r6, #0
 8007aca:	da03      	bge.n	8007ad4 <_printf_i+0xc8>
 8007acc:	232d      	movs	r3, #45	; 0x2d
 8007ace:	4276      	negs	r6, r6
 8007ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad4:	485e      	ldr	r0, [pc, #376]	; (8007c50 <_printf_i+0x244>)
 8007ad6:	230a      	movs	r3, #10
 8007ad8:	e019      	b.n	8007b0e <_printf_i+0x102>
 8007ada:	680e      	ldr	r6, [r1, #0]
 8007adc:	602b      	str	r3, [r5, #0]
 8007ade:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ae2:	bf18      	it	ne
 8007ae4:	b236      	sxthne	r6, r6
 8007ae6:	e7ef      	b.n	8007ac8 <_printf_i+0xbc>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	1d19      	adds	r1, r3, #4
 8007aee:	6029      	str	r1, [r5, #0]
 8007af0:	0601      	lsls	r1, r0, #24
 8007af2:	d501      	bpl.n	8007af8 <_printf_i+0xec>
 8007af4:	681e      	ldr	r6, [r3, #0]
 8007af6:	e002      	b.n	8007afe <_printf_i+0xf2>
 8007af8:	0646      	lsls	r6, r0, #25
 8007afa:	d5fb      	bpl.n	8007af4 <_printf_i+0xe8>
 8007afc:	881e      	ldrh	r6, [r3, #0]
 8007afe:	4854      	ldr	r0, [pc, #336]	; (8007c50 <_printf_i+0x244>)
 8007b00:	2f6f      	cmp	r7, #111	; 0x6f
 8007b02:	bf0c      	ite	eq
 8007b04:	2308      	moveq	r3, #8
 8007b06:	230a      	movne	r3, #10
 8007b08:	2100      	movs	r1, #0
 8007b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b0e:	6865      	ldr	r5, [r4, #4]
 8007b10:	60a5      	str	r5, [r4, #8]
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	bfa2      	ittt	ge
 8007b16:	6821      	ldrge	r1, [r4, #0]
 8007b18:	f021 0104 	bicge.w	r1, r1, #4
 8007b1c:	6021      	strge	r1, [r4, #0]
 8007b1e:	b90e      	cbnz	r6, 8007b24 <_printf_i+0x118>
 8007b20:	2d00      	cmp	r5, #0
 8007b22:	d04d      	beq.n	8007bc0 <_printf_i+0x1b4>
 8007b24:	4615      	mov	r5, r2
 8007b26:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b2a:	fb03 6711 	mls	r7, r3, r1, r6
 8007b2e:	5dc7      	ldrb	r7, [r0, r7]
 8007b30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b34:	4637      	mov	r7, r6
 8007b36:	42bb      	cmp	r3, r7
 8007b38:	460e      	mov	r6, r1
 8007b3a:	d9f4      	bls.n	8007b26 <_printf_i+0x11a>
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d10b      	bne.n	8007b58 <_printf_i+0x14c>
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	07de      	lsls	r6, r3, #31
 8007b44:	d508      	bpl.n	8007b58 <_printf_i+0x14c>
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	6861      	ldr	r1, [r4, #4]
 8007b4a:	4299      	cmp	r1, r3
 8007b4c:	bfde      	ittt	le
 8007b4e:	2330      	movle	r3, #48	; 0x30
 8007b50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b58:	1b52      	subs	r2, r2, r5
 8007b5a:	6122      	str	r2, [r4, #16]
 8007b5c:	f8cd a000 	str.w	sl, [sp]
 8007b60:	464b      	mov	r3, r9
 8007b62:	aa03      	add	r2, sp, #12
 8007b64:	4621      	mov	r1, r4
 8007b66:	4640      	mov	r0, r8
 8007b68:	f7ff fee2 	bl	8007930 <_printf_common>
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d14c      	bne.n	8007c0a <_printf_i+0x1fe>
 8007b70:	f04f 30ff 	mov.w	r0, #4294967295
 8007b74:	b004      	add	sp, #16
 8007b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b7a:	4835      	ldr	r0, [pc, #212]	; (8007c50 <_printf_i+0x244>)
 8007b7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b80:	6829      	ldr	r1, [r5, #0]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b88:	6029      	str	r1, [r5, #0]
 8007b8a:	061d      	lsls	r5, r3, #24
 8007b8c:	d514      	bpl.n	8007bb8 <_printf_i+0x1ac>
 8007b8e:	07df      	lsls	r7, r3, #31
 8007b90:	bf44      	itt	mi
 8007b92:	f043 0320 	orrmi.w	r3, r3, #32
 8007b96:	6023      	strmi	r3, [r4, #0]
 8007b98:	b91e      	cbnz	r6, 8007ba2 <_printf_i+0x196>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	f023 0320 	bic.w	r3, r3, #32
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	2310      	movs	r3, #16
 8007ba4:	e7b0      	b.n	8007b08 <_printf_i+0xfc>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	f043 0320 	orr.w	r3, r3, #32
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	2378      	movs	r3, #120	; 0x78
 8007bb0:	4828      	ldr	r0, [pc, #160]	; (8007c54 <_printf_i+0x248>)
 8007bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bb6:	e7e3      	b.n	8007b80 <_printf_i+0x174>
 8007bb8:	0659      	lsls	r1, r3, #25
 8007bba:	bf48      	it	mi
 8007bbc:	b2b6      	uxthmi	r6, r6
 8007bbe:	e7e6      	b.n	8007b8e <_printf_i+0x182>
 8007bc0:	4615      	mov	r5, r2
 8007bc2:	e7bb      	b.n	8007b3c <_printf_i+0x130>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	6826      	ldr	r6, [r4, #0]
 8007bc8:	6961      	ldr	r1, [r4, #20]
 8007bca:	1d18      	adds	r0, r3, #4
 8007bcc:	6028      	str	r0, [r5, #0]
 8007bce:	0635      	lsls	r5, r6, #24
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	d501      	bpl.n	8007bd8 <_printf_i+0x1cc>
 8007bd4:	6019      	str	r1, [r3, #0]
 8007bd6:	e002      	b.n	8007bde <_printf_i+0x1d2>
 8007bd8:	0670      	lsls	r0, r6, #25
 8007bda:	d5fb      	bpl.n	8007bd4 <_printf_i+0x1c8>
 8007bdc:	8019      	strh	r1, [r3, #0]
 8007bde:	2300      	movs	r3, #0
 8007be0:	6123      	str	r3, [r4, #16]
 8007be2:	4615      	mov	r5, r2
 8007be4:	e7ba      	b.n	8007b5c <_printf_i+0x150>
 8007be6:	682b      	ldr	r3, [r5, #0]
 8007be8:	1d1a      	adds	r2, r3, #4
 8007bea:	602a      	str	r2, [r5, #0]
 8007bec:	681d      	ldr	r5, [r3, #0]
 8007bee:	6862      	ldr	r2, [r4, #4]
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f7f8 fb14 	bl	8000220 <memchr>
 8007bf8:	b108      	cbz	r0, 8007bfe <_printf_i+0x1f2>
 8007bfa:	1b40      	subs	r0, r0, r5
 8007bfc:	6060      	str	r0, [r4, #4]
 8007bfe:	6863      	ldr	r3, [r4, #4]
 8007c00:	6123      	str	r3, [r4, #16]
 8007c02:	2300      	movs	r3, #0
 8007c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c08:	e7a8      	b.n	8007b5c <_printf_i+0x150>
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	4649      	mov	r1, r9
 8007c10:	4640      	mov	r0, r8
 8007c12:	47d0      	blx	sl
 8007c14:	3001      	adds	r0, #1
 8007c16:	d0ab      	beq.n	8007b70 <_printf_i+0x164>
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	079b      	lsls	r3, r3, #30
 8007c1c:	d413      	bmi.n	8007c46 <_printf_i+0x23a>
 8007c1e:	68e0      	ldr	r0, [r4, #12]
 8007c20:	9b03      	ldr	r3, [sp, #12]
 8007c22:	4298      	cmp	r0, r3
 8007c24:	bfb8      	it	lt
 8007c26:	4618      	movlt	r0, r3
 8007c28:	e7a4      	b.n	8007b74 <_printf_i+0x168>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	4649      	mov	r1, r9
 8007c30:	4640      	mov	r0, r8
 8007c32:	47d0      	blx	sl
 8007c34:	3001      	adds	r0, #1
 8007c36:	d09b      	beq.n	8007b70 <_printf_i+0x164>
 8007c38:	3501      	adds	r5, #1
 8007c3a:	68e3      	ldr	r3, [r4, #12]
 8007c3c:	9903      	ldr	r1, [sp, #12]
 8007c3e:	1a5b      	subs	r3, r3, r1
 8007c40:	42ab      	cmp	r3, r5
 8007c42:	dcf2      	bgt.n	8007c2a <_printf_i+0x21e>
 8007c44:	e7eb      	b.n	8007c1e <_printf_i+0x212>
 8007c46:	2500      	movs	r5, #0
 8007c48:	f104 0619 	add.w	r6, r4, #25
 8007c4c:	e7f5      	b.n	8007c3a <_printf_i+0x22e>
 8007c4e:	bf00      	nop
 8007c50:	08008087 	.word	0x08008087
 8007c54:	08008098 	.word	0x08008098

08007c58 <memcpy>:
 8007c58:	440a      	add	r2, r1
 8007c5a:	4291      	cmp	r1, r2
 8007c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c60:	d100      	bne.n	8007c64 <memcpy+0xc>
 8007c62:	4770      	bx	lr
 8007c64:	b510      	push	{r4, lr}
 8007c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c6e:	4291      	cmp	r1, r2
 8007c70:	d1f9      	bne.n	8007c66 <memcpy+0xe>
 8007c72:	bd10      	pop	{r4, pc}

08007c74 <memmove>:
 8007c74:	4288      	cmp	r0, r1
 8007c76:	b510      	push	{r4, lr}
 8007c78:	eb01 0402 	add.w	r4, r1, r2
 8007c7c:	d902      	bls.n	8007c84 <memmove+0x10>
 8007c7e:	4284      	cmp	r4, r0
 8007c80:	4623      	mov	r3, r4
 8007c82:	d807      	bhi.n	8007c94 <memmove+0x20>
 8007c84:	1e43      	subs	r3, r0, #1
 8007c86:	42a1      	cmp	r1, r4
 8007c88:	d008      	beq.n	8007c9c <memmove+0x28>
 8007c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c92:	e7f8      	b.n	8007c86 <memmove+0x12>
 8007c94:	4402      	add	r2, r0
 8007c96:	4601      	mov	r1, r0
 8007c98:	428a      	cmp	r2, r1
 8007c9a:	d100      	bne.n	8007c9e <memmove+0x2a>
 8007c9c:	bd10      	pop	{r4, pc}
 8007c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ca6:	e7f7      	b.n	8007c98 <memmove+0x24>

08007ca8 <_free_r>:
 8007ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007caa:	2900      	cmp	r1, #0
 8007cac:	d044      	beq.n	8007d38 <_free_r+0x90>
 8007cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb2:	9001      	str	r0, [sp, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f1a1 0404 	sub.w	r4, r1, #4
 8007cba:	bfb8      	it	lt
 8007cbc:	18e4      	addlt	r4, r4, r3
 8007cbe:	f000 f913 	bl	8007ee8 <__malloc_lock>
 8007cc2:	4a1e      	ldr	r2, [pc, #120]	; (8007d3c <_free_r+0x94>)
 8007cc4:	9801      	ldr	r0, [sp, #4]
 8007cc6:	6813      	ldr	r3, [r2, #0]
 8007cc8:	b933      	cbnz	r3, 8007cd8 <_free_r+0x30>
 8007cca:	6063      	str	r3, [r4, #4]
 8007ccc:	6014      	str	r4, [r2, #0]
 8007cce:	b003      	add	sp, #12
 8007cd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cd4:	f000 b90e 	b.w	8007ef4 <__malloc_unlock>
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	d908      	bls.n	8007cee <_free_r+0x46>
 8007cdc:	6825      	ldr	r5, [r4, #0]
 8007cde:	1961      	adds	r1, r4, r5
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	bf01      	itttt	eq
 8007ce4:	6819      	ldreq	r1, [r3, #0]
 8007ce6:	685b      	ldreq	r3, [r3, #4]
 8007ce8:	1949      	addeq	r1, r1, r5
 8007cea:	6021      	streq	r1, [r4, #0]
 8007cec:	e7ed      	b.n	8007cca <_free_r+0x22>
 8007cee:	461a      	mov	r2, r3
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	b10b      	cbz	r3, 8007cf8 <_free_r+0x50>
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d9fa      	bls.n	8007cee <_free_r+0x46>
 8007cf8:	6811      	ldr	r1, [r2, #0]
 8007cfa:	1855      	adds	r5, r2, r1
 8007cfc:	42a5      	cmp	r5, r4
 8007cfe:	d10b      	bne.n	8007d18 <_free_r+0x70>
 8007d00:	6824      	ldr	r4, [r4, #0]
 8007d02:	4421      	add	r1, r4
 8007d04:	1854      	adds	r4, r2, r1
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	6011      	str	r1, [r2, #0]
 8007d0a:	d1e0      	bne.n	8007cce <_free_r+0x26>
 8007d0c:	681c      	ldr	r4, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	6053      	str	r3, [r2, #4]
 8007d12:	4421      	add	r1, r4
 8007d14:	6011      	str	r1, [r2, #0]
 8007d16:	e7da      	b.n	8007cce <_free_r+0x26>
 8007d18:	d902      	bls.n	8007d20 <_free_r+0x78>
 8007d1a:	230c      	movs	r3, #12
 8007d1c:	6003      	str	r3, [r0, #0]
 8007d1e:	e7d6      	b.n	8007cce <_free_r+0x26>
 8007d20:	6825      	ldr	r5, [r4, #0]
 8007d22:	1961      	adds	r1, r4, r5
 8007d24:	428b      	cmp	r3, r1
 8007d26:	bf04      	itt	eq
 8007d28:	6819      	ldreq	r1, [r3, #0]
 8007d2a:	685b      	ldreq	r3, [r3, #4]
 8007d2c:	6063      	str	r3, [r4, #4]
 8007d2e:	bf04      	itt	eq
 8007d30:	1949      	addeq	r1, r1, r5
 8007d32:	6021      	streq	r1, [r4, #0]
 8007d34:	6054      	str	r4, [r2, #4]
 8007d36:	e7ca      	b.n	8007cce <_free_r+0x26>
 8007d38:	b003      	add	sp, #12
 8007d3a:	bd30      	pop	{r4, r5, pc}
 8007d3c:	2000099c 	.word	0x2000099c

08007d40 <sbrk_aligned>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	4e0e      	ldr	r6, [pc, #56]	; (8007d7c <sbrk_aligned+0x3c>)
 8007d44:	460c      	mov	r4, r1
 8007d46:	6831      	ldr	r1, [r6, #0]
 8007d48:	4605      	mov	r5, r0
 8007d4a:	b911      	cbnz	r1, 8007d52 <sbrk_aligned+0x12>
 8007d4c:	f000 f8bc 	bl	8007ec8 <_sbrk_r>
 8007d50:	6030      	str	r0, [r6, #0]
 8007d52:	4621      	mov	r1, r4
 8007d54:	4628      	mov	r0, r5
 8007d56:	f000 f8b7 	bl	8007ec8 <_sbrk_r>
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	d00a      	beq.n	8007d74 <sbrk_aligned+0x34>
 8007d5e:	1cc4      	adds	r4, r0, #3
 8007d60:	f024 0403 	bic.w	r4, r4, #3
 8007d64:	42a0      	cmp	r0, r4
 8007d66:	d007      	beq.n	8007d78 <sbrk_aligned+0x38>
 8007d68:	1a21      	subs	r1, r4, r0
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 f8ac 	bl	8007ec8 <_sbrk_r>
 8007d70:	3001      	adds	r0, #1
 8007d72:	d101      	bne.n	8007d78 <sbrk_aligned+0x38>
 8007d74:	f04f 34ff 	mov.w	r4, #4294967295
 8007d78:	4620      	mov	r0, r4
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
 8007d7c:	200009a0 	.word	0x200009a0

08007d80 <_malloc_r>:
 8007d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d84:	1ccd      	adds	r5, r1, #3
 8007d86:	f025 0503 	bic.w	r5, r5, #3
 8007d8a:	3508      	adds	r5, #8
 8007d8c:	2d0c      	cmp	r5, #12
 8007d8e:	bf38      	it	cc
 8007d90:	250c      	movcc	r5, #12
 8007d92:	2d00      	cmp	r5, #0
 8007d94:	4607      	mov	r7, r0
 8007d96:	db01      	blt.n	8007d9c <_malloc_r+0x1c>
 8007d98:	42a9      	cmp	r1, r5
 8007d9a:	d905      	bls.n	8007da8 <_malloc_r+0x28>
 8007d9c:	230c      	movs	r3, #12
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	2600      	movs	r6, #0
 8007da2:	4630      	mov	r0, r6
 8007da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da8:	4e2e      	ldr	r6, [pc, #184]	; (8007e64 <_malloc_r+0xe4>)
 8007daa:	f000 f89d 	bl	8007ee8 <__malloc_lock>
 8007dae:	6833      	ldr	r3, [r6, #0]
 8007db0:	461c      	mov	r4, r3
 8007db2:	bb34      	cbnz	r4, 8007e02 <_malloc_r+0x82>
 8007db4:	4629      	mov	r1, r5
 8007db6:	4638      	mov	r0, r7
 8007db8:	f7ff ffc2 	bl	8007d40 <sbrk_aligned>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	d14d      	bne.n	8007e5e <_malloc_r+0xde>
 8007dc2:	6834      	ldr	r4, [r6, #0]
 8007dc4:	4626      	mov	r6, r4
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	d140      	bne.n	8007e4c <_malloc_r+0xcc>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4638      	mov	r0, r7
 8007dd0:	eb04 0803 	add.w	r8, r4, r3
 8007dd4:	f000 f878 	bl	8007ec8 <_sbrk_r>
 8007dd8:	4580      	cmp	r8, r0
 8007dda:	d13a      	bne.n	8007e52 <_malloc_r+0xd2>
 8007ddc:	6821      	ldr	r1, [r4, #0]
 8007dde:	3503      	adds	r5, #3
 8007de0:	1a6d      	subs	r5, r5, r1
 8007de2:	f025 0503 	bic.w	r5, r5, #3
 8007de6:	3508      	adds	r5, #8
 8007de8:	2d0c      	cmp	r5, #12
 8007dea:	bf38      	it	cc
 8007dec:	250c      	movcc	r5, #12
 8007dee:	4629      	mov	r1, r5
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff ffa5 	bl	8007d40 <sbrk_aligned>
 8007df6:	3001      	adds	r0, #1
 8007df8:	d02b      	beq.n	8007e52 <_malloc_r+0xd2>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	442b      	add	r3, r5
 8007dfe:	6023      	str	r3, [r4, #0]
 8007e00:	e00e      	b.n	8007e20 <_malloc_r+0xa0>
 8007e02:	6822      	ldr	r2, [r4, #0]
 8007e04:	1b52      	subs	r2, r2, r5
 8007e06:	d41e      	bmi.n	8007e46 <_malloc_r+0xc6>
 8007e08:	2a0b      	cmp	r2, #11
 8007e0a:	d916      	bls.n	8007e3a <_malloc_r+0xba>
 8007e0c:	1961      	adds	r1, r4, r5
 8007e0e:	42a3      	cmp	r3, r4
 8007e10:	6025      	str	r5, [r4, #0]
 8007e12:	bf18      	it	ne
 8007e14:	6059      	strne	r1, [r3, #4]
 8007e16:	6863      	ldr	r3, [r4, #4]
 8007e18:	bf08      	it	eq
 8007e1a:	6031      	streq	r1, [r6, #0]
 8007e1c:	5162      	str	r2, [r4, r5]
 8007e1e:	604b      	str	r3, [r1, #4]
 8007e20:	4638      	mov	r0, r7
 8007e22:	f104 060b 	add.w	r6, r4, #11
 8007e26:	f000 f865 	bl	8007ef4 <__malloc_unlock>
 8007e2a:	f026 0607 	bic.w	r6, r6, #7
 8007e2e:	1d23      	adds	r3, r4, #4
 8007e30:	1af2      	subs	r2, r6, r3
 8007e32:	d0b6      	beq.n	8007da2 <_malloc_r+0x22>
 8007e34:	1b9b      	subs	r3, r3, r6
 8007e36:	50a3      	str	r3, [r4, r2]
 8007e38:	e7b3      	b.n	8007da2 <_malloc_r+0x22>
 8007e3a:	6862      	ldr	r2, [r4, #4]
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	bf0c      	ite	eq
 8007e40:	6032      	streq	r2, [r6, #0]
 8007e42:	605a      	strne	r2, [r3, #4]
 8007e44:	e7ec      	b.n	8007e20 <_malloc_r+0xa0>
 8007e46:	4623      	mov	r3, r4
 8007e48:	6864      	ldr	r4, [r4, #4]
 8007e4a:	e7b2      	b.n	8007db2 <_malloc_r+0x32>
 8007e4c:	4634      	mov	r4, r6
 8007e4e:	6876      	ldr	r6, [r6, #4]
 8007e50:	e7b9      	b.n	8007dc6 <_malloc_r+0x46>
 8007e52:	230c      	movs	r3, #12
 8007e54:	603b      	str	r3, [r7, #0]
 8007e56:	4638      	mov	r0, r7
 8007e58:	f000 f84c 	bl	8007ef4 <__malloc_unlock>
 8007e5c:	e7a1      	b.n	8007da2 <_malloc_r+0x22>
 8007e5e:	6025      	str	r5, [r4, #0]
 8007e60:	e7de      	b.n	8007e20 <_malloc_r+0xa0>
 8007e62:	bf00      	nop
 8007e64:	2000099c 	.word	0x2000099c

08007e68 <_realloc_r>:
 8007e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	4614      	mov	r4, r2
 8007e70:	460e      	mov	r6, r1
 8007e72:	b921      	cbnz	r1, 8007e7e <_realloc_r+0x16>
 8007e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e78:	4611      	mov	r1, r2
 8007e7a:	f7ff bf81 	b.w	8007d80 <_malloc_r>
 8007e7e:	b92a      	cbnz	r2, 8007e8c <_realloc_r+0x24>
 8007e80:	f7ff ff12 	bl	8007ca8 <_free_r>
 8007e84:	4625      	mov	r5, r4
 8007e86:	4628      	mov	r0, r5
 8007e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8c:	f000 f838 	bl	8007f00 <_malloc_usable_size_r>
 8007e90:	4284      	cmp	r4, r0
 8007e92:	4607      	mov	r7, r0
 8007e94:	d802      	bhi.n	8007e9c <_realloc_r+0x34>
 8007e96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e9a:	d812      	bhi.n	8007ec2 <_realloc_r+0x5a>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	f7ff ff6e 	bl	8007d80 <_malloc_r>
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d0ed      	beq.n	8007e86 <_realloc_r+0x1e>
 8007eaa:	42bc      	cmp	r4, r7
 8007eac:	4622      	mov	r2, r4
 8007eae:	4631      	mov	r1, r6
 8007eb0:	bf28      	it	cs
 8007eb2:	463a      	movcs	r2, r7
 8007eb4:	f7ff fed0 	bl	8007c58 <memcpy>
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4640      	mov	r0, r8
 8007ebc:	f7ff fef4 	bl	8007ca8 <_free_r>
 8007ec0:	e7e1      	b.n	8007e86 <_realloc_r+0x1e>
 8007ec2:	4635      	mov	r5, r6
 8007ec4:	e7df      	b.n	8007e86 <_realloc_r+0x1e>
	...

08007ec8 <_sbrk_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	4d06      	ldr	r5, [pc, #24]	; (8007ee4 <_sbrk_r+0x1c>)
 8007ecc:	2300      	movs	r3, #0
 8007ece:	4604      	mov	r4, r0
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	602b      	str	r3, [r5, #0]
 8007ed4:	f7f8 fff0 	bl	8000eb8 <_sbrk>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d102      	bne.n	8007ee2 <_sbrk_r+0x1a>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	b103      	cbz	r3, 8007ee2 <_sbrk_r+0x1a>
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	200009a4 	.word	0x200009a4

08007ee8 <__malloc_lock>:
 8007ee8:	4801      	ldr	r0, [pc, #4]	; (8007ef0 <__malloc_lock+0x8>)
 8007eea:	f000 b811 	b.w	8007f10 <__retarget_lock_acquire_recursive>
 8007eee:	bf00      	nop
 8007ef0:	200009a8 	.word	0x200009a8

08007ef4 <__malloc_unlock>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <__malloc_unlock+0x8>)
 8007ef6:	f000 b80c 	b.w	8007f12 <__retarget_lock_release_recursive>
 8007efa:	bf00      	nop
 8007efc:	200009a8 	.word	0x200009a8

08007f00 <_malloc_usable_size_r>:
 8007f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f04:	1f18      	subs	r0, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	bfbc      	itt	lt
 8007f0a:	580b      	ldrlt	r3, [r1, r0]
 8007f0c:	18c0      	addlt	r0, r0, r3
 8007f0e:	4770      	bx	lr

08007f10 <__retarget_lock_acquire_recursive>:
 8007f10:	4770      	bx	lr

08007f12 <__retarget_lock_release_recursive>:
 8007f12:	4770      	bx	lr

08007f14 <_init>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	bf00      	nop
 8007f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1a:	bc08      	pop	{r3}
 8007f1c:	469e      	mov	lr, r3
 8007f1e:	4770      	bx	lr

08007f20 <_fini>:
 8007f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f22:	bf00      	nop
 8007f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f26:	bc08      	pop	{r3}
 8007f28:	469e      	mov	lr, r3
 8007f2a:	4770      	bx	lr
