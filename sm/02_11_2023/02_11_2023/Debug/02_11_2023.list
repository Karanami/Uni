
02_11_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c8  080061c8  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d0  080061d0  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080061d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  080061e8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08006288  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007c8  20000150  08006328  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000918  08006328  00020918  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   000181d8  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000029a1  00000000  00000000  00038358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012e0  00000000  00000000  0003ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011e8  00000000  00000000  0003bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000277d8  00000000  00000000  0003d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015ad0  00000000  00000000  000649a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f81c3  00000000  00000000  0007a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00172633  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000051cc  00000000  00000000  00172684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000150 	.word	0x20000150
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006168 	.word	0x08006168

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000154 	.word	0x20000154
 8000204:	08006168 	.word	0x08006168

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 ff1d 	bl	800135e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f83e 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fab6 	bl	8000a98 <MX_GPIO_Init>
  MX_ETH_Init();
 800052c:	f000 f8a2 	bl	8000674 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000530:	f000 fa54 	bl	80009dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000534:	f000 fa82 	bl	8000a3c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000538:	f000 f8ea 	bl	8000710 <MX_TIM1_Init>
  MX_TIM2_Init();
 800053c:	f000 f9ac 	bl	8000898 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000540:	f000 f9f8 	bl	8000934 <MX_TIM3_Init>
#endif
#if ZAD == 5
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
#endif
#if ZAD == 6
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000544:	213c      	movs	r1, #60	; 0x3c
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <main+0x74>)
 8000548:	f003 f98a 	bl	8003860 <HAL_TIM_Encoder_Start>
#if ZAD == 5
	  HAL_Delay(100);
	  encoder = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
#endif
#if ZAD == 6
	  HAL_Delay(1000);
 800054c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000550:	f000 ff62 	bl	8001418 <HAL_Delay>
	  encoder = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <main+0x74>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <main+0x78>)
 800055c:	6013      	str	r3, [r2, #0]
	  itoa(encoder, buff, 10);
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <main+0x78>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	220a      	movs	r2, #10
 8000564:	490c      	ldr	r1, [pc, #48]	; (8000598 <main+0x7c>)
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fdb2 	bl	80060d0 <itoa>
	  HAL_UART_Transmit(&huart3, buff, strlen(buff), 100);
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <main+0x7c>)
 800056e:	f7ff fe4b 	bl	8000208 <strlen>
 8000572:	4603      	mov	r3, r0
 8000574:	b29a      	uxth	r2, r3
 8000576:	2364      	movs	r3, #100	; 0x64
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <main+0x7c>)
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <main+0x80>)
 800057c:	f004 fa5a 	bl	8004a34 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, "\n\r", 2, 100);
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	2202      	movs	r2, #2
 8000584:	4906      	ldr	r1, [pc, #24]	; (80005a0 <main+0x84>)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <main+0x80>)
 8000588:	f004 fa54 	bl	8004a34 <HAL_UART_Transmit>
  {
 800058c:	e7de      	b.n	800054c <main+0x30>
 800058e:	bf00      	nop
 8000590:	200002ec 	.word	0x200002ec
 8000594:	20000908 	.word	0x20000908
 8000598:	200008c8 	.word	0x200008c8
 800059c:	20000338 	.word	0x20000338
 80005a0:	08006180 	.word	0x08006180

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fd8e 	bl	80060d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c8:	f001 ff22 	bl	8002410 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a26      	ldr	r2, [pc, #152]	; (800066c <SystemClock_Config+0xc8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <SystemClock_Config+0xc8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a20      	ldr	r2, [pc, #128]	; (8000670 <SystemClock_Config+0xcc>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <SystemClock_Config+0xcc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000604:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000618:	2348      	movs	r3, #72	; 0x48
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000620:	2303      	movs	r3, #3
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f001 ff01 	bl	8002430 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 fb6c 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2102      	movs	r1, #2
 8000654:	4618      	mov	r0, r3
 8000656:	f002 f98f 	bl	8002978 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000660:	f000 fb56 	bl	8000d10 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ETH_Init+0x84>)
 800067a:	4a20      	ldr	r2, [pc, #128]	; (80006fc <MX_ETH_Init+0x88>)
 800067c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_ETH_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_ETH_Init+0x8c>)
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_ETH_Init+0x8c>)
 800068c:	22e1      	movs	r2, #225	; 0xe1
 800068e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_ETH_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_ETH_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_ETH_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ETH_Init+0x84>)
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_ETH_Init+0x8c>)
 80006a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ETH_Init+0x84>)
 80006aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ETH_Init+0x84>)
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <MX_ETH_Init+0x90>)
 80006b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_ETH_Init+0x84>)
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_ETH_Init+0x94>)
 80006ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_ETH_Init+0x84>)
 80006be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_ETH_Init+0x84>)
 80006c6:	f001 f86f 	bl	80017a8 <HAL_ETH_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006d0:	f000 fb1e 	bl	8000d10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006d4:	2238      	movs	r2, #56	; 0x38
 80006d6:	2100      	movs	r1, #0
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_ETH_Init+0x98>)
 80006da:	f005 fcfb 	bl	80060d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_ETH_Init+0x98>)
 80006e0:	2221      	movs	r2, #33	; 0x21
 80006e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_ETH_Init+0x98>)
 80006e6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_ETH_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200001a4 	.word	0x200001a4
 80006fc:	40028000 	.word	0x40028000
 8000700:	2000090c 	.word	0x2000090c
 8000704:	200000b0 	.word	0x200000b0
 8000708:	20000010 	.word	0x20000010
 800070c:	2000016c 	.word	0x2000016c

08000710 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09a      	sub	sp, #104	; 0x68
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000730:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]
 8000742:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	222c      	movs	r2, #44	; 0x2c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f005 fcc2 	bl	80060d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000750:	4b4f      	ldr	r3, [pc, #316]	; (8000890 <MX_TIM1_Init+0x180>)
 8000752:	4a50      	ldr	r2, [pc, #320]	; (8000894 <MX_TIM1_Init+0x184>)
 8000754:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8000756:	4b4e      	ldr	r3, [pc, #312]	; (8000890 <MX_TIM1_Init+0x180>)
 8000758:	2247      	movs	r2, #71	; 0x47
 800075a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075c:	4b4c      	ldr	r3, [pc, #304]	; (8000890 <MX_TIM1_Init+0x180>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000 - 1;
 8000762:	4b4b      	ldr	r3, [pc, #300]	; (8000890 <MX_TIM1_Init+0x180>)
 8000764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000768:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b49      	ldr	r3, [pc, #292]	; (8000890 <MX_TIM1_Init+0x180>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000770:	4b47      	ldr	r3, [pc, #284]	; (8000890 <MX_TIM1_Init+0x180>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b46      	ldr	r3, [pc, #280]	; (8000890 <MX_TIM1_Init+0x180>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800077c:	4844      	ldr	r0, [pc, #272]	; (8000890 <MX_TIM1_Init+0x180>)
 800077e:	f002 ff11 	bl	80035a4 <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 fac2 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000792:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000796:	4619      	mov	r1, r3
 8000798:	483d      	ldr	r0, [pc, #244]	; (8000890 <MX_TIM1_Init+0x180>)
 800079a:	f003 fb23 	bl	8003de4 <HAL_TIM_ConfigClockSource>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007a4:	f000 fab4 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a8:	4839      	ldr	r0, [pc, #228]	; (8000890 <MX_TIM1_Init+0x180>)
 80007aa:	f002 ff52 	bl	8003652 <HAL_TIM_PWM_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007b4:	f000 faac 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c8:	4619      	mov	r1, r3
 80007ca:	4831      	ldr	r0, [pc, #196]	; (8000890 <MX_TIM1_Init+0x180>)
 80007cc:	f003 ffba 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007d6:	f000 fa9b 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007da:	2360      	movs	r3, #96	; 0x60
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e6:	2300      	movs	r3, #0
 80007e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4824      	ldr	r0, [pc, #144]	; (8000890 <MX_TIM1_Init+0x180>)
 8000800:	f003 f9dc 	bl	8003bbc <HAL_TIM_PWM_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800080a:	f000 fa81 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800080e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000812:	2204      	movs	r2, #4
 8000814:	4619      	mov	r1, r3
 8000816:	481e      	ldr	r0, [pc, #120]	; (8000890 <MX_TIM1_Init+0x180>)
 8000818:	f003 f9d0 	bl	8003bbc <HAL_TIM_PWM_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000822:	f000 fa75 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800082a:	2208      	movs	r2, #8
 800082c:	4619      	mov	r1, r3
 800082e:	4818      	ldr	r0, [pc, #96]	; (8000890 <MX_TIM1_Init+0x180>)
 8000830:	f003 f9c4 	bl	8003bbc <HAL_TIM_PWM_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800083a:	f000 fa69 	bl	8000d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <MX_TIM1_Init+0x180>)
 8000874:	f003 fff4 	bl	8004860 <HAL_TIMEx_ConfigBreakDeadTime>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800087e:	f000 fa47 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000882:	4803      	ldr	r0, [pc, #12]	; (8000890 <MX_TIM1_Init+0x180>)
 8000884:	f000 fbd8 	bl	8001038 <HAL_TIM_MspPostInit>

}
 8000888:	bf00      	nop
 800088a:	3768      	adds	r7, #104	; 0x68
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000254 	.word	0x20000254
 8000894:	40010000 	.word	0x40010000

08000898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM2_Init+0x98>)
 80008b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM2_Init+0x98>)
 80008c0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80008c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM2_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000 - 1;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_TIM2_Init+0x98>)
 80008ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80008d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_TIM2_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_TIM2_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <MX_TIM2_Init+0x98>)
 80008e2:	f002 fe5f 	bl	80035a4 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 fa10 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_TIM2_Init+0x98>)
 80008fe:	f003 fa71 	bl	8003de4 <HAL_TIM_ConfigClockSource>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000908:	f000 fa02 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_TIM2_Init+0x98>)
 800091a:	f003 ff13 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000924:	f000 f9f4 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200002a0 	.word	0x200002a0

08000934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2224      	movs	r2, #36	; 0x24
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fbc6 	bl	80060d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_TIM3_Init+0xa0>)
 8000954:	4a20      	ldr	r2, [pc, #128]	; (80009d8 <MX_TIM3_Init+0xa4>)
 8000956:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1 - 1;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_TIM3_Init+0xa0>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM3_Init+0xa0>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100 - 1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_TIM3_Init+0xa0>)
 8000966:	2263      	movs	r2, #99	; 0x63
 8000968:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM3_Init+0xa0>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_TIM3_Init+0xa0>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000976:	2303      	movs	r3, #3
 8000978:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800097e:	2301      	movs	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800098e:	2301      	movs	r3, #1
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_TIM3_Init+0xa0>)
 80009a2:	f002 feb7 	bl	8003714 <HAL_TIM_Encoder_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80009ac:	f000 f9b0 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_TIM3_Init+0xa0>)
 80009be:	f003 fec1 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009c8:	f000 f9a2 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3730      	adds	r7, #48	; 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200002ec 	.word	0x200002ec
 80009d8:	40000400 	.word	0x40000400

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_USART3_UART_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a20:	f003 ffba 	bl	8004998 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 f971 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000338 	.word	0x20000338
 8000a38:	40004800 	.word	0x40004800

08000a3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	2202      	movs	r2, #2
 8000a52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a80:	f001 fb7d 	bl	800217e <HAL_PCD_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f941 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200003c0 	.word	0x200003c0

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b4d      	ldr	r3, [pc, #308]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a4c      	ldr	r2, [pc, #304]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b4a      	ldr	r3, [pc, #296]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a46      	ldr	r2, [pc, #280]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b44      	ldr	r3, [pc, #272]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b41      	ldr	r3, [pc, #260]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a40      	ldr	r2, [pc, #256]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a3a      	ldr	r2, [pc, #232]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0e:	4b35      	ldr	r3, [pc, #212]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a34      	ldr	r2, [pc, #208]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b5c:	4822      	ldr	r0, [pc, #136]	; (8000be8 <MX_GPIO_Init+0x150>)
 8000b5e:	f001 faf5 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	4821      	ldr	r0, [pc, #132]	; (8000bec <MX_GPIO_Init+0x154>)
 8000b68:	f001 faf0 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	481b      	ldr	r0, [pc, #108]	; (8000bf0 <MX_GPIO_Init+0x158>)
 8000b84:	f001 f936 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b88:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4811      	ldr	r0, [pc, #68]	; (8000be8 <MX_GPIO_Init+0x150>)
 8000ba2:	f001 f927 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_GPIO_Init+0x154>)
 8000bbe:	f001 f919 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_GPIO_Init+0x154>)
 8000bd6:	f001 f90d 	bl	8001df4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bda:	bf00      	nop
 8000bdc:	3730      	adds	r7, #48	; 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40021800 	.word	0x40021800
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <setRedFill>:

/* USER CODE BEGIN 4 */
// arr set to 1000 so *10 will do
void setRedFill(uint8_t fill)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	if (fill > 100) fill = 100;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b64      	cmp	r3, #100	; 0x64
 8000c02:	d901      	bls.n	8000c08 <setRedFill+0x14>
 8000c04:	2364      	movs	r3, #100	; 0x64
 8000c06:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fill * 10);
 8000c08:	79fa      	ldrb	r2, [r7, #7]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <setRedFill+0x34>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000254 	.word	0x20000254

08000c2c <setGreenFill>:

void setGreenFill(uint8_t fill)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	if (fill > 100) fill = 100;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b64      	cmp	r3, #100	; 0x64
 8000c3a:	d901      	bls.n	8000c40 <setGreenFill+0x14>
 8000c3c:	2364      	movs	r3, #100	; 0x64
 8000c3e:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fill * 10);
 8000c40:	79fa      	ldrb	r2, [r7, #7]
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <setGreenFill+0x34>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000254 	.word	0x20000254

08000c64 <setBlueFill>:

void setBlueFill(uint8_t fill)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	if (fill > 100) fill = 100;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b64      	cmp	r3, #100	; 0x64
 8000c72:	d901      	bls.n	8000c78 <setBlueFill+0x14>
 8000c74:	2364      	movs	r3, #100	; 0x64
 8000c76:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fill * 10);
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <setBlueFill+0x34>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000254 	.word	0x20000254

08000c9c <HAL_TIM_PeriodElapsedCallback>:
}

static uint8_t rgb[] = { 0, 20, 40 };

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d128      	bne.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x62>
	{
		for(uint8_t i = 0; i < 3; i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e013      	b.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			rgb[i] += 10;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cb6:	5cd2      	ldrb	r2, [r2, r3]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	320a      	adds	r2, #10
 8000cbc:	b2d1      	uxtb	r1, r2
 8000cbe:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cc0:	54d1      	strb	r1, [r2, r3]
			if(rgb[i] > 100) rgb[i] = 0;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cc6:	5cd3      	ldrb	r3, [r2, r3]
 8000cc8:	2b64      	cmp	r3, #100	; 0x64
 8000cca:	d903      	bls.n	8000cd4 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 3; i++)
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d9e8      	bls.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
		}
		setRedFill(rgb[0]);
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff85 	bl	8000bf4 <setRedFill>
		setGreenFill(rgb[1]);
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cec:	785b      	ldrb	r3, [r3, #1]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff9c 	bl	8000c2c <setGreenFill>
		setBlueFill(rgb[2]);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cf6:	789b      	ldrb	r3, [r3, #2]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ffb3 	bl	8000c64 <setBlueFill>
	}
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200002a0 	.word	0x200002a0
 8000d0c:	20000000 	.word	0x20000000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d16:	b672      	cpsid	i
}
 8000d18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  char msg = "err";
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <Error_Handler+0x34>)
 8000d1c:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
		HAL_UART_Transmit(&huart3, msg, strlen(msg), 100);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	461c      	mov	r4, r3
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa6f 	bl	8000208 <strlen>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	4621      	mov	r1, r4
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <Error_Handler+0x38>)
 8000d34:	f003 fe7e 	bl	8004a34 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3c:	f000 fb6c 	bl	8001418 <HAL_Delay>
		HAL_UART_Transmit(&huart3, msg, strlen(msg), 100);
 8000d40:	e7ed      	b.n	8000d1e <Error_Handler+0xe>
 8000d42:	bf00      	nop
 8000d44:	08006184 	.word	0x08006184
 8000d48:	20000338 	.word	0x20000338

08000d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x44>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_MspInit+0x44>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_MspInit+0x44>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x44>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x44>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a4e      	ldr	r2, [pc, #312]	; (8000eec <HAL_ETH_MspInit+0x158>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	f040 8096 	bne.w	8000ee4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000db8:	4b4d      	ldr	r3, [pc, #308]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a4c      	ldr	r2, [pc, #304]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dcc:	623b      	str	r3, [r7, #32]
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a46      	ldr	r2, [pc, #280]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000dd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	4b41      	ldr	r3, [pc, #260]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a40      	ldr	r2, [pc, #256]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a3a      	ldr	r2, [pc, #232]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0c:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a34      	ldr	r2, [pc, #208]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a2e      	ldr	r2, [pc, #184]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a28      	ldr	r2, [pc, #160]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <HAL_ETH_MspInit+0x15c>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e60:	2332      	movs	r3, #50	; 0x32
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e70:	230b      	movs	r3, #11
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481e      	ldr	r0, [pc, #120]	; (8000ef4 <HAL_ETH_MspInit+0x160>)
 8000e7c:	f000 ffba 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e80:	2386      	movs	r3, #134	; 0x86
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e90:	230b      	movs	r3, #11
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <HAL_ETH_MspInit+0x164>)
 8000e9c:	f000 ffaa 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb2:	230b      	movs	r3, #11
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480f      	ldr	r0, [pc, #60]	; (8000efc <HAL_ETH_MspInit+0x168>)
 8000ebe:	f000 ff99 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ec2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4808      	ldr	r0, [pc, #32]	; (8000f00 <HAL_ETH_MspInit+0x16c>)
 8000ee0:	f000 ff88 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3738      	adds	r7, #56	; 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40028000 	.word	0x40028000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40021800 	.word	0x40021800

08000f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_TIM_Base_MspInit+0x68>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10c      	bne.n	8000f30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_TIM_Base_MspInit+0x6c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <HAL_TIM_Base_MspInit+0x6c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_TIM_Base_MspInit+0x6c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f2e:	e018      	b.n	8000f62 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f38:	d113      	bne.n	8000f62 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_TIM_Base_MspInit+0x6c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_TIM_Base_MspInit+0x6c>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_TIM_Base_MspInit+0x6c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	201c      	movs	r0, #28
 8000f58:	f000 fb5d 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f5c:	201c      	movs	r0, #28
 8000f5e:	f000 fb76 	bl	800164e <HAL_NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a25      	ldr	r2, [pc, #148]	; (8001028 <HAL_TIM_Encoder_MspInit+0xb4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d143      	bne.n	800101e <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a24      	ldr	r2, [pc, #144]	; (800102c <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_TIM_Encoder_MspInit+0xb8>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_TIM_Encoder_MspInit+0xb8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <HAL_TIM_Encoder_MspInit+0xb8>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_TIM_Encoder_MspInit+0xb8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_TIM_Encoder_MspInit+0xb8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <HAL_TIM_Encoder_MspInit+0xb8>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_TIM_Encoder_MspInit+0xb8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fde:	2340      	movs	r3, #64	; 0x40
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <HAL_TIM_Encoder_MspInit+0xbc>)
 8000ffa:	f000 fefb 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800100e:	2302      	movs	r3, #2
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <HAL_TIM_Encoder_MspInit+0xc0>)
 800101a:	f000 feeb 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40000400 	.word	0x40000400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020800 	.word	0x40020800

08001038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_TIM_MspPostInit+0x64>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d11c      	bne.n	8001094 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_TIM_MspPostInit+0x68>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_TIM_MspPostInit+0x68>)
 8001060:	f043 0310 	orr.w	r3, r3, #16
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_TIM_MspPostInit+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001072:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001076:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001084:	2301      	movs	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4619      	mov	r1, r3
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_TIM_MspPostInit+0x6c>)
 8001090:	f000 feb0 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010000 	.word	0x40010000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0aa      	sub	sp, #168	; 0xa8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2284      	movs	r2, #132	; 0x84
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 f803 	bl	80060d4 <memset>
  if(huart->Instance==USART3)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_UART_MspInit+0xc4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d144      	bne.n	8001162 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010de:	2300      	movs	r3, #0
 80010e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fe6c 	bl	8002dc4 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010f2:	f7ff fe0d 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_UART_MspInit+0xc8>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_UART_MspInit+0xc8>)
 80010fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_UART_MspInit+0xc8>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_UART_MspInit+0xc8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_UART_MspInit+0xc8>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_UART_MspInit+0xc8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001140:	2307      	movs	r3, #7
 8001142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800114a:	4619      	mov	r1, r3
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_UART_MspInit+0xcc>)
 800114e:	f000 fe51 	bl	8001df4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2027      	movs	r0, #39	; 0x27
 8001158:	f000 fa5d 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800115c:	2027      	movs	r0, #39	; 0x27
 800115e:	f000 fa76 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	37a8      	adds	r7, #168	; 0xa8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40004800 	.word	0x40004800
 8001170:	40023800 	.word	0x40023800
 8001174:	40020c00 	.word	0x40020c00

08001178 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0ac      	sub	sp, #176	; 0xb0
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	2284      	movs	r2, #132	; 0x84
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f004 ff9b 	bl	80060d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a6:	d159      	bne.n	800125c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 fe03 	bl	8002dc4 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011c4:	f7ff fda4 	bl	8000d10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_PCD_MspInit+0xec>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a25      	ldr	r2, [pc, #148]	; (8001264 <HAL_PCD_MspInit+0xec>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_PCD_MspInit+0xec>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011fa:	230a      	movs	r3, #10
 80011fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001204:	4619      	mov	r1, r3
 8001206:	4818      	ldr	r0, [pc, #96]	; (8001268 <HAL_PCD_MspInit+0xf0>)
 8001208:	f000 fdf4 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800120c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001224:	4619      	mov	r1, r3
 8001226:	4810      	ldr	r0, [pc, #64]	; (8001268 <HAL_PCD_MspInit+0xf0>)
 8001228:	f000 fde4 	bl	8001df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_PCD_MspInit+0xec>)
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_PCD_MspInit+0xec>)
 8001232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001236:	6353      	str	r3, [r2, #52]	; 0x34
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_PCD_MspInit+0xec>)
 800123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_PCD_MspInit+0xec>)
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_PCD_MspInit+0xec>)
 800124a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124e:	6453      	str	r3, [r2, #68]	; 0x44
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_PCD_MspInit+0xec>)
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	37b0      	adds	r7, #176	; 0xb0
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f88e 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM2_IRQHandler+0x10>)
 80012c6:	f002 fb59 	bl	800397c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200002a0 	.word	0x200002a0

080012d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <USART3_IRQHandler+0x10>)
 80012da:	f003 fc2f 	bl	8004b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000338 	.word	0x20000338

080012e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001312:	490e      	ldr	r1, [pc, #56]	; (800134c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001328:	4c0b      	ldr	r4, [pc, #44]	; (8001358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001336:	f7ff ffd7 	bl	80012e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f004 fe8d 	bl	8006058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff f8ed 	bl	800051c <main>
  bx  lr    
 8001342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001350:	080061d8 	.word	0x080061d8
  ldr r2, =_sbss
 8001354:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001358:	20000918 	.word	0x20000918

0800135c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>

0800135e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001362:	2003      	movs	r0, #3
 8001364:	f000 f94c 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001368:	2000      	movs	r0, #0
 800136a:	f000 f805 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136e:	f7ff fced 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f967 	bl	800166a <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f92f 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000004 	.word	0x20000004
 80013d0:	2000000c 	.word	0x2000000c
 80013d4:	20000008 	.word	0x20000008

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	20000914 	.word	0x20000914

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000914 	.word	0x20000914

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000000c 	.word	0x2000000c

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	4313      	orrs	r3, r2
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	05fa0000 	.word	0x05fa0000

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff8e 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff29 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff3e 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff8e 	bl	8001554 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5d 	bl	8001500 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff31 	bl	80014c4 <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffa2 	bl	80015bc <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff feb6 	bl	8001400 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d008      	beq.n	80016b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e052      	b.n	800175a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0216 	bic.w	r2, r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d103      	bne.n	80016e4 <HAL_DMA_Abort+0x62>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0208 	bic.w	r2, r2, #8
 80016f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001704:	e013      	b.n	800172e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001706:	f7ff fe7b 	bl	8001400 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b05      	cmp	r3, #5
 8001712:	d90c      	bls.n	800172e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2220      	movs	r2, #32
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2203      	movs	r2, #3
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e015      	b.n	800175a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e4      	bne.n	8001706 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001740:	223f      	movs	r2, #63	; 0x3f
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d004      	beq.n	8001780 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e00c      	b.n	800179a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2205      	movs	r2, #5
 8001784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06a      	b.n	8001890 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d106      	bne.n	80017d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2223      	movs	r2, #35	; 0x23
 80017c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fae1 	bl	8000d94 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_ETH_Init+0xf0>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a30      	ldr	r2, [pc, #192]	; (8001898 <HAL_ETH_Init+0xf0>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_ETH_Init+0xf0>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_ETH_Init+0xf4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_ETH_Init+0xf4>)
 80017f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_ETH_Init+0xf4>)
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4927      	ldr	r1, [pc, #156]	; (800189c <HAL_ETH_Init+0xf4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_ETH_Init+0xf4>)
 8001806:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800181e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001820:	f7ff fdee 	bl	8001400 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001826:	e011      	b.n	800184c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001828:	f7ff fdea 	bl	8001400 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001836:	d909      	bls.n	800184c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2204      	movs	r2, #4
 800183c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	22e0      	movs	r2, #224	; 0xe0
 8001844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e021      	b.n	8001890 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1e4      	bne.n	8001828 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f958 	bl	8001b14 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f9ff 	bl	8001c68 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fa55 	bl	8001d1a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	461a      	mov	r2, r3
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f9bd 	bl	8001bf8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2210      	movs	r2, #16
 800188a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800

080018a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4b51      	ldr	r3, [pc, #324]	; (80019fc <ETH_SetMACConfig+0x15c>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	7c1b      	ldrb	r3, [r3, #16]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <ETH_SetMACConfig+0x28>
 80018c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018c6:	e000      	b.n	80018ca <ETH_SetMACConfig+0x2a>
 80018c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	7c5b      	ldrb	r3, [r3, #17]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <ETH_SetMACConfig+0x38>
 80018d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d6:	e000      	b.n	80018da <ETH_SetMACConfig+0x3a>
 80018d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	7fdb      	ldrb	r3, [r3, #31]
 80018e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80018e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	7f92      	ldrb	r2, [r2, #30]
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d102      	bne.n	80018fe <ETH_SetMACConfig+0x5e>
 80018f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018fc:	e000      	b.n	8001900 <ETH_SetMACConfig+0x60>
 80018fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001900:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	7f1b      	ldrb	r3, [r3, #28]
 8001906:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001908:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800190e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001916:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800191e:	2a00      	cmp	r2, #0
 8001920:	d102      	bne.n	8001928 <ETH_SetMACConfig+0x88>
 8001922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001926:	e000      	b.n	800192a <ETH_SetMACConfig+0x8a>
 8001928:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800192a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	7bdb      	ldrb	r3, [r3, #15]
 8001930:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001932:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001938:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001940:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001942:	4313      	orrs	r3, r2
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff fd5c 	bl	8001418 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800197e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001986:	2a00      	cmp	r2, #0
 8001988:	d101      	bne.n	800198e <ETH_SetMACConfig+0xee>
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	e000      	b.n	8001990 <ETH_SetMACConfig+0xf0>
 800198e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001990:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001996:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800199e:	2a01      	cmp	r2, #1
 80019a0:	d101      	bne.n	80019a6 <ETH_SetMACConfig+0x106>
 80019a2:	2208      	movs	r2, #8
 80019a4:	e000      	b.n	80019a8 <ETH_SetMACConfig+0x108>
 80019a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80019a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80019b0:	2a01      	cmp	r2, #1
 80019b2:	d101      	bne.n	80019b8 <ETH_SetMACConfig+0x118>
 80019b4:	2204      	movs	r2, #4
 80019b6:	e000      	b.n	80019ba <ETH_SetMACConfig+0x11a>
 80019b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80019c2:	2a01      	cmp	r2, #1
 80019c4:	d101      	bne.n	80019ca <ETH_SetMACConfig+0x12a>
 80019c6:	2202      	movs	r2, #2
 80019c8:	e000      	b.n	80019cc <ETH_SetMACConfig+0x12c>
 80019ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019cc:	4313      	orrs	r3, r2
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fd17 	bl	8001418 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	619a      	str	r2, [r3, #24]
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	ff20810f 	.word	0xff20810f

08001a00 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <ETH_SetDMAConfig+0x110>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	7b1b      	ldrb	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <ETH_SetDMAConfig+0x2c>
 8001a26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a2a:	e000      	b.n	8001a2e <ETH_SetDMAConfig+0x2e>
 8001a2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	7b5b      	ldrb	r3, [r3, #13]
 8001a32:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a34:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	7f52      	ldrb	r2, [r2, #29]
 8001a3a:	2a00      	cmp	r2, #0
 8001a3c:	d102      	bne.n	8001a44 <ETH_SetDMAConfig+0x44>
 8001a3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a42:	e000      	b.n	8001a46 <ETH_SetDMAConfig+0x46>
 8001a44:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	7b9b      	ldrb	r3, [r3, #14]
 8001a4c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a4e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a54:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	7f1b      	ldrb	r3, [r3, #28]
 8001a5a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001a5c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	7f9b      	ldrb	r3, [r3, #30]
 8001a62:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a64:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a72:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a84:	461a      	mov	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7ff fcbe 	bl	8001418 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ab4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001aba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ac0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ac8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001aca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ad2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ad8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff fc8f 	bl	8001418 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	f8de3f23 	.word	0xf8de3f23

08001b14 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b0a6      	sub	sp, #152	; 0x98
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b50:	2300      	movs	r3, #0
 8001b52:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe86 	bl	80018a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff08 	bl	8001a00 <ETH_SetDMAConfig>
}
 8001bf0:	bf00      	nop
 8001bf2:	3798      	adds	r7, #152	; 0x98
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3305      	adds	r3, #5
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	3204      	adds	r2, #4
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <ETH_MACAddressConfig+0x68>)
 8001c1a:	4413      	add	r3, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3303      	adds	r3, #3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	061a      	lsls	r2, r3, #24
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3301      	adds	r3, #1
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	7812      	ldrb	r2, [r2, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <ETH_MACAddressConfig+0x6c>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	6013      	str	r3, [r2, #0]
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40028040 	.word	0x40028040
 8001c64:	40028044 	.word	0x40028044

08001c68 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e03e      	b.n	8001cf4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68d9      	ldr	r1, [r3, #12]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	3206      	adds	r2, #6
 8001ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d80c      	bhi.n	8001cd8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68d9      	ldr	r1, [r3, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	e004      	b.n	8001ce2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d9bd      	bls.n	8001c76 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	611a      	str	r2, [r3, #16]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	e046      	b.n	8001db6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6919      	ldr	r1, [r3, #16]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2200      	movs	r2, #0
 8001d44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d64:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d6c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	3212      	adds	r2, #18
 8001d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d80c      	bhi.n	8001da6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6919      	ldr	r1, [r3, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	e004      	b.n	8001db0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d9b5      	bls.n	8001d28 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de6:	60da      	str	r2, [r3, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	e175      	b.n	8002100 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e14:	2201      	movs	r2, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8164 	bne.w	80020fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d005      	beq.n	8001e4a <HAL_GPIO_Init+0x56>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d130      	bne.n	8001eac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 0201 	and.w	r2, r3, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d017      	beq.n	8001ee8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d123      	bne.n	8001f3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	69b9      	ldr	r1, [r7, #24]
 8001f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0203 	and.w	r2, r3, #3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80be 	beq.w	80020fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_GPIO_Init+0x324>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_GPIO_Init+0x324>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_GPIO_Init+0x324>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f96:	4a61      	ldr	r2, [pc, #388]	; (800211c <HAL_GPIO_Init+0x328>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_GPIO_Init+0x32c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d037      	beq.n	8002032 <HAL_GPIO_Init+0x23e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a57      	ldr	r2, [pc, #348]	; (8002124 <HAL_GPIO_Init+0x330>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d031      	beq.n	800202e <HAL_GPIO_Init+0x23a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a56      	ldr	r2, [pc, #344]	; (8002128 <HAL_GPIO_Init+0x334>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d02b      	beq.n	800202a <HAL_GPIO_Init+0x236>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a55      	ldr	r2, [pc, #340]	; (800212c <HAL_GPIO_Init+0x338>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d025      	beq.n	8002026 <HAL_GPIO_Init+0x232>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a54      	ldr	r2, [pc, #336]	; (8002130 <HAL_GPIO_Init+0x33c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01f      	beq.n	8002022 <HAL_GPIO_Init+0x22e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a53      	ldr	r2, [pc, #332]	; (8002134 <HAL_GPIO_Init+0x340>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d019      	beq.n	800201e <HAL_GPIO_Init+0x22a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a52      	ldr	r2, [pc, #328]	; (8002138 <HAL_GPIO_Init+0x344>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0x226>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a51      	ldr	r2, [pc, #324]	; (800213c <HAL_GPIO_Init+0x348>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0x222>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a50      	ldr	r2, [pc, #320]	; (8002140 <HAL_GPIO_Init+0x34c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x21e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4f      	ldr	r2, [pc, #316]	; (8002144 <HAL_GPIO_Init+0x350>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_GPIO_Init+0x21a>
 800200a:	2309      	movs	r3, #9
 800200c:	e012      	b.n	8002034 <HAL_GPIO_Init+0x240>
 800200e:	230a      	movs	r3, #10
 8002010:	e010      	b.n	8002034 <HAL_GPIO_Init+0x240>
 8002012:	2308      	movs	r3, #8
 8002014:	e00e      	b.n	8002034 <HAL_GPIO_Init+0x240>
 8002016:	2307      	movs	r3, #7
 8002018:	e00c      	b.n	8002034 <HAL_GPIO_Init+0x240>
 800201a:	2306      	movs	r3, #6
 800201c:	e00a      	b.n	8002034 <HAL_GPIO_Init+0x240>
 800201e:	2305      	movs	r3, #5
 8002020:	e008      	b.n	8002034 <HAL_GPIO_Init+0x240>
 8002022:	2304      	movs	r3, #4
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x240>
 8002026:	2303      	movs	r3, #3
 8002028:	e004      	b.n	8002034 <HAL_GPIO_Init+0x240>
 800202a:	2302      	movs	r3, #2
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x240>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x240>
 8002032:	2300      	movs	r3, #0
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	f002 0203 	and.w	r2, r2, #3
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4093      	lsls	r3, r2
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002044:	4935      	ldr	r1, [pc, #212]	; (800211c <HAL_GPIO_Init+0x328>)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_GPIO_Init+0x354>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002076:	4a34      	ldr	r2, [pc, #208]	; (8002148 <HAL_GPIO_Init+0x354>)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_GPIO_Init+0x354>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <HAL_GPIO_Init+0x354>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_GPIO_Init+0x354>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_GPIO_Init+0x354>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_GPIO_Init+0x354>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_GPIO_Init+0x354>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3301      	adds	r3, #1
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b0f      	cmp	r3, #15
 8002104:	f67f ae86 	bls.w	8001e14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3724      	adds	r7, #36	; 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	40013800 	.word	0x40013800
 8002120:	40020000 	.word	0x40020000
 8002124:	40020400 	.word	0x40020400
 8002128:	40020800 	.word	0x40020800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40021000 	.word	0x40021000
 8002134:	40021400 	.word	0x40021400
 8002138:	40021800 	.word	0x40021800
 800213c:	40021c00 	.word	0x40021c00
 8002140:	40022000 	.word	0x40022000
 8002144:	40022400 	.word	0x40022400
 8002148:	40013c00 	.word	0x40013c00

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800217e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002180:	b08f      	sub	sp, #60	; 0x3c
 8002182:	af0a      	add	r7, sp, #40	; 0x28
 8002184:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e116      	b.n	80023be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe ffe4 	bl	8001178 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2203      	movs	r2, #3
 80021b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fca6 	bl	8005b20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	687e      	ldr	r6, [r7, #4]
 80021dc:	466d      	mov	r5, sp
 80021de:	f106 0410 	add.w	r4, r6, #16
 80021e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f2:	1d33      	adds	r3, r6, #4
 80021f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f6:	6838      	ldr	r0, [r7, #0]
 80021f8:	f003 fc3a 	bl	8005a70 <USB_CoreInit>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0d7      	b.n	80023be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f003 fc94 	bl	8005b42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	e04a      	b.n	80022b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	333d      	adds	r3, #61	; 0x3d
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	333c      	adds	r3, #60	; 0x3c
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	b298      	uxth	r0, r3
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	3344      	adds	r3, #68	; 0x44
 800225c:	4602      	mov	r2, r0
 800225e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	3340      	adds	r3, #64	; 0x40
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	3348      	adds	r3, #72	; 0x48
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	334c      	adds	r3, #76	; 0x4c
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3354      	adds	r3, #84	; 0x54
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	3301      	adds	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3af      	bcc.n	8002220 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e044      	b.n	8002350 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	3301      	adds	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	d3b5      	bcc.n	80022c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	687e      	ldr	r6, [r7, #4]
 8002362:	466d      	mov	r5, sp
 8002364:	f106 0410 	add.w	r4, r6, #16
 8002368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002370:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002374:	e885 0003 	stmia.w	r5, {r0, r1}
 8002378:	1d33      	adds	r3, r6, #4
 800237a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237c:	6838      	ldr	r0, [r7, #0]
 800237e:	f003 fc2d 	bl	8005bdc <USB_DevInit>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e014      	b.n	80023be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d102      	bne.n	80023b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f80b 	bl	80023c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fdeb 	bl	8005f92 <USB_DevDisconnect>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_PCDEx_ActivateLPM+0x44>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	10000003 	.word	0x10000003

08002410 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40007000 	.word	0x40007000

08002430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002438:	2300      	movs	r3, #0
 800243a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e291      	b.n	800296a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8087 	beq.w	8002562 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002454:	4b96      	ldr	r3, [pc, #600]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b04      	cmp	r3, #4
 800245e:	d00c      	beq.n	800247a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002460:	4b93      	ldr	r3, [pc, #588]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	d112      	bne.n	8002492 <HAL_RCC_OscConfig+0x62>
 800246c:	4b90      	ldr	r3, [pc, #576]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002478:	d10b      	bne.n	8002492 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247a:	4b8d      	ldr	r3, [pc, #564]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d06c      	beq.n	8002560 <HAL_RCC_OscConfig+0x130>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d168      	bne.n	8002560 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e26b      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x7a>
 800249c:	4b84      	ldr	r3, [pc, #528]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a83      	ldr	r2, [pc, #524]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e02e      	b.n	8002508 <HAL_RCC_OscConfig+0xd8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x9c>
 80024b2:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a7e      	ldr	r2, [pc, #504]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b7c      	ldr	r3, [pc, #496]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7b      	ldr	r2, [pc, #492]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e01d      	b.n	8002508 <HAL_RCC_OscConfig+0xd8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0xc0>
 80024d6:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a75      	ldr	r2, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a72      	ldr	r2, [pc, #456]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e00b      	b.n	8002508 <HAL_RCC_OscConfig+0xd8>
 80024f0:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a6e      	ldr	r2, [pc, #440]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b6c      	ldr	r3, [pc, #432]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6b      	ldr	r2, [pc, #428]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe ff76 	bl	8001400 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe ff72 	bl	8001400 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e21f      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0xe8>
 8002536:	e014      	b.n	8002562 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe ff62 	bl	8001400 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7fe ff5e 	bl	8001400 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e20b      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x110>
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d069      	beq.n	8002642 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800256e:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257a:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b08      	cmp	r3, #8
 8002584:	d11c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x190>
 8002586:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d116      	bne.n	80025c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x17a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e1df      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	493d      	ldr	r1, [pc, #244]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	e040      	b.n	8002642 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d023      	beq.n	8002610 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c8:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a38      	ldr	r2, [pc, #224]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe ff14 	bl	8001400 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025dc:	f7fe ff10 	bl	8001400 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1bd      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4929      	ldr	r1, [pc, #164]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
 800260e:	e018      	b.n	8002642 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fef0 	bl	8001400 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002624:	f7fe feec 	bl	8001400 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e199      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d038      	beq.n	80026c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d019      	beq.n	800268a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fe fecd 	bl	8001400 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266a:	f7fe fec9 	bl	8001400 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e176      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800267e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x23a>
 8002688:	e01a      	b.n	80026c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800268c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002696:	f7fe feb3 	bl	8001400 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269e:	f7fe feaf 	bl	8001400 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d903      	bls.n	80026b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e15c      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
 80026b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	4b91      	ldr	r3, [pc, #580]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80a4 	beq.w	8002816 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ce:	4b8b      	ldr	r3, [pc, #556]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026da:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a87      	ldr	r2, [pc, #540]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b85      	ldr	r3, [pc, #532]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f6:	4b82      	ldr	r3, [pc, #520]	; (8002900 <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d118      	bne.n	8002734 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002702:	4b7f      	ldr	r3, [pc, #508]	; (8002900 <HAL_RCC_OscConfig+0x4d0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7e      	ldr	r2, [pc, #504]	; (8002900 <HAL_RCC_OscConfig+0x4d0>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270e:	f7fe fe77 	bl	8001400 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002716:	f7fe fe73 	bl	8001400 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b64      	cmp	r3, #100	; 0x64
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e120      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002728:	4b75      	ldr	r3, [pc, #468]	; (8002900 <HAL_RCC_OscConfig+0x4d0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x31a>
 800273c:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a6e      	ldr	r2, [pc, #440]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	e02d      	b.n	80027a6 <HAL_RCC_OscConfig+0x376>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x33c>
 8002752:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a69      	ldr	r2, [pc, #420]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	4b67      	ldr	r3, [pc, #412]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a66      	ldr	r2, [pc, #408]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002764:	f023 0304 	bic.w	r3, r3, #4
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	e01c      	b.n	80027a6 <HAL_RCC_OscConfig+0x376>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d10c      	bne.n	800278e <HAL_RCC_OscConfig+0x35e>
 8002774:	4b61      	ldr	r3, [pc, #388]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a60      	ldr	r2, [pc, #384]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
 8002780:	4b5e      	ldr	r3, [pc, #376]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a5d      	ldr	r2, [pc, #372]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	e00b      	b.n	80027a6 <HAL_RCC_OscConfig+0x376>
 800278e:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a5a      	ldr	r2, [pc, #360]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	4b58      	ldr	r3, [pc, #352]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a57      	ldr	r2, [pc, #348]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d015      	beq.n	80027da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7fe fe27 	bl	8001400 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe fe23 	bl	8001400 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0ce      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ee      	beq.n	80027b6 <HAL_RCC_OscConfig+0x386>
 80027d8:	e014      	b.n	8002804 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fe fe11 	bl	8001400 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe fe0d 	bl	8001400 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0b8      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f8:	4b40      	ldr	r3, [pc, #256]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ee      	bne.n	80027e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4b3c      	ldr	r3, [pc, #240]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80a4 	beq.w	8002968 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b08      	cmp	r3, #8
 800282a:	d06b      	beq.n	8002904 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d149      	bne.n	80028c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a30      	ldr	r2, [pc, #192]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800283a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fdde 	bl	8001400 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fdda 	bl	8001400 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e087      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	4b28      	ldr	r3, [pc, #160]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	3b01      	subs	r3, #1
 8002880:	041b      	lsls	r3, r3, #16
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4313      	orrs	r3, r2
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800288e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002892:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800289a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fdae 	bl	8001400 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fdaa 	bl	8001400 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e057      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x478>
 80028c6:	e04f      	b.n	8002968 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fd94 	bl	8001400 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fd90 	bl	8001400 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e03d      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x4ac>
 80028fa:	e035      	b.n	8002968 <HAL_RCC_OscConfig+0x538>
 80028fc:	40023800 	.word	0x40023800
 8002900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x544>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d028      	beq.n	8002964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d121      	bne.n	8002964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d11a      	bne.n	8002964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800293a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800293c:	4293      	cmp	r3, r2
 800293e:	d111      	bne.n	8002964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	3b01      	subs	r3, #1
 800294e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d107      	bne.n	8002964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800

08002978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0d0      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d910      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 020f 	bic.w	r2, r3, #15
 80029a6:	4965      	ldr	r1, [pc, #404]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d040      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d115      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e073      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e06b      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4936      	ldr	r1, [pc, #216]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fcc8 	bl	8001400 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fcc4 	bl	8001400 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e053      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d210      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 020f 	bic.w	r2, r3, #15
 8002ab2:	4922      	ldr	r1, [pc, #136]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	; (8002b44 <HAL_RCC_ClockConfig+0x1cc>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1d0>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1d4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fc24 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00
 8002b40:	40023800 	.word	0x40023800
 8002b44:	08006188 	.word	0x08006188
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	20000008 	.word	0x20000008

08002b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b094      	sub	sp, #80	; 0x50
 8002b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b60:	2300      	movs	r3, #0
 8002b62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b68:	4b79      	ldr	r3, [pc, #484]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d00d      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x40>
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	f200 80e1 	bhi.w	8002d3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b82:	e0db      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b73      	ldr	r3, [pc, #460]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b88:	e0db      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8a:	4b73      	ldr	r3, [pc, #460]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8e:	e0d8      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b90:	4b6f      	ldr	r3, [pc, #444]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b98:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b9a:	4b6d      	ldr	r3, [pc, #436]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba6:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	2200      	movs	r2, #0
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4621      	mov	r1, r4
 8002bdc:	1a51      	subs	r1, r2, r1
 8002bde:	6139      	str	r1, [r7, #16]
 8002be0:	4629      	mov	r1, r5
 8002be2:	eb63 0301 	sbc.w	r3, r3, r1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfe:	4651      	mov	r1, sl
 8002c00:	018a      	lsls	r2, r1, #6
 8002c02:	4651      	mov	r1, sl
 8002c04:	ebb2 0801 	subs.w	r8, r2, r1
 8002c08:	4659      	mov	r1, fp
 8002c0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c22:	4690      	mov	r8, r2
 8002c24:	4699      	mov	r9, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	eb18 0303 	adds.w	r3, r8, r3
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	462b      	mov	r3, r5
 8002c30:	eb49 0303 	adc.w	r3, r9, r3
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c42:	4629      	mov	r1, r5
 8002c44:	024b      	lsls	r3, r1, #9
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	024a      	lsls	r2, r1, #9
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c56:	2200      	movs	r2, #0
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c60:	f7fd fada 	bl	8000218 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c6c:	e058      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	2200      	movs	r2, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	4611      	mov	r1, r2
 8002c7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c7e:	623b      	str	r3, [r7, #32]
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c88:	4642      	mov	r2, r8
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	f04f 0000 	mov.w	r0, #0
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	0159      	lsls	r1, r3, #5
 8002c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9a:	0150      	lsls	r0, r2, #5
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cc0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	00eb      	lsls	r3, r5, #3
 8002cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd6:	00e2      	lsls	r2, r4, #3
 8002cd8:	4614      	mov	r4, r2
 8002cda:	461d      	mov	r5, r3
 8002cdc:	4643      	mov	r3, r8
 8002cde:	18e3      	adds	r3, r4, r3
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	eb45 0303 	adc.w	r3, r5, r3
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	028b      	lsls	r3, r1, #10
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d00:	4621      	mov	r1, r4
 8002d02:	028a      	lsls	r2, r1, #10
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	61fa      	str	r2, [r7, #28]
 8002d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d14:	f7fd fa80 	bl	8000218 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d3a:	e002      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3750      	adds	r7, #80	; 0x50
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	007a1200 	.word	0x007a1200

08002d5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000004 	.word	0x20000004

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d78:	f7ff fff0 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0a9b      	lsrs	r3, r3, #10
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4903      	ldr	r1, [pc, #12]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	08006198 	.word	0x08006198

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da0:	f7ff ffdc 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0b5b      	lsrs	r3, r3, #13
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	08006198 	.word	0x08006198

08002dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d012      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dec:	4b69      	ldr	r3, [pc, #420]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a68      	ldr	r2, [pc, #416]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002df6:	6093      	str	r3, [r2, #8]
 8002df8:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	4964      	ldr	r1, [pc, #400]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e1e:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	4959      	ldr	r1, [pc, #356]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d017      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e5a:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	494a      	ldr	r1, [pc, #296]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e78:	d101      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 808b 	beq.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	4a39      	ldr	r2, [pc, #228]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb4:	4b37      	ldr	r3, [pc, #220]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ec0:	4b35      	ldr	r3, [pc, #212]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fa98 	bl	8001400 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed4:	f7fe fa94 	bl	8001400 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e357      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ee6:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ef2:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d035      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d02e      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f10:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f1a:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f32:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d114      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fa5c 	bl	8001400 <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fa58 	bl	8001400 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e319      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ee      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f7a:	d111      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f8a:	400b      	ands	r3, r1
 8002f8c:	4901      	ldr	r1, [pc, #4]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
 8002f92:	e00b      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	0ffffcff 	.word	0x0ffffcff
 8002fa0:	4baa      	ldr	r3, [pc, #680]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4aa9      	ldr	r2, [pc, #676]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002faa:	6093      	str	r3, [r2, #8]
 8002fac:	4ba7      	ldr	r3, [pc, #668]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	49a4      	ldr	r1, [pc, #656]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d010      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fca:	4ba0      	ldr	r3, [pc, #640]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd0:	4a9e      	ldr	r2, [pc, #632]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fda:	4b9c      	ldr	r3, [pc, #624]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	4999      	ldr	r1, [pc, #612]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ff8:	4b94      	ldr	r3, [pc, #592]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003006:	4991      	ldr	r1, [pc, #580]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800301a:	4b8c      	ldr	r3, [pc, #560]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003028:	4988      	ldr	r1, [pc, #544]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800303c:	4b83      	ldr	r3, [pc, #524]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304a:	4980      	ldr	r1, [pc, #512]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800305e:	4b7b      	ldr	r3, [pc, #492]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4977      	ldr	r1, [pc, #476]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003080:	4b72      	ldr	r3, [pc, #456]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f023 0203 	bic.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	496f      	ldr	r1, [pc, #444]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	f023 020c 	bic.w	r2, r3, #12
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b0:	4966      	ldr	r1, [pc, #408]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030c4:	4b61      	ldr	r3, [pc, #388]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	495e      	ldr	r1, [pc, #376]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030e6:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	4955      	ldr	r1, [pc, #340]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800312a:	4b48      	ldr	r3, [pc, #288]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	4944      	ldr	r1, [pc, #272]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800314c:	4b3f      	ldr	r3, [pc, #252]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	493c      	ldr	r1, [pc, #240]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	4933      	ldr	r1, [pc, #204]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003190:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319e:	492b      	ldr	r1, [pc, #172]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d011      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c0:	4922      	ldr	r1, [pc, #136]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031d0:	d101      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031d2:	2301      	movs	r3, #1
 80031d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	4912      	ldr	r1, [pc, #72]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003224:	4909      	ldr	r1, [pc, #36]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d006      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80d9 	beq.w	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003240:	4b02      	ldr	r3, [pc, #8]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a01      	ldr	r2, [pc, #4]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003246:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800324a:	e001      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800324c:	40023800 	.word	0x40023800
 8003250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003252:	f7fe f8d5 	bl	8001400 <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003258:	e008      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800325a:	f7fe f8d1 	bl	8001400 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b64      	cmp	r3, #100	; 0x64
 8003266:	d901      	bls.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e194      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800326c:	4b6c      	ldr	r3, [pc, #432]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d021      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	2b00      	cmp	r3, #0
 800328a:	d11d      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800328c:	4b64      	ldr	r3, [pc, #400]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800329a:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a0:	0e1b      	lsrs	r3, r3, #24
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	019a      	lsls	r2, r3, #6
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	431a      	orrs	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	071b      	lsls	r3, r3, #28
 80032c0:	4957      	ldr	r1, [pc, #348]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032dc:	d00a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02e      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f2:	d129      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032f4:	4b4a      	ldr	r3, [pc, #296]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032fa:	0c1b      	lsrs	r3, r3, #16
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003308:	0f1b      	lsrs	r3, r3, #28
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	019a      	lsls	r2, r3, #6
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	041b      	lsls	r3, r3, #16
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	431a      	orrs	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	071b      	lsls	r3, r3, #28
 8003328:	493d      	ldr	r1, [pc, #244]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003336:	f023 021f 	bic.w	r2, r3, #31
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	3b01      	subs	r3, #1
 8003340:	4937      	ldr	r1, [pc, #220]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01d      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003354:	4b32      	ldr	r3, [pc, #200]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335a:	0e1b      	lsrs	r3, r3, #24
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003362:	4b2f      	ldr	r3, [pc, #188]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003368:	0f1b      	lsrs	r3, r3, #28
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	019a      	lsls	r2, r3, #6
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	431a      	orrs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	071b      	lsls	r3, r3, #28
 8003388:	4925      	ldr	r1, [pc, #148]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d011      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	019a      	lsls	r2, r3, #6
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	071b      	lsls	r3, r3, #28
 80033b8:	4919      	ldr	r1, [pc, #100]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a16      	ldr	r2, [pc, #88]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fe f818 	bl	8001400 <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033d4:	f7fe f814 	bl	8001400 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0d7      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	f040 80cd 	bne.w	8003594 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a08      	ldr	r2, [pc, #32]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003406:	f7fd fffb 	bl	8001400 <HAL_GetTick>
 800340a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800340e:	f7fd fff7 	bl	8001400 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b64      	cmp	r3, #100	; 0x64
 800341a:	d903      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0ba      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003420:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003424:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800342c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003430:	d0ed      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02e      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d12a      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800345a:	4b51      	ldr	r3, [pc, #324]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003468:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	0f1b      	lsrs	r3, r3, #28
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	019a      	lsls	r2, r3, #6
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	431a      	orrs	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	071b      	lsls	r3, r3, #28
 800348e:	4944      	ldr	r1, [pc, #272]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003496:	4b42      	ldr	r3, [pc, #264]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800349c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	493d      	ldr	r1, [pc, #244]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d022      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c4:	d11d      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034c6:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	0e1b      	lsrs	r3, r3, #24
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034d4:	4b32      	ldr	r3, [pc, #200]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	0f1b      	lsrs	r3, r3, #28
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	019a      	lsls	r2, r3, #6
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431a      	orrs	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	061b      	lsls	r3, r3, #24
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	071b      	lsls	r3, r3, #28
 80034fa:	4929      	ldr	r1, [pc, #164]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d028      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	0e1b      	lsrs	r3, r3, #24
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800351c:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	0c1b      	lsrs	r3, r3, #16
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	019a      	lsls	r2, r3, #6
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	431a      	orrs	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	071b      	lsls	r3, r3, #28
 8003542:	4917      	ldr	r1, [pc, #92]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800354c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003550:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	4911      	ldr	r1, [pc, #68]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356c:	f7fd ff48 	bl	8001400 <HAL_GetTick>
 8003570:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003574:	f7fd ff44 	bl	8001400 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e007      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800358e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003592:	d1ef      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e049      	b.n	800364a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fc9a 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 fcf0 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e049      	b.n	80036f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f841 	bl	8003700 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	4619      	mov	r1, r3
 8003690:	4610      	mov	r0, r2
 8003692:	f000 fc99 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e08f      	b.n	8003848 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fd fc19 	bl	8000f74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_TIM_Encoder_Init+0x13c>)
 8003756:	400b      	ands	r3, r1
 8003758:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 fc2f 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_TIM_Encoder_Init+0x140>)
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	4313      	orrs	r3, r2
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <HAL_TIM_Encoder_Init+0x144>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4b2a      	ldr	r3, [pc, #168]	; (800385c <HAL_TIM_Encoder_Init+0x148>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	4313      	orrs	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	011a      	lsls	r2, r3, #4
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	031b      	lsls	r3, r3, #12
 80037d4:	4313      	orrs	r3, r2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	4313      	orrs	r3, r2
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	fffebff8 	.word	0xfffebff8
 8003854:	fffffcfc 	.word	0xfffffcfc
 8003858:	fffff3f3 	.word	0xfffff3f3
 800385c:	ffff0f0f 	.word	0xffff0f0f

08003860 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003870:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003878:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003880:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003888:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d110      	bne.n	80038b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d102      	bne.n	800389c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003896:	7b7b      	ldrb	r3, [r7, #13]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d001      	beq.n	80038a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e069      	b.n	8003974 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b0:	e031      	b.n	8003916 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d110      	bne.n	80038da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038b8:	7bbb      	ldrb	r3, [r7, #14]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038be:	7b3b      	ldrb	r3, [r7, #12]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e055      	b.n	8003974 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038d8:	e01d      	b.n	8003916 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d108      	bne.n	80038f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e0:	7bbb      	ldrb	r3, [r7, #14]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e6:	7b7b      	ldrb	r3, [r7, #13]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d102      	bne.n	80038f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ec:	7b3b      	ldrb	r3, [r7, #12]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d001      	beq.n	80038f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e03e      	b.n	8003974 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_TIM_Encoder_Start+0xc4>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b04      	cmp	r3, #4
 8003920:	d008      	beq.n	8003934 <HAL_TIM_Encoder_Start+0xd4>
 8003922:	e00f      	b.n	8003944 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2201      	movs	r2, #1
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fee3 	bl	80046f8 <TIM_CCxChannelCmd>
      break;
 8003932:	e016      	b.n	8003962 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2201      	movs	r2, #1
 800393a:	2104      	movs	r1, #4
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fedb 	bl	80046f8 <TIM_CCxChannelCmd>
      break;
 8003942:	e00e      	b.n	8003962 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fed3 	bl	80046f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	2104      	movs	r1, #4
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fecc 	bl	80046f8 <TIM_CCxChannelCmd>
      break;
 8003960:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d122      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b02      	cmp	r3, #2
 800399e:	d11b      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0202 	mvn.w	r2, #2
 80039a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fae4 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fad6 	bl	8003f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fae7 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d122      	bne.n	8003a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d11b      	bne.n	8003a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0204 	mvn.w	r2, #4
 80039fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 faba 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003a18:	e005      	b.n	8003a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 faac 	bl	8003f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fabd 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d122      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d11b      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0208 	mvn.w	r2, #8
 8003a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2204      	movs	r2, #4
 8003a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa90 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003a6c:	e005      	b.n	8003a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa82 	bl	8003f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fa93 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d122      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0210 	mvn.w	r2, #16
 8003aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fa66 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003ac0:	e005      	b.n	8003ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa58 	bl	8003f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fa69 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d10e      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d107      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0201 	mvn.w	r2, #1
 8003af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd f8ce 	bl	8000c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b80      	cmp	r3, #128	; 0x80
 8003b0c:	d10e      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d107      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 ff22 	bl	8004970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3a:	d10e      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b80      	cmp	r3, #128	; 0x80
 8003b48:	d107      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 ff15 	bl	8004984 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	d10e      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d107      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fa17 	bl	8003fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d10e      	bne.n	8003bb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d107      	bne.n	8003bb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f06f 0220 	mvn.w	r2, #32
 8003baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fed5 	bl	800495c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e0ff      	b.n	8003dda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b14      	cmp	r3, #20
 8003be6:	f200 80f0 	bhi.w	8003dca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c45 	.word	0x08003c45
 8003bf4:	08003dcb 	.word	0x08003dcb
 8003bf8:	08003dcb 	.word	0x08003dcb
 8003bfc:	08003dcb 	.word	0x08003dcb
 8003c00:	08003c85 	.word	0x08003c85
 8003c04:	08003dcb 	.word	0x08003dcb
 8003c08:	08003dcb 	.word	0x08003dcb
 8003c0c:	08003dcb 	.word	0x08003dcb
 8003c10:	08003cc7 	.word	0x08003cc7
 8003c14:	08003dcb 	.word	0x08003dcb
 8003c18:	08003dcb 	.word	0x08003dcb
 8003c1c:	08003dcb 	.word	0x08003dcb
 8003c20:	08003d07 	.word	0x08003d07
 8003c24:	08003dcb 	.word	0x08003dcb
 8003c28:	08003dcb 	.word	0x08003dcb
 8003c2c:	08003dcb 	.word	0x08003dcb
 8003c30:	08003d49 	.word	0x08003d49
 8003c34:	08003dcb 	.word	0x08003dcb
 8003c38:	08003dcb 	.word	0x08003dcb
 8003c3c:	08003dcb 	.word	0x08003dcb
 8003c40:	08003d89 	.word	0x08003d89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fa5c 	bl	8004108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0208 	orr.w	r2, r2, #8
 8003c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0204 	bic.w	r2, r2, #4
 8003c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6999      	ldr	r1, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	619a      	str	r2, [r3, #24]
      break;
 8003c82:	e0a5      	b.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 faae 	bl	80041ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6999      	ldr	r1, [r3, #24]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	021a      	lsls	r2, r3, #8
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	619a      	str	r2, [r3, #24]
      break;
 8003cc4:	e084      	b.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fb05 	bl	80042dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0208 	orr.w	r2, r2, #8
 8003ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0204 	bic.w	r2, r2, #4
 8003cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69d9      	ldr	r1, [r3, #28]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	61da      	str	r2, [r3, #28]
      break;
 8003d04:	e064      	b.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fb5b 	bl	80043c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	021a      	lsls	r2, r3, #8
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	61da      	str	r2, [r3, #28]
      break;
 8003d46:	e043      	b.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fb92 	bl	8004478 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0208 	orr.w	r2, r2, #8
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0204 	bic.w	r2, r2, #4
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d86:	e023      	b.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fbc4 	bl	800451c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	021a      	lsls	r2, r3, #8
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dc8:	e002      	b.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop

08003de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0b4      	b.n	8003f6a <HAL_TIM_ConfigClockSource+0x186>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	4b56      	ldr	r3, [pc, #344]	; (8003f74 <HAL_TIM_ConfigClockSource+0x190>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e38:	d03e      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	f200 8087 	bhi.w	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	f000 8086 	beq.w	8003f56 <HAL_TIM_ConfigClockSource+0x172>
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4e:	d87f      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d01a      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0xa6>
 8003e54:	2b70      	cmp	r3, #112	; 0x70
 8003e56:	d87b      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d050      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x11a>
 8003e5c:	2b60      	cmp	r3, #96	; 0x60
 8003e5e:	d877      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b50      	cmp	r3, #80	; 0x50
 8003e62:	d03c      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xfa>
 8003e64:	2b50      	cmp	r3, #80	; 0x50
 8003e66:	d873      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d058      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x13a>
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d86f      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b30      	cmp	r3, #48	; 0x30
 8003e72:	d064      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e74:	2b30      	cmp	r3, #48	; 0x30
 8003e76:	d86b      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d060      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d867      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d05c      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d05a      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	e062      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6899      	ldr	r1, [r3, #8]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f000 fc0d 	bl	80046b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	609a      	str	r2, [r3, #8]
      break;
 8003eb6:	e04f      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f000 fbf6 	bl	80046b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eda:	609a      	str	r2, [r3, #8]
      break;
 8003edc:	e03c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 fb6a 	bl	80045c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2150      	movs	r1, #80	; 0x50
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fbc3 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8003efc:	e02c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 fb89 	bl	8004622 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2160      	movs	r1, #96	; 0x60
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fbb3 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e01c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 fb4a 	bl	80045c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2140      	movs	r1, #64	; 0x40
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fba3 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e00c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f000 fb9a 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8003f4e:	e003      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e000      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	fffeff88 	.word	0xfffeff88

08003f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a40      	ldr	r2, [pc, #256]	; (80040dc <TIM_Base_SetConfig+0x114>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d00f      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3d      	ldr	r2, [pc, #244]	; (80040e0 <TIM_Base_SetConfig+0x118>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3c      	ldr	r2, [pc, #240]	; (80040e4 <TIM_Base_SetConfig+0x11c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <TIM_Base_SetConfig+0x120>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3a      	ldr	r2, [pc, #232]	; (80040ec <TIM_Base_SetConfig+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <TIM_Base_SetConfig+0x114>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d027      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2c      	ldr	r2, [pc, #176]	; (80040e0 <TIM_Base_SetConfig+0x118>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d023      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <TIM_Base_SetConfig+0x11c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01f      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <TIM_Base_SetConfig+0x120>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a29      	ldr	r2, [pc, #164]	; (80040ec <TIM_Base_SetConfig+0x124>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d017      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a28      	ldr	r2, [pc, #160]	; (80040f0 <TIM_Base_SetConfig+0x128>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <TIM_Base_SetConfig+0x12c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <TIM_Base_SetConfig+0x130>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <TIM_Base_SetConfig+0x134>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a24      	ldr	r2, [pc, #144]	; (8004100 <TIM_Base_SetConfig+0x138>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a23      	ldr	r2, [pc, #140]	; (8004104 <TIM_Base_SetConfig+0x13c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <TIM_Base_SetConfig+0x114>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0xf8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0c      	ldr	r2, [pc, #48]	; (80040ec <TIM_Base_SetConfig+0x124>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d103      	bne.n	80040c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	615a      	str	r2, [r3, #20]
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40010400 	.word	0x40010400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800
 80040fc:	40001800 	.word	0x40001800
 8004100:	40001c00 	.word	0x40001c00
 8004104:	40002000 	.word	0x40002000

08004108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <TIM_OC1_SetConfig+0xd8>)
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 0302 	bic.w	r3, r3, #2
 8004150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <TIM_OC1_SetConfig+0xdc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_OC1_SetConfig+0x64>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <TIM_OC1_SetConfig+0xe0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d10c      	bne.n	8004186 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0308 	bic.w	r3, r3, #8
 8004172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <TIM_OC1_SetConfig+0xdc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC1_SetConfig+0x8e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <TIM_OC1_SetConfig+0xe0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d111      	bne.n	80041ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	fffeff8f 	.word	0xfffeff8f
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40010400 	.word	0x40010400

080041ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f023 0210 	bic.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4b2e      	ldr	r3, [pc, #184]	; (80042d0 <TIM_OC2_SetConfig+0xe4>)
 8004218:	4013      	ands	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0320 	bic.w	r3, r3, #32
 8004236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <TIM_OC2_SetConfig+0xe8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_OC2_SetConfig+0x68>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a22      	ldr	r2, [pc, #136]	; (80042d8 <TIM_OC2_SetConfig+0xec>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10d      	bne.n	8004270 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <TIM_OC2_SetConfig+0xe8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_OC2_SetConfig+0x94>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <TIM_OC2_SetConfig+0xec>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d113      	bne.n	80042a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	feff8fff 	.word	0xfeff8fff
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40010400 	.word	0x40010400

080042dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4b2d      	ldr	r3, [pc, #180]	; (80043bc <TIM_OC3_SetConfig+0xe0>)
 8004308:	4013      	ands	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a22      	ldr	r2, [pc, #136]	; (80043c0 <TIM_OC3_SetConfig+0xe4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_OC3_SetConfig+0x66>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <TIM_OC3_SetConfig+0xe8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10d      	bne.n	800435e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800435c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <TIM_OC3_SetConfig+0xe4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d003      	beq.n	800436e <TIM_OC3_SetConfig+0x92>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <TIM_OC3_SetConfig+0xe8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d113      	bne.n	8004396 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800437c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	fffeff8f 	.word	0xfffeff8f
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40010400 	.word	0x40010400

080043c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4b1e      	ldr	r3, [pc, #120]	; (800446c <TIM_OC4_SetConfig+0xa4>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	031b      	lsls	r3, r3, #12
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <TIM_OC4_SetConfig+0xa8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_OC4_SetConfig+0x68>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <TIM_OC4_SetConfig+0xac>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d109      	bne.n	8004444 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	019b      	lsls	r3, r3, #6
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	feff8fff 	.word	0xfeff8fff
 8004470:	40010000 	.word	0x40010000
 8004474:	40010400 	.word	0x40010400

08004478 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <TIM_OC5_SetConfig+0x98>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a12      	ldr	r2, [pc, #72]	; (8004514 <TIM_OC5_SetConfig+0x9c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_OC5_SetConfig+0x5e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a11      	ldr	r2, [pc, #68]	; (8004518 <TIM_OC5_SetConfig+0xa0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d109      	bne.n	80044ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	fffeff8f 	.word	0xfffeff8f
 8004514:	40010000 	.word	0x40010000
 8004518:	40010400 	.word	0x40010400

0800451c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <TIM_OC6_SetConfig+0x9c>)
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800455e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	051b      	lsls	r3, r3, #20
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a13      	ldr	r2, [pc, #76]	; (80045bc <TIM_OC6_SetConfig+0xa0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC6_SetConfig+0x60>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <TIM_OC6_SetConfig+0xa4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d109      	bne.n	8004590 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	029b      	lsls	r3, r3, #10
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	feff8fff 	.word	0xfeff8fff
 80045bc:	40010000 	.word	0x40010000
 80045c0:	40010400 	.word	0x40010400

080045c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f023 0201 	bic.w	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 030a 	bic.w	r3, r3, #10
 8004600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004622:	b480      	push	{r7}
 8004624:	b087      	sub	sp, #28
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f023 0210 	bic.w	r2, r3, #16
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800464c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	031b      	lsls	r3, r3, #12
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800465e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	f043 0307 	orr.w	r3, r3, #7
 80046a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	021a      	lsls	r2, r3, #8
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	431a      	orrs	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4313      	orrs	r3, r2
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	2201      	movs	r2, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1a      	ldr	r2, [r3, #32]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	43db      	mvns	r3, r3
 800471a:	401a      	ands	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	fa01 f303 	lsl.w	r3, r1, r3
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004758:	2302      	movs	r3, #2
 800475a:	e06d      	b.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a30      	ldr	r2, [pc, #192]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2f      	ldr	r2, [pc, #188]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d108      	bne.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004796:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a20      	ldr	r2, [pc, #128]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ce:	d01d      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1d      	ldr	r2, [pc, #116]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a15      	ldr	r2, [pc, #84]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a16      	ldr	r2, [pc, #88]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a15      	ldr	r2, [pc, #84]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10c      	bne.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	4313      	orrs	r3, r2
 800481c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40010000 	.word	0x40010000
 8004848:	40010400 	.word	0x40010400
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	40014000 	.word	0x40014000
 800485c:	40001800 	.word	0x40001800

08004860 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004878:	2302      	movs	r3, #2
 800487a:	e065      	b.n	8004948 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d115      	bne.n	8004936 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	051b      	lsls	r3, r3, #20
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40010000 	.word	0x40010000
 8004958:	40010400 	.word	0x40010400

0800495c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e040      	b.n	8004a2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fc fb74 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2224      	movs	r2, #36	; 0x24
 80049c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fba2 	bl	8005120 <UART_SetConfig>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e022      	b.n	8004a2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fdfa 	bl	80055e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fe81 	bl	800572c <UART_CheckIdleState>
 8004a2a:	4603      	mov	r3, r0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	; 0x28
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d171      	bne.n	8004b30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_UART_Transmit+0x24>
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e06a      	b.n	8004b32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2221      	movs	r2, #33	; 0x21
 8004a68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a6a:	f7fc fcc9 	bl	8001400 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a88:	d108      	bne.n	8004a9c <HAL_UART_Transmit+0x68>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d104      	bne.n	8004a9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e003      	b.n	8004aa4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aa4:	e02c      	b.n	8004b00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fe72 	bl	800579a <UART_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e038      	b.n	8004b32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	3302      	adds	r3, #2
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	e007      	b.n	8004aee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	781a      	ldrb	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	3301      	adds	r3, #1
 8004aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1cc      	bne.n	8004aa6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2200      	movs	r2, #0
 8004b14:	2140      	movs	r1, #64	; 0x40
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fe3f 	bl	800579a <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e005      	b.n	8004b32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3720      	adds	r7, #32
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b0ba      	sub	sp, #232	; 0xe8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b66:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d115      	bne.n	8004ba4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00f      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8297 	beq.w	80050c8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	4798      	blx	r3
      }
      return;
 8004ba2:	e291      	b.n	80050c8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8117 	beq.w	8004ddc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bbe:	4b85      	ldr	r3, [pc, #532]	; (8004dd4 <HAL_UART_IRQHandler+0x298>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 810a 	beq.w	8004ddc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d011      	beq.n	8004bf8 <HAL_UART_IRQHandler+0xbc>
 8004bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2201      	movs	r2, #1
 8004be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bee:	f043 0201 	orr.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d011      	beq.n	8004c28 <HAL_UART_IRQHandler+0xec>
 8004c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2202      	movs	r2, #2
 8004c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1e:	f043 0204 	orr.w	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d011      	beq.n	8004c58 <HAL_UART_IRQHandler+0x11c>
 8004c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2204      	movs	r2, #4
 8004c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4e:	f043 0202 	orr.w	r2, r3, #2
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d017      	beq.n	8004c94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00b      	beq.n	8004c94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2208      	movs	r2, #8
 8004c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8a:	f043 0208 	orr.w	r2, r3, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x18a>
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00c      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cbc:	f043 0220 	orr.w	r2, r3, #32
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 81fd 	beq.w	80050cc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d005      	beq.n	8004d1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d04f      	beq.n	8004dbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fe01 	bl	8005926 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d141      	bne.n	8004db6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3308      	adds	r3, #8
 8004d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1d9      	bne.n	8004d32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d013      	beq.n	8004dae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <HAL_UART_IRQHandler+0x29c>)
 8004d8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fc fce5 	bl	8001762 <HAL_DMA_Abort_IT>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d017      	beq.n	8004dce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004da8:	4610      	mov	r0, r2
 8004daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	e00f      	b.n	8004dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9a0 	bl	80050f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	e00b      	b.n	8004dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f99c 	bl	80050f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbc:	e007      	b.n	8004dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f998 	bl	80050f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004dcc:	e17e      	b.n	80050cc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dce:	bf00      	nop
    return;
 8004dd0:	e17c      	b.n	80050cc <HAL_UART_IRQHandler+0x590>
 8004dd2:	bf00      	nop
 8004dd4:	04000120 	.word	0x04000120
 8004dd8:	080059ef 	.word	0x080059ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	f040 814c 	bne.w	800507e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8145 	beq.w	800507e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 813e 	beq.w	800507e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2210      	movs	r2, #16
 8004e08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	f040 80b6 	bne.w	8004f86 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8150 	beq.w	80050d0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	f080 8148 	bcs.w	80050d0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e54:	f000 8086 	beq.w	8004f64 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1da      	bne.n	8004e58 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ec6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004eca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e1      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e3      	bne.n	8004ede <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f34:	f023 0310 	bic.w	r3, r3, #16
 8004f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e4      	bne.n	8004f24 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fc fb8f 	bl	8001682 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f8c2 	bl	8005108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f84:	e0a4      	b.n	80050d0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8096 	beq.w	80050d4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8091 	beq.w	80050d4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e4      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3308      	adds	r3, #8
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3308      	adds	r3, #8
 8005008:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800500c:	633a      	str	r2, [r7, #48]	; 0x30
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e3      	bne.n	8004fe8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	60fb      	str	r3, [r7, #12]
   return(result);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f023 0310 	bic.w	r3, r3, #16
 8005048:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	69b9      	ldr	r1, [r7, #24]
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	617b      	str	r3, [r7, #20]
   return(result);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e4      	bne.n	8005034 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f846 	bl	8005108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800507c:	e02a      	b.n	80050d4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800507e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00e      	beq.n	80050a8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800508a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01c      	beq.n	80050d8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
    }
    return;
 80050a6:	e017      	b.n	80050d8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d012      	beq.n	80050da <HAL_UART_IRQHandler+0x59e>
 80050b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00c      	beq.n	80050da <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fcaa 	bl	8005a1a <UART_EndTransmit_IT>
    return;
 80050c6:	e008      	b.n	80050da <HAL_UART_IRQHandler+0x59e>
      return;
 80050c8:	bf00      	nop
 80050ca:	e006      	b.n	80050da <HAL_UART_IRQHandler+0x59e>
    return;
 80050cc:	bf00      	nop
 80050ce:	e004      	b.n	80050da <HAL_UART_IRQHandler+0x59e>
      return;
 80050d0:	bf00      	nop
 80050d2:	e002      	b.n	80050da <HAL_UART_IRQHandler+0x59e>
      return;
 80050d4:	bf00      	nop
 80050d6:	e000      	b.n	80050da <HAL_UART_IRQHandler+0x59e>
    return;
 80050d8:	bf00      	nop
  }

}
 80050da:	37e8      	adds	r7, #232	; 0xe8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4ba6      	ldr	r3, [pc, #664]	; (80053e4 <UART_SetConfig+0x2c4>)
 800514c:	4013      	ands	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	6979      	ldr	r1, [r7, #20]
 8005154:	430b      	orrs	r3, r1
 8005156:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	430a      	orrs	r2, r1
 8005190:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a94      	ldr	r2, [pc, #592]	; (80053e8 <UART_SetConfig+0x2c8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d120      	bne.n	80051de <UART_SetConfig+0xbe>
 800519c:	4b93      	ldr	r3, [pc, #588]	; (80053ec <UART_SetConfig+0x2cc>)
 800519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d816      	bhi.n	80051d8 <UART_SetConfig+0xb8>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <UART_SetConfig+0x90>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	080051cd 	.word	0x080051cd
 80051b8:	080051c7 	.word	0x080051c7
 80051bc:	080051d3 	.word	0x080051d3
 80051c0:	2301      	movs	r3, #1
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e150      	b.n	8005468 <UART_SetConfig+0x348>
 80051c6:	2302      	movs	r3, #2
 80051c8:	77fb      	strb	r3, [r7, #31]
 80051ca:	e14d      	b.n	8005468 <UART_SetConfig+0x348>
 80051cc:	2304      	movs	r3, #4
 80051ce:	77fb      	strb	r3, [r7, #31]
 80051d0:	e14a      	b.n	8005468 <UART_SetConfig+0x348>
 80051d2:	2308      	movs	r3, #8
 80051d4:	77fb      	strb	r3, [r7, #31]
 80051d6:	e147      	b.n	8005468 <UART_SetConfig+0x348>
 80051d8:	2310      	movs	r3, #16
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e144      	b.n	8005468 <UART_SetConfig+0x348>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a83      	ldr	r2, [pc, #524]	; (80053f0 <UART_SetConfig+0x2d0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d132      	bne.n	800524e <UART_SetConfig+0x12e>
 80051e8:	4b80      	ldr	r3, [pc, #512]	; (80053ec <UART_SetConfig+0x2cc>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f003 030c 	and.w	r3, r3, #12
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	d828      	bhi.n	8005248 <UART_SetConfig+0x128>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <UART_SetConfig+0xdc>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005231 	.word	0x08005231
 8005200:	08005249 	.word	0x08005249
 8005204:	08005249 	.word	0x08005249
 8005208:	08005249 	.word	0x08005249
 800520c:	0800523d 	.word	0x0800523d
 8005210:	08005249 	.word	0x08005249
 8005214:	08005249 	.word	0x08005249
 8005218:	08005249 	.word	0x08005249
 800521c:	08005237 	.word	0x08005237
 8005220:	08005249 	.word	0x08005249
 8005224:	08005249 	.word	0x08005249
 8005228:	08005249 	.word	0x08005249
 800522c:	08005243 	.word	0x08005243
 8005230:	2300      	movs	r3, #0
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e118      	b.n	8005468 <UART_SetConfig+0x348>
 8005236:	2302      	movs	r3, #2
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e115      	b.n	8005468 <UART_SetConfig+0x348>
 800523c:	2304      	movs	r3, #4
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e112      	b.n	8005468 <UART_SetConfig+0x348>
 8005242:	2308      	movs	r3, #8
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e10f      	b.n	8005468 <UART_SetConfig+0x348>
 8005248:	2310      	movs	r3, #16
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e10c      	b.n	8005468 <UART_SetConfig+0x348>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a68      	ldr	r2, [pc, #416]	; (80053f4 <UART_SetConfig+0x2d4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d120      	bne.n	800529a <UART_SetConfig+0x17a>
 8005258:	4b64      	ldr	r3, [pc, #400]	; (80053ec <UART_SetConfig+0x2cc>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005262:	2b30      	cmp	r3, #48	; 0x30
 8005264:	d013      	beq.n	800528e <UART_SetConfig+0x16e>
 8005266:	2b30      	cmp	r3, #48	; 0x30
 8005268:	d814      	bhi.n	8005294 <UART_SetConfig+0x174>
 800526a:	2b20      	cmp	r3, #32
 800526c:	d009      	beq.n	8005282 <UART_SetConfig+0x162>
 800526e:	2b20      	cmp	r3, #32
 8005270:	d810      	bhi.n	8005294 <UART_SetConfig+0x174>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <UART_SetConfig+0x15c>
 8005276:	2b10      	cmp	r3, #16
 8005278:	d006      	beq.n	8005288 <UART_SetConfig+0x168>
 800527a:	e00b      	b.n	8005294 <UART_SetConfig+0x174>
 800527c:	2300      	movs	r3, #0
 800527e:	77fb      	strb	r3, [r7, #31]
 8005280:	e0f2      	b.n	8005468 <UART_SetConfig+0x348>
 8005282:	2302      	movs	r3, #2
 8005284:	77fb      	strb	r3, [r7, #31]
 8005286:	e0ef      	b.n	8005468 <UART_SetConfig+0x348>
 8005288:	2304      	movs	r3, #4
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e0ec      	b.n	8005468 <UART_SetConfig+0x348>
 800528e:	2308      	movs	r3, #8
 8005290:	77fb      	strb	r3, [r7, #31]
 8005292:	e0e9      	b.n	8005468 <UART_SetConfig+0x348>
 8005294:	2310      	movs	r3, #16
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e0e6      	b.n	8005468 <UART_SetConfig+0x348>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a56      	ldr	r2, [pc, #344]	; (80053f8 <UART_SetConfig+0x2d8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d120      	bne.n	80052e6 <UART_SetConfig+0x1c6>
 80052a4:	4b51      	ldr	r3, [pc, #324]	; (80053ec <UART_SetConfig+0x2cc>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ae:	2bc0      	cmp	r3, #192	; 0xc0
 80052b0:	d013      	beq.n	80052da <UART_SetConfig+0x1ba>
 80052b2:	2bc0      	cmp	r3, #192	; 0xc0
 80052b4:	d814      	bhi.n	80052e0 <UART_SetConfig+0x1c0>
 80052b6:	2b80      	cmp	r3, #128	; 0x80
 80052b8:	d009      	beq.n	80052ce <UART_SetConfig+0x1ae>
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d810      	bhi.n	80052e0 <UART_SetConfig+0x1c0>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <UART_SetConfig+0x1a8>
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d006      	beq.n	80052d4 <UART_SetConfig+0x1b4>
 80052c6:	e00b      	b.n	80052e0 <UART_SetConfig+0x1c0>
 80052c8:	2300      	movs	r3, #0
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e0cc      	b.n	8005468 <UART_SetConfig+0x348>
 80052ce:	2302      	movs	r3, #2
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e0c9      	b.n	8005468 <UART_SetConfig+0x348>
 80052d4:	2304      	movs	r3, #4
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e0c6      	b.n	8005468 <UART_SetConfig+0x348>
 80052da:	2308      	movs	r3, #8
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e0c3      	b.n	8005468 <UART_SetConfig+0x348>
 80052e0:	2310      	movs	r3, #16
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e0c0      	b.n	8005468 <UART_SetConfig+0x348>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a44      	ldr	r2, [pc, #272]	; (80053fc <UART_SetConfig+0x2dc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d125      	bne.n	800533c <UART_SetConfig+0x21c>
 80052f0:	4b3e      	ldr	r3, [pc, #248]	; (80053ec <UART_SetConfig+0x2cc>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052fe:	d017      	beq.n	8005330 <UART_SetConfig+0x210>
 8005300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005304:	d817      	bhi.n	8005336 <UART_SetConfig+0x216>
 8005306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530a:	d00b      	beq.n	8005324 <UART_SetConfig+0x204>
 800530c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005310:	d811      	bhi.n	8005336 <UART_SetConfig+0x216>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <UART_SetConfig+0x1fe>
 8005316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531a:	d006      	beq.n	800532a <UART_SetConfig+0x20a>
 800531c:	e00b      	b.n	8005336 <UART_SetConfig+0x216>
 800531e:	2300      	movs	r3, #0
 8005320:	77fb      	strb	r3, [r7, #31]
 8005322:	e0a1      	b.n	8005468 <UART_SetConfig+0x348>
 8005324:	2302      	movs	r3, #2
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e09e      	b.n	8005468 <UART_SetConfig+0x348>
 800532a:	2304      	movs	r3, #4
 800532c:	77fb      	strb	r3, [r7, #31]
 800532e:	e09b      	b.n	8005468 <UART_SetConfig+0x348>
 8005330:	2308      	movs	r3, #8
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e098      	b.n	8005468 <UART_SetConfig+0x348>
 8005336:	2310      	movs	r3, #16
 8005338:	77fb      	strb	r3, [r7, #31]
 800533a:	e095      	b.n	8005468 <UART_SetConfig+0x348>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2f      	ldr	r2, [pc, #188]	; (8005400 <UART_SetConfig+0x2e0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d125      	bne.n	8005392 <UART_SetConfig+0x272>
 8005346:	4b29      	ldr	r3, [pc, #164]	; (80053ec <UART_SetConfig+0x2cc>)
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005354:	d017      	beq.n	8005386 <UART_SetConfig+0x266>
 8005356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800535a:	d817      	bhi.n	800538c <UART_SetConfig+0x26c>
 800535c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005360:	d00b      	beq.n	800537a <UART_SetConfig+0x25a>
 8005362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005366:	d811      	bhi.n	800538c <UART_SetConfig+0x26c>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <UART_SetConfig+0x254>
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005370:	d006      	beq.n	8005380 <UART_SetConfig+0x260>
 8005372:	e00b      	b.n	800538c <UART_SetConfig+0x26c>
 8005374:	2301      	movs	r3, #1
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e076      	b.n	8005468 <UART_SetConfig+0x348>
 800537a:	2302      	movs	r3, #2
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e073      	b.n	8005468 <UART_SetConfig+0x348>
 8005380:	2304      	movs	r3, #4
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e070      	b.n	8005468 <UART_SetConfig+0x348>
 8005386:	2308      	movs	r3, #8
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e06d      	b.n	8005468 <UART_SetConfig+0x348>
 800538c:	2310      	movs	r3, #16
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e06a      	b.n	8005468 <UART_SetConfig+0x348>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1b      	ldr	r2, [pc, #108]	; (8005404 <UART_SetConfig+0x2e4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d138      	bne.n	800540e <UART_SetConfig+0x2ee>
 800539c:	4b13      	ldr	r3, [pc, #76]	; (80053ec <UART_SetConfig+0x2cc>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80053a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053aa:	d017      	beq.n	80053dc <UART_SetConfig+0x2bc>
 80053ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053b0:	d82a      	bhi.n	8005408 <UART_SetConfig+0x2e8>
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d00b      	beq.n	80053d0 <UART_SetConfig+0x2b0>
 80053b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053bc:	d824      	bhi.n	8005408 <UART_SetConfig+0x2e8>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <UART_SetConfig+0x2aa>
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	d006      	beq.n	80053d6 <UART_SetConfig+0x2b6>
 80053c8:	e01e      	b.n	8005408 <UART_SetConfig+0x2e8>
 80053ca:	2300      	movs	r3, #0
 80053cc:	77fb      	strb	r3, [r7, #31]
 80053ce:	e04b      	b.n	8005468 <UART_SetConfig+0x348>
 80053d0:	2302      	movs	r3, #2
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e048      	b.n	8005468 <UART_SetConfig+0x348>
 80053d6:	2304      	movs	r3, #4
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e045      	b.n	8005468 <UART_SetConfig+0x348>
 80053dc:	2308      	movs	r3, #8
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e042      	b.n	8005468 <UART_SetConfig+0x348>
 80053e2:	bf00      	nop
 80053e4:	efff69f3 	.word	0xefff69f3
 80053e8:	40011000 	.word	0x40011000
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40004400 	.word	0x40004400
 80053f4:	40004800 	.word	0x40004800
 80053f8:	40004c00 	.word	0x40004c00
 80053fc:	40005000 	.word	0x40005000
 8005400:	40011400 	.word	0x40011400
 8005404:	40007800 	.word	0x40007800
 8005408:	2310      	movs	r3, #16
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e02c      	b.n	8005468 <UART_SetConfig+0x348>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a72      	ldr	r2, [pc, #456]	; (80055dc <UART_SetConfig+0x4bc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d125      	bne.n	8005464 <UART_SetConfig+0x344>
 8005418:	4b71      	ldr	r3, [pc, #452]	; (80055e0 <UART_SetConfig+0x4c0>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005422:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005426:	d017      	beq.n	8005458 <UART_SetConfig+0x338>
 8005428:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800542c:	d817      	bhi.n	800545e <UART_SetConfig+0x33e>
 800542e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005432:	d00b      	beq.n	800544c <UART_SetConfig+0x32c>
 8005434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005438:	d811      	bhi.n	800545e <UART_SetConfig+0x33e>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <UART_SetConfig+0x326>
 800543e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005442:	d006      	beq.n	8005452 <UART_SetConfig+0x332>
 8005444:	e00b      	b.n	800545e <UART_SetConfig+0x33e>
 8005446:	2300      	movs	r3, #0
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e00d      	b.n	8005468 <UART_SetConfig+0x348>
 800544c:	2302      	movs	r3, #2
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	e00a      	b.n	8005468 <UART_SetConfig+0x348>
 8005452:	2304      	movs	r3, #4
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e007      	b.n	8005468 <UART_SetConfig+0x348>
 8005458:	2308      	movs	r3, #8
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e004      	b.n	8005468 <UART_SetConfig+0x348>
 800545e:	2310      	movs	r3, #16
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e001      	b.n	8005468 <UART_SetConfig+0x348>
 8005464:	2310      	movs	r3, #16
 8005466:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005470:	d15b      	bne.n	800552a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005472:	7ffb      	ldrb	r3, [r7, #31]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d828      	bhi.n	80054ca <UART_SetConfig+0x3aa>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x360>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	080054a5 	.word	0x080054a5
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054b5 	.word	0x080054b5
 800548c:	080054cb 	.word	0x080054cb
 8005490:	080054bb 	.word	0x080054bb
 8005494:	080054cb 	.word	0x080054cb
 8005498:	080054cb 	.word	0x080054cb
 800549c:	080054cb 	.word	0x080054cb
 80054a0:	080054c3 	.word	0x080054c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a4:	f7fd fc66 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 80054a8:	61b8      	str	r0, [r7, #24]
        break;
 80054aa:	e013      	b.n	80054d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ac:	f7fd fc76 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 80054b0:	61b8      	str	r0, [r7, #24]
        break;
 80054b2:	e00f      	b.n	80054d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b4b      	ldr	r3, [pc, #300]	; (80055e4 <UART_SetConfig+0x4c4>)
 80054b6:	61bb      	str	r3, [r7, #24]
        break;
 80054b8:	e00c      	b.n	80054d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ba:	f7fd fb49 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 80054be:	61b8      	str	r0, [r7, #24]
        break;
 80054c0:	e008      	b.n	80054d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c6:	61bb      	str	r3, [r7, #24]
        break;
 80054c8:	e004      	b.n	80054d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	77bb      	strb	r3, [r7, #30]
        break;
 80054d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d074      	beq.n	80055c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	005a      	lsls	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	441a      	add	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b0f      	cmp	r3, #15
 80054f4:	d916      	bls.n	8005524 <UART_SetConfig+0x404>
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d212      	bcs.n	8005524 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	b29b      	uxth	r3, r3
 8005502:	f023 030f 	bic.w	r3, r3, #15
 8005506:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	b29b      	uxth	r3, r3
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	b29a      	uxth	r2, r3
 8005514:	89fb      	ldrh	r3, [r7, #14]
 8005516:	4313      	orrs	r3, r2
 8005518:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	89fa      	ldrh	r2, [r7, #14]
 8005520:	60da      	str	r2, [r3, #12]
 8005522:	e04f      	b.n	80055c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	77bb      	strb	r3, [r7, #30]
 8005528:	e04c      	b.n	80055c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800552a:	7ffb      	ldrb	r3, [r7, #31]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d828      	bhi.n	8005582 <UART_SetConfig+0x462>
 8005530:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0x418>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005565 	.word	0x08005565
 8005540:	0800556d 	.word	0x0800556d
 8005544:	08005583 	.word	0x08005583
 8005548:	08005573 	.word	0x08005573
 800554c:	08005583 	.word	0x08005583
 8005550:	08005583 	.word	0x08005583
 8005554:	08005583 	.word	0x08005583
 8005558:	0800557b 	.word	0x0800557b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800555c:	f7fd fc0a 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8005560:	61b8      	str	r0, [r7, #24]
        break;
 8005562:	e013      	b.n	800558c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005564:	f7fd fc1a 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8005568:	61b8      	str	r0, [r7, #24]
        break;
 800556a:	e00f      	b.n	800558c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <UART_SetConfig+0x4c4>)
 800556e:	61bb      	str	r3, [r7, #24]
        break;
 8005570:	e00c      	b.n	800558c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005572:	f7fd faed 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8005576:	61b8      	str	r0, [r7, #24]
        break;
 8005578:	e008      	b.n	800558c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557e:	61bb      	str	r3, [r7, #24]
        break;
 8005580:	e004      	b.n	800558c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	77bb      	strb	r3, [r7, #30]
        break;
 800558a:	bf00      	nop
    }

    if (pclk != 0U)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d018      	beq.n	80055c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	085a      	lsrs	r2, r3, #1
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	441a      	add	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b0f      	cmp	r3, #15
 80055aa:	d909      	bls.n	80055c0 <UART_SetConfig+0x4a0>
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b2:	d205      	bcs.n	80055c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60da      	str	r2, [r3, #12]
 80055be:	e001      	b.n	80055c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40007c00 	.word	0x40007c00
 80055e0:	40023800 	.word	0x40023800
 80055e4:	00f42400 	.word	0x00f42400

080055e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01a      	beq.n	80056fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e6:	d10a      	bne.n	80056fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
  }
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800573c:	f7fb fe60 	bl	8001400 <HAL_GetTick>
 8005740:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b08      	cmp	r3, #8
 800574e:	d10e      	bne.n	800576e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f81b 	bl	800579a <UART_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e011      	b.n	8005792 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b09c      	sub	sp, #112	; 0x70
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	4613      	mov	r3, r2
 80057a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057aa:	e0a7      	b.n	80058fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	f000 80a3 	beq.w	80058fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b6:	f7fb fe23 	bl	8001400 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d302      	bcc.n	80057cc <UART_WaitOnFlagUntilTimeout+0x32>
 80057c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d13f      	bne.n	800584c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057e0:	667b      	str	r3, [r7, #100]	; 0x64
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e6      	bne.n	80057cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	663b      	str	r3, [r7, #96]	; 0x60
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3308      	adds	r3, #8
 800581c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800581e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005820:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800582c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e068      	b.n	800591e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d050      	beq.n	80058fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005868:	d148      	bne.n	80058fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005872:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
 8005894:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e6      	bne.n	8005874 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3308      	adds	r3, #8
 80058ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	613b      	str	r3, [r7, #16]
   return(result);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3308      	adds	r3, #8
 80058c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058c6:	623a      	str	r2, [r7, #32]
 80058c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	69f9      	ldr	r1, [r7, #28]
 80058cc:	6a3a      	ldr	r2, [r7, #32]
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e5      	bne.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e010      	b.n	800591e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4013      	ands	r3, r2
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	429a      	cmp	r2, r3
 800590a:	bf0c      	ite	eq
 800590c:	2301      	moveq	r3, #1
 800590e:	2300      	movne	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	461a      	mov	r2, r3
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	429a      	cmp	r2, r3
 8005918:	f43f af48 	beq.w	80057ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3770      	adds	r7, #112	; 0x70
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005926:	b480      	push	{r7}
 8005928:	b095      	sub	sp, #84	; 0x54
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594c:	643b      	str	r3, [r7, #64]	; 0x40
 800594e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3308      	adds	r3, #8
 8005966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005980:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005998:	2b01      	cmp	r3, #1
 800599a:	d118      	bne.n	80059ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f023 0310 	bic.w	r3, r3, #16
 80059b0:	647b      	str	r3, [r7, #68]	; 0x44
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6979      	ldr	r1, [r7, #20]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	613b      	str	r3, [r7, #16]
   return(result);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e6      	bne.n	800599c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059e2:	bf00      	nop
 80059e4:	3754      	adds	r7, #84	; 0x54
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff fb71 	bl	80050f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b088      	sub	sp, #32
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6979      	ldr	r1, [r7, #20]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e6      	bne.n	8005a22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fb3d 	bl	80050e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a66:	bf00      	nop
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a70:	b084      	sub	sp, #16
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	f107 001c 	add.w	r0, r7, #28
 8005a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d120      	bne.n	8005aca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <USB_CoreInit+0xac>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d105      	bne.n	8005abe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa96 	bl	8005ff0 <USB_CoreReset>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e010      	b.n	8005aec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa8a 	bl	8005ff0 <USB_CoreReset>
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d10b      	bne.n	8005b0a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f043 0206 	orr.w	r2, r3, #6
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f043 0220 	orr.w	r2, r3, #32
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b16:	b004      	add	sp, #16
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	ffbdffbf 	.word	0xffbdffbf

08005b20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f023 0201 	bic.w	r2, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d115      	bne.n	8005b90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b70:	2001      	movs	r0, #1
 8005b72:	f7fb fc51 	bl	8001418 <HAL_Delay>
      ms++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fa29 	bl	8005fd4 <USB_GetMode>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d01e      	beq.n	8005bc6 <USB_SetCurrentMode+0x84>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b31      	cmp	r3, #49	; 0x31
 8005b8c:	d9f0      	bls.n	8005b70 <USB_SetCurrentMode+0x2e>
 8005b8e:	e01a      	b.n	8005bc6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d115      	bne.n	8005bc2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f7fb fc38 	bl	8001418 <HAL_Delay>
      ms++;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fa10 	bl	8005fd4 <USB_GetMode>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <USB_SetCurrentMode+0x84>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b31      	cmp	r3, #49	; 0x31
 8005bbe:	d9f0      	bls.n	8005ba2 <USB_SetCurrentMode+0x60>
 8005bc0:	e001      	b.n	8005bc6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e005      	b.n	8005bd2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b32      	cmp	r3, #50	; 0x32
 8005bca:	d101      	bne.n	8005bd0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bdc:	b084      	sub	sp, #16
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	e009      	b.n	8005c10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	3340      	adds	r3, #64	; 0x40
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b0e      	cmp	r3, #14
 8005c14:	d9f2      	bls.n	8005bfc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d11c      	bne.n	8005c56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c2a:	f043 0302 	orr.w	r3, r3, #2
 8005c2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e005      	b.n	8005c62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c74:	4619      	mov	r1, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	680b      	ldr	r3, [r1, #0]
 8005c80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d10c      	bne.n	8005ca2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d104      	bne.n	8005c98 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f965 	bl	8005f60 <USB_SetDevSpeed>
 8005c96:	e008      	b.n	8005caa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c98:	2101      	movs	r1, #1
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f960 	bl	8005f60 <USB_SetDevSpeed>
 8005ca0:	e003      	b.n	8005caa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ca2:	2103      	movs	r1, #3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f95b 	bl	8005f60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005caa:	2110      	movs	r1, #16
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f8f3 	bl	8005e98 <USB_FlushTxFifo>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f91f 	bl	8005f00 <USB_FlushRxFifo>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	461a      	mov	r2, r3
 8005cec:	2300      	movs	r3, #0
 8005cee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	e043      	b.n	8005d7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d0c:	d118      	bne.n	8005d40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	461a      	mov	r2, r3
 8005d22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	e013      	b.n	8005d52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d36:	461a      	mov	r2, r3
 8005d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e008      	b.n	8005d52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	461a      	mov	r2, r3
 8005d72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d3b7      	bcc.n	8005cf6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e043      	b.n	8005e14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da2:	d118      	bne.n	8005dd6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	461a      	mov	r2, r3
 8005db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e013      	b.n	8005de8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e008      	b.n	8005de8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	461a      	mov	r2, r3
 8005de4:	2300      	movs	r3, #0
 8005de6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	461a      	mov	r2, r3
 8005df6:	2300      	movs	r3, #0
 8005df8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	461a      	mov	r2, r3
 8005e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3301      	adds	r3, #1
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d3b7      	bcc.n	8005d8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f043 0210 	orr.w	r2, r3, #16
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <USB_DevInit+0x2b4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f043 0208 	orr.w	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d105      	bne.n	8005e80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <USB_DevInit+0x2b8>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e8c:	b004      	add	sp, #16
 8005e8e:	4770      	bx	lr
 8005e90:	803c3800 	.word	0x803c3800
 8005e94:	40000004 	.word	0x40000004

08005e98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4a13      	ldr	r2, [pc, #76]	; (8005efc <USB_FlushTxFifo+0x64>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d901      	bls.n	8005eb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e01b      	b.n	8005ef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	daf2      	bge.n	8005ea6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	019b      	lsls	r3, r3, #6
 8005ec8:	f043 0220 	orr.w	r2, r3, #32
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a08      	ldr	r2, [pc, #32]	; (8005efc <USB_FlushTxFifo+0x64>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d901      	bls.n	8005ee2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e006      	b.n	8005ef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d0f0      	beq.n	8005ed0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	00030d40 	.word	0x00030d40

08005f00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4a11      	ldr	r2, [pc, #68]	; (8005f5c <USB_FlushRxFifo+0x5c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e018      	b.n	8005f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	daf2      	bge.n	8005f0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2210      	movs	r2, #16
 8005f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a08      	ldr	r2, [pc, #32]	; (8005f5c <USB_FlushRxFifo+0x5c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e006      	b.n	8005f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d0f0      	beq.n	8005f30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	00030d40 	.word	0x00030d40

08005f60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fac:	f023 0303 	bic.w	r3, r3, #3
 8005fb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4a13      	ldr	r2, [pc, #76]	; (8006054 <USB_CoreReset+0x64>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e01b      	b.n	8006046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	daf2      	bge.n	8005ffc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f043 0201 	orr.w	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4a09      	ldr	r2, [pc, #36]	; (8006054 <USB_CoreReset+0x64>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d901      	bls.n	8006038 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e006      	b.n	8006046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b01      	cmp	r3, #1
 8006042:	d0f0      	beq.n	8006026 <USB_CoreReset+0x36>

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	00030d40 	.word	0x00030d40

08006058 <__libc_init_array>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	4d0d      	ldr	r5, [pc, #52]	; (8006090 <__libc_init_array+0x38>)
 800605c:	4c0d      	ldr	r4, [pc, #52]	; (8006094 <__libc_init_array+0x3c>)
 800605e:	1b64      	subs	r4, r4, r5
 8006060:	10a4      	asrs	r4, r4, #2
 8006062:	2600      	movs	r6, #0
 8006064:	42a6      	cmp	r6, r4
 8006066:	d109      	bne.n	800607c <__libc_init_array+0x24>
 8006068:	4d0b      	ldr	r5, [pc, #44]	; (8006098 <__libc_init_array+0x40>)
 800606a:	4c0c      	ldr	r4, [pc, #48]	; (800609c <__libc_init_array+0x44>)
 800606c:	f000 f87c 	bl	8006168 <_init>
 8006070:	1b64      	subs	r4, r4, r5
 8006072:	10a4      	asrs	r4, r4, #2
 8006074:	2600      	movs	r6, #0
 8006076:	42a6      	cmp	r6, r4
 8006078:	d105      	bne.n	8006086 <__libc_init_array+0x2e>
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006080:	4798      	blx	r3
 8006082:	3601      	adds	r6, #1
 8006084:	e7ee      	b.n	8006064 <__libc_init_array+0xc>
 8006086:	f855 3b04 	ldr.w	r3, [r5], #4
 800608a:	4798      	blx	r3
 800608c:	3601      	adds	r6, #1
 800608e:	e7f2      	b.n	8006076 <__libc_init_array+0x1e>
 8006090:	080061d0 	.word	0x080061d0
 8006094:	080061d0 	.word	0x080061d0
 8006098:	080061d0 	.word	0x080061d0
 800609c:	080061d4 	.word	0x080061d4

080060a0 <__itoa>:
 80060a0:	1e93      	subs	r3, r2, #2
 80060a2:	2b22      	cmp	r3, #34	; 0x22
 80060a4:	b510      	push	{r4, lr}
 80060a6:	460c      	mov	r4, r1
 80060a8:	d904      	bls.n	80060b4 <__itoa+0x14>
 80060aa:	2300      	movs	r3, #0
 80060ac:	700b      	strb	r3, [r1, #0]
 80060ae:	461c      	mov	r4, r3
 80060b0:	4620      	mov	r0, r4
 80060b2:	bd10      	pop	{r4, pc}
 80060b4:	2a0a      	cmp	r2, #10
 80060b6:	d109      	bne.n	80060cc <__itoa+0x2c>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	da07      	bge.n	80060cc <__itoa+0x2c>
 80060bc:	232d      	movs	r3, #45	; 0x2d
 80060be:	700b      	strb	r3, [r1, #0]
 80060c0:	4240      	negs	r0, r0
 80060c2:	2101      	movs	r1, #1
 80060c4:	4421      	add	r1, r4
 80060c6:	f000 f80d 	bl	80060e4 <__utoa>
 80060ca:	e7f1      	b.n	80060b0 <__itoa+0x10>
 80060cc:	2100      	movs	r1, #0
 80060ce:	e7f9      	b.n	80060c4 <__itoa+0x24>

080060d0 <itoa>:
 80060d0:	f7ff bfe6 	b.w	80060a0 <__itoa>

080060d4 <memset>:
 80060d4:	4402      	add	r2, r0
 80060d6:	4603      	mov	r3, r0
 80060d8:	4293      	cmp	r3, r2
 80060da:	d100      	bne.n	80060de <memset+0xa>
 80060dc:	4770      	bx	lr
 80060de:	f803 1b01 	strb.w	r1, [r3], #1
 80060e2:	e7f9      	b.n	80060d8 <memset+0x4>

080060e4 <__utoa>:
 80060e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060e6:	4c1f      	ldr	r4, [pc, #124]	; (8006164 <__utoa+0x80>)
 80060e8:	b08b      	sub	sp, #44	; 0x2c
 80060ea:	4605      	mov	r5, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	466e      	mov	r6, sp
 80060f0:	f104 0c20 	add.w	ip, r4, #32
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	6861      	ldr	r1, [r4, #4]
 80060f8:	4637      	mov	r7, r6
 80060fa:	c703      	stmia	r7!, {r0, r1}
 80060fc:	3408      	adds	r4, #8
 80060fe:	4564      	cmp	r4, ip
 8006100:	463e      	mov	r6, r7
 8006102:	d1f7      	bne.n	80060f4 <__utoa+0x10>
 8006104:	7921      	ldrb	r1, [r4, #4]
 8006106:	7139      	strb	r1, [r7, #4]
 8006108:	1e91      	subs	r1, r2, #2
 800610a:	6820      	ldr	r0, [r4, #0]
 800610c:	6038      	str	r0, [r7, #0]
 800610e:	2922      	cmp	r1, #34	; 0x22
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	d904      	bls.n	8006120 <__utoa+0x3c>
 8006116:	7019      	strb	r1, [r3, #0]
 8006118:	460b      	mov	r3, r1
 800611a:	4618      	mov	r0, r3
 800611c:	b00b      	add	sp, #44	; 0x2c
 800611e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006120:	1e58      	subs	r0, r3, #1
 8006122:	4684      	mov	ip, r0
 8006124:	fbb5 f7f2 	udiv	r7, r5, r2
 8006128:	fb02 5617 	mls	r6, r2, r7, r5
 800612c:	3628      	adds	r6, #40	; 0x28
 800612e:	446e      	add	r6, sp
 8006130:	460c      	mov	r4, r1
 8006132:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006136:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800613a:	462e      	mov	r6, r5
 800613c:	42b2      	cmp	r2, r6
 800613e:	f101 0101 	add.w	r1, r1, #1
 8006142:	463d      	mov	r5, r7
 8006144:	d9ee      	bls.n	8006124 <__utoa+0x40>
 8006146:	2200      	movs	r2, #0
 8006148:	545a      	strb	r2, [r3, r1]
 800614a:	1919      	adds	r1, r3, r4
 800614c:	1aa5      	subs	r5, r4, r2
 800614e:	42aa      	cmp	r2, r5
 8006150:	dae3      	bge.n	800611a <__utoa+0x36>
 8006152:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006156:	780e      	ldrb	r6, [r1, #0]
 8006158:	7006      	strb	r6, [r0, #0]
 800615a:	3201      	adds	r2, #1
 800615c:	f801 5901 	strb.w	r5, [r1], #-1
 8006160:	e7f4      	b.n	800614c <__utoa+0x68>
 8006162:	bf00      	nop
 8006164:	080061a0 	.word	0x080061a0

08006168 <_init>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	bf00      	nop
 800616c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616e:	bc08      	pop	{r3}
 8006170:	469e      	mov	lr, r3
 8006172:	4770      	bx	lr

08006174 <_fini>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr
