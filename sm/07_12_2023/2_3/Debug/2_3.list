
2_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005664  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d18  08005d18  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d20  08005d20  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000006c  08005d94  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005d94  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ea6  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f5  00000000  00000000  00031f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00034880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb2  00000000  00000000  00035798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fd8  00000000  00000000  0003634a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140ce  00000000  00000000  0005d322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2731  00000000  00000000  000713f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004250  00000000  00000000  00163b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00167d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005814 	.word	0x08005814

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000070 	.word	0x20000070
 8000204:	08005814 	.word	0x08005814

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b970 	b.w	8000b6c <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9e08      	ldr	r6, [sp, #32]
 80008aa:	460d      	mov	r5, r1
 80008ac:	4604      	mov	r4, r0
 80008ae:	460f      	mov	r7, r1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d14a      	bne.n	800094a <__udivmoddi4+0xa6>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4694      	mov	ip, r2
 80008b8:	d965      	bls.n	8000986 <__udivmoddi4+0xe2>
 80008ba:	fab2 f382 	clz	r3, r2
 80008be:	b143      	cbz	r3, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008c4:	f1c3 0220 	rsb	r2, r3, #32
 80008c8:	409f      	lsls	r7, r3
 80008ca:	fa20 f202 	lsr.w	r2, r0, r2
 80008ce:	4317      	orrs	r7, r2
 80008d0:	409c      	lsls	r4, r3
 80008d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008d6:	fa1f f58c 	uxth.w	r5, ip
 80008da:	fbb7 f1fe 	udiv	r1, r7, lr
 80008de:	0c22      	lsrs	r2, r4, #16
 80008e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008e8:	fb01 f005 	mul.w	r0, r1, r5
 80008ec:	4290      	cmp	r0, r2
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x62>
 80008f0:	eb1c 0202 	adds.w	r2, ip, r2
 80008f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008f8:	f080 811c 	bcs.w	8000b34 <__udivmoddi4+0x290>
 80008fc:	4290      	cmp	r0, r2
 80008fe:	f240 8119 	bls.w	8000b34 <__udivmoddi4+0x290>
 8000902:	3902      	subs	r1, #2
 8000904:	4462      	add	r2, ip
 8000906:	1a12      	subs	r2, r2, r0
 8000908:	b2a4      	uxth	r4, r4
 800090a:	fbb2 f0fe 	udiv	r0, r2, lr
 800090e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000912:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000916:	fb00 f505 	mul.w	r5, r0, r5
 800091a:	42a5      	cmp	r5, r4
 800091c:	d90a      	bls.n	8000934 <__udivmoddi4+0x90>
 800091e:	eb1c 0404 	adds.w	r4, ip, r4
 8000922:	f100 32ff 	add.w	r2, r0, #4294967295
 8000926:	f080 8107 	bcs.w	8000b38 <__udivmoddi4+0x294>
 800092a:	42a5      	cmp	r5, r4
 800092c:	f240 8104 	bls.w	8000b38 <__udivmoddi4+0x294>
 8000930:	4464      	add	r4, ip
 8000932:	3802      	subs	r0, #2
 8000934:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000938:	1b64      	subs	r4, r4, r5
 800093a:	2100      	movs	r1, #0
 800093c:	b11e      	cbz	r6, 8000946 <__udivmoddi4+0xa2>
 800093e:	40dc      	lsrs	r4, r3
 8000940:	2300      	movs	r3, #0
 8000942:	e9c6 4300 	strd	r4, r3, [r6]
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	428b      	cmp	r3, r1
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0xbc>
 800094e:	2e00      	cmp	r6, #0
 8000950:	f000 80ed 	beq.w	8000b2e <__udivmoddi4+0x28a>
 8000954:	2100      	movs	r1, #0
 8000956:	e9c6 0500 	strd	r0, r5, [r6]
 800095a:	4608      	mov	r0, r1
 800095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000960:	fab3 f183 	clz	r1, r3
 8000964:	2900      	cmp	r1, #0
 8000966:	d149      	bne.n	80009fc <__udivmoddi4+0x158>
 8000968:	42ab      	cmp	r3, r5
 800096a:	d302      	bcc.n	8000972 <__udivmoddi4+0xce>
 800096c:	4282      	cmp	r2, r0
 800096e:	f200 80f8 	bhi.w	8000b62 <__udivmoddi4+0x2be>
 8000972:	1a84      	subs	r4, r0, r2
 8000974:	eb65 0203 	sbc.w	r2, r5, r3
 8000978:	2001      	movs	r0, #1
 800097a:	4617      	mov	r7, r2
 800097c:	2e00      	cmp	r6, #0
 800097e:	d0e2      	beq.n	8000946 <__udivmoddi4+0xa2>
 8000980:	e9c6 4700 	strd	r4, r7, [r6]
 8000984:	e7df      	b.n	8000946 <__udivmoddi4+0xa2>
 8000986:	b902      	cbnz	r2, 800098a <__udivmoddi4+0xe6>
 8000988:	deff      	udf	#255	; 0xff
 800098a:	fab2 f382 	clz	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8090 	bne.w	8000ab4 <__udivmoddi4+0x210>
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2101      	movs	r1, #1
 80009a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009a4:	fb07 2015 	mls	r0, r7, r5, r2
 80009a8:	0c22      	lsrs	r2, r4, #16
 80009aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ae:	fb0e f005 	mul.w	r0, lr, r5
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x124>
 80009b6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x122>
 80009c0:	4290      	cmp	r0, r2
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2b8>
 80009c6:	4645      	mov	r5, r8
 80009c8:	1a12      	subs	r2, r2, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d0:	fb07 2210 	mls	r2, r7, r0, r2
 80009d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x14e>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x14c>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2c2>
 80009f0:	4610      	mov	r0, r2
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009fa:	e79f      	b.n	800093c <__udivmoddi4+0x98>
 80009fc:	f1c1 0720 	rsb	r7, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a12:	40fd      	lsrs	r5, r7
 8000a14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a1e:	fa1f fe8c 	uxth.w	lr, ip
 8000a22:	fb09 5518 	mls	r5, r9, r8, r5
 8000a26:	0c1c      	lsrs	r4, r3, #16
 8000a28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	fa02 f201 	lsl.w	r2, r2, r1
 8000a36:	fa00 f001 	lsl.w	r0, r0, r1
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b0>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2b4>
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2b4>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4464      	add	r4, ip
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	b29d      	uxth	r5, r3
 8000a58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1da>
 8000a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2ac>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2ac>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4464      	add	r4, ip
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fba3 9502 	umull	r9, r5, r3, r2
 8000a86:	eba4 040e 	sub.w	r4, r4, lr
 8000a8a:	42ac      	cmp	r4, r5
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46ae      	mov	lr, r5
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x29c>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x298>
 8000a94:	b156      	cbz	r6, 8000aac <__udivmoddi4+0x208>
 8000a96:	ebb0 0208 	subs.w	r2, r0, r8
 8000a9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000aa2:	40ca      	lsrs	r2, r1
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	e9c6 7400 	strd	r7, r4, [r6]
 8000aac:	4618      	mov	r0, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	f1c3 0120 	rsb	r1, r3, #32
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ac4:	409d      	lsls	r5, r3
 8000ac6:	432a      	orrs	r2, r5
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ad8:	0c11      	lsrs	r1, r2, #16
 8000ada:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ade:	fb00 f50e 	mul.w	r5, r0, lr
 8000ae2:	428d      	cmp	r5, r1
 8000ae4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x258>
 8000aea:	eb1c 0101 	adds.w	r1, ip, r1
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000af4:	428d      	cmp	r5, r1
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4461      	add	r1, ip
 8000afc:	1b49      	subs	r1, r1, r5
 8000afe:	b292      	uxth	r2, r2
 8000b00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b04:	fb07 1115 	mls	r1, r7, r5, r1
 8000b08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b10:	4291      	cmp	r1, r2
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x282>
 8000b14:	eb1c 0202 	adds.w	r2, ip, r2
 8000b18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000b22:	3d02      	subs	r5, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a52      	subs	r2, r2, r1
 8000b28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0xfc>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4630      	mov	r0, r6
 8000b32:	e708      	b.n	8000946 <__udivmoddi4+0xa2>
 8000b34:	4639      	mov	r1, r7
 8000b36:	e6e6      	b.n	8000906 <__udivmoddi4+0x62>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	e6fb      	b.n	8000934 <__udivmoddi4+0x90>
 8000b3c:	4548      	cmp	r0, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f0>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f0>
 8000b4c:	4645      	mov	r5, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x282>
 8000b50:	462b      	mov	r3, r5
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1da>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x258>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b0>
 8000b5c:	3d02      	subs	r5, #2
 8000b5e:	4462      	add	r2, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x124>
 8000b62:	4608      	mov	r0, r1
 8000b64:	e70a      	b.n	800097c <__udivmoddi4+0xd8>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x14e>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_DAC_Init+0x4c>)
 8000b80:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <MX_DAC_Init+0x50>)
 8000b82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_DAC_Init+0x4c>)
 8000b86:	f000 fe32 	bl	80017ee <HAL_DAC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b90:	f000 fb28 	bl	80011e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <MX_DAC_Init+0x4c>)
 8000ba4:	f000 febc 	bl	8001920 <HAL_DAC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000bae:	f000 fb19 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000088 	.word	0x20000088
 8000bc0:	40007400 	.word	0x40007400

08000bc4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <HAL_DAC_MspInit+0x74>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d123      	bne.n	8000c2e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_DAC_MspInit+0x78>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <HAL_DAC_MspInit+0x78>)
 8000bec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_DAC_MspInit+0x78>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_DAC_MspInit+0x78>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_DAC_MspInit+0x78>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_DAC_MspInit+0x78>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c16:	2310      	movs	r3, #16
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_DAC_MspInit+0x7c>)
 8000c2a:	f000 ff5b 	bl	8001ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40007400 	.word	0x40007400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b77      	ldr	r3, [pc, #476]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a76      	ldr	r2, [pc, #472]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b74      	ldr	r3, [pc, #464]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	4b71      	ldr	r3, [pc, #452]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a70      	ldr	r2, [pc, #448]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b6e      	ldr	r3, [pc, #440]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b6b      	ldr	r3, [pc, #428]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a6a      	ldr	r2, [pc, #424]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b68      	ldr	r3, [pc, #416]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b65      	ldr	r3, [pc, #404]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a64      	ldr	r2, [pc, #400]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b62      	ldr	r3, [pc, #392]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b5f      	ldr	r3, [pc, #380]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a5e      	ldr	r2, [pc, #376]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd2:	4b59      	ldr	r3, [pc, #356]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a58      	ldr	r2, [pc, #352]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b56      	ldr	r3, [pc, #344]	; (8000e38 <MX_GPIO_Init+0x1f4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cf0:	4852      	ldr	r0, [pc, #328]	; (8000e3c <MX_GPIO_Init+0x1f8>)
 8000cf2:	f001 f8a3 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	4851      	ldr	r0, [pc, #324]	; (8000e40 <MX_GPIO_Init+0x1fc>)
 8000cfc:	f001 f89e 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	484b      	ldr	r0, [pc, #300]	; (8000e44 <MX_GPIO_Init+0x200>)
 8000d18:	f000 fee4 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d1c:	2332      	movs	r3, #50	; 0x32
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2c:	230b      	movs	r3, #11
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4843      	ldr	r0, [pc, #268]	; (8000e44 <MX_GPIO_Init+0x200>)
 8000d38:	f000 fed4 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d3c:	2386      	movs	r3, #134	; 0x86
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4c:	230b      	movs	r3, #11
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	483c      	ldr	r0, [pc, #240]	; (8000e48 <MX_GPIO_Init+0x204>)
 8000d58:	f000 fec4 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d5c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4831      	ldr	r0, [pc, #196]	; (8000e3c <MX_GPIO_Init+0x1f8>)
 8000d76:	f000 feb5 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4829      	ldr	r0, [pc, #164]	; (8000e3c <MX_GPIO_Init+0x1f8>)
 8000d98:	f000 fea4 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d9c:	2340      	movs	r3, #64	; 0x40
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4823      	ldr	r0, [pc, #140]	; (8000e40 <MX_GPIO_Init+0x1fc>)
 8000db4:	f000 fe96 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481d      	ldr	r0, [pc, #116]	; (8000e40 <MX_GPIO_Init+0x1fc>)
 8000dcc:	f000 fe8a 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dd0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000de2:	230a      	movs	r3, #10
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4816      	ldr	r0, [pc, #88]	; (8000e48 <MX_GPIO_Init+0x204>)
 8000dee:	f000 fe79 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4810      	ldr	r0, [pc, #64]	; (8000e48 <MX_GPIO_Init+0x204>)
 8000e08:	f000 fe6c 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_GPIO_Init+0x1fc>)
 8000e2a:	f000 fe5b 	bl	8001ae4 <HAL_GPIO_Init>

}
 8000e2e:	bf00      	nop
 8000e30:	3730      	adds	r7, #48	; 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40021800 	.word	0x40021800
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020000 	.word	0x40020000

08000e4c <setVoltage>:
 * @brief Writes to DAC data holding register (Channel #1, 12 bits, right alignment).
 * @param[in] voltage_mV : Voltage expressed in millivolts, in range <0 - 3300> mV
 * @retval None
 */
void setVoltage(float voltage)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	ed87 0a01 	vstr	s0, [r7, #4]
  voltage = voltage > 3300.f ? 3300.f : voltage;
 8000e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e5a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000eac <setVoltage+0x60>
 8000e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e66:	dd01      	ble.n	8000e6c <setVoltage+0x20>
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <setVoltage+0x64>)
 8000e6a:	e000      	b.n	8000e6e <setVoltage+0x22>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	607b      	str	r3, [r7, #4]
  uint16_t dac_reg = voltage / 1000.f / 3.3f * (float)((1 << 12) - 1);
 8000e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e74:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000eb4 <setVoltage+0x68>
 8000e78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e7c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000eb8 <setVoltage+0x6c>
 8000e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e84:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000ebc <setVoltage+0x70>
 8000e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e90:	ee17 3a90 	vmov	r3, s15
 8000e94:	81fb      	strh	r3, [r7, #14]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_reg);
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <setVoltage+0x74>)
 8000e9e:	f000 fd1a 	bl	80018d6 <HAL_DAC_SetValue>
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	454e4000 	.word	0x454e4000
 8000eb0:	454e4000 	.word	0x454e4000
 8000eb4:	447a0000 	.word	0x447a0000
 8000eb8:	40533333 	.word	0x40533333
 8000ebc:	457ff000 	.word	0x457ff000
 8000ec0:	20000088 	.word	0x20000088
 8000ec4:	00000000 	.word	0x00000000

08000ec8 <sint>:
 * @param[in] sine_wave     : Structure with sine wave parameters.
 * @param[in] discrete_time : Discrete time (sample number).
 * @retval Sine wave value at discrete time.
 */
float sint(unsigned int discrete_time)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  float time = sample_time * discrete_time;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eda:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <sint+0xb8>)
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee4:	edc7 7a03 	vstr	s15, [r7, #12]
  float value = amplitude * sinf(2.0f * M_PI * frequency * time + phase) + offset;
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <sint+0xbc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fc19 	bl	8000724 <__aeabi_f2d>
 8000ef2:	a321      	add	r3, pc, #132	; (adr r3, 8000f78 <sint+0xb0>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	f7ff f986 	bl	8000208 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4614      	mov	r4, r2
 8000f02:	461d      	mov	r5, r3
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff fc0d 	bl	8000724 <__aeabi_f2d>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4620      	mov	r0, r4
 8000f10:	4629      	mov	r1, r5
 8000f12:	f7ff f979 	bl	8000208 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <sint+0xc0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fbfe 	bl	8000724 <__aeabi_f2d>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	4629      	mov	r1, r5
 8000f30:	f7ff fa9a 	bl	8000468 <__adddf3>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f7ff fc4a 	bl	80007d4 <__aeabi_d2f>
 8000f40:	4603      	mov	r3, r0
 8000f42:	ee00 3a10 	vmov	s0, r3
 8000f46:	f003 ff2b 	bl	8004da0 <sinf>
 8000f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <sint+0xc4>)
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <sint+0xc8>)
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edc7 7a02 	vstr	s15, [r7, #8]
  return value;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	ee07 3a90 	vmov	s15, r3
}
 8000f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bdb0      	pop	{r4, r5, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	54442d18 	.word	0x54442d18
 8000f7c:	401921fb 	.word	0x401921fb
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	20000004 	.word	0x20000004
 8000f88:	200000a4 	.word	0x200000a4
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000008 	.word	0x20000008

08000f94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a30      	ldr	r2, [pc, #192]	; (8001060 <HAL_UART_RxCpltCallback+0xcc>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d158      	bne.n	8001056 <HAL_UART_RxCpltCallback+0xc2>
  {
    if(tolower(rx_buffer[0]) == 'a')
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <HAL_UART_RxCpltCallback+0xd0>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	75fb      	strb	r3, [r7, #23]
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a2e      	ldr	r2, [pc, #184]	; (8001068 <HAL_UART_RxCpltCallback+0xd4>)
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d102      	bne.n	8000fc2 <HAL_UART_RxCpltCallback+0x2e>
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	3320      	adds	r3, #32
 8000fc0:	e000      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x30>
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	2b61      	cmp	r3, #97	; 0x61
 8000fc6:	d117      	bne.n	8000ff8 <HAL_UART_RxCpltCallback+0x64>
    {
      float amp = (float)(atoi(&rx_buffer[1]));
 8000fc8:	4828      	ldr	r0, [pc, #160]	; (800106c <HAL_UART_RxCpltCallback+0xd8>)
 8000fca:	f003 fe27 	bl	8004c1c <atoi>
 8000fce:	ee07 0a90 	vmov	s15, r0
 8000fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd6:	edc7 7a03 	vstr	s15, [r7, #12]
      amplitude = amp > max_voltage / 2.0f ? max_voltage / 2.0f : amp;
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001070 <HAL_UART_RxCpltCallback+0xdc>
 8000fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fea:	dd01      	ble.n	8000ff0 <HAL_UART_RxCpltCallback+0x5c>
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <HAL_UART_RxCpltCallback+0xe0>)
 8000fee:	e000      	b.n	8000ff2 <HAL_UART_RxCpltCallback+0x5e>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a21      	ldr	r2, [pc, #132]	; (8001078 <HAL_UART_RxCpltCallback+0xe4>)
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e028      	b.n	800104a <HAL_UART_RxCpltCallback+0xb6>
    }
    else if(tolower(rx_buffer[0]) == 'f')
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_UART_RxCpltCallback+0xd0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	75bb      	strb	r3, [r7, #22]
 8000ffe:	7dbb      	ldrb	r3, [r7, #22]
 8001000:	3301      	adds	r3, #1
 8001002:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_UART_RxCpltCallback+0xd4>)
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d102      	bne.n	8001016 <HAL_UART_RxCpltCallback+0x82>
 8001010:	7dbb      	ldrb	r3, [r7, #22]
 8001012:	3320      	adds	r3, #32
 8001014:	e000      	b.n	8001018 <HAL_UART_RxCpltCallback+0x84>
 8001016:	7dbb      	ldrb	r3, [r7, #22]
 8001018:	2b66      	cmp	r3, #102	; 0x66
 800101a:	d116      	bne.n	800104a <HAL_UART_RxCpltCallback+0xb6>
    {
      float off = (float)(atoi(&rx_buffer[1]));
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <HAL_UART_RxCpltCallback+0xd8>)
 800101e:	f003 fdfd 	bl	8004c1c <atoi>
 8001022:	ee07 0a90 	vmov	s15, r0
 8001026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102a:	edc7 7a04 	vstr	s15, [r7, #16]
      offset = off > max_voltage / 2.0f ? max_voltage / 2.0f : off;
 800102e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001032:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001070 <HAL_UART_RxCpltCallback+0xdc>
 8001036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	dd01      	ble.n	8001044 <HAL_UART_RxCpltCallback+0xb0>
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_UART_RxCpltCallback+0xe0>)
 8001042:	e000      	b.n	8001046 <HAL_UART_RxCpltCallback+0xb2>
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_UART_RxCpltCallback+0xe8>)
 8001048:	6013      	str	r3, [r2, #0]
    }

    HAL_UART_Receive_IT(&huart3, rx_buffer, rx_msg_len);
 800104a:	2305      	movs	r3, #5
 800104c:	461a      	mov	r2, r3
 800104e:	4905      	ldr	r1, [pc, #20]	; (8001064 <HAL_UART_RxCpltCallback+0xd0>)
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <HAL_UART_RxCpltCallback+0xcc>)
 8001052:	f002 fbd9 	bl	8003808 <HAL_UART_Receive_IT>
  }
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000f8 	.word	0x200000f8
 8001064:	2000009c 	.word	0x2000009c
 8001068:	08005844 	.word	0x08005844
 800106c:	2000009d 	.word	0x2000009d
 8001070:	44ce4000 	.word	0x44ce4000
 8001074:	44ce4000 	.word	0x44ce4000
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008

08001080 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d10f      	bne.n	80010b0 <HAL_TIM_PeriodElapsedCallback+0x30>
  {
    static unsigned long int time = 0;
    float voltage_mV = sint(time);
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff17 	bl	8000ec8 <sint>
 800109a:	ed87 0a03 	vstr	s0, [r7, #12]
    setVoltage(voltage_mV);
 800109e:	ed97 0a03 	vldr	s0, [r7, #12]
 80010a2:	f7ff fed3 	bl	8000e4c <setVoltage>
    time++;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010ae:	6013      	str	r3, [r2, #0]
  }
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000ac 	.word	0x200000ac
 80010bc:	200000a8 	.word	0x200000a8

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f000 fa25 	bl	8001512 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f81e 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f7ff fdba 	bl	8000c44 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010d0:	f000 f95e 	bl	8001390 <MX_USART3_UART_Init>
  MX_DAC_Init();
 80010d4:	f7ff fd4c 	bl	8000b70 <MX_DAC_Init>
  MX_TIM7_Init();
 80010d8:	f000 f8fe 	bl	80012d8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80010dc:	2100      	movs	r1, #0
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <main+0x38>)
 80010e0:	f000 fba7 	bl	8001832 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <main+0x3c>)
 80010e6:	f002 f835 	bl	8003154 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, rx_buffer, rx_msg_len);
 80010ea:	2305      	movs	r3, #5
 80010ec:	461a      	mov	r2, r3
 80010ee:	4904      	ldr	r1, [pc, #16]	; (8001100 <main+0x40>)
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <main+0x44>)
 80010f2:	f002 fb89 	bl	8003808 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <main+0x36>
 80010f8:	20000088 	.word	0x20000088
 80010fc:	200000ac 	.word	0x200000ac
 8001100:	2000009c 	.word	0x2000009c
 8001104:	200000f8 	.word	0x200000f8

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fe10 	bl	8004d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800112c:	f000 fea0 	bl	8001e70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <SystemClock_Config+0xd4>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a29      	ldr	r2, [pc, #164]	; (80011dc <SystemClock_Config+0xd4>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <SystemClock_Config+0xd4>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <SystemClock_Config+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <SystemClock_Config+0xd8>)
 800114e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <SystemClock_Config+0xd8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001164:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001178:	23d8      	movs	r3, #216	; 0xd8
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001180:	2303      	movs	r3, #3
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fed1 	bl	8001f30 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001194:	f000 f826 	bl	80011e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001198:	f000 fe7a 	bl	8001e90 <HAL_PWREx_EnableOverDrive>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011a2:	f000 f81f 	bl	80011e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2302      	movs	r3, #2
 80011ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80011b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2107      	movs	r1, #7
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 f957 	bl	8002478 <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80011d0:	f000 f808 	bl	80011e4 <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	; 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ec:	e7fe      	b.n	80011ec <Error_Handler+0x8>
	...

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x44>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x44>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x44>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x44>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x44>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x44>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 f982 	bl	800158c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <USART3_IRQHandler+0x10>)
 8001292:	f002 fafd 	bl	8003890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000f8 	.word	0x200000f8

080012a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM7_IRQHandler+0x10>)
 80012a6:	f001 ffcd 	bl	8003244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000ac 	.word	0x200000ac

080012b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SystemInit+0x20>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <SystemInit+0x20>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_TIM7_Init+0x64>)
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <MX_TIM7_Init+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_TIM7_Init+0x64>)
 80012f0:	226b      	movs	r2, #107	; 0x6b
 80012f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_TIM7_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_TIM7_Init+0x64>)
 80012fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001300:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_TIM7_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_TIM7_Init+0x64>)
 800130a:	f001 fecb 	bl	80030a4 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001314:	f7ff ff66 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_TIM7_Init+0x64>)
 8001326:	f002 f975 	bl	8003614 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001330:	f7ff ff58 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000ac 	.word	0x200000ac
 8001340:	40001400 	.word	0x40001400

08001344 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_TIM_Base_MspInit+0x44>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d113      	bne.n	800137e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a0c      	ldr	r2, [pc, #48]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 800135c:	f043 0320 	orr.w	r3, r3, #32
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2037      	movs	r0, #55	; 0x37
 8001374:	f000 fa05 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001378:	2037      	movs	r0, #55	; 0x37
 800137a:	f000 fa1e 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40001400 	.word	0x40001400
 800138c:	40023800 	.word	0x40023800

08001390 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <MX_USART3_UART_Init+0x5c>)
 8001398:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART3_UART_Init+0x58>)
 80013d4:	f002 f9ca 	bl	800376c <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013de:	f7ff ff01 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200000f8 	.word	0x200000f8
 80013ec:	40004800 	.word	0x40004800

080013f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0aa      	sub	sp, #168	; 0xa8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	2284      	movs	r2, #132	; 0x84
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fc93 	bl	8004d3c <memset>
  if(uartHandle->Instance==USART3)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <HAL_UART_MspInit+0xc4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d144      	bne.n	80014aa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001424:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001426:	2300      	movs	r3, #0
 8001428:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fa48 	bl	80028c4 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800143a:	f7ff fed3 	bl	80011e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001488:	2307      	movs	r3, #7
 800148a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001492:	4619      	mov	r1, r3
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <HAL_UART_MspInit+0xcc>)
 8001496:	f000 fb25 	bl	8001ae4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2027      	movs	r0, #39	; 0x27
 80014a0:	f000 f96f 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014a4:	2027      	movs	r0, #39	; 0x27
 80014a6:	f000 f988 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014aa:	bf00      	nop
 80014ac:	37a8      	adds	r7, #168	; 0xa8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004800 	.word	0x40004800
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020c00 	.word	0x40020c00

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c6:	490e      	ldr	r1, [pc, #56]	; (8001500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014dc:	4c0b      	ldr	r4, [pc, #44]	; (800150c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ea:	f7ff fee3 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f003 fc33 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff fde5 	bl	80010c0 <main>
  bx  lr    
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001504:	08005d28 	.word	0x08005d28
  ldr r2, =_sbss
 8001508:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800150c:	200002bc 	.word	0x200002bc

08001510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>

08001512 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001516:	2003      	movs	r0, #3
 8001518:	f000 f928 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151c:	2000      	movs	r0, #0
 800151e:	f000 f805 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001522:	f7ff fe65 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x54>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f943 	bl	80017d6 <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e00e      	b.n	8001578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d80a      	bhi.n	8001576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f000 f90b 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800156c:	4a06      	ldr	r2, [pc, #24]	; (8001588 <HAL_InitTick+0x5c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000010 	.word	0x20000010
 8001584:	20000018 	.word	0x20000018
 8001588:	20000014 	.word	0x20000014

0800158c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000018 	.word	0x20000018
 80015b0:	20000180 	.word	0x20000180

080015b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000180 	.word	0x20000180

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <__NVIC_SetPriorityGrouping+0x40>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x40>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00
 8001610:	05fa0000 	.word	0x05fa0000

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4907      	ldr	r1, [pc, #28]	; (8001668 <__NVIC_EnableIRQ+0x38>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff29 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff3e 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff8e 	bl	80016c0 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff31 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e014      	b.n	800182a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff f9d7 	bl	8000bc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2202      	movs	r2, #2
 800181a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	795b      	ldrb	r3, [r3, #5]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_DAC_Start+0x16>
 8001844:	2302      	movs	r3, #2
 8001846:	e040      	b.n	80018ca <HAL_DAC_Start+0x98>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2202      	movs	r2, #2
 8001852:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6819      	ldr	r1, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2201      	movs	r2, #1
 8001862:	409a      	lsls	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10f      	bne.n	8001892 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800187c:	2b3c      	cmp	r3, #60	; 0x3c
 800187e:	d11d      	bne.n	80018bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	e014      	b.n	80018bc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	213c      	movs	r1, #60	; 0x3c
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d107      	bne.n	80018bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0202 	orr.w	r2, r2, #2
 80018ba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b087      	sub	sp, #28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	3308      	adds	r3, #8
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e004      	b.n	800190a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	3314      	adds	r3, #20
 8001908:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	461a      	mov	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	795b      	ldrb	r3, [r3, #5]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_DAC_ConfigChannel+0x18>
 8001934:	2302      	movs	r3, #2
 8001936:	e03c      	b.n	80019b2 <HAL_DAC_ConfigChannel+0x92>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2202      	movs	r2, #2
 8001942:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4013      	ands	r3, r2
 8001960:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	22c0      	movs	r2, #192	; 0xc0
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	400a      	ands	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2201      	movs	r2, #1
 80019a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff fdf2 	bl	80015b4 <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d008      	beq.n	80019f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e052      	b.n	8001a96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0216 	bic.w	r2, r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <HAL_DMA_Abort+0x62>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0208 	bic.w	r2, r2, #8
 8001a2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a40:	e013      	b.n	8001a6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a42:	f7ff fdb7 	bl	80015b4 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d90c      	bls.n	8001a6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2203      	movs	r2, #3
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e015      	b.n	8001a96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e4      	bne.n	8001a42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	223f      	movs	r2, #63	; 0x3f
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d004      	beq.n	8001abc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e00c      	b.n	8001ad6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2205      	movs	r2, #5
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e175      	b.n	8001df0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f040 8164 	bne.w	8001dea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d005      	beq.n	8001b3a <HAL_GPIO_Init+0x56>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d130      	bne.n	8001b9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b70:	2201      	movs	r2, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 0201 	and.w	r2, r3, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d017      	beq.n	8001bd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d123      	bne.n	8001c2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3208      	adds	r2, #8
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	69b9      	ldr	r1, [r7, #24]
 8001c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80be 	beq.w	8001dea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a65      	ldr	r2, [pc, #404]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c86:	4a61      	ldr	r2, [pc, #388]	; (8001e0c <HAL_GPIO_Init+0x328>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_GPIO_Init+0x32c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d037      	beq.n	8001d22 <HAL_GPIO_Init+0x23e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a57      	ldr	r2, [pc, #348]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d031      	beq.n	8001d1e <HAL_GPIO_Init+0x23a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a56      	ldr	r2, [pc, #344]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d02b      	beq.n	8001d1a <HAL_GPIO_Init+0x236>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <HAL_GPIO_Init+0x338>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d025      	beq.n	8001d16 <HAL_GPIO_Init+0x232>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a54      	ldr	r2, [pc, #336]	; (8001e20 <HAL_GPIO_Init+0x33c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01f      	beq.n	8001d12 <HAL_GPIO_Init+0x22e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a53      	ldr	r2, [pc, #332]	; (8001e24 <HAL_GPIO_Init+0x340>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <HAL_GPIO_Init+0x22a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_GPIO_Init+0x344>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x226>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a51      	ldr	r2, [pc, #324]	; (8001e2c <HAL_GPIO_Init+0x348>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x222>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <HAL_GPIO_Init+0x34c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x21e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	; (8001e34 <HAL_GPIO_Init+0x350>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x21a>
 8001cfa:	2309      	movs	r3, #9
 8001cfc:	e012      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001cfe:	230a      	movs	r3, #10
 8001d00:	e010      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d02:	2308      	movs	r3, #8
 8001d04:	e00e      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e00c      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	e00a      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d34:	4935      	ldr	r1, [pc, #212]	; (8001e0c <HAL_GPIO_Init+0x328>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d66:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d90:	4a29      	ldr	r2, [pc, #164]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dba:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f ae86 	bls.w	8001b04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40021c00 	.word	0x40021c00
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40022400 	.word	0x40022400
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40007000 	.word	0x40007000

08001e90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ebe:	f7ff fb79 	bl	80015b4 <HAL_GetTick>
 8001ec2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ec4:	e009      	b.n	8001eda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ec6:	f7ff fb75 	bl	80015b4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed4:	d901      	bls.n	8001eda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e022      	b.n	8001f20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d1ee      	bne.n	8001ec6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef4:	f7ff fb5e 	bl	80015b4 <HAL_GetTick>
 8001ef8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001efa:	e009      	b.n	8001f10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001efc:	f7ff fb5a 	bl	80015b4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f0a:	d901      	bls.n	8001f10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e007      	b.n	8001f20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f1c:	d1ee      	bne.n	8001efc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40007000 	.word	0x40007000

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e291      	b.n	800246a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8087 	beq.w	8002062 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f54:	4b96      	ldr	r3, [pc, #600]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d00c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f60:	4b93      	ldr	r3, [pc, #588]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d112      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62>
 8001f6c:	4b90      	ldr	r3, [pc, #576]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f78:	d10b      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7a:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d06c      	beq.n	8002060 <HAL_RCC_OscConfig+0x130>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d168      	bne.n	8002060 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e26b      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x7a>
 8001f9c:	4b84      	ldr	r3, [pc, #528]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a83      	ldr	r2, [pc, #524]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	e02e      	b.n	8002008 <HAL_RCC_OscConfig+0xd8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x9c>
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7e      	ldr	r2, [pc, #504]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b7c      	ldr	r3, [pc, #496]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7b      	ldr	r2, [pc, #492]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e01d      	b.n	8002008 <HAL_RCC_OscConfig+0xd8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xc0>
 8001fd6:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a75      	ldr	r2, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b73      	ldr	r3, [pc, #460]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a72      	ldr	r2, [pc, #456]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0xd8>
 8001ff0:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6b      	ldr	r2, [pc, #428]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fad0 	bl	80015b4 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff facc 	bl	80015b4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e21f      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0xe8>
 8002036:	e014      	b.n	8002062 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fabc 	bl	80015b4 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff fab8 	bl	80015b4 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e20b      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	4b57      	ldr	r3, [pc, #348]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x110>
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d069      	beq.n	8002142 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800206e:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207a:	4b4d      	ldr	r3, [pc, #308]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b08      	cmp	r3, #8
 8002084:	d11c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x190>
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d116      	bne.n	80020c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x17a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e1df      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	493d      	ldr	r1, [pc, #244]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	e040      	b.n	8002142 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d023      	beq.n	8002110 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c8:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a38      	ldr	r2, [pc, #224]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff fa6e 	bl	80015b4 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020dc:	f7ff fa6a 	bl	80015b4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1bd      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4929      	ldr	r1, [pc, #164]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
 800210e:	e018      	b.n	8002142 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff fa4a 	bl	80015b4 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002124:	f7ff fa46 	bl	80015b4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e199      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d038      	beq.n	80021c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d019      	beq.n	800218a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215a:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002162:	f7ff fa27 	bl	80015b4 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216a:	f7ff fa23 	bl	80015b4 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e176      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800217e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x23a>
 8002188:	e01a      	b.n	80021c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 800218c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_RCC_OscConfig+0x280>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7ff fa0d 	bl	80015b4 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219e:	f7ff fa09 	bl	80015b4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d903      	bls.n	80021b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e15c      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
 80021b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b91      	ldr	r3, [pc, #580]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a4 	beq.w	8002316 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10d      	bne.n	80021f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a87      	ldr	r2, [pc, #540]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b85      	ldr	r3, [pc, #532]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f6:	4b82      	ldr	r3, [pc, #520]	; (8002400 <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002202:	4b7f      	ldr	r3, [pc, #508]	; (8002400 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7e      	ldr	r2, [pc, #504]	; (8002400 <HAL_RCC_OscConfig+0x4d0>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220e:	f7ff f9d1 	bl	80015b4 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002216:	f7ff f9cd 	bl	80015b4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	; 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e120      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002228:	4b75      	ldr	r3, [pc, #468]	; (8002400 <HAL_RCC_OscConfig+0x4d0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x31a>
 800223c:	4b6f      	ldr	r3, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a6e      	ldr	r2, [pc, #440]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	e02d      	b.n	80022a6 <HAL_RCC_OscConfig+0x376>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x33c>
 8002252:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a69      	ldr	r2, [pc, #420]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6713      	str	r3, [r2, #112]	; 0x70
 800225e:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	4a66      	ldr	r2, [pc, #408]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	6713      	str	r3, [r2, #112]	; 0x70
 800226a:	e01c      	b.n	80022a6 <HAL_RCC_OscConfig+0x376>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d10c      	bne.n	800228e <HAL_RCC_OscConfig+0x35e>
 8002274:	4b61      	ldr	r3, [pc, #388]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	4a60      	ldr	r2, [pc, #384]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6713      	str	r3, [r2, #112]	; 0x70
 8002280:	4b5e      	ldr	r3, [pc, #376]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a5d      	ldr	r2, [pc, #372]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	e00b      	b.n	80022a6 <HAL_RCC_OscConfig+0x376>
 800228e:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a5a      	ldr	r2, [pc, #360]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
 800229a:	4b58      	ldr	r3, [pc, #352]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a57      	ldr	r2, [pc, #348]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d015      	beq.n	80022da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7ff f981 	bl	80015b4 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff f97d 	bl	80015b4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0ce      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ee      	beq.n	80022b6 <HAL_RCC_OscConfig+0x386>
 80022d8:	e014      	b.n	8002304 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7ff f96b 	bl	80015b4 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7ff f967 	bl	80015b4 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ee      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d105      	bne.n	8002316 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80a4 	beq.w	8002468 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002320:	4b36      	ldr	r3, [pc, #216]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d06b      	beq.n	8002404 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d149      	bne.n	80023c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b31      	ldr	r3, [pc, #196]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a30      	ldr	r2, [pc, #192]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800233a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f938 	bl	80015b4 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7ff f934 	bl	80015b4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e087      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	085b      	lsrs	r3, r3, #1
 800237e:	3b01      	subs	r3, #1
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	4313      	orrs	r3, r2
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800238e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002392:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800239a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff f908 	bl	80015b4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7ff f904 	bl	80015b4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e057      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x478>
 80023c6:	e04f      	b.n	8002468 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff f8ee 	bl	80015b4 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7ff f8ea 	bl	80015b4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e03d      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x4ac>
 80023fa:	e035      	b.n	8002468 <HAL_RCC_OscConfig+0x538>
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x544>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d028      	beq.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d121      	bne.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d11a      	bne.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800243a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800243c:	4293      	cmp	r3, r2
 800243e:	d111      	bne.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	3b01      	subs	r3, #1
 800244e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0d0      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d910      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 020f 	bic.w	r2, r3, #15
 80024a6:	4965      	ldr	r1, [pc, #404]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b8      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	494d      	ldr	r1, [pc, #308]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d040      	beq.n	800259c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d115      	bne.n	800255a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e073      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e06b      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4936      	ldr	r1, [pc, #216]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256c:	f7ff f822 	bl	80015b4 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	e00a      	b.n	800258a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7ff f81e 	bl	80015b4 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e053      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 020c 	and.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	429a      	cmp	r2, r3
 800259a:	d1eb      	bne.n	8002574 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d210      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 020f 	bic.w	r2, r3, #15
 80025b2:	4922      	ldr	r1, [pc, #136]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e032      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4916      	ldr	r1, [pc, #88]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	490e      	ldr	r1, [pc, #56]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800260a:	f000 f821 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	490a      	ldr	r1, [pc, #40]	; (8002644 <HAL_RCC_ClockConfig+0x1cc>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1d0>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x1d4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe ff7e 	bl	800152c <HAL_InitTick>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00
 8002640:	40023800 	.word	0x40023800
 8002644:	0800582c 	.word	0x0800582c
 8002648:	20000010 	.word	0x20000010
 800264c:	20000014 	.word	0x20000014

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002654:	b094      	sub	sp, #80	; 0x50
 8002656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	647b      	str	r3, [r7, #68]	; 0x44
 800265c:	2300      	movs	r3, #0
 800265e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002660:	2300      	movs	r3, #0
 8002662:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002668:	4b79      	ldr	r3, [pc, #484]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d00d      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x40>
 8002674:	2b08      	cmp	r3, #8
 8002676:	f200 80e1 	bhi.w	800283c <HAL_RCC_GetSysClockFreq+0x1ec>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x34>
 800267e:	2b04      	cmp	r3, #4
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x3a>
 8002682:	e0db      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002684:	4b73      	ldr	r3, [pc, #460]	; (8002854 <HAL_RCC_GetSysClockFreq+0x204>)
 8002686:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002688:	e0db      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800268a:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCC_GetSysClockFreq+0x208>)
 800268c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800268e:	e0d8      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002698:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800269a:	4b6d      	ldr	r3, [pc, #436]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d063      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a6:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	2200      	movs	r2, #0
 80026ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80026b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
 80026ba:	2300      	movs	r3, #0
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
 80026be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d4:	0150      	lsls	r0, r2, #5
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4621      	mov	r1, r4
 80026dc:	1a51      	subs	r1, r2, r1
 80026de:	6139      	str	r1, [r7, #16]
 80026e0:	4629      	mov	r1, r5
 80026e2:	eb63 0301 	sbc.w	r3, r3, r1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f4:	4659      	mov	r1, fp
 80026f6:	018b      	lsls	r3, r1, #6
 80026f8:	4651      	mov	r1, sl
 80026fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fe:	4651      	mov	r1, sl
 8002700:	018a      	lsls	r2, r1, #6
 8002702:	4651      	mov	r1, sl
 8002704:	ebb2 0801 	subs.w	r8, r2, r1
 8002708:	4659      	mov	r1, fp
 800270a:	eb63 0901 	sbc.w	r9, r3, r1
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800271a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002722:	4690      	mov	r8, r2
 8002724:	4699      	mov	r9, r3
 8002726:	4623      	mov	r3, r4
 8002728:	eb18 0303 	adds.w	r3, r8, r3
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	462b      	mov	r3, r5
 8002730:	eb49 0303 	adc.w	r3, r9, r3
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002742:	4629      	mov	r1, r5
 8002744:	024b      	lsls	r3, r1, #9
 8002746:	4621      	mov	r1, r4
 8002748:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800274c:	4621      	mov	r1, r4
 800274e:	024a      	lsls	r2, r1, #9
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002756:	2200      	movs	r2, #0
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
 800275a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800275c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002760:	f7fe f888 	bl	8000874 <__aeabi_uldivmod>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4613      	mov	r3, r2
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800276c:	e058      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276e:	4b38      	ldr	r3, [pc, #224]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	2200      	movs	r2, #0
 8002776:	4618      	mov	r0, r3
 8002778:	4611      	mov	r1, r2
 800277a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800277e:	623b      	str	r3, [r7, #32]
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	f04f 0000 	mov.w	r0, #0
 8002790:	f04f 0100 	mov.w	r1, #0
 8002794:	0159      	lsls	r1, r3, #5
 8002796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800279a:	0150      	lsls	r0, r2, #5
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4641      	mov	r1, r8
 80027a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027a6:	4649      	mov	r1, r9
 80027a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027c0:	ebb2 040a 	subs.w	r4, r2, sl
 80027c4:	eb63 050b 	sbc.w	r5, r3, fp
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	00eb      	lsls	r3, r5, #3
 80027d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d6:	00e2      	lsls	r2, r4, #3
 80027d8:	4614      	mov	r4, r2
 80027da:	461d      	mov	r5, r3
 80027dc:	4643      	mov	r3, r8
 80027de:	18e3      	adds	r3, r4, r3
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	464b      	mov	r3, r9
 80027e4:	eb45 0303 	adc.w	r3, r5, r3
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027f6:	4629      	mov	r1, r5
 80027f8:	028b      	lsls	r3, r1, #10
 80027fa:	4621      	mov	r1, r4
 80027fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002800:	4621      	mov	r1, r4
 8002802:	028a      	lsls	r2, r1, #10
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280a:	2200      	movs	r2, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	61fa      	str	r2, [r7, #28]
 8002810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002814:	f7fe f82e 	bl	8000874 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4613      	mov	r3, r2
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283a:	e002      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetSysClockFreq+0x204>)
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002844:	4618      	mov	r0, r3
 8002846:	3750      	adds	r7, #80	; 0x50
 8002848:	46bd      	mov	sp, r7
 800284a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	00f42400 	.word	0x00f42400
 8002858:	007a1200 	.word	0x007a1200

0800285c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_RCC_GetHCLKFreq+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000010 	.word	0x20000010

08002874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002878:	f7ff fff0 	bl	800285c <HAL_RCC_GetHCLKFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	0a9b      	lsrs	r3, r3, #10
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4903      	ldr	r1, [pc, #12]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800288a:	5ccb      	ldrb	r3, [r1, r3]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	0800583c 	.word	0x0800583c

0800289c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a0:	f7ff ffdc 	bl	800285c <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0b5b      	lsrs	r3, r3, #13
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	0800583c 	.word	0x0800583c

080028c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d012      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028ec:	4b69      	ldr	r3, [pc, #420]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a68      	ldr	r2, [pc, #416]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028f6:	6093      	str	r3, [r2, #8]
 80028f8:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002900:	4964      	ldr	r1, [pc, #400]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d017      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800291e:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	4959      	ldr	r1, [pc, #356]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293c:	d101      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d017      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800295a:	4b4e      	ldr	r3, [pc, #312]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002960:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	494a      	ldr	r1, [pc, #296]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002978:	d101      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800297a:	2301      	movs	r3, #1
 800297c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002986:	2301      	movs	r3, #1
 8002988:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 808b 	beq.w	8002abe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029a8:	4b3a      	ldr	r3, [pc, #232]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	4a39      	ldr	r2, [pc, #228]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b2:	6413      	str	r3, [r2, #64]	; 0x40
 80029b4:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029c0:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a34      	ldr	r2, [pc, #208]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe fdf2 	bl	80015b4 <HAL_GetTick>
 80029d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d4:	f7fe fdee 	bl	80015b4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e357      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029e6:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029f2:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d035      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d02e      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a32:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a38:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d114      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fdb6 	bl	80015b4 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fdb2 	bl	80015b4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e319      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ee      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a7a:	d111      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a8a:	400b      	ands	r3, r1
 8002a8c:	4901      	ldr	r1, [pc, #4]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
 8002a92:	e00b      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	0ffffcff 	.word	0x0ffffcff
 8002aa0:	4baa      	ldr	r3, [pc, #680]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4aa9      	ldr	r2, [pc, #676]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002aaa:	6093      	str	r3, [r2, #8]
 8002aac:	4ba7      	ldr	r3, [pc, #668]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	49a4      	ldr	r1, [pc, #656]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d010      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002aca:	4ba0      	ldr	r3, [pc, #640]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad0:	4a9e      	ldr	r2, [pc, #632]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ada:	4b9c      	ldr	r3, [pc, #624]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002adc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	4999      	ldr	r1, [pc, #612]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af8:	4b94      	ldr	r3, [pc, #592]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b06:	4991      	ldr	r1, [pc, #580]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b1a:	4b8c      	ldr	r3, [pc, #560]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b28:	4988      	ldr	r1, [pc, #544]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b3c:	4b83      	ldr	r3, [pc, #524]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b4a:	4980      	ldr	r1, [pc, #512]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b5e:	4b7b      	ldr	r3, [pc, #492]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4977      	ldr	r1, [pc, #476]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b80:	4b72      	ldr	r3, [pc, #456]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	496f      	ldr	r1, [pc, #444]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	f023 020c 	bic.w	r2, r3, #12
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	4966      	ldr	r1, [pc, #408]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bc4:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	495e      	ldr	r1, [pc, #376]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002be6:	4b59      	ldr	r3, [pc, #356]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf4:	4955      	ldr	r1, [pc, #340]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c16:	494d      	ldr	r1, [pc, #308]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c2a:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	4944      	ldr	r1, [pc, #272]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c4c:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5a:	493c      	ldr	r1, [pc, #240]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c6e:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7c:	4933      	ldr	r1, [pc, #204]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c9e:	492b      	ldr	r1, [pc, #172]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d011      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc0:	4922      	ldr	r1, [pc, #136]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cf2:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d00:	4912      	ldr	r1, [pc, #72]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d24:	4909      	ldr	r1, [pc, #36]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d006      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80d9 	beq.w	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d40:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a01      	ldr	r2, [pc, #4]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d4a:	e001      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d52:	f7fe fc2f 	bl	80015b4 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d5a:	f7fe fc2b 	bl	80015b4 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b64      	cmp	r3, #100	; 0x64
 8002d66:	d901      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e194      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d6c:	4b6c      	ldr	r3, [pc, #432]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d021      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11d      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d8c:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d92:	0c1b      	lsrs	r3, r3, #16
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d9a:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da0:	0e1b      	lsrs	r3, r3, #24
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	019a      	lsls	r2, r3, #6
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	071b      	lsls	r3, r3, #28
 8002dc0:	4957      	ldr	r1, [pc, #348]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02e      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df2:	d129      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002df4:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfa:	0c1b      	lsrs	r3, r3, #16
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e08:	0f1b      	lsrs	r3, r3, #28
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	019a      	lsls	r2, r3, #6
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	431a      	orrs	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	071b      	lsls	r3, r3, #28
 8002e28:	493d      	ldr	r1, [pc, #244]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e36:	f023 021f 	bic.w	r2, r3, #31
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01d      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e54:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5a:	0e1b      	lsrs	r3, r3, #24
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e62:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e68:	0f1b      	lsrs	r3, r3, #28
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	019a      	lsls	r2, r3, #6
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	071b      	lsls	r3, r3, #28
 8002e88:	4925      	ldr	r1, [pc, #148]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d011      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	019a      	lsls	r2, r3, #6
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	041b      	lsls	r3, r3, #16
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	061b      	lsls	r3, r3, #24
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	071b      	lsls	r3, r3, #28
 8002eb8:	4919      	ldr	r1, [pc, #100]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fb72 	bl	80015b4 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ed4:	f7fe fb6e 	bl	80015b4 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0d7      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 80cd 	bne.w	8003094 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f06:	f7fe fb55 	bl	80015b4 <HAL_GetTick>
 8002f0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f0e:	f7fe fb51 	bl	80015b4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b64      	cmp	r3, #100	; 0x64
 8002f1a:	d903      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0ba      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f24:	4b5e      	ldr	r3, [pc, #376]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f30:	d0ed      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d02e      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d12a      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f5a:	4b51      	ldr	r3, [pc, #324]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f68:	4b4d      	ldr	r3, [pc, #308]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	0f1b      	lsrs	r3, r3, #28
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	019a      	lsls	r2, r3, #6
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	061b      	lsls	r3, r3, #24
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	071b      	lsls	r3, r3, #28
 8002f8e:	4944      	ldr	r1, [pc, #272]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f96:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	493d      	ldr	r1, [pc, #244]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d022      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc4:	d11d      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fc6:	4b36      	ldr	r3, [pc, #216]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	0e1b      	lsrs	r3, r3, #24
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fd4:	4b32      	ldr	r3, [pc, #200]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	0f1b      	lsrs	r3, r3, #28
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	019a      	lsls	r2, r3, #6
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	071b      	lsls	r3, r3, #28
 8002ffa:	4929      	ldr	r1, [pc, #164]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d028      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	0e1b      	lsrs	r3, r3, #24
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800301c:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	0c1b      	lsrs	r3, r3, #16
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	019a      	lsls	r2, r3, #6
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	071b      	lsls	r3, r3, #28
 8003042:	4917      	ldr	r1, [pc, #92]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800304c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	4911      	ldr	r1, [pc, #68]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7fe faa2 	bl	80015b4 <HAL_GetTick>
 8003070:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003074:	f7fe fa9e 	bl	80015b4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e007      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800308e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003092:	d1ef      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800

080030a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e049      	b.n	800314a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fe f93a 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f000 f9f6 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d001      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e054      	b.n	8003216 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a26      	ldr	r2, [pc, #152]	; (8003224 <HAL_TIM_Base_Start_IT+0xd0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d01d      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a22      	ldr	r2, [pc, #136]	; (8003228 <HAL_TIM_Base_Start_IT+0xd4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a21      	ldr	r2, [pc, #132]	; (800322c <HAL_TIM_Base_Start_IT+0xd8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <HAL_TIM_Base_Start_IT+0xdc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_TIM_Base_Start_IT+0xe0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_TIM_Base_Start_IT+0xe4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_TIM_Base_Start_IT+0xe8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d115      	bne.n	8003200 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_TIM_Base_Start_IT+0xec>)
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d015      	beq.n	8003212 <HAL_TIM_Base_Start_IT+0xbe>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d011      	beq.n	8003212 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fe:	e008      	b.n	8003212 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e000      	b.n	8003214 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40010400 	.word	0x40010400
 8003238:	40014000 	.word	0x40014000
 800323c:	40001800 	.word	0x40001800
 8003240:	00010007 	.word	0x00010007

08003244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d122      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b02      	cmp	r3, #2
 8003266:	d11b      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0202 	mvn.w	r2, #2
 8003270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f905 	bl	8003496 <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f8f7 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f908 	bl	80034aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0204 	mvn.w	r2, #4
 80032c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8db 	bl	8003496 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8cd 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8de 	bl	80034aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d122      	bne.n	8003348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0208 	mvn.w	r2, #8
 8003318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2204      	movs	r2, #4
 800331e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8b1 	bl	8003496 <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8a3 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f8b4 	bl	80034aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b10      	cmp	r3, #16
 8003354:	d122      	bne.n	800339c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b10      	cmp	r3, #16
 8003362:	d11b      	bne.n	800339c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0210 	mvn.w	r2, #16
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2208      	movs	r2, #8
 8003372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f887 	bl	8003496 <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f879 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f88a 	bl	80034aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d10e      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d107      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0201 	mvn.w	r2, #1
 80033c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fe5c 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d10e      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b80      	cmp	r3, #128	; 0x80
 80033e2:	d107      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f9a8 	bl	8003744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d10e      	bne.n	8003422 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b80      	cmp	r3, #128	; 0x80
 8003410:	d107      	bne.n	8003422 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800341a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f99b 	bl	8003758 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d10e      	bne.n	800344e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d107      	bne.n	800344e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f838 	bl	80034be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b20      	cmp	r3, #32
 800345a:	d10e      	bne.n	800347a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b20      	cmp	r3, #32
 8003468:	d107      	bne.n	800347a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f06f 0220 	mvn.w	r2, #32
 8003472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f95b 	bl	8003730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a40      	ldr	r2, [pc, #256]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f2:	d00f      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3d      	ldr	r2, [pc, #244]	; (80035ec <TIM_Base_SetConfig+0x118>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00b      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3c      	ldr	r2, [pc, #240]	; (80035f0 <TIM_Base_SetConfig+0x11c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <TIM_Base_SetConfig+0x120>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3a      	ldr	r2, [pc, #232]	; (80035f8 <TIM_Base_SetConfig+0x124>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d108      	bne.n	8003526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2f      	ldr	r2, [pc, #188]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02b      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003534:	d027      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <TIM_Base_SetConfig+0x118>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d023      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <TIM_Base_SetConfig+0x11c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <TIM_Base_SetConfig+0x120>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01b      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <TIM_Base_SetConfig+0x124>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d017      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a28      	ldr	r2, [pc, #160]	; (80035fc <TIM_Base_SetConfig+0x128>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <TIM_Base_SetConfig+0x12c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <TIM_Base_SetConfig+0x130>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <TIM_Base_SetConfig+0x134>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <TIM_Base_SetConfig+0x138>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <TIM_Base_SetConfig+0x13c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0xf8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <TIM_Base_SetConfig+0x124>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d103      	bne.n	80035d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	615a      	str	r2, [r3, #20]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40010000 	.word	0x40010000
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40000c00 	.word	0x40000c00
 80035f8:	40010400 	.word	0x40010400
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800
 8003608:	40001800 	.word	0x40001800
 800360c:	40001c00 	.word	0x40001c00
 8003610:	40002000 	.word	0x40002000

08003614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e06d      	b.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a30      	ldr	r2, [pc, #192]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2f      	ldr	r2, [pc, #188]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d108      	bne.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003666:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003678:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a20      	ldr	r2, [pc, #128]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d022      	beq.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369e:	d01d      	beq.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d018      	beq.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00e      	beq.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a16      	ldr	r2, [pc, #88]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d004      	beq.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a15      	ldr	r2, [pc, #84]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d10c      	bne.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40010000 	.word	0x40010000
 8003718:	40010400 	.word	0x40010400
 800371c:	40000400 	.word	0x40000400
 8003720:	40000800 	.word	0x40000800
 8003724:	40000c00 	.word	0x40000c00
 8003728:	40014000 	.word	0x40014000
 800372c:	40001800 	.word	0x40001800

08003730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e040      	b.n	8003800 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd fe2e 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fb62 	bl	8003e74 <UART_SetConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e022      	b.n	8003800 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fdba 	bl	800433c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fe41 	bl	8004480 <UART_CheckIdleState>
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381c:	2b20      	cmp	r3, #32
 800381e:	d132      	bne.n	8003886 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Receive_IT+0x24>
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e02b      	b.n	8003888 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d018      	beq.n	8003876 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	613b      	str	r3, [r7, #16]
   return(result);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	69f9      	ldr	r1, [r7, #28]
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e6      	bne.n	8003844 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	461a      	mov	r2, r3
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fefd 	bl	800467c <UART_Start_Receive_IT>
 8003882:	4603      	mov	r3, r0
 8003884:	e000      	b.n	8003888 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b0ba      	sub	sp, #232	; 0xe8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80038be:	4013      	ands	r3, r2
 80038c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d115      	bne.n	80038f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00f      	beq.n	80038f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d009      	beq.n	80038f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8297 	beq.w	8003e1c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
      }
      return;
 80038f6:	e291      	b.n	8003e1c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 8117 	beq.w	8003b30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800390e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003912:	4b85      	ldr	r3, [pc, #532]	; (8003b28 <HAL_UART_IRQHandler+0x298>)
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 810a 	beq.w	8003b30 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d011      	beq.n	800394c <HAL_UART_IRQHandler+0xbc>
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2201      	movs	r2, #1
 800393a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d011      	beq.n	800397c <HAL_UART_IRQHandler+0xec>
 8003958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2202      	movs	r2, #2
 800396a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800397c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d011      	beq.n	80039ac <HAL_UART_IRQHandler+0x11c>
 8003988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2204      	movs	r2, #4
 800399a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a2:	f043 0202 	orr.w	r2, r3, #2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d017      	beq.n	80039e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2208      	movs	r2, #8
 80039d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039de:	f043 0208 	orr.w	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <HAL_UART_IRQHandler+0x18a>
 80039f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00c      	beq.n	8003a1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 81fd 	beq.w	8003e20 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d04f      	beq.n	8003b12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fec8 	bl	8004808 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d141      	bne.n	8003b0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1d9      	bne.n	8003a86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d013      	beq.n	8003b02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <HAL_UART_IRQHandler+0x29c>)
 8003ae0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd ffd9 	bl	8001a9e <HAL_DMA_Abort_IT>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d017      	beq.n	8003b22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003afc:	4610      	mov	r0, r2
 8003afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	e00f      	b.n	8003b22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f9a0 	bl	8003e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e00b      	b.n	8003b22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f99c 	bl	8003e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b10:	e007      	b.n	8003b22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f998 	bl	8003e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003b20:	e17e      	b.n	8003e20 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b22:	bf00      	nop
    return;
 8003b24:	e17c      	b.n	8003e20 <HAL_UART_IRQHandler+0x590>
 8003b26:	bf00      	nop
 8003b28:	04000120 	.word	0x04000120
 8003b2c:	080048d1 	.word	0x080048d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	f040 814c 	bne.w	8003dd2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8145 	beq.w	8003dd2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 813e 	beq.w	8003dd2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2210      	movs	r2, #16
 8003b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	f040 80b6 	bne.w	8003cda <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8150 	beq.w	8003e24 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	f080 8148 	bcs.w	8003e24 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba8:	f000 8086 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1da      	bne.n	8003bac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3308      	adds	r3, #8
 8003c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e1      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3308      	adds	r3, #8
 8003c38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3308      	adds	r3, #8
 8003c52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e3      	bne.n	8003c32 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	f023 0310 	bic.w	r3, r3, #16
 8003c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e4      	bne.n	8003c78 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd fe83 	bl	80019be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8c2 	bl	8003e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cd8:	e0a4      	b.n	8003e24 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8096 	beq.w	8003e28 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8091 	beq.w	8003e28 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d28:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e4      	bne.n	8003d06 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3308      	adds	r3, #8
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d60:	633a      	str	r2, [r7, #48]	; 0x30
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e3      	bne.n	8003d3c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	617b      	str	r3, [r7, #20]
   return(result);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e4      	bne.n	8003d88 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f846 	bl	8003e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dd0:	e02a      	b.n	8003e28 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00e      	beq.n	8003dfc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01c      	beq.n	8003e2c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
    }
    return;
 8003dfa:	e017      	b.n	8003e2c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d012      	beq.n	8003e2e <HAL_UART_IRQHandler+0x59e>
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00c      	beq.n	8003e2e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fd71 	bl	80048fc <UART_EndTransmit_IT>
    return;
 8003e1a:	e008      	b.n	8003e2e <HAL_UART_IRQHandler+0x59e>
      return;
 8003e1c:	bf00      	nop
 8003e1e:	e006      	b.n	8003e2e <HAL_UART_IRQHandler+0x59e>
    return;
 8003e20:	bf00      	nop
 8003e22:	e004      	b.n	8003e2e <HAL_UART_IRQHandler+0x59e>
      return;
 8003e24:	bf00      	nop
 8003e26:	e002      	b.n	8003e2e <HAL_UART_IRQHandler+0x59e>
      return;
 8003e28:	bf00      	nop
 8003e2a:	e000      	b.n	8003e2e <HAL_UART_IRQHandler+0x59e>
    return;
 8003e2c:	bf00      	nop
  }

}
 8003e2e:	37e8      	adds	r7, #232	; 0xe8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4ba6      	ldr	r3, [pc, #664]	; (8004138 <UART_SetConfig+0x2c4>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	6979      	ldr	r1, [r7, #20]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a94      	ldr	r2, [pc, #592]	; (800413c <UART_SetConfig+0x2c8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d120      	bne.n	8003f32 <UART_SetConfig+0xbe>
 8003ef0:	4b93      	ldr	r3, [pc, #588]	; (8004140 <UART_SetConfig+0x2cc>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d816      	bhi.n	8003f2c <UART_SetConfig+0xb8>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x90>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f21 	.word	0x08003f21
 8003f0c:	08003f1b 	.word	0x08003f1b
 8003f10:	08003f27 	.word	0x08003f27
 8003f14:	2301      	movs	r3, #1
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e150      	b.n	80041bc <UART_SetConfig+0x348>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e14d      	b.n	80041bc <UART_SetConfig+0x348>
 8003f20:	2304      	movs	r3, #4
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e14a      	b.n	80041bc <UART_SetConfig+0x348>
 8003f26:	2308      	movs	r3, #8
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e147      	b.n	80041bc <UART_SetConfig+0x348>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e144      	b.n	80041bc <UART_SetConfig+0x348>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a83      	ldr	r2, [pc, #524]	; (8004144 <UART_SetConfig+0x2d0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d132      	bne.n	8003fa2 <UART_SetConfig+0x12e>
 8003f3c:	4b80      	ldr	r3, [pc, #512]	; (8004140 <UART_SetConfig+0x2cc>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	d828      	bhi.n	8003f9c <UART_SetConfig+0x128>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <UART_SetConfig+0xdc>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08003f9d 	.word	0x08003f9d
 8003f58:	08003f9d 	.word	0x08003f9d
 8003f5c:	08003f9d 	.word	0x08003f9d
 8003f60:	08003f91 	.word	0x08003f91
 8003f64:	08003f9d 	.word	0x08003f9d
 8003f68:	08003f9d 	.word	0x08003f9d
 8003f6c:	08003f9d 	.word	0x08003f9d
 8003f70:	08003f8b 	.word	0x08003f8b
 8003f74:	08003f9d 	.word	0x08003f9d
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003f9d 	.word	0x08003f9d
 8003f80:	08003f97 	.word	0x08003f97
 8003f84:	2300      	movs	r3, #0
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e118      	b.n	80041bc <UART_SetConfig+0x348>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e115      	b.n	80041bc <UART_SetConfig+0x348>
 8003f90:	2304      	movs	r3, #4
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e112      	b.n	80041bc <UART_SetConfig+0x348>
 8003f96:	2308      	movs	r3, #8
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e10f      	b.n	80041bc <UART_SetConfig+0x348>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e10c      	b.n	80041bc <UART_SetConfig+0x348>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a68      	ldr	r2, [pc, #416]	; (8004148 <UART_SetConfig+0x2d4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d120      	bne.n	8003fee <UART_SetConfig+0x17a>
 8003fac:	4b64      	ldr	r3, [pc, #400]	; (8004140 <UART_SetConfig+0x2cc>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fb6:	2b30      	cmp	r3, #48	; 0x30
 8003fb8:	d013      	beq.n	8003fe2 <UART_SetConfig+0x16e>
 8003fba:	2b30      	cmp	r3, #48	; 0x30
 8003fbc:	d814      	bhi.n	8003fe8 <UART_SetConfig+0x174>
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d009      	beq.n	8003fd6 <UART_SetConfig+0x162>
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d810      	bhi.n	8003fe8 <UART_SetConfig+0x174>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <UART_SetConfig+0x15c>
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d006      	beq.n	8003fdc <UART_SetConfig+0x168>
 8003fce:	e00b      	b.n	8003fe8 <UART_SetConfig+0x174>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e0f2      	b.n	80041bc <UART_SetConfig+0x348>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e0ef      	b.n	80041bc <UART_SetConfig+0x348>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e0ec      	b.n	80041bc <UART_SetConfig+0x348>
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e0e9      	b.n	80041bc <UART_SetConfig+0x348>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e0e6      	b.n	80041bc <UART_SetConfig+0x348>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a56      	ldr	r2, [pc, #344]	; (800414c <UART_SetConfig+0x2d8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d120      	bne.n	800403a <UART_SetConfig+0x1c6>
 8003ff8:	4b51      	ldr	r3, [pc, #324]	; (8004140 <UART_SetConfig+0x2cc>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004002:	2bc0      	cmp	r3, #192	; 0xc0
 8004004:	d013      	beq.n	800402e <UART_SetConfig+0x1ba>
 8004006:	2bc0      	cmp	r3, #192	; 0xc0
 8004008:	d814      	bhi.n	8004034 <UART_SetConfig+0x1c0>
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d009      	beq.n	8004022 <UART_SetConfig+0x1ae>
 800400e:	2b80      	cmp	r3, #128	; 0x80
 8004010:	d810      	bhi.n	8004034 <UART_SetConfig+0x1c0>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <UART_SetConfig+0x1a8>
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d006      	beq.n	8004028 <UART_SetConfig+0x1b4>
 800401a:	e00b      	b.n	8004034 <UART_SetConfig+0x1c0>
 800401c:	2300      	movs	r3, #0
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e0cc      	b.n	80041bc <UART_SetConfig+0x348>
 8004022:	2302      	movs	r3, #2
 8004024:	77fb      	strb	r3, [r7, #31]
 8004026:	e0c9      	b.n	80041bc <UART_SetConfig+0x348>
 8004028:	2304      	movs	r3, #4
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e0c6      	b.n	80041bc <UART_SetConfig+0x348>
 800402e:	2308      	movs	r3, #8
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e0c3      	b.n	80041bc <UART_SetConfig+0x348>
 8004034:	2310      	movs	r3, #16
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e0c0      	b.n	80041bc <UART_SetConfig+0x348>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a44      	ldr	r2, [pc, #272]	; (8004150 <UART_SetConfig+0x2dc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d125      	bne.n	8004090 <UART_SetConfig+0x21c>
 8004044:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <UART_SetConfig+0x2cc>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004052:	d017      	beq.n	8004084 <UART_SetConfig+0x210>
 8004054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004058:	d817      	bhi.n	800408a <UART_SetConfig+0x216>
 800405a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405e:	d00b      	beq.n	8004078 <UART_SetConfig+0x204>
 8004060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004064:	d811      	bhi.n	800408a <UART_SetConfig+0x216>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <UART_SetConfig+0x1fe>
 800406a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406e:	d006      	beq.n	800407e <UART_SetConfig+0x20a>
 8004070:	e00b      	b.n	800408a <UART_SetConfig+0x216>
 8004072:	2300      	movs	r3, #0
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e0a1      	b.n	80041bc <UART_SetConfig+0x348>
 8004078:	2302      	movs	r3, #2
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e09e      	b.n	80041bc <UART_SetConfig+0x348>
 800407e:	2304      	movs	r3, #4
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e09b      	b.n	80041bc <UART_SetConfig+0x348>
 8004084:	2308      	movs	r3, #8
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e098      	b.n	80041bc <UART_SetConfig+0x348>
 800408a:	2310      	movs	r3, #16
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e095      	b.n	80041bc <UART_SetConfig+0x348>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2f      	ldr	r2, [pc, #188]	; (8004154 <UART_SetConfig+0x2e0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d125      	bne.n	80040e6 <UART_SetConfig+0x272>
 800409a:	4b29      	ldr	r3, [pc, #164]	; (8004140 <UART_SetConfig+0x2cc>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040a8:	d017      	beq.n	80040da <UART_SetConfig+0x266>
 80040aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ae:	d817      	bhi.n	80040e0 <UART_SetConfig+0x26c>
 80040b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b4:	d00b      	beq.n	80040ce <UART_SetConfig+0x25a>
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ba:	d811      	bhi.n	80040e0 <UART_SetConfig+0x26c>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <UART_SetConfig+0x254>
 80040c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c4:	d006      	beq.n	80040d4 <UART_SetConfig+0x260>
 80040c6:	e00b      	b.n	80040e0 <UART_SetConfig+0x26c>
 80040c8:	2301      	movs	r3, #1
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e076      	b.n	80041bc <UART_SetConfig+0x348>
 80040ce:	2302      	movs	r3, #2
 80040d0:	77fb      	strb	r3, [r7, #31]
 80040d2:	e073      	b.n	80041bc <UART_SetConfig+0x348>
 80040d4:	2304      	movs	r3, #4
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e070      	b.n	80041bc <UART_SetConfig+0x348>
 80040da:	2308      	movs	r3, #8
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e06d      	b.n	80041bc <UART_SetConfig+0x348>
 80040e0:	2310      	movs	r3, #16
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e06a      	b.n	80041bc <UART_SetConfig+0x348>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <UART_SetConfig+0x2e4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d138      	bne.n	8004162 <UART_SetConfig+0x2ee>
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <UART_SetConfig+0x2cc>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040fe:	d017      	beq.n	8004130 <UART_SetConfig+0x2bc>
 8004100:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004104:	d82a      	bhi.n	800415c <UART_SetConfig+0x2e8>
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410a:	d00b      	beq.n	8004124 <UART_SetConfig+0x2b0>
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004110:	d824      	bhi.n	800415c <UART_SetConfig+0x2e8>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <UART_SetConfig+0x2aa>
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d006      	beq.n	800412a <UART_SetConfig+0x2b6>
 800411c:	e01e      	b.n	800415c <UART_SetConfig+0x2e8>
 800411e:	2300      	movs	r3, #0
 8004120:	77fb      	strb	r3, [r7, #31]
 8004122:	e04b      	b.n	80041bc <UART_SetConfig+0x348>
 8004124:	2302      	movs	r3, #2
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e048      	b.n	80041bc <UART_SetConfig+0x348>
 800412a:	2304      	movs	r3, #4
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e045      	b.n	80041bc <UART_SetConfig+0x348>
 8004130:	2308      	movs	r3, #8
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e042      	b.n	80041bc <UART_SetConfig+0x348>
 8004136:	bf00      	nop
 8004138:	efff69f3 	.word	0xefff69f3
 800413c:	40011000 	.word	0x40011000
 8004140:	40023800 	.word	0x40023800
 8004144:	40004400 	.word	0x40004400
 8004148:	40004800 	.word	0x40004800
 800414c:	40004c00 	.word	0x40004c00
 8004150:	40005000 	.word	0x40005000
 8004154:	40011400 	.word	0x40011400
 8004158:	40007800 	.word	0x40007800
 800415c:	2310      	movs	r3, #16
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e02c      	b.n	80041bc <UART_SetConfig+0x348>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a72      	ldr	r2, [pc, #456]	; (8004330 <UART_SetConfig+0x4bc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d125      	bne.n	80041b8 <UART_SetConfig+0x344>
 800416c:	4b71      	ldr	r3, [pc, #452]	; (8004334 <UART_SetConfig+0x4c0>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004176:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800417a:	d017      	beq.n	80041ac <UART_SetConfig+0x338>
 800417c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004180:	d817      	bhi.n	80041b2 <UART_SetConfig+0x33e>
 8004182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004186:	d00b      	beq.n	80041a0 <UART_SetConfig+0x32c>
 8004188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800418c:	d811      	bhi.n	80041b2 <UART_SetConfig+0x33e>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <UART_SetConfig+0x326>
 8004192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004196:	d006      	beq.n	80041a6 <UART_SetConfig+0x332>
 8004198:	e00b      	b.n	80041b2 <UART_SetConfig+0x33e>
 800419a:	2300      	movs	r3, #0
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e00d      	b.n	80041bc <UART_SetConfig+0x348>
 80041a0:	2302      	movs	r3, #2
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e00a      	b.n	80041bc <UART_SetConfig+0x348>
 80041a6:	2304      	movs	r3, #4
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e007      	b.n	80041bc <UART_SetConfig+0x348>
 80041ac:	2308      	movs	r3, #8
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e004      	b.n	80041bc <UART_SetConfig+0x348>
 80041b2:	2310      	movs	r3, #16
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e001      	b.n	80041bc <UART_SetConfig+0x348>
 80041b8:	2310      	movs	r3, #16
 80041ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c4:	d15b      	bne.n	800427e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80041c6:	7ffb      	ldrb	r3, [r7, #31]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d828      	bhi.n	800421e <UART_SetConfig+0x3aa>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0x360>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041f9 	.word	0x080041f9
 80041d8:	08004201 	.word	0x08004201
 80041dc:	08004209 	.word	0x08004209
 80041e0:	0800421f 	.word	0x0800421f
 80041e4:	0800420f 	.word	0x0800420f
 80041e8:	0800421f 	.word	0x0800421f
 80041ec:	0800421f 	.word	0x0800421f
 80041f0:	0800421f 	.word	0x0800421f
 80041f4:	08004217 	.word	0x08004217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f8:	f7fe fb3c 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 80041fc:	61b8      	str	r0, [r7, #24]
        break;
 80041fe:	e013      	b.n	8004228 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004200:	f7fe fb4c 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 8004204:	61b8      	str	r0, [r7, #24]
        break;
 8004206:	e00f      	b.n	8004228 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004208:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <UART_SetConfig+0x4c4>)
 800420a:	61bb      	str	r3, [r7, #24]
        break;
 800420c:	e00c      	b.n	8004228 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420e:	f7fe fa1f 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8004212:	61b8      	str	r0, [r7, #24]
        break;
 8004214:	e008      	b.n	8004228 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421a:	61bb      	str	r3, [r7, #24]
        break;
 800421c:	e004      	b.n	8004228 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	77bb      	strb	r3, [r7, #30]
        break;
 8004226:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d074      	beq.n	8004318 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	005a      	lsls	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	441a      	add	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b0f      	cmp	r3, #15
 8004248:	d916      	bls.n	8004278 <UART_SetConfig+0x404>
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004250:	d212      	bcs.n	8004278 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f023 030f 	bic.w	r3, r3, #15
 800425a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	b29b      	uxth	r3, r3
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	b29a      	uxth	r2, r3
 8004268:	89fb      	ldrh	r3, [r7, #14]
 800426a:	4313      	orrs	r3, r2
 800426c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	89fa      	ldrh	r2, [r7, #14]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	e04f      	b.n	8004318 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	77bb      	strb	r3, [r7, #30]
 800427c:	e04c      	b.n	8004318 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800427e:	7ffb      	ldrb	r3, [r7, #31]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d828      	bhi.n	80042d6 <UART_SetConfig+0x462>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <UART_SetConfig+0x418>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042b1 	.word	0x080042b1
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042c1 	.word	0x080042c1
 8004298:	080042d7 	.word	0x080042d7
 800429c:	080042c7 	.word	0x080042c7
 80042a0:	080042d7 	.word	0x080042d7
 80042a4:	080042d7 	.word	0x080042d7
 80042a8:	080042d7 	.word	0x080042d7
 80042ac:	080042cf 	.word	0x080042cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b0:	f7fe fae0 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 80042b4:	61b8      	str	r0, [r7, #24]
        break;
 80042b6:	e013      	b.n	80042e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7fe faf0 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 80042bc:	61b8      	str	r0, [r7, #24]
        break;
 80042be:	e00f      	b.n	80042e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <UART_SetConfig+0x4c4>)
 80042c2:	61bb      	str	r3, [r7, #24]
        break;
 80042c4:	e00c      	b.n	80042e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c6:	f7fe f9c3 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 80042ca:	61b8      	str	r0, [r7, #24]
        break;
 80042cc:	e008      	b.n	80042e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	61bb      	str	r3, [r7, #24]
        break;
 80042d4:	e004      	b.n	80042e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	77bb      	strb	r3, [r7, #30]
        break;
 80042de:	bf00      	nop
    }

    if (pclk != 0U)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d018      	beq.n	8004318 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	085a      	lsrs	r2, r3, #1
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	441a      	add	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b0f      	cmp	r3, #15
 80042fe:	d909      	bls.n	8004314 <UART_SetConfig+0x4a0>
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004306:	d205      	bcs.n	8004314 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60da      	str	r2, [r3, #12]
 8004312:	e001      	b.n	8004318 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004324:	7fbb      	ldrb	r3, [r7, #30]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40007c00 	.word	0x40007c00
 8004334:	40023800 	.word	0x40023800
 8004338:	00f42400 	.word	0x00f42400

0800433c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01a      	beq.n	8004452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800443a:	d10a      	bne.n	8004452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af02      	add	r7, sp, #8
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004490:	f7fd f890 	bl	80015b4 <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d10e      	bne.n	80044c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f81b 	bl	80044ee <UART_WaitOnFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e011      	b.n	80044e6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b09c      	sub	sp, #112	; 0x70
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	4613      	mov	r3, r2
 80044fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fe:	e0a7      	b.n	8004650 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	f000 80a3 	beq.w	8004650 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fd f853 	bl	80015b4 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <UART_WaitOnFlagUntilTimeout+0x32>
 800451a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800451c:	2b00      	cmp	r3, #0
 800451e:	d13f      	bne.n	80045a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004530:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004534:	667b      	str	r3, [r7, #100]	; 0x64
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800453e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004540:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004544:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800454c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e6      	bne.n	8004520 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3308      	adds	r3, #8
 8004558:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	663b      	str	r3, [r7, #96]	; 0x60
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004572:	64ba      	str	r2, [r7, #72]	; 0x48
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e068      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d050      	beq.n	8004650 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045bc:	d148      	bne.n	8004650 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
 80045e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e6      	bne.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	613b      	str	r3, [r7, #16]
   return(result);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	66bb      	str	r3, [r7, #104]	; 0x68
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3308      	adds	r3, #8
 8004618:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800461a:	623a      	str	r2, [r7, #32]
 800461c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	69f9      	ldr	r1, [r7, #28]
 8004620:	6a3a      	ldr	r2, [r7, #32]
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	61bb      	str	r3, [r7, #24]
   return(result);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e5      	bne.n	80045fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e010      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4013      	ands	r3, r2
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	429a      	cmp	r2, r3
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	429a      	cmp	r2, r3
 800466c:	f43f af48 	beq.w	8004500 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3770      	adds	r7, #112	; 0x70
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800467c:	b480      	push	{r7}
 800467e:	b097      	sub	sp, #92	; 0x5c
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ae:	d10e      	bne.n	80046ce <UART_Start_Receive_IT+0x52>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <UART_Start_Receive_IT+0x48>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c2:	e02d      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	22ff      	movs	r2, #255	; 0xff
 80046c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046cc:	e028      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10d      	bne.n	80046f2 <UART_Start_Receive_IT+0x76>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <UART_Start_Receive_IT+0x6c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	22ff      	movs	r2, #255	; 0xff
 80046e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e6:	e01b      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	227f      	movs	r2, #127	; 0x7f
 80046ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046f0:	e016      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fa:	d10d      	bne.n	8004718 <UART_Start_Receive_IT+0x9c>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <UART_Start_Receive_IT+0x92>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	227f      	movs	r2, #127	; 0x7f
 8004708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800470c:	e008      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	223f      	movs	r2, #63	; 0x3f
 8004712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004716:	e003      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2222      	movs	r2, #34	; 0x22
 800472c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3308      	adds	r3, #8
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	657b      	str	r3, [r7, #84]	; 0x54
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3308      	adds	r3, #8
 800474e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004750:	64ba      	str	r2, [r7, #72]	; 0x48
 8004752:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800475e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e5      	bne.n	8004730 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476c:	d107      	bne.n	800477e <UART_Start_Receive_IT+0x102>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a21      	ldr	r2, [pc, #132]	; (8004800 <UART_Start_Receive_IT+0x184>)
 800477a:	669a      	str	r2, [r3, #104]	; 0x68
 800477c:	e002      	b.n	8004784 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a20      	ldr	r2, [pc, #128]	; (8004804 <UART_Start_Receive_IT+0x188>)
 8004782:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d019      	beq.n	80047c0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80047a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
 80047ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <UART_Start_Receive_IT+0x110>
 80047be:	e018      	b.n	80047f2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	613b      	str	r3, [r7, #16]
   return(result);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f043 0320 	orr.w	r3, r3, #32
 80047d4:	653b      	str	r3, [r7, #80]	; 0x50
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047de:	623b      	str	r3, [r7, #32]
 80047e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	69f9      	ldr	r1, [r7, #28]
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e6      	bne.n	80047c0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	375c      	adds	r7, #92	; 0x5c
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	08004ab7 	.word	0x08004ab7
 8004804:	08004951 	.word	0x08004951

08004808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b095      	sub	sp, #84	; 0x54
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482e:	643b      	str	r3, [r7, #64]	; 0x40
 8004830:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004834:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	61fb      	str	r3, [r7, #28]
   return(result);
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	64bb      	str	r3, [r7, #72]	; 0x48
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487a:	2b01      	cmp	r3, #1
 800487c:	d118      	bne.n	80048b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	60bb      	str	r3, [r7, #8]
   return(result);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f023 0310 	bic.w	r3, r3, #16
 8004892:	647b      	str	r3, [r7, #68]	; 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6979      	ldr	r1, [r7, #20]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e6      	bne.n	800487e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048c4:	bf00      	nop
 80048c6:	3754      	adds	r7, #84	; 0x54
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff faaa 	bl	8003e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	60bb      	str	r3, [r7, #8]
   return(result);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6979      	ldr	r1, [r7, #20]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e6      	bne.n	8004904 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff fa76 	bl	8003e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004948:	bf00      	nop
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b096      	sub	sp, #88	; 0x58
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800495e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004968:	2b22      	cmp	r3, #34	; 0x22
 800496a:	f040 8098 	bne.w	8004a9e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004978:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800497c:	b2d9      	uxtb	r1, r3
 800497e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004982:	b2da      	uxtb	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	400a      	ands	r2, r1
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d17b      	bne.n	8004aae <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ca:	653b      	str	r3, [r7, #80]	; 0x50
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44
 80049d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	623b      	str	r3, [r7, #32]
   return(result);
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a08:	633a      	str	r2, [r7, #48]	; 0x30
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d12e      	bne.n	8004a96 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0310 	bic.w	r3, r3, #16
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	69b9      	ldr	r1, [r7, #24]
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	617b      	str	r3, [r7, #20]
   return(result);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e6      	bne.n	8004a3e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b10      	cmp	r3, #16
 8004a7c:	d103      	bne.n	8004a86 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2210      	movs	r2, #16
 8004a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff f9e4 	bl	8003e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a94:	e00b      	b.n	8004aae <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc fa7c 	bl	8000f94 <HAL_UART_RxCpltCallback>
}
 8004a9c:	e007      	b.n	8004aae <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 0208 	orr.w	r2, r2, #8
 8004aac:	619a      	str	r2, [r3, #24]
}
 8004aae:	bf00      	nop
 8004ab0:	3758      	adds	r7, #88	; 0x58
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b096      	sub	sp, #88	; 0x58
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ac4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ace:	2b22      	cmp	r3, #34	; 0x22
 8004ad0:	f040 8098 	bne.w	8004c04 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ae4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004ae8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004aec:	4013      	ands	r3, r2
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	1c9a      	adds	r2, r3, #2
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d17b      	bne.n	8004c14 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e6      	bne.n	8004b1c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3308      	adds	r3, #8
 8004b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b76:	e841 2300 	strex	r3, r2, [r1]
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e5      	bne.n	8004b4e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d12e      	bne.n	8004bfc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f023 0310 	bic.w	r3, r3, #16
 8004bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6979      	ldr	r1, [r7, #20]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e6      	bne.n	8004ba4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d103      	bne.n	8004bec <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2210      	movs	r2, #16
 8004bea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff f931 	bl	8003e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bfa:	e00b      	b.n	8004c14 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fc f9c9 	bl	8000f94 <HAL_UART_RxCpltCallback>
}
 8004c02:	e007      	b.n	8004c14 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0208 	orr.w	r2, r2, #8
 8004c12:	619a      	str	r2, [r3, #24]
}
 8004c14:	bf00      	nop
 8004c16:	3758      	adds	r7, #88	; 0x58
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <atoi>:
 8004c1c:	220a      	movs	r2, #10
 8004c1e:	2100      	movs	r1, #0
 8004c20:	f000 b882 	b.w	8004d28 <strtol>

08004c24 <_strtol_l.constprop.0>:
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2a:	d001      	beq.n	8004c30 <_strtol_l.constprop.0+0xc>
 8004c2c:	2b24      	cmp	r3, #36	; 0x24
 8004c2e:	d906      	bls.n	8004c3e <_strtol_l.constprop.0+0x1a>
 8004c30:	f000 f88c 	bl	8004d4c <__errno>
 8004c34:	2316      	movs	r3, #22
 8004c36:	6003      	str	r3, [r0, #0]
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004d24 <_strtol_l.constprop.0+0x100>
 8004c42:	460d      	mov	r5, r1
 8004c44:	462e      	mov	r6, r5
 8004c46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c4a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004c4e:	f017 0708 	ands.w	r7, r7, #8
 8004c52:	d1f7      	bne.n	8004c44 <_strtol_l.constprop.0+0x20>
 8004c54:	2c2d      	cmp	r4, #45	; 0x2d
 8004c56:	d132      	bne.n	8004cbe <_strtol_l.constprop.0+0x9a>
 8004c58:	782c      	ldrb	r4, [r5, #0]
 8004c5a:	2701      	movs	r7, #1
 8004c5c:	1cb5      	adds	r5, r6, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d05b      	beq.n	8004d1a <_strtol_l.constprop.0+0xf6>
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d109      	bne.n	8004c7a <_strtol_l.constprop.0+0x56>
 8004c66:	2c30      	cmp	r4, #48	; 0x30
 8004c68:	d107      	bne.n	8004c7a <_strtol_l.constprop.0+0x56>
 8004c6a:	782c      	ldrb	r4, [r5, #0]
 8004c6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004c70:	2c58      	cmp	r4, #88	; 0x58
 8004c72:	d14d      	bne.n	8004d10 <_strtol_l.constprop.0+0xec>
 8004c74:	786c      	ldrb	r4, [r5, #1]
 8004c76:	2310      	movs	r3, #16
 8004c78:	3502      	adds	r5, #2
 8004c7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004c7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c82:	f04f 0e00 	mov.w	lr, #0
 8004c86:	fbb8 f9f3 	udiv	r9, r8, r3
 8004c8a:	4676      	mov	r6, lr
 8004c8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004c90:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004c94:	f1bc 0f09 	cmp.w	ip, #9
 8004c98:	d816      	bhi.n	8004cc8 <_strtol_l.constprop.0+0xa4>
 8004c9a:	4664      	mov	r4, ip
 8004c9c:	42a3      	cmp	r3, r4
 8004c9e:	dd24      	ble.n	8004cea <_strtol_l.constprop.0+0xc6>
 8004ca0:	f1be 3fff 	cmp.w	lr, #4294967295
 8004ca4:	d008      	beq.n	8004cb8 <_strtol_l.constprop.0+0x94>
 8004ca6:	45b1      	cmp	r9, r6
 8004ca8:	d31c      	bcc.n	8004ce4 <_strtol_l.constprop.0+0xc0>
 8004caa:	d101      	bne.n	8004cb0 <_strtol_l.constprop.0+0x8c>
 8004cac:	45a2      	cmp	sl, r4
 8004cae:	db19      	blt.n	8004ce4 <_strtol_l.constprop.0+0xc0>
 8004cb0:	fb06 4603 	mla	r6, r6, r3, r4
 8004cb4:	f04f 0e01 	mov.w	lr, #1
 8004cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cbc:	e7e8      	b.n	8004c90 <_strtol_l.constprop.0+0x6c>
 8004cbe:	2c2b      	cmp	r4, #43	; 0x2b
 8004cc0:	bf04      	itt	eq
 8004cc2:	782c      	ldrbeq	r4, [r5, #0]
 8004cc4:	1cb5      	addeq	r5, r6, #2
 8004cc6:	e7ca      	b.n	8004c5e <_strtol_l.constprop.0+0x3a>
 8004cc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004ccc:	f1bc 0f19 	cmp.w	ip, #25
 8004cd0:	d801      	bhi.n	8004cd6 <_strtol_l.constprop.0+0xb2>
 8004cd2:	3c37      	subs	r4, #55	; 0x37
 8004cd4:	e7e2      	b.n	8004c9c <_strtol_l.constprop.0+0x78>
 8004cd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004cda:	f1bc 0f19 	cmp.w	ip, #25
 8004cde:	d804      	bhi.n	8004cea <_strtol_l.constprop.0+0xc6>
 8004ce0:	3c57      	subs	r4, #87	; 0x57
 8004ce2:	e7db      	b.n	8004c9c <_strtol_l.constprop.0+0x78>
 8004ce4:	f04f 3eff 	mov.w	lr, #4294967295
 8004ce8:	e7e6      	b.n	8004cb8 <_strtol_l.constprop.0+0x94>
 8004cea:	f1be 3fff 	cmp.w	lr, #4294967295
 8004cee:	d105      	bne.n	8004cfc <_strtol_l.constprop.0+0xd8>
 8004cf0:	2322      	movs	r3, #34	; 0x22
 8004cf2:	6003      	str	r3, [r0, #0]
 8004cf4:	4646      	mov	r6, r8
 8004cf6:	b942      	cbnz	r2, 8004d0a <_strtol_l.constprop.0+0xe6>
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	e79e      	b.n	8004c3a <_strtol_l.constprop.0+0x16>
 8004cfc:	b107      	cbz	r7, 8004d00 <_strtol_l.constprop.0+0xdc>
 8004cfe:	4276      	negs	r6, r6
 8004d00:	2a00      	cmp	r2, #0
 8004d02:	d0f9      	beq.n	8004cf8 <_strtol_l.constprop.0+0xd4>
 8004d04:	f1be 0f00 	cmp.w	lr, #0
 8004d08:	d000      	beq.n	8004d0c <_strtol_l.constprop.0+0xe8>
 8004d0a:	1e69      	subs	r1, r5, #1
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	e7f3      	b.n	8004cf8 <_strtol_l.constprop.0+0xd4>
 8004d10:	2430      	movs	r4, #48	; 0x30
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1b1      	bne.n	8004c7a <_strtol_l.constprop.0+0x56>
 8004d16:	2308      	movs	r3, #8
 8004d18:	e7af      	b.n	8004c7a <_strtol_l.constprop.0+0x56>
 8004d1a:	2c30      	cmp	r4, #48	; 0x30
 8004d1c:	d0a5      	beq.n	8004c6a <_strtol_l.constprop.0+0x46>
 8004d1e:	230a      	movs	r3, #10
 8004d20:	e7ab      	b.n	8004c7a <_strtol_l.constprop.0+0x56>
 8004d22:	bf00      	nop
 8004d24:	08005845 	.word	0x08005845

08004d28 <strtol>:
 8004d28:	4613      	mov	r3, r2
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	4802      	ldr	r0, [pc, #8]	; (8004d38 <strtol+0x10>)
 8004d30:	6800      	ldr	r0, [r0, #0]
 8004d32:	f7ff bf77 	b.w	8004c24 <_strtol_l.constprop.0>
 8004d36:	bf00      	nop
 8004d38:	20000068 	.word	0x20000068

08004d3c <memset>:
 8004d3c:	4402      	add	r2, r0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d100      	bne.n	8004d46 <memset+0xa>
 8004d44:	4770      	bx	lr
 8004d46:	f803 1b01 	strb.w	r1, [r3], #1
 8004d4a:	e7f9      	b.n	8004d40 <memset+0x4>

08004d4c <__errno>:
 8004d4c:	4b01      	ldr	r3, [pc, #4]	; (8004d54 <__errno+0x8>)
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000068 	.word	0x20000068

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4d0d      	ldr	r5, [pc, #52]	; (8004d90 <__libc_init_array+0x38>)
 8004d5c:	4c0d      	ldr	r4, [pc, #52]	; (8004d94 <__libc_init_array+0x3c>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	2600      	movs	r6, #0
 8004d64:	42a6      	cmp	r6, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	4d0b      	ldr	r5, [pc, #44]	; (8004d98 <__libc_init_array+0x40>)
 8004d6a:	4c0c      	ldr	r4, [pc, #48]	; (8004d9c <__libc_init_array+0x44>)
 8004d6c:	f000 fd52 	bl	8005814 <_init>
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	2600      	movs	r6, #0
 8004d76:	42a6      	cmp	r6, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d80:	4798      	blx	r3
 8004d82:	3601      	adds	r6, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8a:	4798      	blx	r3
 8004d8c:	3601      	adds	r6, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	08005d20 	.word	0x08005d20
 8004d94:	08005d20 	.word	0x08005d20
 8004d98:	08005d20 	.word	0x08005d20
 8004d9c:	08005d24 	.word	0x08005d24

08004da0 <sinf>:
 8004da0:	ee10 3a10 	vmov	r3, s0
 8004da4:	b507      	push	{r0, r1, r2, lr}
 8004da6:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <sinf+0x84>)
 8004da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dac:	4293      	cmp	r3, r2
 8004dae:	dc07      	bgt.n	8004dc0 <sinf+0x20>
 8004db0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004e28 <sinf+0x88>
 8004db4:	2000      	movs	r0, #0
 8004db6:	b003      	add	sp, #12
 8004db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dbc:	f000 b894 	b.w	8004ee8 <__kernel_sinf>
 8004dc0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004dc4:	db04      	blt.n	8004dd0 <sinf+0x30>
 8004dc6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004dca:	b003      	add	sp, #12
 8004dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dd0:	4668      	mov	r0, sp
 8004dd2:	f000 f8d1 	bl	8004f78 <__ieee754_rem_pio2f>
 8004dd6:	f000 0003 	and.w	r0, r0, #3
 8004dda:	2801      	cmp	r0, #1
 8004ddc:	d00a      	beq.n	8004df4 <sinf+0x54>
 8004dde:	2802      	cmp	r0, #2
 8004de0:	d00f      	beq.n	8004e02 <sinf+0x62>
 8004de2:	b9c0      	cbnz	r0, 8004e16 <sinf+0x76>
 8004de4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004de8:	ed9d 0a00 	vldr	s0, [sp]
 8004dec:	2001      	movs	r0, #1
 8004dee:	f000 f87b 	bl	8004ee8 <__kernel_sinf>
 8004df2:	e7ea      	b.n	8004dca <sinf+0x2a>
 8004df4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004df8:	ed9d 0a00 	vldr	s0, [sp]
 8004dfc:	f000 f816 	bl	8004e2c <__kernel_cosf>
 8004e00:	e7e3      	b.n	8004dca <sinf+0x2a>
 8004e02:	eddd 0a01 	vldr	s1, [sp, #4]
 8004e06:	ed9d 0a00 	vldr	s0, [sp]
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	f000 f86c 	bl	8004ee8 <__kernel_sinf>
 8004e10:	eeb1 0a40 	vneg.f32	s0, s0
 8004e14:	e7d9      	b.n	8004dca <sinf+0x2a>
 8004e16:	eddd 0a01 	vldr	s1, [sp, #4]
 8004e1a:	ed9d 0a00 	vldr	s0, [sp]
 8004e1e:	f000 f805 	bl	8004e2c <__kernel_cosf>
 8004e22:	e7f5      	b.n	8004e10 <sinf+0x70>
 8004e24:	3f490fd8 	.word	0x3f490fd8
 8004e28:	00000000 	.word	0x00000000

08004e2c <__kernel_cosf>:
 8004e2c:	ee10 3a10 	vmov	r3, s0
 8004e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e34:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3c:	da05      	bge.n	8004e4a <__kernel_cosf+0x1e>
 8004e3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004e42:	ee17 2a90 	vmov	r2, s15
 8004e46:	2a00      	cmp	r2, #0
 8004e48:	d03b      	beq.n	8004ec2 <__kernel_cosf+0x96>
 8004e4a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004e4e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004ec8 <__kernel_cosf+0x9c>
 8004e52:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8004ecc <__kernel_cosf+0xa0>
 8004e56:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <__kernel_cosf+0xa4>)
 8004e58:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8004ed4 <__kernel_cosf+0xa8>
 8004e62:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004e66:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8004ed8 <__kernel_cosf+0xac>
 8004e6a:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004e6e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8004edc <__kernel_cosf+0xb0>
 8004e72:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004e76:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8004ee0 <__kernel_cosf+0xb4>
 8004e7a:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004e7e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8004e82:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004e86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004e8a:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	dc04      	bgt.n	8004e9e <__kernel_cosf+0x72>
 8004e94:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004e98:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8004e9c:	4770      	bx	lr
 8004e9e:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <__kernel_cosf+0xb8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	bfda      	itte	le
 8004ea4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	ee07 3a10 	vmovle	s14, r3
 8004eac:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8004eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004eb4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8004eb8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004ebc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004ec0:	4770      	bx	lr
 8004ec2:	eeb0 0a66 	vmov.f32	s0, s13
 8004ec6:	4770      	bx	lr
 8004ec8:	ad47d74e 	.word	0xad47d74e
 8004ecc:	310f74f6 	.word	0x310f74f6
 8004ed0:	3e999999 	.word	0x3e999999
 8004ed4:	b493f27c 	.word	0xb493f27c
 8004ed8:	37d00d01 	.word	0x37d00d01
 8004edc:	bab60b61 	.word	0xbab60b61
 8004ee0:	3d2aaaab 	.word	0x3d2aaaab
 8004ee4:	3f480000 	.word	0x3f480000

08004ee8 <__kernel_sinf>:
 8004ee8:	ee10 3a10 	vmov	r3, s0
 8004eec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ef0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004ef4:	da04      	bge.n	8004f00 <__kernel_sinf+0x18>
 8004ef6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004efa:	ee17 3a90 	vmov	r3, s15
 8004efe:	b35b      	cbz	r3, 8004f58 <__kernel_sinf+0x70>
 8004f00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004f04:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004f5c <__kernel_sinf+0x74>
 8004f08:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004f60 <__kernel_sinf+0x78>
 8004f0c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004f10:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004f64 <__kernel_sinf+0x7c>
 8004f14:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004f18:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004f68 <__kernel_sinf+0x80>
 8004f1c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004f20:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004f6c <__kernel_sinf+0x84>
 8004f24:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004f28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004f2c:	b930      	cbnz	r0, 8004f3c <__kernel_sinf+0x54>
 8004f2e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004f70 <__kernel_sinf+0x88>
 8004f32:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004f36:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004f3a:	4770      	bx	lr
 8004f3c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004f40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004f44:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004f48:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004f4c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004f74 <__kernel_sinf+0x8c>
 8004f50:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004f54:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	2f2ec9d3 	.word	0x2f2ec9d3
 8004f60:	b2d72f34 	.word	0xb2d72f34
 8004f64:	3638ef1b 	.word	0x3638ef1b
 8004f68:	b9500d01 	.word	0xb9500d01
 8004f6c:	3c088889 	.word	0x3c088889
 8004f70:	be2aaaab 	.word	0xbe2aaaab
 8004f74:	3e2aaaab 	.word	0x3e2aaaab

08004f78 <__ieee754_rem_pio2f>:
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	ee10 6a10 	vmov	r6, s0
 8004f7e:	4b86      	ldr	r3, [pc, #536]	; (8005198 <__ieee754_rem_pio2f+0x220>)
 8004f80:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004f84:	429d      	cmp	r5, r3
 8004f86:	b087      	sub	sp, #28
 8004f88:	4604      	mov	r4, r0
 8004f8a:	dc05      	bgt.n	8004f98 <__ieee754_rem_pio2f+0x20>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	ed80 0a00 	vstr	s0, [r0]
 8004f92:	6043      	str	r3, [r0, #4]
 8004f94:	2000      	movs	r0, #0
 8004f96:	e020      	b.n	8004fda <__ieee754_rem_pio2f+0x62>
 8004f98:	4b80      	ldr	r3, [pc, #512]	; (800519c <__ieee754_rem_pio2f+0x224>)
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	dc38      	bgt.n	8005010 <__ieee754_rem_pio2f+0x98>
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80051a0 <__ieee754_rem_pio2f+0x228>
 8004fa4:	4b7f      	ldr	r3, [pc, #508]	; (80051a4 <__ieee754_rem_pio2f+0x22c>)
 8004fa6:	f025 050f 	bic.w	r5, r5, #15
 8004faa:	dd18      	ble.n	8004fde <__ieee754_rem_pio2f+0x66>
 8004fac:	429d      	cmp	r5, r3
 8004fae:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004fb2:	bf09      	itett	eq
 8004fb4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80051a8 <__ieee754_rem_pio2f+0x230>
 8004fb8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80051ac <__ieee754_rem_pio2f+0x234>
 8004fbc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004fc0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80051b0 <__ieee754_rem_pio2f+0x238>
 8004fc4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004fc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004fcc:	edc0 6a00 	vstr	s13, [r0]
 8004fd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fd4:	edc0 7a01 	vstr	s15, [r0, #4]
 8004fd8:	2001      	movs	r0, #1
 8004fda:	b007      	add	sp, #28
 8004fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fde:	429d      	cmp	r5, r3
 8004fe0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004fe4:	bf09      	itett	eq
 8004fe6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80051a8 <__ieee754_rem_pio2f+0x230>
 8004fea:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80051ac <__ieee754_rem_pio2f+0x234>
 8004fee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004ff2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80051b0 <__ieee754_rem_pio2f+0x238>
 8004ff6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004ffa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004ffe:	edc0 6a00 	vstr	s13, [r0]
 8005002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005006:	edc0 7a01 	vstr	s15, [r0, #4]
 800500a:	f04f 30ff 	mov.w	r0, #4294967295
 800500e:	e7e4      	b.n	8004fda <__ieee754_rem_pio2f+0x62>
 8005010:	4b68      	ldr	r3, [pc, #416]	; (80051b4 <__ieee754_rem_pio2f+0x23c>)
 8005012:	429d      	cmp	r5, r3
 8005014:	dc71      	bgt.n	80050fa <__ieee754_rem_pio2f+0x182>
 8005016:	f000 f8db 	bl	80051d0 <fabsf>
 800501a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80051b8 <__ieee754_rem_pio2f+0x240>
 800501e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005022:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800502a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800502e:	ee17 0a90 	vmov	r0, s15
 8005032:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80051a0 <__ieee754_rem_pio2f+0x228>
 8005036:	eea7 0a67 	vfms.f32	s0, s14, s15
 800503a:	281f      	cmp	r0, #31
 800503c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80051ac <__ieee754_rem_pio2f+0x234>
 8005040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005044:	eeb1 6a47 	vneg.f32	s12, s14
 8005048:	ee70 6a67 	vsub.f32	s13, s0, s15
 800504c:	ee16 2a90 	vmov	r2, s13
 8005050:	dc1c      	bgt.n	800508c <__ieee754_rem_pio2f+0x114>
 8005052:	495a      	ldr	r1, [pc, #360]	; (80051bc <__ieee754_rem_pio2f+0x244>)
 8005054:	1e47      	subs	r7, r0, #1
 8005056:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800505a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800505e:	428b      	cmp	r3, r1
 8005060:	d014      	beq.n	800508c <__ieee754_rem_pio2f+0x114>
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	ed94 7a00 	vldr	s14, [r4]
 8005068:	ee30 0a47 	vsub.f32	s0, s0, s14
 800506c:	2e00      	cmp	r6, #0
 800506e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005072:	ed84 0a01 	vstr	s0, [r4, #4]
 8005076:	dab0      	bge.n	8004fda <__ieee754_rem_pio2f+0x62>
 8005078:	eeb1 7a47 	vneg.f32	s14, s14
 800507c:	eeb1 0a40 	vneg.f32	s0, s0
 8005080:	ed84 7a00 	vstr	s14, [r4]
 8005084:	ed84 0a01 	vstr	s0, [r4, #4]
 8005088:	4240      	negs	r0, r0
 800508a:	e7a6      	b.n	8004fda <__ieee754_rem_pio2f+0x62>
 800508c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005090:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8005094:	2908      	cmp	r1, #8
 8005096:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800509a:	dde2      	ble.n	8005062 <__ieee754_rem_pio2f+0xea>
 800509c:	eddf 5a42 	vldr	s11, [pc, #264]	; 80051a8 <__ieee754_rem_pio2f+0x230>
 80050a0:	eef0 6a40 	vmov.f32	s13, s0
 80050a4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80050a8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80050ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 80050b0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80051b0 <__ieee754_rem_pio2f+0x238>
 80050b4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80050b8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80050bc:	ee15 2a90 	vmov	r2, s11
 80050c0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80050c4:	1a5b      	subs	r3, r3, r1
 80050c6:	2b19      	cmp	r3, #25
 80050c8:	dc04      	bgt.n	80050d4 <__ieee754_rem_pio2f+0x15c>
 80050ca:	edc4 5a00 	vstr	s11, [r4]
 80050ce:	eeb0 0a66 	vmov.f32	s0, s13
 80050d2:	e7c7      	b.n	8005064 <__ieee754_rem_pio2f+0xec>
 80050d4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80051c0 <__ieee754_rem_pio2f+0x248>
 80050d8:	eeb0 0a66 	vmov.f32	s0, s13
 80050dc:	eea6 0a25 	vfma.f32	s0, s12, s11
 80050e0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80050e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80051c4 <__ieee754_rem_pio2f+0x24c>
 80050e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80050ec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80050f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80050f4:	ed84 7a00 	vstr	s14, [r4]
 80050f8:	e7b4      	b.n	8005064 <__ieee754_rem_pio2f+0xec>
 80050fa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80050fe:	db06      	blt.n	800510e <__ieee754_rem_pio2f+0x196>
 8005100:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005104:	edc0 7a01 	vstr	s15, [r0, #4]
 8005108:	edc0 7a00 	vstr	s15, [r0]
 800510c:	e742      	b.n	8004f94 <__ieee754_rem_pio2f+0x1c>
 800510e:	15ea      	asrs	r2, r5, #23
 8005110:	3a86      	subs	r2, #134	; 0x86
 8005112:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800511e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80051c8 <__ieee754_rem_pio2f+0x250>
 8005122:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800512a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800512e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005132:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005136:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800513a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800513e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005142:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005146:	eef5 7a40 	vcmp.f32	s15, #0.0
 800514a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514e:	edcd 7a05 	vstr	s15, [sp, #20]
 8005152:	d11e      	bne.n	8005192 <__ieee754_rem_pio2f+0x21a>
 8005154:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	bf14      	ite	ne
 800515e:	2302      	movne	r3, #2
 8005160:	2301      	moveq	r3, #1
 8005162:	491a      	ldr	r1, [pc, #104]	; (80051cc <__ieee754_rem_pio2f+0x254>)
 8005164:	9101      	str	r1, [sp, #4]
 8005166:	2102      	movs	r1, #2
 8005168:	9100      	str	r1, [sp, #0]
 800516a:	a803      	add	r0, sp, #12
 800516c:	4621      	mov	r1, r4
 800516e:	f000 f837 	bl	80051e0 <__kernel_rem_pio2f>
 8005172:	2e00      	cmp	r6, #0
 8005174:	f6bf af31 	bge.w	8004fda <__ieee754_rem_pio2f+0x62>
 8005178:	edd4 7a00 	vldr	s15, [r4]
 800517c:	eef1 7a67 	vneg.f32	s15, s15
 8005180:	edc4 7a00 	vstr	s15, [r4]
 8005184:	edd4 7a01 	vldr	s15, [r4, #4]
 8005188:	eef1 7a67 	vneg.f32	s15, s15
 800518c:	edc4 7a01 	vstr	s15, [r4, #4]
 8005190:	e77a      	b.n	8005088 <__ieee754_rem_pio2f+0x110>
 8005192:	2303      	movs	r3, #3
 8005194:	e7e5      	b.n	8005162 <__ieee754_rem_pio2f+0x1ea>
 8005196:	bf00      	nop
 8005198:	3f490fd8 	.word	0x3f490fd8
 800519c:	4016cbe3 	.word	0x4016cbe3
 80051a0:	3fc90f80 	.word	0x3fc90f80
 80051a4:	3fc90fd0 	.word	0x3fc90fd0
 80051a8:	37354400 	.word	0x37354400
 80051ac:	37354443 	.word	0x37354443
 80051b0:	2e85a308 	.word	0x2e85a308
 80051b4:	43490f80 	.word	0x43490f80
 80051b8:	3f22f984 	.word	0x3f22f984
 80051bc:	08005948 	.word	0x08005948
 80051c0:	2e85a300 	.word	0x2e85a300
 80051c4:	248d3132 	.word	0x248d3132
 80051c8:	43800000 	.word	0x43800000
 80051cc:	080059c8 	.word	0x080059c8

080051d0 <fabsf>:
 80051d0:	ee10 3a10 	vmov	r3, s0
 80051d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051d8:	ee00 3a10 	vmov	s0, r3
 80051dc:	4770      	bx	lr
	...

080051e0 <__kernel_rem_pio2f>:
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	ed2d 8b04 	vpush	{d8-d9}
 80051e8:	b0d9      	sub	sp, #356	; 0x164
 80051ea:	4688      	mov	r8, r1
 80051ec:	9002      	str	r0, [sp, #8]
 80051ee:	49b8      	ldr	r1, [pc, #736]	; (80054d0 <__kernel_rem_pio2f+0x2f0>)
 80051f0:	9866      	ldr	r0, [sp, #408]	; 0x198
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80051f8:	9901      	ldr	r1, [sp, #4]
 80051fa:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 80051fc:	f101 3bff 	add.w	fp, r1, #4294967295
 8005200:	1d11      	adds	r1, r2, #4
 8005202:	db25      	blt.n	8005250 <__kernel_rem_pio2f+0x70>
 8005204:	1ed0      	subs	r0, r2, #3
 8005206:	bf48      	it	mi
 8005208:	1d10      	addmi	r0, r2, #4
 800520a:	10c0      	asrs	r0, r0, #3
 800520c:	1c45      	adds	r5, r0, #1
 800520e:	00e9      	lsls	r1, r5, #3
 8005210:	eba0 070b 	sub.w	r7, r0, fp
 8005214:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80054e0 <__kernel_rem_pio2f+0x300>
 8005218:	9103      	str	r1, [sp, #12]
 800521a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800521e:	eb0a 0c0b 	add.w	ip, sl, fp
 8005222:	ae1c      	add	r6, sp, #112	; 0x70
 8005224:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8005228:	2400      	movs	r4, #0
 800522a:	4564      	cmp	r4, ip
 800522c:	dd12      	ble.n	8005254 <__kernel_rem_pio2f+0x74>
 800522e:	9901      	ldr	r1, [sp, #4]
 8005230:	ac1c      	add	r4, sp, #112	; 0x70
 8005232:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005236:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800523a:	f04f 0c00 	mov.w	ip, #0
 800523e:	45d4      	cmp	ip, sl
 8005240:	dc27      	bgt.n	8005292 <__kernel_rem_pio2f+0xb2>
 8005242:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005246:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80054e0 <__kernel_rem_pio2f+0x300>
 800524a:	4627      	mov	r7, r4
 800524c:	2600      	movs	r6, #0
 800524e:	e016      	b.n	800527e <__kernel_rem_pio2f+0x9e>
 8005250:	2000      	movs	r0, #0
 8005252:	e7db      	b.n	800520c <__kernel_rem_pio2f+0x2c>
 8005254:	42e7      	cmn	r7, r4
 8005256:	bf5d      	ittte	pl
 8005258:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800525c:	ee07 1a90 	vmovpl	s15, r1
 8005260:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005264:	eef0 7a47 	vmovmi.f32	s15, s14
 8005268:	ece6 7a01 	vstmia	r6!, {s15}
 800526c:	3401      	adds	r4, #1
 800526e:	e7dc      	b.n	800522a <__kernel_rem_pio2f+0x4a>
 8005270:	ecfe 6a01 	vldmia	lr!, {s13}
 8005274:	ed97 7a00 	vldr	s14, [r7]
 8005278:	eee6 7a87 	vfma.f32	s15, s13, s14
 800527c:	3601      	adds	r6, #1
 800527e:	455e      	cmp	r6, fp
 8005280:	f1a7 0704 	sub.w	r7, r7, #4
 8005284:	ddf4      	ble.n	8005270 <__kernel_rem_pio2f+0x90>
 8005286:	ece9 7a01 	vstmia	r9!, {s15}
 800528a:	f10c 0c01 	add.w	ip, ip, #1
 800528e:	3404      	adds	r4, #4
 8005290:	e7d5      	b.n	800523e <__kernel_rem_pio2f+0x5e>
 8005292:	a908      	add	r1, sp, #32
 8005294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005298:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800529c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80054dc <__kernel_rem_pio2f+0x2fc>
 80052a0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80054d8 <__kernel_rem_pio2f+0x2f8>
 80052a4:	9105      	str	r1, [sp, #20]
 80052a6:	9304      	str	r3, [sp, #16]
 80052a8:	4656      	mov	r6, sl
 80052aa:	00b3      	lsls	r3, r6, #2
 80052ac:	9306      	str	r3, [sp, #24]
 80052ae:	ab58      	add	r3, sp, #352	; 0x160
 80052b0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80052b4:	ac08      	add	r4, sp, #32
 80052b6:	ab44      	add	r3, sp, #272	; 0x110
 80052b8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80052bc:	46a4      	mov	ip, r4
 80052be:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80052c2:	4637      	mov	r7, r6
 80052c4:	2f00      	cmp	r7, #0
 80052c6:	f1a0 0004 	sub.w	r0, r0, #4
 80052ca:	dc4a      	bgt.n	8005362 <__kernel_rem_pio2f+0x182>
 80052cc:	4628      	mov	r0, r5
 80052ce:	9207      	str	r2, [sp, #28]
 80052d0:	f000 f9f8 	bl	80056c4 <scalbnf>
 80052d4:	eeb0 8a40 	vmov.f32	s16, s0
 80052d8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80052dc:	ee28 0a00 	vmul.f32	s0, s16, s0
 80052e0:	f000 fa56 	bl	8005790 <floorf>
 80052e4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80052e8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	9a07      	ldr	r2, [sp, #28]
 80052f0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80052f4:	ee17 9a90 	vmov	r9, s15
 80052f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052fc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005300:	dd41      	ble.n	8005386 <__kernel_rem_pio2f+0x1a6>
 8005302:	f106 3cff 	add.w	ip, r6, #4294967295
 8005306:	ab08      	add	r3, sp, #32
 8005308:	f1c5 0e08 	rsb	lr, r5, #8
 800530c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8005310:	fa47 f00e 	asr.w	r0, r7, lr
 8005314:	4481      	add	r9, r0
 8005316:	fa00 f00e 	lsl.w	r0, r0, lr
 800531a:	1a3f      	subs	r7, r7, r0
 800531c:	f1c5 0007 	rsb	r0, r5, #7
 8005320:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8005324:	4107      	asrs	r7, r0
 8005326:	2f00      	cmp	r7, #0
 8005328:	dd3c      	ble.n	80053a4 <__kernel_rem_pio2f+0x1c4>
 800532a:	f04f 0e00 	mov.w	lr, #0
 800532e:	f109 0901 	add.w	r9, r9, #1
 8005332:	4671      	mov	r1, lr
 8005334:	4576      	cmp	r6, lr
 8005336:	dc67      	bgt.n	8005408 <__kernel_rem_pio2f+0x228>
 8005338:	2d00      	cmp	r5, #0
 800533a:	dd03      	ble.n	8005344 <__kernel_rem_pio2f+0x164>
 800533c:	2d01      	cmp	r5, #1
 800533e:	d074      	beq.n	800542a <__kernel_rem_pio2f+0x24a>
 8005340:	2d02      	cmp	r5, #2
 8005342:	d07b      	beq.n	800543c <__kernel_rem_pio2f+0x25c>
 8005344:	2f02      	cmp	r7, #2
 8005346:	d12d      	bne.n	80053a4 <__kernel_rem_pio2f+0x1c4>
 8005348:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800534c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005350:	b341      	cbz	r1, 80053a4 <__kernel_rem_pio2f+0x1c4>
 8005352:	4628      	mov	r0, r5
 8005354:	9207      	str	r2, [sp, #28]
 8005356:	f000 f9b5 	bl	80056c4 <scalbnf>
 800535a:	9a07      	ldr	r2, [sp, #28]
 800535c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005360:	e020      	b.n	80053a4 <__kernel_rem_pio2f+0x1c4>
 8005362:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005366:	3f01      	subs	r7, #1
 8005368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800536c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005370:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005374:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005378:	ecac 0a01 	vstmia	ip!, {s0}
 800537c:	ed90 0a00 	vldr	s0, [r0]
 8005380:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005384:	e79e      	b.n	80052c4 <__kernel_rem_pio2f+0xe4>
 8005386:	d105      	bne.n	8005394 <__kernel_rem_pio2f+0x1b4>
 8005388:	1e70      	subs	r0, r6, #1
 800538a:	ab08      	add	r3, sp, #32
 800538c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8005390:	11ff      	asrs	r7, r7, #7
 8005392:	e7c8      	b.n	8005326 <__kernel_rem_pio2f+0x146>
 8005394:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005398:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	da30      	bge.n	8005404 <__kernel_rem_pio2f+0x224>
 80053a2:	2700      	movs	r7, #0
 80053a4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80053a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ac:	f040 809a 	bne.w	80054e4 <__kernel_rem_pio2f+0x304>
 80053b0:	1e74      	subs	r4, r6, #1
 80053b2:	46a4      	mov	ip, r4
 80053b4:	2100      	movs	r1, #0
 80053b6:	45d4      	cmp	ip, sl
 80053b8:	da47      	bge.n	800544a <__kernel_rem_pio2f+0x26a>
 80053ba:	2900      	cmp	r1, #0
 80053bc:	d063      	beq.n	8005486 <__kernel_rem_pio2f+0x2a6>
 80053be:	ab08      	add	r3, sp, #32
 80053c0:	3d08      	subs	r5, #8
 80053c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d07f      	beq.n	80054ca <__kernel_rem_pio2f+0x2ea>
 80053ca:	4628      	mov	r0, r5
 80053cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80053d0:	f000 f978 	bl	80056c4 <scalbnf>
 80053d4:	1c63      	adds	r3, r4, #1
 80053d6:	aa44      	add	r2, sp, #272	; 0x110
 80053d8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80054dc <__kernel_rem_pio2f+0x2fc>
 80053dc:	0099      	lsls	r1, r3, #2
 80053de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80053e2:	4623      	mov	r3, r4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f280 80ad 	bge.w	8005544 <__kernel_rem_pio2f+0x364>
 80053ea:	4623      	mov	r3, r4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f2c0 80cb 	blt.w	8005588 <__kernel_rem_pio2f+0x3a8>
 80053f2:	aa44      	add	r2, sp, #272	; 0x110
 80053f4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80053f8:	4e36      	ldr	r6, [pc, #216]	; (80054d4 <__kernel_rem_pio2f+0x2f4>)
 80053fa:	eddf 7a39 	vldr	s15, [pc, #228]	; 80054e0 <__kernel_rem_pio2f+0x300>
 80053fe:	2000      	movs	r0, #0
 8005400:	1ae2      	subs	r2, r4, r3
 8005402:	e0b6      	b.n	8005572 <__kernel_rem_pio2f+0x392>
 8005404:	2702      	movs	r7, #2
 8005406:	e790      	b.n	800532a <__kernel_rem_pio2f+0x14a>
 8005408:	6820      	ldr	r0, [r4, #0]
 800540a:	b949      	cbnz	r1, 8005420 <__kernel_rem_pio2f+0x240>
 800540c:	b118      	cbz	r0, 8005416 <__kernel_rem_pio2f+0x236>
 800540e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005412:	6020      	str	r0, [r4, #0]
 8005414:	2001      	movs	r0, #1
 8005416:	f10e 0e01 	add.w	lr, lr, #1
 800541a:	3404      	adds	r4, #4
 800541c:	4601      	mov	r1, r0
 800541e:	e789      	b.n	8005334 <__kernel_rem_pio2f+0x154>
 8005420:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8005424:	6020      	str	r0, [r4, #0]
 8005426:	4608      	mov	r0, r1
 8005428:	e7f5      	b.n	8005416 <__kernel_rem_pio2f+0x236>
 800542a:	1e74      	subs	r4, r6, #1
 800542c:	ab08      	add	r3, sp, #32
 800542e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005432:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005436:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800543a:	e783      	b.n	8005344 <__kernel_rem_pio2f+0x164>
 800543c:	1e74      	subs	r4, r6, #1
 800543e:	ab08      	add	r3, sp, #32
 8005440:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005444:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005448:	e7f5      	b.n	8005436 <__kernel_rem_pio2f+0x256>
 800544a:	ab08      	add	r3, sp, #32
 800544c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8005450:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005454:	4301      	orrs	r1, r0
 8005456:	e7ae      	b.n	80053b6 <__kernel_rem_pio2f+0x1d6>
 8005458:	3001      	adds	r0, #1
 800545a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800545e:	2f00      	cmp	r7, #0
 8005460:	d0fa      	beq.n	8005458 <__kernel_rem_pio2f+0x278>
 8005462:	9b06      	ldr	r3, [sp, #24]
 8005464:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005468:	eb0d 0403 	add.w	r4, sp, r3
 800546c:	9b01      	ldr	r3, [sp, #4]
 800546e:	18f7      	adds	r7, r6, r3
 8005470:	ab1c      	add	r3, sp, #112	; 0x70
 8005472:	f106 0c01 	add.w	ip, r6, #1
 8005476:	3c4c      	subs	r4, #76	; 0x4c
 8005478:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800547c:	4430      	add	r0, r6
 800547e:	4560      	cmp	r0, ip
 8005480:	da04      	bge.n	800548c <__kernel_rem_pio2f+0x2ac>
 8005482:	4606      	mov	r6, r0
 8005484:	e711      	b.n	80052aa <__kernel_rem_pio2f+0xca>
 8005486:	9c05      	ldr	r4, [sp, #20]
 8005488:	2001      	movs	r0, #1
 800548a:	e7e6      	b.n	800545a <__kernel_rem_pio2f+0x27a>
 800548c:	9b04      	ldr	r3, [sp, #16]
 800548e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005492:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005496:	9306      	str	r3, [sp, #24]
 8005498:	ee07 3a90 	vmov	s15, r3
 800549c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a0:	2600      	movs	r6, #0
 80054a2:	ece7 7a01 	vstmia	r7!, {s15}
 80054a6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80054e0 <__kernel_rem_pio2f+0x300>
 80054aa:	46b9      	mov	r9, r7
 80054ac:	455e      	cmp	r6, fp
 80054ae:	dd04      	ble.n	80054ba <__kernel_rem_pio2f+0x2da>
 80054b0:	ece4 7a01 	vstmia	r4!, {s15}
 80054b4:	f10c 0c01 	add.w	ip, ip, #1
 80054b8:	e7e1      	b.n	800547e <__kernel_rem_pio2f+0x29e>
 80054ba:	ecfe 6a01 	vldmia	lr!, {s13}
 80054be:	ed39 7a01 	vldmdb	r9!, {s14}
 80054c2:	3601      	adds	r6, #1
 80054c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80054c8:	e7f0      	b.n	80054ac <__kernel_rem_pio2f+0x2cc>
 80054ca:	3c01      	subs	r4, #1
 80054cc:	e777      	b.n	80053be <__kernel_rem_pio2f+0x1de>
 80054ce:	bf00      	nop
 80054d0:	08005d0c 	.word	0x08005d0c
 80054d4:	08005ce0 	.word	0x08005ce0
 80054d8:	43800000 	.word	0x43800000
 80054dc:	3b800000 	.word	0x3b800000
 80054e0:	00000000 	.word	0x00000000
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	eeb0 0a48 	vmov.f32	s0, s16
 80054ea:	1a98      	subs	r0, r3, r2
 80054ec:	f000 f8ea 	bl	80056c4 <scalbnf>
 80054f0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80054d8 <__kernel_rem_pio2f+0x2f8>
 80054f4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80054f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fc:	db19      	blt.n	8005532 <__kernel_rem_pio2f+0x352>
 80054fe:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80054dc <__kernel_rem_pio2f+0x2fc>
 8005502:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005506:	aa08      	add	r2, sp, #32
 8005508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800550c:	1c74      	adds	r4, r6, #1
 800550e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005512:	3508      	adds	r5, #8
 8005514:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800551c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005520:	ee10 3a10 	vmov	r3, s0
 8005524:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005528:	ee17 3a90 	vmov	r3, s15
 800552c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005530:	e74b      	b.n	80053ca <__kernel_rem_pio2f+0x1ea>
 8005532:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005536:	aa08      	add	r2, sp, #32
 8005538:	ee10 3a10 	vmov	r3, s0
 800553c:	4634      	mov	r4, r6
 800553e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005542:	e742      	b.n	80053ca <__kernel_rem_pio2f+0x1ea>
 8005544:	a808      	add	r0, sp, #32
 8005546:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800554a:	9001      	str	r0, [sp, #4]
 800554c:	ee07 0a90 	vmov	s15, r0
 8005550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005554:	3b01      	subs	r3, #1
 8005556:	ee67 7a80 	vmul.f32	s15, s15, s0
 800555a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800555e:	ed62 7a01 	vstmdb	r2!, {s15}
 8005562:	e73f      	b.n	80053e4 <__kernel_rem_pio2f+0x204>
 8005564:	ecf6 6a01 	vldmia	r6!, {s13}
 8005568:	ecb5 7a01 	vldmia	r5!, {s14}
 800556c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005570:	3001      	adds	r0, #1
 8005572:	4550      	cmp	r0, sl
 8005574:	dc01      	bgt.n	800557a <__kernel_rem_pio2f+0x39a>
 8005576:	4290      	cmp	r0, r2
 8005578:	ddf4      	ble.n	8005564 <__kernel_rem_pio2f+0x384>
 800557a:	a858      	add	r0, sp, #352	; 0x160
 800557c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005580:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8005584:	3b01      	subs	r3, #1
 8005586:	e731      	b.n	80053ec <__kernel_rem_pio2f+0x20c>
 8005588:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800558a:	2b02      	cmp	r3, #2
 800558c:	dc09      	bgt.n	80055a2 <__kernel_rem_pio2f+0x3c2>
 800558e:	2b00      	cmp	r3, #0
 8005590:	dc2b      	bgt.n	80055ea <__kernel_rem_pio2f+0x40a>
 8005592:	d044      	beq.n	800561e <__kernel_rem_pio2f+0x43e>
 8005594:	f009 0007 	and.w	r0, r9, #7
 8005598:	b059      	add	sp, #356	; 0x164
 800559a:	ecbd 8b04 	vpop	{d8-d9}
 800559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d1f5      	bne.n	8005594 <__kernel_rem_pio2f+0x3b4>
 80055a8:	aa30      	add	r2, sp, #192	; 0xc0
 80055aa:	1f0b      	subs	r3, r1, #4
 80055ac:	4413      	add	r3, r2
 80055ae:	461a      	mov	r2, r3
 80055b0:	4620      	mov	r0, r4
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f1a2 0204 	sub.w	r2, r2, #4
 80055b8:	dc52      	bgt.n	8005660 <__kernel_rem_pio2f+0x480>
 80055ba:	4622      	mov	r2, r4
 80055bc:	2a01      	cmp	r2, #1
 80055be:	f1a3 0304 	sub.w	r3, r3, #4
 80055c2:	dc5d      	bgt.n	8005680 <__kernel_rem_pio2f+0x4a0>
 80055c4:	ab30      	add	r3, sp, #192	; 0xc0
 80055c6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80054e0 <__kernel_rem_pio2f+0x300>
 80055ca:	440b      	add	r3, r1
 80055cc:	2c01      	cmp	r4, #1
 80055ce:	dc67      	bgt.n	80056a0 <__kernel_rem_pio2f+0x4c0>
 80055d0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80055d4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80055d8:	2f00      	cmp	r7, #0
 80055da:	d167      	bne.n	80056ac <__kernel_rem_pio2f+0x4cc>
 80055dc:	edc8 6a00 	vstr	s13, [r8]
 80055e0:	ed88 7a01 	vstr	s14, [r8, #4]
 80055e4:	edc8 7a02 	vstr	s15, [r8, #8]
 80055e8:	e7d4      	b.n	8005594 <__kernel_rem_pio2f+0x3b4>
 80055ea:	ab30      	add	r3, sp, #192	; 0xc0
 80055ec:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80054e0 <__kernel_rem_pio2f+0x300>
 80055f0:	440b      	add	r3, r1
 80055f2:	4622      	mov	r2, r4
 80055f4:	2a00      	cmp	r2, #0
 80055f6:	da24      	bge.n	8005642 <__kernel_rem_pio2f+0x462>
 80055f8:	b34f      	cbz	r7, 800564e <__kernel_rem_pio2f+0x46e>
 80055fa:	eef1 7a47 	vneg.f32	s15, s14
 80055fe:	edc8 7a00 	vstr	s15, [r8]
 8005602:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8005606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800560a:	aa31      	add	r2, sp, #196	; 0xc4
 800560c:	2301      	movs	r3, #1
 800560e:	429c      	cmp	r4, r3
 8005610:	da20      	bge.n	8005654 <__kernel_rem_pio2f+0x474>
 8005612:	b10f      	cbz	r7, 8005618 <__kernel_rem_pio2f+0x438>
 8005614:	eef1 7a67 	vneg.f32	s15, s15
 8005618:	edc8 7a01 	vstr	s15, [r8, #4]
 800561c:	e7ba      	b.n	8005594 <__kernel_rem_pio2f+0x3b4>
 800561e:	ab30      	add	r3, sp, #192	; 0xc0
 8005620:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80054e0 <__kernel_rem_pio2f+0x300>
 8005624:	440b      	add	r3, r1
 8005626:	2c00      	cmp	r4, #0
 8005628:	da05      	bge.n	8005636 <__kernel_rem_pio2f+0x456>
 800562a:	b10f      	cbz	r7, 8005630 <__kernel_rem_pio2f+0x450>
 800562c:	eef1 7a67 	vneg.f32	s15, s15
 8005630:	edc8 7a00 	vstr	s15, [r8]
 8005634:	e7ae      	b.n	8005594 <__kernel_rem_pio2f+0x3b4>
 8005636:	ed33 7a01 	vldmdb	r3!, {s14}
 800563a:	3c01      	subs	r4, #1
 800563c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005640:	e7f1      	b.n	8005626 <__kernel_rem_pio2f+0x446>
 8005642:	ed73 7a01 	vldmdb	r3!, {s15}
 8005646:	3a01      	subs	r2, #1
 8005648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800564c:	e7d2      	b.n	80055f4 <__kernel_rem_pio2f+0x414>
 800564e:	eef0 7a47 	vmov.f32	s15, s14
 8005652:	e7d4      	b.n	80055fe <__kernel_rem_pio2f+0x41e>
 8005654:	ecb2 7a01 	vldmia	r2!, {s14}
 8005658:	3301      	adds	r3, #1
 800565a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800565e:	e7d6      	b.n	800560e <__kernel_rem_pio2f+0x42e>
 8005660:	edd2 7a00 	vldr	s15, [r2]
 8005664:	edd2 6a01 	vldr	s13, [r2, #4]
 8005668:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800566c:	3801      	subs	r0, #1
 800566e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005672:	ed82 7a00 	vstr	s14, [r2]
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	edc2 7a01 	vstr	s15, [r2, #4]
 800567e:	e798      	b.n	80055b2 <__kernel_rem_pio2f+0x3d2>
 8005680:	edd3 7a00 	vldr	s15, [r3]
 8005684:	edd3 6a01 	vldr	s13, [r3, #4]
 8005688:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800568c:	3a01      	subs	r2, #1
 800568e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005692:	ed83 7a00 	vstr	s14, [r3]
 8005696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569a:	edc3 7a01 	vstr	s15, [r3, #4]
 800569e:	e78d      	b.n	80055bc <__kernel_rem_pio2f+0x3dc>
 80056a0:	ed33 7a01 	vldmdb	r3!, {s14}
 80056a4:	3c01      	subs	r4, #1
 80056a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056aa:	e78f      	b.n	80055cc <__kernel_rem_pio2f+0x3ec>
 80056ac:	eef1 6a66 	vneg.f32	s13, s13
 80056b0:	eeb1 7a47 	vneg.f32	s14, s14
 80056b4:	edc8 6a00 	vstr	s13, [r8]
 80056b8:	ed88 7a01 	vstr	s14, [r8, #4]
 80056bc:	eef1 7a67 	vneg.f32	s15, s15
 80056c0:	e790      	b.n	80055e4 <__kernel_rem_pio2f+0x404>
 80056c2:	bf00      	nop

080056c4 <scalbnf>:
 80056c4:	ee10 3a10 	vmov	r3, s0
 80056c8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80056cc:	d02b      	beq.n	8005726 <scalbnf+0x62>
 80056ce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80056d2:	d302      	bcc.n	80056da <scalbnf+0x16>
 80056d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80056d8:	4770      	bx	lr
 80056da:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80056de:	d123      	bne.n	8005728 <scalbnf+0x64>
 80056e0:	4b24      	ldr	r3, [pc, #144]	; (8005774 <scalbnf+0xb0>)
 80056e2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8005778 <scalbnf+0xb4>
 80056e6:	4298      	cmp	r0, r3
 80056e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80056ec:	db17      	blt.n	800571e <scalbnf+0x5a>
 80056ee:	ee10 3a10 	vmov	r3, s0
 80056f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80056f6:	3a19      	subs	r2, #25
 80056f8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80056fc:	4288      	cmp	r0, r1
 80056fe:	dd15      	ble.n	800572c <scalbnf+0x68>
 8005700:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800577c <scalbnf+0xb8>
 8005704:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005780 <scalbnf+0xbc>
 8005708:	ee10 3a10 	vmov	r3, s0
 800570c:	eeb0 7a67 	vmov.f32	s14, s15
 8005710:	2b00      	cmp	r3, #0
 8005712:	bfb8      	it	lt
 8005714:	eef0 7a66 	vmovlt.f32	s15, s13
 8005718:	ee27 0a87 	vmul.f32	s0, s15, s14
 800571c:	4770      	bx	lr
 800571e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005784 <scalbnf+0xc0>
 8005722:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005726:	4770      	bx	lr
 8005728:	0dd2      	lsrs	r2, r2, #23
 800572a:	e7e5      	b.n	80056f8 <scalbnf+0x34>
 800572c:	4410      	add	r0, r2
 800572e:	28fe      	cmp	r0, #254	; 0xfe
 8005730:	dce6      	bgt.n	8005700 <scalbnf+0x3c>
 8005732:	2800      	cmp	r0, #0
 8005734:	dd06      	ble.n	8005744 <scalbnf+0x80>
 8005736:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800573a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800573e:	ee00 3a10 	vmov	s0, r3
 8005742:	4770      	bx	lr
 8005744:	f110 0f16 	cmn.w	r0, #22
 8005748:	da09      	bge.n	800575e <scalbnf+0x9a>
 800574a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005784 <scalbnf+0xc0>
 800574e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005788 <scalbnf+0xc4>
 8005752:	ee10 3a10 	vmov	r3, s0
 8005756:	eeb0 7a67 	vmov.f32	s14, s15
 800575a:	2b00      	cmp	r3, #0
 800575c:	e7d9      	b.n	8005712 <scalbnf+0x4e>
 800575e:	3019      	adds	r0, #25
 8005760:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005764:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005768:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800578c <scalbnf+0xc8>
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	e7d7      	b.n	8005722 <scalbnf+0x5e>
 8005772:	bf00      	nop
 8005774:	ffff3cb0 	.word	0xffff3cb0
 8005778:	4c000000 	.word	0x4c000000
 800577c:	7149f2ca 	.word	0x7149f2ca
 8005780:	f149f2ca 	.word	0xf149f2ca
 8005784:	0da24260 	.word	0x0da24260
 8005788:	8da24260 	.word	0x8da24260
 800578c:	33000000 	.word	0x33000000

08005790 <floorf>:
 8005790:	ee10 3a10 	vmov	r3, s0
 8005794:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005798:	3a7f      	subs	r2, #127	; 0x7f
 800579a:	2a16      	cmp	r2, #22
 800579c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80057a0:	dc2a      	bgt.n	80057f8 <floorf+0x68>
 80057a2:	2a00      	cmp	r2, #0
 80057a4:	da11      	bge.n	80057ca <floorf+0x3a>
 80057a6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005808 <floorf+0x78>
 80057aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80057ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80057b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b6:	dd05      	ble.n	80057c4 <floorf+0x34>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da23      	bge.n	8005804 <floorf+0x74>
 80057bc:	4a13      	ldr	r2, [pc, #76]	; (800580c <floorf+0x7c>)
 80057be:	2900      	cmp	r1, #0
 80057c0:	bf18      	it	ne
 80057c2:	4613      	movne	r3, r2
 80057c4:	ee00 3a10 	vmov	s0, r3
 80057c8:	4770      	bx	lr
 80057ca:	4911      	ldr	r1, [pc, #68]	; (8005810 <floorf+0x80>)
 80057cc:	4111      	asrs	r1, r2
 80057ce:	420b      	tst	r3, r1
 80057d0:	d0fa      	beq.n	80057c8 <floorf+0x38>
 80057d2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005808 <floorf+0x78>
 80057d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80057da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80057de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e2:	ddef      	ble.n	80057c4 <floorf+0x34>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bfbe      	ittt	lt
 80057e8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80057ec:	fa40 f202 	asrlt.w	r2, r0, r2
 80057f0:	189b      	addlt	r3, r3, r2
 80057f2:	ea23 0301 	bic.w	r3, r3, r1
 80057f6:	e7e5      	b.n	80057c4 <floorf+0x34>
 80057f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80057fc:	d3e4      	bcc.n	80057c8 <floorf+0x38>
 80057fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005802:	4770      	bx	lr
 8005804:	2300      	movs	r3, #0
 8005806:	e7dd      	b.n	80057c4 <floorf+0x34>
 8005808:	7149f2ca 	.word	0x7149f2ca
 800580c:	bf800000 	.word	0xbf800000
 8005810:	007fffff 	.word	0x007fffff

08005814 <_init>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr

08005820 <_fini>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr
