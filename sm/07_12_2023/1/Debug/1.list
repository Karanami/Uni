
1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c34  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f18  08003f18  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f20  08003f20  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08003f84  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08003f84  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8ca  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021a5  00000000  00000000  0002c999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002eb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000726  00000000  00000000  0002f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c75  00000000  00000000  0002fbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dba3  00000000  00000000  00055853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7ed7  00000000  00000000  000633f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000265c  00000000  00000000  0014b2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014d92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003de4 	.word	0x08003de4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	08003de4 	.word	0x08003de4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_DAC_Init+0x4c>)
 8000514:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <MX_DAC_Init+0x50>)
 8000516:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <MX_DAC_Init+0x4c>)
 800051a:	f000 fcee 	bl	8000efa <HAL_DAC_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000524:	f000 fa4a 	bl	80009bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000528:	2300      	movs	r3, #0
 800052a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <MX_DAC_Init+0x4c>)
 8000538:	f000 fd78 	bl	800102c <HAL_DAC_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000542:	f000 fa3b 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000078 	.word	0x20000078
 8000554:	40007400 	.word	0x40007400

08000558 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a15      	ldr	r2, [pc, #84]	; (80005cc <HAL_DAC_MspInit+0x74>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d123      	bne.n	80005c2 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <HAL_DAC_MspInit+0x78>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <HAL_DAC_MspInit+0x78>)
 8000580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000584:	6413      	str	r3, [r2, #64]	; 0x40
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <HAL_DAC_MspInit+0x78>)
 8000588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_DAC_MspInit+0x78>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_DAC_MspInit+0x78>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_DAC_MspInit+0x78>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005aa:	2310      	movs	r3, #16
 80005ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ae:	2303      	movs	r3, #3
 80005b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <HAL_DAC_MspInit+0x7c>)
 80005be:	f000 fe17 	bl	80011f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	; 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40007400 	.word	0x40007400
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000

080005d8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b77      	ldr	r3, [pc, #476]	; (80007cc <MX_GPIO_Init+0x1f4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a76      	ldr	r2, [pc, #472]	; (80007cc <MX_GPIO_Init+0x1f4>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b74      	ldr	r3, [pc, #464]	; (80007cc <MX_GPIO_Init+0x1f4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b71      	ldr	r3, [pc, #452]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a70      	ldr	r2, [pc, #448]	; (80007cc <MX_GPIO_Init+0x1f4>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b6e      	ldr	r3, [pc, #440]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b6b      	ldr	r3, [pc, #428]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a6a      	ldr	r2, [pc, #424]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b68      	ldr	r3, [pc, #416]	; (80007cc <MX_GPIO_Init+0x1f4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b65      	ldr	r3, [pc, #404]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a64      	ldr	r2, [pc, #400]	; (80007cc <MX_GPIO_Init+0x1f4>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b62      	ldr	r3, [pc, #392]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b5f      	ldr	r3, [pc, #380]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a5e      	ldr	r2, [pc, #376]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b5c      	ldr	r3, [pc, #368]	; (80007cc <MX_GPIO_Init+0x1f4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	4b59      	ldr	r3, [pc, #356]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a58      	ldr	r2, [pc, #352]	; (80007cc <MX_GPIO_Init+0x1f4>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b56      	ldr	r3, [pc, #344]	; (80007cc <MX_GPIO_Init+0x1f4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f244 0181 	movw	r1, #16513	; 0x4081
 8000684:	4852      	ldr	r0, [pc, #328]	; (80007d0 <MX_GPIO_Init+0x1f8>)
 8000686:	f000 ff5f 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4851      	ldr	r0, [pc, #324]	; (80007d4 <MX_GPIO_Init+0x1fc>)
 8000690:	f000 ff5a 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	484b      	ldr	r0, [pc, #300]	; (80007d8 <MX_GPIO_Init+0x200>)
 80006ac:	f000 fda0 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006b0:	2332      	movs	r3, #50	; 0x32
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c0:	230b      	movs	r3, #11
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4843      	ldr	r0, [pc, #268]	; (80007d8 <MX_GPIO_Init+0x200>)
 80006cc:	f000 fd90 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006d0:	2386      	movs	r3, #134	; 0x86
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e0:	230b      	movs	r3, #11
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	483c      	ldr	r0, [pc, #240]	; (80007dc <MX_GPIO_Init+0x204>)
 80006ec:	f000 fd80 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4831      	ldr	r0, [pc, #196]	; (80007d0 <MX_GPIO_Init+0x1f8>)
 800070a:	f000 fd71 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4829      	ldr	r0, [pc, #164]	; (80007d0 <MX_GPIO_Init+0x1f8>)
 800072c:	f000 fd60 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4823      	ldr	r0, [pc, #140]	; (80007d4 <MX_GPIO_Init+0x1fc>)
 8000748:	f000 fd52 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	481d      	ldr	r0, [pc, #116]	; (80007d4 <MX_GPIO_Init+0x1fc>)
 8000760:	f000 fd46 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000764:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000776:	230a      	movs	r3, #10
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4816      	ldr	r0, [pc, #88]	; (80007dc <MX_GPIO_Init+0x204>)
 8000782:	f000 fd35 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4810      	ldr	r0, [pc, #64]	; (80007dc <MX_GPIO_Init+0x204>)
 800079c:	f000 fd28 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b2:	230b      	movs	r3, #11
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_GPIO_Init+0x1fc>)
 80007be:	f000 fd17 	bl	80011f0 <HAL_GPIO_Init>

}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	; 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020400 	.word	0x40020400
 80007d4:	40021800 	.word	0x40021800
 80007d8:	40020800 	.word	0x40020800
 80007dc:	40020000 	.word	0x40020000

080007e0 <setVoltage>:
 * @brief Writes to DAC data holding register (Channel #1, 12 bits, right alignment).
 * @param[in] voltage_mV : Voltage expressed in millivolts, in range <0 - 3300> mV
 * @retval None
 */
void setVoltage(float voltage)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	ed87 0a01 	vstr	s0, [r7, #4]
  voltage = voltage > 3300.f ? 3300.f : voltage;
 80007ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000840 <setVoltage+0x60>
 80007f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	dd01      	ble.n	8000800 <setVoltage+0x20>
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <setVoltage+0x64>)
 80007fe:	e000      	b.n	8000802 <setVoltage+0x22>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	607b      	str	r3, [r7, #4]
  uint16_t dac_reg = voltage / 1000.f / 3.3f * (float)((1 << 12) - 1);
 8000804:	edd7 7a01 	vldr	s15, [r7, #4]
 8000808:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000848 <setVoltage+0x68>
 800080c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000810:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800084c <setVoltage+0x6c>
 8000814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000818:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000850 <setVoltage+0x70>
 800081c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000824:	ee17 3a90 	vmov	r3, s15
 8000828:	81fb      	strh	r3, [r7, #14]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_reg);
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <setVoltage+0x74>)
 8000832:	f000 fbd6 	bl	8000fe2 <HAL_DAC_SetValue>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	454e4000 	.word	0x454e4000
 8000844:	454e4000 	.word	0x454e4000
 8000848:	447a0000 	.word	0x447a0000
 800084c:	40533333 	.word	0x40533333
 8000850:	457ff000 	.word	0x457ff000
 8000854:	20000078 	.word	0x20000078

08000858 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <HAL_UART_RxCpltCallback+0x3c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d111      	bne.n	800088c <HAL_UART_RxCpltCallback+0x34>
  {
    int vol = atoi(rx_buffer);
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <HAL_UART_RxCpltCallback+0x40>)
 800086a:	f003 f9f9 	bl	8003c60 <atoi>
 800086e:	60f8      	str	r0, [r7, #12]
    setVoltage(vol);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	ee07 3a90 	vmov	s15, r3
 8000876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	f7ff ffaf 	bl	80007e0 <setVoltage>
    HAL_UART_Receive_IT(&huart3, rx_buffer, 4);
 8000882:	2204      	movs	r2, #4
 8000884:	4904      	ldr	r1, [pc, #16]	; (8000898 <HAL_UART_RxCpltCallback+0x40>)
 8000886:	4803      	ldr	r0, [pc, #12]	; (8000894 <HAL_UART_RxCpltCallback+0x3c>)
 8000888:	f001 ffe0 	bl	800284c <HAL_UART_Receive_IT>
  }
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000094 	.word	0x20000094
 8000898:	2000008c 	.word	0x2000008c

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 f9bd 	bl	8000c1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f81c 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a8:	f7ff fe96 	bl	80005d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008ac:	f000 f8f6 	bl	8000a9c <MX_USART3_UART_Init>
  MX_DAC_Init();
 80008b0:	f7ff fe28 	bl	8000504 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80008b4:	2100      	movs	r1, #0
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <main+0x34>)
 80008b8:	f000 fb41 	bl	8000f3e <HAL_DAC_Start>
  setVoltage(1000.0f);
 80008bc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80008d4 <main+0x38>
 80008c0:	f7ff ff8e 	bl	80007e0 <setVoltage>
  HAL_UART_Receive_IT(&huart3, rx_buffer, 4);
 80008c4:	2204      	movs	r2, #4
 80008c6:	4904      	ldr	r1, [pc, #16]	; (80008d8 <main+0x3c>)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <main+0x40>)
 80008ca:	f001 ffbf 	bl	800284c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <main+0x32>
 80008d0:	20000078 	.word	0x20000078
 80008d4:	447a0000 	.word	0x447a0000
 80008d8:	2000008c 	.word	0x2000008c
 80008dc:	20000094 	.word	0x20000094

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	; 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 fa46 	bl	8003d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000904:	f000 fe3a 	bl	800157c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <SystemClock_Config+0xd4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a29      	ldr	r2, [pc, #164]	; (80009b4 <SystemClock_Config+0xd4>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <SystemClock_Config+0xd4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <SystemClock_Config+0xd8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a24      	ldr	r2, [pc, #144]	; (80009b8 <SystemClock_Config+0xd8>)
 8000926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <SystemClock_Config+0xd8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000938:	2301      	movs	r3, #1
 800093a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800093c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000946:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800094c:	2304      	movs	r3, #4
 800094e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000950:	23d8      	movs	r3, #216	; 0xd8
 8000952:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000958:	2303      	movs	r3, #3
 800095a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fe6b 	bl	800163c <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800096c:	f000 f826 	bl	80009bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000970:	f000 fe14 	bl	800159c <HAL_PWREx_EnableOverDrive>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800097a:	f000 f81f 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	230f      	movs	r3, #15
 8000980:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	2302      	movs	r3, #2
 8000984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800098a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000990:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000994:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2107      	movs	r1, #7
 800099c:	4618      	mov	r0, r3
 800099e:	f001 f8f1 	bl	8001b84 <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009a8:	f000 f808 	bl	80009bc <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3750      	adds	r7, #80	; 0x50
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f91c 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <USART3_IRQHandler+0x10>)
 8000a6a:	f001 ff33 	bl	80028d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000094 	.word	0x20000094

08000a78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <MX_USART3_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ae0:	f001 fe66 	bl	80027b0 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f7ff ff67 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000094 	.word	0x20000094
 8000af8:	40004800 	.word	0x40004800

08000afc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0aa      	sub	sp, #168	; 0xa8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	2284      	movs	r2, #132	; 0x84
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 f92f 	bl	8003d80 <memset>
  if(uartHandle->Instance==USART3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <HAL_UART_MspInit+0xc4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d144      	bne.n	8000bb6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fa48 	bl	8001fd0 <HAL_RCCEx_PeriphCLKConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b46:	f7ff ff39 	bl	80009bc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <HAL_UART_MspInit+0xc8>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_UART_MspInit+0xc8>)
 8000b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_UART_MspInit+0xc8>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_UART_MspInit+0xc8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0xc8>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_MspInit+0xc8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b94:	2307      	movs	r3, #7
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <HAL_UART_MspInit+0xcc>)
 8000ba2:	f000 fb25 	bl	80011f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2027      	movs	r0, #39	; 0x27
 8000bac:	f000 f96f 	bl	8000e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bb0:	2027      	movs	r0, #39	; 0x27
 8000bb2:	f000 f988 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	37a8      	adds	r7, #168	; 0xa8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004800 	.word	0x40004800
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020c00 	.word	0x40020c00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff ff3f 	bl	8000a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f003 f8cf 	bl	8003d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fe4d 	bl	800089c <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c10:	08003f28 	.word	0x08003f28
  ldr r2, =_sbss
 8000c14:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c18:	20000258 	.word	0x20000258

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>

08000c1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 f928 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f805 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2e:	f7ff fecb 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f943 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f90b 	bl	8000e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	2000011c 	.word	0x2000011c

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2000011c 	.word	0x2000011c

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <__NVIC_SetPriorityGrouping+0x40>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x40>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00
 8000d1c:	05fa0000 	.word	0x05fa0000

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff29 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff3e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff8e 	bl	8000dcc <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5d 	bl	8000d78 <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff31 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffa2 	bl	8000e34 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e014      	b.n	8000f36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fb1b 	bl	8000558 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2202      	movs	r2, #2
 8000f26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	795b      	ldrb	r3, [r3, #5]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d101      	bne.n	8000f54 <HAL_DAC_Start+0x16>
 8000f50:	2302      	movs	r3, #2
 8000f52:	e040      	b.n	8000fd6 <HAL_DAC_Start+0x98>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000f88:	2b3c      	cmp	r3, #60	; 0x3c
 8000f8a:	d11d      	bne.n	8000fc8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0201 	orr.w	r2, r2, #1
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	e014      	b.n	8000fc8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	213c      	movs	r1, #60	; 0x3c
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d107      	bne.n	8000fc8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 0202 	orr.w	r2, r2, #2
 8000fc6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b087      	sub	sp, #28
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d105      	bne.n	800100c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	3308      	adds	r3, #8
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e004      	b.n	8001016 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	3314      	adds	r3, #20
 8001014:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	461a      	mov	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	795b      	ldrb	r3, [r3, #5]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_DAC_ConfigChannel+0x18>
 8001040:	2302      	movs	r3, #2
 8001042:	e03c      	b.n	80010be <HAL_DAC_ConfigChannel+0x92>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2201      	movs	r2, #1
 8001048:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2202      	movs	r2, #2
 800104e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	4013      	ands	r3, r2
 800106c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6819      	ldr	r1, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	22c0      	movs	r2, #192	; 0xc0
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2201      	movs	r2, #1
 80010b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff fdf2 	bl	8000cc0 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d008      	beq.n	80010fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e052      	b.n	80011a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0216 	bic.w	r2, r2, #22
 800110a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800111a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <HAL_DMA_Abort+0x62>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0208 	bic.w	r2, r2, #8
 800113a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800114c:	e013      	b.n	8001176 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800114e:	f7ff fdb7 	bl	8000cc0 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b05      	cmp	r3, #5
 800115a:	d90c      	bls.n	8001176 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2220      	movs	r2, #32
 8001160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e015      	b.n	80011a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1e4      	bne.n	800114e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001188:	223f      	movs	r2, #63	; 0x3f
 800118a:	409a      	lsls	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d004      	beq.n	80011c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e00c      	b.n	80011e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2205      	movs	r2, #5
 80011cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e175      	b.n	80014fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 8164 	bne.w	80014f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_GPIO_Init+0x56>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d017      	beq.n	80012e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80be 	beq.w	80014f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b66      	ldr	r3, [pc, #408]	; (8001514 <HAL_GPIO_Init+0x324>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a65      	ldr	r2, [pc, #404]	; (8001514 <HAL_GPIO_Init+0x324>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b63      	ldr	r3, [pc, #396]	; (8001514 <HAL_GPIO_Init+0x324>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001392:	4a61      	ldr	r2, [pc, #388]	; (8001518 <HAL_GPIO_Init+0x328>)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a58      	ldr	r2, [pc, #352]	; (800151c <HAL_GPIO_Init+0x32c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d037      	beq.n	800142e <HAL_GPIO_Init+0x23e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a57      	ldr	r2, [pc, #348]	; (8001520 <HAL_GPIO_Init+0x330>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d031      	beq.n	800142a <HAL_GPIO_Init+0x23a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a56      	ldr	r2, [pc, #344]	; (8001524 <HAL_GPIO_Init+0x334>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d02b      	beq.n	8001426 <HAL_GPIO_Init+0x236>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a55      	ldr	r2, [pc, #340]	; (8001528 <HAL_GPIO_Init+0x338>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d025      	beq.n	8001422 <HAL_GPIO_Init+0x232>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a54      	ldr	r2, [pc, #336]	; (800152c <HAL_GPIO_Init+0x33c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01f      	beq.n	800141e <HAL_GPIO_Init+0x22e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a53      	ldr	r2, [pc, #332]	; (8001530 <HAL_GPIO_Init+0x340>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d019      	beq.n	800141a <HAL_GPIO_Init+0x22a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_GPIO_Init+0x344>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x226>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a51      	ldr	r2, [pc, #324]	; (8001538 <HAL_GPIO_Init+0x348>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x222>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a50      	ldr	r2, [pc, #320]	; (800153c <HAL_GPIO_Init+0x34c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x21e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4f      	ldr	r2, [pc, #316]	; (8001540 <HAL_GPIO_Init+0x350>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x21a>
 8001406:	2309      	movs	r3, #9
 8001408:	e012      	b.n	8001430 <HAL_GPIO_Init+0x240>
 800140a:	230a      	movs	r3, #10
 800140c:	e010      	b.n	8001430 <HAL_GPIO_Init+0x240>
 800140e:	2308      	movs	r3, #8
 8001410:	e00e      	b.n	8001430 <HAL_GPIO_Init+0x240>
 8001412:	2307      	movs	r3, #7
 8001414:	e00c      	b.n	8001430 <HAL_GPIO_Init+0x240>
 8001416:	2306      	movs	r3, #6
 8001418:	e00a      	b.n	8001430 <HAL_GPIO_Init+0x240>
 800141a:	2305      	movs	r3, #5
 800141c:	e008      	b.n	8001430 <HAL_GPIO_Init+0x240>
 800141e:	2304      	movs	r3, #4
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x240>
 8001422:	2303      	movs	r3, #3
 8001424:	e004      	b.n	8001430 <HAL_GPIO_Init+0x240>
 8001426:	2302      	movs	r3, #2
 8001428:	e002      	b.n	8001430 <HAL_GPIO_Init+0x240>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <HAL_GPIO_Init+0x240>
 800142e:	2300      	movs	r3, #0
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	f002 0203 	and.w	r2, r2, #3
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4093      	lsls	r3, r2
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001440:	4935      	ldr	r1, [pc, #212]	; (8001518 <HAL_GPIO_Init+0x328>)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_GPIO_Init+0x354>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001472:	4a34      	ldr	r2, [pc, #208]	; (8001544 <HAL_GPIO_Init+0x354>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001478:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_GPIO_Init+0x354>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_GPIO_Init+0x354>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_GPIO_Init+0x354>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <HAL_GPIO_Init+0x354>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_GPIO_Init+0x354>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_GPIO_Init+0x354>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	f67f ae86 	bls.w	8001210 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40013800 	.word	0x40013800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021000 	.word	0x40021000
 8001530:	40021400 	.word	0x40021400
 8001534:	40021800 	.word	0x40021800
 8001538:	40021c00 	.word	0x40021c00
 800153c:	40022000 	.word	0x40022000
 8001540:	40022400 	.word	0x40022400
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40007000 	.word	0x40007000

0800159c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_PWREx_EnableOverDrive+0x98>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_PWREx_EnableOverDrive+0x98>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_PWREx_EnableOverDrive+0x98>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ca:	f7ff fb79 	bl	8000cc0 <HAL_GetTick>
 80015ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015d0:	e009      	b.n	80015e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015d2:	f7ff fb75 	bl	8000cc0 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015e0:	d901      	bls.n	80015e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e022      	b.n	800162c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f2:	d1ee      	bne.n	80015d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001600:	f7ff fb5e 	bl	8000cc0 <HAL_GetTick>
 8001604:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001606:	e009      	b.n	800161c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001608:	f7ff fb5a 	bl	8000cc0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001616:	d901      	bls.n	800161c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e007      	b.n	800162c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_PWREx_EnableOverDrive+0x9c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001628:	d1ee      	bne.n	8001608 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000

0800163c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e291      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8087 	beq.w	800176e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001660:	4b96      	ldr	r3, [pc, #600]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b04      	cmp	r3, #4
 800166a:	d00c      	beq.n	8001686 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166c:	4b93      	ldr	r3, [pc, #588]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d112      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
 8001678:	4b90      	ldr	r3, [pc, #576]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001684:	d10b      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001686:	4b8d      	ldr	r3, [pc, #564]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d06c      	beq.n	800176c <HAL_RCC_OscConfig+0x130>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d168      	bne.n	800176c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e26b      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x7a>
 80016a8:	4b84      	ldr	r3, [pc, #528]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a83      	ldr	r2, [pc, #524]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e02e      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x9c>
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7e      	ldr	r2, [pc, #504]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7b      	ldr	r2, [pc, #492]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0xc0>
 80016e2:	4b76      	ldr	r3, [pc, #472]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a75      	ldr	r2, [pc, #468]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b73      	ldr	r3, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a72      	ldr	r2, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016fc:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6e      	ldr	r2, [pc, #440]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b6c      	ldr	r3, [pc, #432]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a6b      	ldr	r2, [pc, #428]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fad0 	bl	8000cc0 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff facc 	bl	8000cc0 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e21f      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b61      	ldr	r3, [pc, #388]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0xe8>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fabc 	bl	8000cc0 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fab8 	bl	8000cc0 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e20b      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x110>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d069      	beq.n	800184e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177a:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001786:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d11c      	bne.n	80017cc <HAL_RCC_OscConfig+0x190>
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d116      	bne.n	80017cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_RCC_OscConfig+0x17a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e1df      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	493d      	ldr	r1, [pc, #244]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	e040      	b.n	800184e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a38      	ldr	r2, [pc, #224]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fa6e 	bl	8000cc0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fa6a 	bl	8000cc0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1bd      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b30      	ldr	r3, [pc, #192]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4929      	ldr	r1, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
 800181a:	e018      	b.n	800184e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fa4a 	bl	8000cc0 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fa46 	bl	8000cc0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e199      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d038      	beq.n	80018cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d019      	beq.n	8001896 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff fa27 	bl	8000cc0 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff fa23 	bl	8000cc0 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e176      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800188a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x23a>
 8001894:	e01a      	b.n	80018cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fa0d 	bl	8000cc0 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fa09 	bl	8000cc0 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d903      	bls.n	80018c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e15c      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
 80018bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	4b91      	ldr	r3, [pc, #580]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1ee      	bne.n	80018aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a4 	beq.w	8001a22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b8b      	ldr	r3, [pc, #556]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b88      	ldr	r3, [pc, #544]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a87      	ldr	r2, [pc, #540]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b85      	ldr	r3, [pc, #532]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001902:	4b82      	ldr	r3, [pc, #520]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800190e:	4b7f      	ldr	r3, [pc, #508]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7e      	ldr	r2, [pc, #504]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff f9d1 	bl	8000cc0 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff f9cd 	bl	8000cc0 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e120      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001934:	4b75      	ldr	r3, [pc, #468]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x31a>
 8001948:	4b6f      	ldr	r3, [pc, #444]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	e02d      	b.n	80019b2 <HAL_RCC_OscConfig+0x376>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x33c>
 800195e:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a69      	ldr	r2, [pc, #420]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b67      	ldr	r3, [pc, #412]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a66      	ldr	r2, [pc, #408]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
 8001976:	e01c      	b.n	80019b2 <HAL_RCC_OscConfig+0x376>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x35e>
 8001980:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a60      	ldr	r2, [pc, #384]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	4b5e      	ldr	r3, [pc, #376]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a5d      	ldr	r2, [pc, #372]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0x376>
 800199a:	4b5b      	ldr	r3, [pc, #364]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a5a      	ldr	r2, [pc, #360]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
 80019a6:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ba:	f7ff f981 	bl	8000cc0 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff f97d 	bl	8000cc0 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0ce      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ee      	beq.n	80019c2 <HAL_RCC_OscConfig+0x386>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff f96b 	bl	8000cc0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff f967 	bl	8000cc0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0b8      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d105      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a16:	4b3c      	ldr	r3, [pc, #240]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 80a4 	beq.w	8001b74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d06b      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d149      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a30      	ldr	r2, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f938 	bl	8000cc0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f934 	bl	8000cc0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e087      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	019b      	lsls	r3, r3, #6
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	061b      	lsls	r3, r3, #24
 8001a96:	4313      	orrs	r3, r2
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff f908 	bl	8000cc0 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff f904 	bl	8000cc0 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e057      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x478>
 8001ad2:	e04f      	b.n	8001b74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f8ee 	bl	8000cc0 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f8ea 	bl	8000cc0 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e03d      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afa:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4ac>
 8001b06:	e035      	b.n	8001b74 <HAL_RCC_OscConfig+0x538>
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_RCC_OscConfig+0x544>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d028      	beq.n	8001b70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d121      	bne.n	8001b70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d11a      	bne.n	8001b70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d111      	bne.n	8001b70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0d0      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d910      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 020f 	bic.w	r2, r3, #15
 8001bb2:	4965      	ldr	r1, [pc, #404]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d040      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d115      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e073      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06b      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4936      	ldr	r1, [pc, #216]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c78:	f7ff f822 	bl	8000cc0 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff f81e 	bl	8000cc0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e053      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d210      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 020f 	bic.w	r2, r3, #15
 8001cbe:	4922      	ldr	r1, [pc, #136]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f821 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1cc>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1d0>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1d4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ff7e 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	08003dfc 	.word	0x08003dfc
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d60:	b094      	sub	sp, #80	; 0x50
 8001d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	647b      	str	r3, [r7, #68]	; 0x44
 8001d68:	2300      	movs	r3, #0
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d74:	4b79      	ldr	r3, [pc, #484]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d00d      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x40>
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	f200 80e1 	bhi.w	8001f48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d8e:	e0db      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d94:	e0db      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d96:	4b73      	ldr	r3, [pc, #460]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d9a:	e0d8      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001da4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001da6:	4b6d      	ldr	r3, [pc, #436]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db2:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	2200      	movs	r2, #0
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dce:	4622      	mov	r2, r4
 8001dd0:	462b      	mov	r3, r5
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	0159      	lsls	r1, r3, #5
 8001ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de0:	0150      	lsls	r0, r2, #5
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4621      	mov	r1, r4
 8001de8:	1a51      	subs	r1, r2, r1
 8001dea:	6139      	str	r1, [r7, #16]
 8001dec:	4629      	mov	r1, r5
 8001dee:	eb63 0301 	sbc.w	r3, r3, r1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e00:	4659      	mov	r1, fp
 8001e02:	018b      	lsls	r3, r1, #6
 8001e04:	4651      	mov	r1, sl
 8001e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e0a:	4651      	mov	r1, sl
 8001e0c:	018a      	lsls	r2, r1, #6
 8001e0e:	4651      	mov	r1, sl
 8001e10:	ebb2 0801 	subs.w	r8, r2, r1
 8001e14:	4659      	mov	r1, fp
 8001e16:	eb63 0901 	sbc.w	r9, r3, r1
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4699      	mov	r9, r3
 8001e32:	4623      	mov	r3, r4
 8001e34:	eb18 0303 	adds.w	r3, r8, r3
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	462b      	mov	r3, r5
 8001e3c:	eb49 0303 	adc.w	r3, r9, r3
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e4e:	4629      	mov	r1, r5
 8001e50:	024b      	lsls	r3, r1, #9
 8001e52:	4621      	mov	r1, r4
 8001e54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e58:	4621      	mov	r1, r4
 8001e5a:	024a      	lsls	r2, r1, #9
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e62:	2200      	movs	r2, #0
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e6c:	f7fe f9cc 	bl	8000208 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4613      	mov	r3, r2
 8001e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e78:	e058      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	2200      	movs	r2, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	4611      	mov	r1, r2
 8001e86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e8a:	623b      	str	r3, [r7, #32]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e94:	4642      	mov	r2, r8
 8001e96:	464b      	mov	r3, r9
 8001e98:	f04f 0000 	mov.w	r0, #0
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	0159      	lsls	r1, r3, #5
 8001ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea6:	0150      	lsls	r0, r2, #5
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4641      	mov	r1, r8
 8001eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	00eb      	lsls	r3, r5, #3
 8001ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee2:	00e2      	lsls	r2, r4, #3
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	461d      	mov	r5, r3
 8001ee8:	4643      	mov	r3, r8
 8001eea:	18e3      	adds	r3, r4, r3
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	464b      	mov	r3, r9
 8001ef0:	eb45 0303 	adc.w	r3, r5, r3
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f02:	4629      	mov	r1, r5
 8001f04:	028b      	lsls	r3, r1, #10
 8001f06:	4621      	mov	r1, r4
 8001f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	028a      	lsls	r2, r1, #10
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f16:	2200      	movs	r2, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	61fa      	str	r2, [r7, #28]
 8001f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f20:	f7fe f972 	bl	8000208 <__aeabi_uldivmod>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4613      	mov	r3, r2
 8001f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	3301      	adds	r3, #1
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f46:	e002      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3750      	adds	r7, #80	; 0x50
 8001f54:	46bd      	mov	sp, r7
 8001f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	00f42400 	.word	0x00f42400
 8001f64:	007a1200 	.word	0x007a1200

08001f68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000

08001f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f84:	f7ff fff0 	bl	8001f68 <HAL_RCC_GetHCLKFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	0a9b      	lsrs	r3, r3, #10
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	4903      	ldr	r1, [pc, #12]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f96:	5ccb      	ldrb	r3, [r1, r3]
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	08003e0c 	.word	0x08003e0c

08001fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fac:	f7ff ffdc 	bl	8001f68 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0b5b      	lsrs	r3, r3, #13
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4903      	ldr	r1, [pc, #12]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	08003e0c 	.word	0x08003e0c

08001fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d012      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ff8:	4b69      	ldr	r3, [pc, #420]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4a68      	ldr	r2, [pc, #416]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002002:	6093      	str	r3, [r2, #8]
 8002004:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	4964      	ldr	r1, [pc, #400]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d017      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800202a:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	4959      	ldr	r1, [pc, #356]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002048:	d101      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002066:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800206c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	494a      	ldr	r1, [pc, #296]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002084:	d101      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002086:	2301      	movs	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 808b 	beq.w	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a39      	ldr	r2, [pc, #228]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a34      	ldr	r2, [pc, #208]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d8:	f7fe fdf2 	bl	8000cc0 <HAL_GetTick>
 80020dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e0:	f7fe fdee 	bl	8000cc0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e357      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d035      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d02e      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800211c:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002124:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a1a      	ldr	r2, [pc, #104]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800213e:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d114      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe fdb6 	bl	8000cc0 <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	e00a      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7fe fdb2 	bl	8000cc0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e319      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0ee      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002186:	d111      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002196:	400b      	ands	r3, r1
 8002198:	4901      	ldr	r1, [pc, #4]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
 800219e:	e00b      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40007000 	.word	0x40007000
 80021a8:	0ffffcff 	.word	0x0ffffcff
 80021ac:	4baa      	ldr	r3, [pc, #680]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4aa9      	ldr	r2, [pc, #676]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021b6:	6093      	str	r3, [r2, #8]
 80021b8:	4ba7      	ldr	r3, [pc, #668]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	49a4      	ldr	r1, [pc, #656]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021d6:	4ba0      	ldr	r3, [pc, #640]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021dc:	4a9e      	ldr	r2, [pc, #632]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021e6:	4b9c      	ldr	r3, [pc, #624]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	4999      	ldr	r1, [pc, #612]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002204:	4b94      	ldr	r3, [pc, #592]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002212:	4991      	ldr	r1, [pc, #580]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002226:	4b8c      	ldr	r3, [pc, #560]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002234:	4988      	ldr	r1, [pc, #544]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002248:	4b83      	ldr	r3, [pc, #524]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002256:	4980      	ldr	r1, [pc, #512]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800226a:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	4977      	ldr	r1, [pc, #476]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800228c:	4b72      	ldr	r3, [pc, #456]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	496f      	ldr	r1, [pc, #444]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ae:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f023 020c 	bic.w	r2, r3, #12
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	4966      	ldr	r1, [pc, #408]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022d0:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	495e      	ldr	r1, [pc, #376]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022f2:	4b59      	ldr	r3, [pc, #356]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	4955      	ldr	r1, [pc, #340]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002314:	4b50      	ldr	r3, [pc, #320]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	494d      	ldr	r1, [pc, #308]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002336:	4b48      	ldr	r3, [pc, #288]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	4944      	ldr	r1, [pc, #272]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002358:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	493c      	ldr	r1, [pc, #240]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800237a:	4b37      	ldr	r3, [pc, #220]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002380:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002388:	4933      	ldr	r1, [pc, #204]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800239c:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023aa:	492b      	ldr	r1, [pc, #172]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d011      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023cc:	4922      	ldr	r1, [pc, #136]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023dc:	d101      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240c:	4912      	ldr	r1, [pc, #72]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002430:	4909      	ldr	r1, [pc, #36]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d006      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80d9 	beq.w	80025fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a01      	ldr	r2, [pc, #4]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002456:	e001      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002458:	40023800 	.word	0x40023800
 800245c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245e:	f7fe fc2f 	bl	8000cc0 <HAL_GetTick>
 8002462:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002466:	f7fe fc2b 	bl	8000cc0 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d901      	bls.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e194      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002478:	4b6c      	ldr	r3, [pc, #432]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d021      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002494:	2b00      	cmp	r3, #0
 8002496:	d11d      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002498:	4b64      	ldr	r3, [pc, #400]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800249a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024a6:	4b61      	ldr	r3, [pc, #388]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ac:	0e1b      	lsrs	r3, r3, #24
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	019a      	lsls	r2, r3, #6
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	061b      	lsls	r3, r3, #24
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	071b      	lsls	r3, r3, #28
 80024cc:	4957      	ldr	r1, [pc, #348]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d02e      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fe:	d129      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002500:	4b4a      	ldr	r3, [pc, #296]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002506:	0c1b      	lsrs	r3, r3, #16
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800250e:	4b47      	ldr	r3, [pc, #284]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002514:	0f1b      	lsrs	r3, r3, #28
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	019a      	lsls	r2, r3, #6
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	041b      	lsls	r3, r3, #16
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	431a      	orrs	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	071b      	lsls	r3, r3, #28
 8002534:	493d      	ldr	r1, [pc, #244]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800253c:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800253e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002542:	f023 021f 	bic.w	r2, r3, #31
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	3b01      	subs	r3, #1
 800254c:	4937      	ldr	r1, [pc, #220]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01d      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002566:	0e1b      	lsrs	r3, r3, #24
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800256e:	4b2f      	ldr	r3, [pc, #188]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002574:	0f1b      	lsrs	r3, r3, #28
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	019a      	lsls	r2, r3, #6
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	041b      	lsls	r3, r3, #16
 8002588:	431a      	orrs	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	431a      	orrs	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	071b      	lsls	r3, r3, #28
 8002594:	4925      	ldr	r1, [pc, #148]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d011      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	019a      	lsls	r2, r3, #6
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	071b      	lsls	r3, r3, #28
 80025c4:	4919      	ldr	r1, [pc, #100]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a16      	ldr	r2, [pc, #88]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d8:	f7fe fb72 	bl	8000cc0 <HAL_GetTick>
 80025dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025e0:	f7fe fb6e 	bl	8000cc0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0d7      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 80cd 	bne.w	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002612:	f7fe fb55 	bl	8000cc0 <HAL_GetTick>
 8002616:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800261a:	f7fe fb51 	bl	8000cc0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	; 0x64
 8002626:	d903      	bls.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0ba      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800262c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002630:	4b5e      	ldr	r3, [pc, #376]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263c:	d0ed      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02e      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d12a      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002666:	4b51      	ldr	r3, [pc, #324]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002674:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	0f1b      	lsrs	r3, r3, #28
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	019a      	lsls	r2, r3, #6
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	061b      	lsls	r3, r3, #24
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	071b      	lsls	r3, r3, #28
 800269a:	4944      	ldr	r1, [pc, #272]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	3b01      	subs	r3, #1
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	493d      	ldr	r1, [pc, #244]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d022      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d0:	d11d      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	0e1b      	lsrs	r3, r3, #24
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026e0:	4b32      	ldr	r3, [pc, #200]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	0f1b      	lsrs	r3, r3, #28
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	019a      	lsls	r2, r3, #6
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	431a      	orrs	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	071b      	lsls	r3, r3, #28
 8002706:	4929      	ldr	r1, [pc, #164]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d028      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	0e1b      	lsrs	r3, r3, #24
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	0c1b      	lsrs	r3, r3, #16
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	019a      	lsls	r2, r3, #6
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	431a      	orrs	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	071b      	lsls	r3, r3, #28
 800274e:	4917      	ldr	r1, [pc, #92]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800275c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	4911      	ldr	r1, [pc, #68]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7fe faa2 	bl	8000cc0 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002780:	f7fe fa9e 	bl	8000cc0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e007      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800279e:	d1ef      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e040      	b.n	8002844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f992 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fb62 	bl	8002eb8 <UART_SetConfig>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e022      	b.n	8002844 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fdba 	bl	8003380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800281a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800282a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fe41 	bl	80034c4 <UART_CheckIdleState>
 8002842:	4603      	mov	r3, r0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002860:	2b20      	cmp	r3, #32
 8002862:	d132      	bne.n	80028ca <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_UART_Receive_IT+0x24>
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e02b      	b.n	80028cc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d018      	beq.n	80028ba <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	e853 3f00 	ldrex	r3, [r3]
 8002894:	613b      	str	r3, [r7, #16]
   return(result);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	69f9      	ldr	r1, [r7, #28]
 80028ac:	6a3a      	ldr	r2, [r7, #32]
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e6      	bne.n	8002888 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	461a      	mov	r2, r3
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fefd 	bl	80036c0 <UART_Start_Receive_IT>
 80028c6:	4603      	mov	r3, r0
 80028c8:	e000      	b.n	80028cc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b0ba      	sub	sp, #232	; 0xe8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80028fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8002902:	4013      	ands	r3, r2
 8002904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d115      	bne.n	800293c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00f      	beq.n	800293c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800291c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8297 	beq.w	8002e60 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
      }
      return;
 800293a:	e291      	b.n	8002e60 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800293c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8117 	beq.w	8002b74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002952:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002956:	4b85      	ldr	r3, [pc, #532]	; (8002b6c <HAL_UART_IRQHandler+0x298>)
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 810a 	beq.w	8002b74 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d011      	beq.n	8002990 <HAL_UART_IRQHandler+0xbc>
 800296c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2201      	movs	r2, #1
 800297e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d011      	beq.n	80029c0 <HAL_UART_IRQHandler+0xec>
 800299c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2202      	movs	r2, #2
 80029ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d011      	beq.n	80029f0 <HAL_UART_IRQHandler+0x11c>
 80029cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d017      	beq.n	8002a2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a22:	f043 0208 	orr.w	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d012      	beq.n	8002a5e <HAL_UART_IRQHandler+0x18a>
 8002a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00c      	beq.n	8002a5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 81fd 	beq.w	8002e64 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d005      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d04f      	beq.n	8002b56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fec8 	bl	800384c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d141      	bne.n	8002b4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3308      	adds	r3, #8
 8002ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3308      	adds	r3, #8
 8002af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002af6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1d9      	bne.n	8002aca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d013      	beq.n	8002b46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b22:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <HAL_UART_IRQHandler+0x29c>)
 8002b24:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fb3d 	bl	80011aa <HAL_DMA_Abort_IT>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d017      	beq.n	8002b66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b40:	4610      	mov	r0, r2
 8002b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b44:	e00f      	b.n	8002b66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9a0 	bl	8002e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	e00b      	b.n	8002b66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f99c 	bl	8002e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b54:	e007      	b.n	8002b66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f998 	bl	8002e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002b64:	e17e      	b.n	8002e64 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b66:	bf00      	nop
    return;
 8002b68:	e17c      	b.n	8002e64 <HAL_UART_IRQHandler+0x590>
 8002b6a:	bf00      	nop
 8002b6c:	04000120 	.word	0x04000120
 8002b70:	08003915 	.word	0x08003915

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	f040 814c 	bne.w	8002e16 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8145 	beq.w	8002e16 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 813e 	beq.w	8002e16 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	f040 80b6 	bne.w	8002d1e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8150 	beq.w	8002e68 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	f080 8148 	bcs.w	8002e68 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bec:	f000 8086 	beq.w	8002cfc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c2a:	e841 2300 	strex	r3, r2, [r1]
 8002c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1da      	bne.n	8002bf0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3308      	adds	r3, #8
 8002c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e1      	bne.n	8002c3a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e3      	bne.n	8002c76 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ccc:	f023 0310 	bic.w	r3, r3, #16
 8002cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ce0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e4      	bne.n	8002cbc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe f9e7 	bl	80010ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4619      	mov	r1, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8c2 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d1c:	e0a4      	b.n	8002e68 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8096 	beq.w	8002e6c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8002d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8091 	beq.w	8002e6c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e4      	bne.n	8002d4a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3308      	adds	r3, #8
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	e853 3f00 	ldrex	r3, [r3]
 8002d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3308      	adds	r3, #8
 8002da0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002da4:	633a      	str	r2, [r7, #48]	; 0x30
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dac:	e841 2300 	strex	r3, r2, [r1]
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e3      	bne.n	8002d80 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	e853 3f00 	ldrex	r3, [r3]
 8002dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f023 0310 	bic.w	r3, r3, #16
 8002de0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	69b9      	ldr	r1, [r7, #24]
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e4      	bne.n	8002dcc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f846 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e14:	e02a      	b.n	8002e6c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00e      	beq.n	8002e40 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01c      	beq.n	8002e70 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
    }
    return;
 8002e3e:	e017      	b.n	8002e70 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <HAL_UART_IRQHandler+0x59e>
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00c      	beq.n	8002e72 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fd71 	bl	8003940 <UART_EndTransmit_IT>
    return;
 8002e5e:	e008      	b.n	8002e72 <HAL_UART_IRQHandler+0x59e>
      return;
 8002e60:	bf00      	nop
 8002e62:	e006      	b.n	8002e72 <HAL_UART_IRQHandler+0x59e>
    return;
 8002e64:	bf00      	nop
 8002e66:	e004      	b.n	8002e72 <HAL_UART_IRQHandler+0x59e>
      return;
 8002e68:	bf00      	nop
 8002e6a:	e002      	b.n	8002e72 <HAL_UART_IRQHandler+0x59e>
      return;
 8002e6c:	bf00      	nop
 8002e6e:	e000      	b.n	8002e72 <HAL_UART_IRQHandler+0x59e>
    return;
 8002e70:	bf00      	nop
  }

}
 8002e72:	37e8      	adds	r7, #232	; 0xe8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4ba6      	ldr	r3, [pc, #664]	; (800317c <UART_SetConfig+0x2c4>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	6979      	ldr	r1, [r7, #20]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a94      	ldr	r2, [pc, #592]	; (8003180 <UART_SetConfig+0x2c8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d120      	bne.n	8002f76 <UART_SetConfig+0xbe>
 8002f34:	4b93      	ldr	r3, [pc, #588]	; (8003184 <UART_SetConfig+0x2cc>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d816      	bhi.n	8002f70 <UART_SetConfig+0xb8>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <UART_SetConfig+0x90>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f65 	.word	0x08002f65
 8002f50:	08002f5f 	.word	0x08002f5f
 8002f54:	08002f6b 	.word	0x08002f6b
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e150      	b.n	8003200 <UART_SetConfig+0x348>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e14d      	b.n	8003200 <UART_SetConfig+0x348>
 8002f64:	2304      	movs	r3, #4
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e14a      	b.n	8003200 <UART_SetConfig+0x348>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e147      	b.n	8003200 <UART_SetConfig+0x348>
 8002f70:	2310      	movs	r3, #16
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e144      	b.n	8003200 <UART_SetConfig+0x348>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a83      	ldr	r2, [pc, #524]	; (8003188 <UART_SetConfig+0x2d0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d132      	bne.n	8002fe6 <UART_SetConfig+0x12e>
 8002f80:	4b80      	ldr	r3, [pc, #512]	; (8003184 <UART_SetConfig+0x2cc>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d828      	bhi.n	8002fe0 <UART_SetConfig+0x128>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <UART_SetConfig+0xdc>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08002fc9 	.word	0x08002fc9
 8002f98:	08002fe1 	.word	0x08002fe1
 8002f9c:	08002fe1 	.word	0x08002fe1
 8002fa0:	08002fe1 	.word	0x08002fe1
 8002fa4:	08002fd5 	.word	0x08002fd5
 8002fa8:	08002fe1 	.word	0x08002fe1
 8002fac:	08002fe1 	.word	0x08002fe1
 8002fb0:	08002fe1 	.word	0x08002fe1
 8002fb4:	08002fcf 	.word	0x08002fcf
 8002fb8:	08002fe1 	.word	0x08002fe1
 8002fbc:	08002fe1 	.word	0x08002fe1
 8002fc0:	08002fe1 	.word	0x08002fe1
 8002fc4:	08002fdb 	.word	0x08002fdb
 8002fc8:	2300      	movs	r3, #0
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e118      	b.n	8003200 <UART_SetConfig+0x348>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e115      	b.n	8003200 <UART_SetConfig+0x348>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e112      	b.n	8003200 <UART_SetConfig+0x348>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e10f      	b.n	8003200 <UART_SetConfig+0x348>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e10c      	b.n	8003200 <UART_SetConfig+0x348>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a68      	ldr	r2, [pc, #416]	; (800318c <UART_SetConfig+0x2d4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d120      	bne.n	8003032 <UART_SetConfig+0x17a>
 8002ff0:	4b64      	ldr	r3, [pc, #400]	; (8003184 <UART_SetConfig+0x2cc>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ffa:	2b30      	cmp	r3, #48	; 0x30
 8002ffc:	d013      	beq.n	8003026 <UART_SetConfig+0x16e>
 8002ffe:	2b30      	cmp	r3, #48	; 0x30
 8003000:	d814      	bhi.n	800302c <UART_SetConfig+0x174>
 8003002:	2b20      	cmp	r3, #32
 8003004:	d009      	beq.n	800301a <UART_SetConfig+0x162>
 8003006:	2b20      	cmp	r3, #32
 8003008:	d810      	bhi.n	800302c <UART_SetConfig+0x174>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <UART_SetConfig+0x15c>
 800300e:	2b10      	cmp	r3, #16
 8003010:	d006      	beq.n	8003020 <UART_SetConfig+0x168>
 8003012:	e00b      	b.n	800302c <UART_SetConfig+0x174>
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e0f2      	b.n	8003200 <UART_SetConfig+0x348>
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e0ef      	b.n	8003200 <UART_SetConfig+0x348>
 8003020:	2304      	movs	r3, #4
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e0ec      	b.n	8003200 <UART_SetConfig+0x348>
 8003026:	2308      	movs	r3, #8
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e0e9      	b.n	8003200 <UART_SetConfig+0x348>
 800302c:	2310      	movs	r3, #16
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e0e6      	b.n	8003200 <UART_SetConfig+0x348>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a56      	ldr	r2, [pc, #344]	; (8003190 <UART_SetConfig+0x2d8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d120      	bne.n	800307e <UART_SetConfig+0x1c6>
 800303c:	4b51      	ldr	r3, [pc, #324]	; (8003184 <UART_SetConfig+0x2cc>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003046:	2bc0      	cmp	r3, #192	; 0xc0
 8003048:	d013      	beq.n	8003072 <UART_SetConfig+0x1ba>
 800304a:	2bc0      	cmp	r3, #192	; 0xc0
 800304c:	d814      	bhi.n	8003078 <UART_SetConfig+0x1c0>
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d009      	beq.n	8003066 <UART_SetConfig+0x1ae>
 8003052:	2b80      	cmp	r3, #128	; 0x80
 8003054:	d810      	bhi.n	8003078 <UART_SetConfig+0x1c0>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <UART_SetConfig+0x1a8>
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d006      	beq.n	800306c <UART_SetConfig+0x1b4>
 800305e:	e00b      	b.n	8003078 <UART_SetConfig+0x1c0>
 8003060:	2300      	movs	r3, #0
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e0cc      	b.n	8003200 <UART_SetConfig+0x348>
 8003066:	2302      	movs	r3, #2
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e0c9      	b.n	8003200 <UART_SetConfig+0x348>
 800306c:	2304      	movs	r3, #4
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e0c6      	b.n	8003200 <UART_SetConfig+0x348>
 8003072:	2308      	movs	r3, #8
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e0c3      	b.n	8003200 <UART_SetConfig+0x348>
 8003078:	2310      	movs	r3, #16
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e0c0      	b.n	8003200 <UART_SetConfig+0x348>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a44      	ldr	r2, [pc, #272]	; (8003194 <UART_SetConfig+0x2dc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d125      	bne.n	80030d4 <UART_SetConfig+0x21c>
 8003088:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <UART_SetConfig+0x2cc>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003096:	d017      	beq.n	80030c8 <UART_SetConfig+0x210>
 8003098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800309c:	d817      	bhi.n	80030ce <UART_SetConfig+0x216>
 800309e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a2:	d00b      	beq.n	80030bc <UART_SetConfig+0x204>
 80030a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a8:	d811      	bhi.n	80030ce <UART_SetConfig+0x216>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <UART_SetConfig+0x1fe>
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b2:	d006      	beq.n	80030c2 <UART_SetConfig+0x20a>
 80030b4:	e00b      	b.n	80030ce <UART_SetConfig+0x216>
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e0a1      	b.n	8003200 <UART_SetConfig+0x348>
 80030bc:	2302      	movs	r3, #2
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e09e      	b.n	8003200 <UART_SetConfig+0x348>
 80030c2:	2304      	movs	r3, #4
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e09b      	b.n	8003200 <UART_SetConfig+0x348>
 80030c8:	2308      	movs	r3, #8
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e098      	b.n	8003200 <UART_SetConfig+0x348>
 80030ce:	2310      	movs	r3, #16
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e095      	b.n	8003200 <UART_SetConfig+0x348>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2f      	ldr	r2, [pc, #188]	; (8003198 <UART_SetConfig+0x2e0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d125      	bne.n	800312a <UART_SetConfig+0x272>
 80030de:	4b29      	ldr	r3, [pc, #164]	; (8003184 <UART_SetConfig+0x2cc>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ec:	d017      	beq.n	800311e <UART_SetConfig+0x266>
 80030ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030f2:	d817      	bhi.n	8003124 <UART_SetConfig+0x26c>
 80030f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f8:	d00b      	beq.n	8003112 <UART_SetConfig+0x25a>
 80030fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fe:	d811      	bhi.n	8003124 <UART_SetConfig+0x26c>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <UART_SetConfig+0x254>
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003108:	d006      	beq.n	8003118 <UART_SetConfig+0x260>
 800310a:	e00b      	b.n	8003124 <UART_SetConfig+0x26c>
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e076      	b.n	8003200 <UART_SetConfig+0x348>
 8003112:	2302      	movs	r3, #2
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e073      	b.n	8003200 <UART_SetConfig+0x348>
 8003118:	2304      	movs	r3, #4
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e070      	b.n	8003200 <UART_SetConfig+0x348>
 800311e:	2308      	movs	r3, #8
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e06d      	b.n	8003200 <UART_SetConfig+0x348>
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e06a      	b.n	8003200 <UART_SetConfig+0x348>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <UART_SetConfig+0x2e4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d138      	bne.n	80031a6 <UART_SetConfig+0x2ee>
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <UART_SetConfig+0x2cc>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800313e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003142:	d017      	beq.n	8003174 <UART_SetConfig+0x2bc>
 8003144:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003148:	d82a      	bhi.n	80031a0 <UART_SetConfig+0x2e8>
 800314a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314e:	d00b      	beq.n	8003168 <UART_SetConfig+0x2b0>
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003154:	d824      	bhi.n	80031a0 <UART_SetConfig+0x2e8>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <UART_SetConfig+0x2aa>
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315e:	d006      	beq.n	800316e <UART_SetConfig+0x2b6>
 8003160:	e01e      	b.n	80031a0 <UART_SetConfig+0x2e8>
 8003162:	2300      	movs	r3, #0
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e04b      	b.n	8003200 <UART_SetConfig+0x348>
 8003168:	2302      	movs	r3, #2
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e048      	b.n	8003200 <UART_SetConfig+0x348>
 800316e:	2304      	movs	r3, #4
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e045      	b.n	8003200 <UART_SetConfig+0x348>
 8003174:	2308      	movs	r3, #8
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e042      	b.n	8003200 <UART_SetConfig+0x348>
 800317a:	bf00      	nop
 800317c:	efff69f3 	.word	0xefff69f3
 8003180:	40011000 	.word	0x40011000
 8003184:	40023800 	.word	0x40023800
 8003188:	40004400 	.word	0x40004400
 800318c:	40004800 	.word	0x40004800
 8003190:	40004c00 	.word	0x40004c00
 8003194:	40005000 	.word	0x40005000
 8003198:	40011400 	.word	0x40011400
 800319c:	40007800 	.word	0x40007800
 80031a0:	2310      	movs	r3, #16
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e02c      	b.n	8003200 <UART_SetConfig+0x348>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a72      	ldr	r2, [pc, #456]	; (8003374 <UART_SetConfig+0x4bc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d125      	bne.n	80031fc <UART_SetConfig+0x344>
 80031b0:	4b71      	ldr	r3, [pc, #452]	; (8003378 <UART_SetConfig+0x4c0>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031be:	d017      	beq.n	80031f0 <UART_SetConfig+0x338>
 80031c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031c4:	d817      	bhi.n	80031f6 <UART_SetConfig+0x33e>
 80031c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ca:	d00b      	beq.n	80031e4 <UART_SetConfig+0x32c>
 80031cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d0:	d811      	bhi.n	80031f6 <UART_SetConfig+0x33e>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <UART_SetConfig+0x326>
 80031d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031da:	d006      	beq.n	80031ea <UART_SetConfig+0x332>
 80031dc:	e00b      	b.n	80031f6 <UART_SetConfig+0x33e>
 80031de:	2300      	movs	r3, #0
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e00d      	b.n	8003200 <UART_SetConfig+0x348>
 80031e4:	2302      	movs	r3, #2
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e00a      	b.n	8003200 <UART_SetConfig+0x348>
 80031ea:	2304      	movs	r3, #4
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e007      	b.n	8003200 <UART_SetConfig+0x348>
 80031f0:	2308      	movs	r3, #8
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e004      	b.n	8003200 <UART_SetConfig+0x348>
 80031f6:	2310      	movs	r3, #16
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e001      	b.n	8003200 <UART_SetConfig+0x348>
 80031fc:	2310      	movs	r3, #16
 80031fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003208:	d15b      	bne.n	80032c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800320a:	7ffb      	ldrb	r3, [r7, #31]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d828      	bhi.n	8003262 <UART_SetConfig+0x3aa>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <UART_SetConfig+0x360>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800323d 	.word	0x0800323d
 800321c:	08003245 	.word	0x08003245
 8003220:	0800324d 	.word	0x0800324d
 8003224:	08003263 	.word	0x08003263
 8003228:	08003253 	.word	0x08003253
 800322c:	08003263 	.word	0x08003263
 8003230:	08003263 	.word	0x08003263
 8003234:	08003263 	.word	0x08003263
 8003238:	0800325b 	.word	0x0800325b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800323c:	f7fe fea0 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8003240:	61b8      	str	r0, [r7, #24]
        break;
 8003242:	e013      	b.n	800326c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003244:	f7fe feb0 	bl	8001fa8 <HAL_RCC_GetPCLK2Freq>
 8003248:	61b8      	str	r0, [r7, #24]
        break;
 800324a:	e00f      	b.n	800326c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800324c:	4b4b      	ldr	r3, [pc, #300]	; (800337c <UART_SetConfig+0x4c4>)
 800324e:	61bb      	str	r3, [r7, #24]
        break;
 8003250:	e00c      	b.n	800326c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003252:	f7fe fd83 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8003256:	61b8      	str	r0, [r7, #24]
        break;
 8003258:	e008      	b.n	800326c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325e:	61bb      	str	r3, [r7, #24]
        break;
 8003260:	e004      	b.n	800326c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	77bb      	strb	r3, [r7, #30]
        break;
 800326a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d074      	beq.n	800335c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	005a      	lsls	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	d916      	bls.n	80032bc <UART_SetConfig+0x404>
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d212      	bcs.n	80032bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	b29b      	uxth	r3, r3
 800329a:	f023 030f 	bic.w	r3, r3, #15
 800329e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	89fa      	ldrh	r2, [r7, #14]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	e04f      	b.n	800335c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	77bb      	strb	r3, [r7, #30]
 80032c0:	e04c      	b.n	800335c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d828      	bhi.n	800331a <UART_SetConfig+0x462>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x418>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	0800331b 	.word	0x0800331b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
 80032f0:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7fe fe44 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80032f8:	61b8      	str	r0, [r7, #24]
        break;
 80032fa:	e013      	b.n	8003324 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7fe fe54 	bl	8001fa8 <HAL_RCC_GetPCLK2Freq>
 8003300:	61b8      	str	r0, [r7, #24]
        break;
 8003302:	e00f      	b.n	8003324 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <UART_SetConfig+0x4c4>)
 8003306:	61bb      	str	r3, [r7, #24]
        break;
 8003308:	e00c      	b.n	8003324 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7fe fd27 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 800330e:	61b8      	str	r0, [r7, #24]
        break;
 8003310:	e008      	b.n	8003324 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	61bb      	str	r3, [r7, #24]
        break;
 8003318:	e004      	b.n	8003324 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	77bb      	strb	r3, [r7, #30]
        break;
 8003322:	bf00      	nop
    }

    if (pclk != 0U)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d018      	beq.n	800335c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	085a      	lsrs	r2, r3, #1
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	441a      	add	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d909      	bls.n	8003358 <UART_SetConfig+0x4a0>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d205      	bcs.n	8003358 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e001      	b.n	800335c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003368:	7fbb      	ldrb	r3, [r7, #30]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40007c00 	.word	0x40007c00
 8003378:	40023800 	.word	0x40023800
 800337c:	00f42400 	.word	0x00f42400

08003380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01a      	beq.n	8003496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347e:	d10a      	bne.n	8003496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034d4:	f7fd fbf4 	bl	8000cc0 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d10e      	bne.n	8003506 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f81b 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e011      	b.n	800352a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b09c      	sub	sp, #112	; 0x70
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003542:	e0a7      	b.n	8003694 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	f000 80a3 	beq.w	8003694 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7fd fbb7 	bl	8000cc0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <UART_WaitOnFlagUntilTimeout+0x32>
 800355e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003560:	2b00      	cmp	r3, #0
 8003562:	d13f      	bne.n	80035e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003574:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003578:	667b      	str	r3, [r7, #100]	; 0x64
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003584:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e6      	bne.n	8003564 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3308      	adds	r3, #8
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	663b      	str	r3, [r7, #96]	; 0x60
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3308      	adds	r3, #8
 80035b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80035b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e5      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e068      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d050      	beq.n	8003694 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003600:	d148      	bne.n	8003694 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800360a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003620:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362a:	637b      	str	r3, [r7, #52]	; 0x34
 800362c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e6      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3308      	adds	r3, #8
 8003644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	613b      	str	r3, [r7, #16]
   return(result);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	66bb      	str	r3, [r7, #104]	; 0x68
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3308      	adds	r3, #8
 800365c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800365e:	623a      	str	r2, [r7, #32]
 8003660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	69f9      	ldr	r1, [r7, #28]
 8003664:	6a3a      	ldr	r2, [r7, #32]
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	61bb      	str	r3, [r7, #24]
   return(result);
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e5      	bne.n	800363e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e010      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69da      	ldr	r2, [r3, #28]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	f43f af48 	beq.w	8003544 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3770      	adds	r7, #112	; 0x70
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b097      	sub	sp, #92	; 0x5c
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	4613      	mov	r3, r2
 80036cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f2:	d10e      	bne.n	8003712 <UART_Start_Receive_IT+0x52>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <UART_Start_Receive_IT+0x48>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003702:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003706:	e02d      	b.n	8003764 <UART_Start_Receive_IT+0xa4>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	22ff      	movs	r2, #255	; 0xff
 800370c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003710:	e028      	b.n	8003764 <UART_Start_Receive_IT+0xa4>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10d      	bne.n	8003736 <UART_Start_Receive_IT+0x76>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d104      	bne.n	800372c <UART_Start_Receive_IT+0x6c>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	22ff      	movs	r2, #255	; 0xff
 8003726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800372a:	e01b      	b.n	8003764 <UART_Start_Receive_IT+0xa4>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	227f      	movs	r2, #127	; 0x7f
 8003730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003734:	e016      	b.n	8003764 <UART_Start_Receive_IT+0xa4>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800373e:	d10d      	bne.n	800375c <UART_Start_Receive_IT+0x9c>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <UART_Start_Receive_IT+0x92>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	227f      	movs	r2, #127	; 0x7f
 800374c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003750:	e008      	b.n	8003764 <UART_Start_Receive_IT+0xa4>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	223f      	movs	r2, #63	; 0x3f
 8003756:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800375a:	e003      	b.n	8003764 <UART_Start_Receive_IT+0xa4>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2222      	movs	r2, #34	; 0x22
 8003770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3308      	adds	r3, #8
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	657b      	str	r3, [r7, #84]	; 0x54
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3308      	adds	r3, #8
 8003792:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003794:	64ba      	str	r2, [r7, #72]	; 0x48
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800379a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b0:	d107      	bne.n	80037c2 <UART_Start_Receive_IT+0x102>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a21      	ldr	r2, [pc, #132]	; (8003844 <UART_Start_Receive_IT+0x184>)
 80037be:	669a      	str	r2, [r3, #104]	; 0x68
 80037c0:	e002      	b.n	80037c8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <UART_Start_Receive_IT+0x188>)
 80037c6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d019      	beq.n	8003804 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80037e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
 80037f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e6      	bne.n	80037d0 <UART_Start_Receive_IT+0x110>
 8003802:	e018      	b.n	8003836 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	613b      	str	r3, [r7, #16]
   return(result);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f043 0320 	orr.w	r3, r3, #32
 8003818:	653b      	str	r3, [r7, #80]	; 0x50
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	69f9      	ldr	r1, [r7, #28]
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e6      	bne.n	8003804 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	375c      	adds	r7, #92	; 0x5c
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	08003afb 	.word	0x08003afb
 8003848:	08003995 	.word	0x08003995

0800384c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b095      	sub	sp, #84	; 0x54
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003872:	643b      	str	r3, [r7, #64]	; 0x40
 8003874:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e6      	bne.n	8003854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	61fb      	str	r3, [r7, #28]
   return(result);
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	64bb      	str	r3, [r7, #72]	; 0x48
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3308      	adds	r3, #8
 80038a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e5      	bne.n	8003886 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d118      	bne.n	80038f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f023 0310 	bic.w	r3, r3, #16
 80038d6:	647b      	str	r3, [r7, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6979      	ldr	r1, [r7, #20]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	613b      	str	r3, [r7, #16]
   return(result);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e6      	bne.n	80038c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003908:	bf00      	nop
 800390a:	3754      	adds	r7, #84	; 0x54
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff faaa 	bl	8002e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	60bb      	str	r3, [r7, #8]
   return(result);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6979      	ldr	r1, [r7, #20]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	613b      	str	r3, [r7, #16]
   return(result);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e6      	bne.n	8003948 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff fa76 	bl	8002e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800398c:	bf00      	nop
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b096      	sub	sp, #88	; 0x58
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ac:	2b22      	cmp	r3, #34	; 0x22
 80039ae:	f040 8098 	bne.w	8003ae2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039bc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039c0:	b2d9      	uxtb	r1, r3
 80039c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	400a      	ands	r2, r1
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d17b      	bne.n	8003af2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a18:	647b      	str	r3, [r7, #68]	; 0x44
 8003a1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e6      	bne.n	80039fa <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a4c:	633a      	str	r2, [r7, #48]	; 0x30
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e5      	bne.n	8003a2c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d12e      	bne.n	8003ada <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0310 	bic.w	r3, r3, #16
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	69b9      	ldr	r1, [r7, #24]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	617b      	str	r3, [r7, #20]
   return(result);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e6      	bne.n	8003a82 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d103      	bne.n	8003aca <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff f9e4 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ad8:	e00b      	b.n	8003af2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fc febc 	bl	8000858 <HAL_UART_RxCpltCallback>
}
 8003ae0:	e007      	b.n	8003af2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0208 	orr.w	r2, r2, #8
 8003af0:	619a      	str	r2, [r3, #24]
}
 8003af2:	bf00      	nop
 8003af4:	3758      	adds	r7, #88	; 0x58
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b096      	sub	sp, #88	; 0x58
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b12:	2b22      	cmp	r3, #34	; 0x22
 8003b14:	f040 8098 	bne.w	8003c48 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b28:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003b2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b30:	4013      	ands	r3, r2
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b36:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d17b      	bne.n	8003c58 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e6      	bne.n	8003b60 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3308      	adds	r3, #8
 8003bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e5      	bne.n	8003b92 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d12e      	bne.n	8003c40 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f023 0310 	bic.w	r3, r3, #16
 8003bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6979      	ldr	r1, [r7, #20]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	613b      	str	r3, [r7, #16]
   return(result);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e6      	bne.n	8003be8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d103      	bne.n	8003c30 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff f931 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c3e:	e00b      	b.n	8003c58 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fc fe09 	bl	8000858 <HAL_UART_RxCpltCallback>
}
 8003c46:	e007      	b.n	8003c58 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0208 	orr.w	r2, r2, #8
 8003c56:	619a      	str	r2, [r3, #24]
}
 8003c58:	bf00      	nop
 8003c5a:	3758      	adds	r7, #88	; 0x58
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <atoi>:
 8003c60:	220a      	movs	r2, #10
 8003c62:	2100      	movs	r1, #0
 8003c64:	f000 b882 	b.w	8003d6c <strtol>

08003c68 <_strtol_l.constprop.0>:
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6e:	d001      	beq.n	8003c74 <_strtol_l.constprop.0+0xc>
 8003c70:	2b24      	cmp	r3, #36	; 0x24
 8003c72:	d906      	bls.n	8003c82 <_strtol_l.constprop.0+0x1a>
 8003c74:	f000 f88c 	bl	8003d90 <__errno>
 8003c78:	2316      	movs	r3, #22
 8003c7a:	6003      	str	r3, [r0, #0]
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003d68 <_strtol_l.constprop.0+0x100>
 8003c86:	460d      	mov	r5, r1
 8003c88:	462e      	mov	r6, r5
 8003c8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c8e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003c92:	f017 0708 	ands.w	r7, r7, #8
 8003c96:	d1f7      	bne.n	8003c88 <_strtol_l.constprop.0+0x20>
 8003c98:	2c2d      	cmp	r4, #45	; 0x2d
 8003c9a:	d132      	bne.n	8003d02 <_strtol_l.constprop.0+0x9a>
 8003c9c:	782c      	ldrb	r4, [r5, #0]
 8003c9e:	2701      	movs	r7, #1
 8003ca0:	1cb5      	adds	r5, r6, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d05b      	beq.n	8003d5e <_strtol_l.constprop.0+0xf6>
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d109      	bne.n	8003cbe <_strtol_l.constprop.0+0x56>
 8003caa:	2c30      	cmp	r4, #48	; 0x30
 8003cac:	d107      	bne.n	8003cbe <_strtol_l.constprop.0+0x56>
 8003cae:	782c      	ldrb	r4, [r5, #0]
 8003cb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003cb4:	2c58      	cmp	r4, #88	; 0x58
 8003cb6:	d14d      	bne.n	8003d54 <_strtol_l.constprop.0+0xec>
 8003cb8:	786c      	ldrb	r4, [r5, #1]
 8003cba:	2310      	movs	r3, #16
 8003cbc:	3502      	adds	r5, #2
 8003cbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003cc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003cc6:	f04f 0e00 	mov.w	lr, #0
 8003cca:	fbb8 f9f3 	udiv	r9, r8, r3
 8003cce:	4676      	mov	r6, lr
 8003cd0:	fb03 8a19 	mls	sl, r3, r9, r8
 8003cd4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003cd8:	f1bc 0f09 	cmp.w	ip, #9
 8003cdc:	d816      	bhi.n	8003d0c <_strtol_l.constprop.0+0xa4>
 8003cde:	4664      	mov	r4, ip
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	dd24      	ble.n	8003d2e <_strtol_l.constprop.0+0xc6>
 8003ce4:	f1be 3fff 	cmp.w	lr, #4294967295
 8003ce8:	d008      	beq.n	8003cfc <_strtol_l.constprop.0+0x94>
 8003cea:	45b1      	cmp	r9, r6
 8003cec:	d31c      	bcc.n	8003d28 <_strtol_l.constprop.0+0xc0>
 8003cee:	d101      	bne.n	8003cf4 <_strtol_l.constprop.0+0x8c>
 8003cf0:	45a2      	cmp	sl, r4
 8003cf2:	db19      	blt.n	8003d28 <_strtol_l.constprop.0+0xc0>
 8003cf4:	fb06 4603 	mla	r6, r6, r3, r4
 8003cf8:	f04f 0e01 	mov.w	lr, #1
 8003cfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d00:	e7e8      	b.n	8003cd4 <_strtol_l.constprop.0+0x6c>
 8003d02:	2c2b      	cmp	r4, #43	; 0x2b
 8003d04:	bf04      	itt	eq
 8003d06:	782c      	ldrbeq	r4, [r5, #0]
 8003d08:	1cb5      	addeq	r5, r6, #2
 8003d0a:	e7ca      	b.n	8003ca2 <_strtol_l.constprop.0+0x3a>
 8003d0c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003d10:	f1bc 0f19 	cmp.w	ip, #25
 8003d14:	d801      	bhi.n	8003d1a <_strtol_l.constprop.0+0xb2>
 8003d16:	3c37      	subs	r4, #55	; 0x37
 8003d18:	e7e2      	b.n	8003ce0 <_strtol_l.constprop.0+0x78>
 8003d1a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003d1e:	f1bc 0f19 	cmp.w	ip, #25
 8003d22:	d804      	bhi.n	8003d2e <_strtol_l.constprop.0+0xc6>
 8003d24:	3c57      	subs	r4, #87	; 0x57
 8003d26:	e7db      	b.n	8003ce0 <_strtol_l.constprop.0+0x78>
 8003d28:	f04f 3eff 	mov.w	lr, #4294967295
 8003d2c:	e7e6      	b.n	8003cfc <_strtol_l.constprop.0+0x94>
 8003d2e:	f1be 3fff 	cmp.w	lr, #4294967295
 8003d32:	d105      	bne.n	8003d40 <_strtol_l.constprop.0+0xd8>
 8003d34:	2322      	movs	r3, #34	; 0x22
 8003d36:	6003      	str	r3, [r0, #0]
 8003d38:	4646      	mov	r6, r8
 8003d3a:	b942      	cbnz	r2, 8003d4e <_strtol_l.constprop.0+0xe6>
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	e79e      	b.n	8003c7e <_strtol_l.constprop.0+0x16>
 8003d40:	b107      	cbz	r7, 8003d44 <_strtol_l.constprop.0+0xdc>
 8003d42:	4276      	negs	r6, r6
 8003d44:	2a00      	cmp	r2, #0
 8003d46:	d0f9      	beq.n	8003d3c <_strtol_l.constprop.0+0xd4>
 8003d48:	f1be 0f00 	cmp.w	lr, #0
 8003d4c:	d000      	beq.n	8003d50 <_strtol_l.constprop.0+0xe8>
 8003d4e:	1e69      	subs	r1, r5, #1
 8003d50:	6011      	str	r1, [r2, #0]
 8003d52:	e7f3      	b.n	8003d3c <_strtol_l.constprop.0+0xd4>
 8003d54:	2430      	movs	r4, #48	; 0x30
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1b1      	bne.n	8003cbe <_strtol_l.constprop.0+0x56>
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	e7af      	b.n	8003cbe <_strtol_l.constprop.0+0x56>
 8003d5e:	2c30      	cmp	r4, #48	; 0x30
 8003d60:	d0a5      	beq.n	8003cae <_strtol_l.constprop.0+0x46>
 8003d62:	230a      	movs	r3, #10
 8003d64:	e7ab      	b.n	8003cbe <_strtol_l.constprop.0+0x56>
 8003d66:	bf00      	nop
 8003d68:	08003e15 	.word	0x08003e15

08003d6c <strtol>:
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	460a      	mov	r2, r1
 8003d70:	4601      	mov	r1, r0
 8003d72:	4802      	ldr	r0, [pc, #8]	; (8003d7c <strtol+0x10>)
 8003d74:	6800      	ldr	r0, [r0, #0]
 8003d76:	f7ff bf77 	b.w	8003c68 <_strtol_l.constprop.0>
 8003d7a:	bf00      	nop
 8003d7c:	20000058 	.word	0x20000058

08003d80 <memset>:
 8003d80:	4402      	add	r2, r0
 8003d82:	4603      	mov	r3, r0
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d100      	bne.n	8003d8a <memset+0xa>
 8003d88:	4770      	bx	lr
 8003d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8e:	e7f9      	b.n	8003d84 <memset+0x4>

08003d90 <__errno>:
 8003d90:	4b01      	ldr	r3, [pc, #4]	; (8003d98 <__errno+0x8>)
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000058 	.word	0x20000058

08003d9c <__libc_init_array>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	4d0d      	ldr	r5, [pc, #52]	; (8003dd4 <__libc_init_array+0x38>)
 8003da0:	4c0d      	ldr	r4, [pc, #52]	; (8003dd8 <__libc_init_array+0x3c>)
 8003da2:	1b64      	subs	r4, r4, r5
 8003da4:	10a4      	asrs	r4, r4, #2
 8003da6:	2600      	movs	r6, #0
 8003da8:	42a6      	cmp	r6, r4
 8003daa:	d109      	bne.n	8003dc0 <__libc_init_array+0x24>
 8003dac:	4d0b      	ldr	r5, [pc, #44]	; (8003ddc <__libc_init_array+0x40>)
 8003dae:	4c0c      	ldr	r4, [pc, #48]	; (8003de0 <__libc_init_array+0x44>)
 8003db0:	f000 f818 	bl	8003de4 <_init>
 8003db4:	1b64      	subs	r4, r4, r5
 8003db6:	10a4      	asrs	r4, r4, #2
 8003db8:	2600      	movs	r6, #0
 8003dba:	42a6      	cmp	r6, r4
 8003dbc:	d105      	bne.n	8003dca <__libc_init_array+0x2e>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc4:	4798      	blx	r3
 8003dc6:	3601      	adds	r6, #1
 8003dc8:	e7ee      	b.n	8003da8 <__libc_init_array+0xc>
 8003dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dce:	4798      	blx	r3
 8003dd0:	3601      	adds	r6, #1
 8003dd2:	e7f2      	b.n	8003dba <__libc_init_array+0x1e>
 8003dd4:	08003f20 	.word	0x08003f20
 8003dd8:	08003f20 	.word	0x08003f20
 8003ddc:	08003f20 	.word	0x08003f20
 8003de0:	08003f24 	.word	0x08003f24

08003de4 <_init>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	bf00      	nop
 8003de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dea:	bc08      	pop	{r3}
 8003dec:	469e      	mov	lr, r3
 8003dee:	4770      	bx	lr

08003df0 <_fini>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr
