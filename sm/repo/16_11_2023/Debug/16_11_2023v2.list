
16_11_2023v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afb8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800b188  0800b188  0001b188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5c4  0800b5c4  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5c4  0800b5c4  0001b5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5cc  0800b5cc  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5cc  0800b5cc  0001b5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5d0  0800b5d0  0001b5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800b5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000240  0800b814  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800b814  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fc1  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003479  00000000  00000000  00038231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0003b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0003c958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002922f  00000000  00000000  0003da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018648  00000000  00000000  00066c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6ee6  00000000  00000000  0007f2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001761cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e78  00000000  00000000  00176220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b170 	.word	0x0800b170

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	0800b170 	.word	0x0800b170

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fa47 	bl	8001468 <null_ptr_check>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d117      	bne.n	8001016 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	20d0      	movs	r0, #208	; 0xd0
 8000fee:	f000 f818 	bl	8001022 <bmp2_get_regs>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10b      	bne.n	8001016 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b58      	cmp	r3, #88	; 0x58
 8001004:	d105      	bne.n	8001012 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fa79 	bl	80014fe <get_calib_param>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e001      	b.n	8001016 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8001012:	23fc      	movs	r3, #252	; 0xfc
 8001014:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b087      	sub	sp, #28
 8001026:	af00      	add	r7, sp, #0
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f000 fa18 	bl	8001468 <null_ptr_check>
 8001038:	4603      	mov	r3, r0
 800103a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 800103c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d11e      	bne.n	8001082 <bmp2_get_regs+0x60>
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d01b      	beq.n	8001082 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	785b      	ldrb	r3, [r3, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d103      	bne.n	800105a <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001058:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68dc      	ldr	r4, [r3, #12]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	7bf8      	ldrb	r0, [r7, #15]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	47a0      	blx	r4
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 800107c:	23fe      	movs	r3, #254	; 0xfe
 800107e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001080:	e001      	b.n	8001086 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001082:	23ff      	movs	r3, #255	; 0xff
 8001084:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800108a:	4618      	mov	r0, r3
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd90      	pop	{r4, r7, pc}

08001092 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001092:	b590      	push	{r4, r7, lr}
 8001094:	b08b      	sub	sp, #44	; 0x2c
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d901      	bls.n	80010aa <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80010a6:	2304      	movs	r3, #4
 80010a8:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 80010aa:	6838      	ldr	r0, [r7, #0]
 80010ac:	f000 f9dc 	bl	8001468 <null_ptr_check>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80010b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d150      	bne.n	8001160 <bmp2_set_regs+0xce>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d04d      	beq.n	8001160 <bmp2_set_regs+0xce>
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d04a      	beq.n	8001160 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d043      	beq.n	8001158 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d114      	bne.n	8001108 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010de:	2300      	movs	r3, #0
 80010e0:	77fb      	strb	r3, [r7, #31]
 80010e2:	e00d      	b.n	8001100 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 80010e4:	7ffb      	ldrb	r3, [r7, #31]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4413      	add	r3, r2
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
 80010ee:	68f9      	ldr	r1, [r7, #12]
 80010f0:	440b      	add	r3, r1
 80010f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010fa:	7ffb      	ldrb	r3, [r7, #31]
 80010fc:	3301      	adds	r3, #1
 80010fe:	77fb      	strb	r3, [r7, #31]
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8ed      	bhi.n	80010e4 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d90b      	bls.n	8001126 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800110e:	f107 0114 	add.w	r1, r7, #20
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 f9c6 	bl	80014a8 <interleave_data>
                temp_len = ((len * 2) - 1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	3b01      	subs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
 8001124:	e001      	b.n	800112a <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691c      	ldr	r4, [r3, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	7818      	ldrb	r0, [r3, #0]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f107 0114 	add.w	r1, r7, #20
 800113a:	6a3a      	ldr	r2, [r7, #32]
 800113c:	47a0      	blx	r4
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00b      	beq.n	8001168 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8001150:	23fe      	movs	r3, #254	; 0xfe
 8001152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001156:	e007      	b.n	8001168 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001158:	23fd      	movs	r3, #253	; 0xfd
 800115a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800115e:	e003      	b.n	8001168 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001160:	23ff      	movs	r3, #255	; 0xff
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001166:	e000      	b.n	800116a <bmp2_set_regs+0xd8>
        if (len > 0)
 8001168:	bf00      	nop
    }

    return rslt;
 800116a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800116e:	4618      	mov	r0, r3
 8001170:	372c      	adds	r7, #44	; 0x2c
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}

08001176 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800117e:	23e0      	movs	r3, #224	; 0xe0
 8001180:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8001182:	23b6      	movs	r3, #182	; 0xb6
 8001184:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001186:	f107 010d 	add.w	r1, r7, #13
 800118a:	f107 000e 	add.w	r0, r7, #14
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f7ff ff7e 	bl	8001092 <bmp2_set_regs>
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80011b0:	2300      	movs	r3, #0
 80011b2:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d02d      	beq.n	8001216 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80011ba:	f107 010c 	add.w	r1, r7, #12
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2202      	movs	r2, #2
 80011c2:	20f4      	movs	r0, #244	; 0xf4
 80011c4:	f7ff ff2d 	bl	8001022 <bmp2_get_regs>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80011cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d122      	bne.n	800121a <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 80011d4:	7b3b      	ldrb	r3, [r7, #12]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 80011de:	7b3b      	ldrb	r3, [r7, #12]
 80011e0:	109b      	asrs	r3, r3, #2
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80011ee:	7b7b      	ldrb	r3, [r7, #13]
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011f8:	7b7b      	ldrb	r3, [r7, #13]
 80011fa:	109b      	asrs	r3, r3, #2
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	b2da      	uxtb	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001208:	7b7b      	ldrb	r3, [r7, #13]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	b2da      	uxtb	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	715a      	strb	r2, [r3, #5]
 8001214:	e001      	b.n	800121a <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001216:	23ff      	movs	r3, #255	; 0xff
 8001218:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	2000      	movs	r0, #0
 8001236:	f000 f9fd 	bl	8001634 <conf_sensor>
 800123a:	4603      	mov	r3, r0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01b      	beq.n	800128c <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001254:	f107 010e 	add.w	r1, r7, #14
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2201      	movs	r2, #1
 800125c:	20f3      	movs	r0, #243	; 0xf3
 800125e:	f7ff fee0 	bl	8001022 <bmp2_get_regs>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d110      	bne.n	8001290 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800126e:	7bbb      	ldrb	r3, [r7, #14]
 8001270:	10db      	asrs	r3, r3, #3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	b2da      	uxtb	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	705a      	strb	r2, [r3, #1]
 800128a:	e001      	b.n	8001290 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800128c:	23ff      	movs	r3, #255	; 0xff
 800128e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f9bf 	bl	8001634 <conf_sensor>
 80012b6:	4603      	mov	r3, r0
 80012b8:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80012ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	2300      	movs	r3, #0
 80012d6:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d024      	beq.n	8001332 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80012e8:	f107 0110 	add.w	r1, r7, #16
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2206      	movs	r2, #6
 80012f0:	20f7      	movs	r0, #247	; 0xf7
 80012f2:	f7ff fe96 	bl	8001022 <bmp2_get_regs>
 80012f6:	4603      	mov	r3, r0
 80012f8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d119      	bne.n	8001336 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8001302:	f107 0208 	add.w	r2, r7, #8
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fab9 	bl	8001884 <parse_sensor_data>
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10b      	bne.n	8001336 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f80b 	bl	8001342 <bmp2_compensate_data>
 800132c:	4603      	mov	r3, r0
 800132e:	75fb      	strb	r3, [r7, #23]
 8001330:	e001      	b.n	8001336 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001332:	23ff      	movs	r3, #255	; 0xff
 8001334:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001336:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f88a 	bl	8001468 <null_ptr_check>
 8001354:	4603      	mov	r3, r0
 8001356:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d129      	bne.n	80013b4 <bmp2_compensate_data+0x72>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d026      	beq.n	80013b4 <bmp2_compensate_data+0x72>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d023      	beq.n	80013b4 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3308      	adds	r3, #8
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fabb 	bl	800190c <compensate_temperature>
 8001396:	4603      	mov	r3, r0
 8001398:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800139a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10a      	bne.n	80013b8 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68f9      	ldr	r1, [r7, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fba5 	bl	8001af8 <compensate_pressure>
 80013ae:	4603      	mov	r3, r0
 80013b0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 80013b2:	e001      	b.n	80013b8 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013b4:	23ff      	movs	r3, #255	; 0xff
 80013b6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b092      	sub	sp, #72	; 0x48
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <bmp2_compute_meas_time+0x9c>)
 80013d2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80013d6:	461d      	mov	r5, r3
 80013d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <bmp2_compute_meas_time+0xa0>)
 80013e2:	f107 0410 	add.w	r4, r7, #16
 80013e6:	461d      	mov	r5, r3
 80013e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f837 	bl	8001468 <null_ptr_check>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001400:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001404:	2b00      	cmp	r3, #0
 8001406:	d122      	bne.n	800144e <bmp2_compute_meas_time+0x8a>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01f      	beq.n	800144e <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e1b      	ldrb	r3, [r3, #24]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d111      	bne.n	800143a <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	78db      	ldrb	r3, [r3, #3]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	3348      	adds	r3, #72	; 0x48
 800141e:	443b      	add	r3, r7
 8001420:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	789b      	ldrb	r3, [r3, #2]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	3348      	adds	r3, #72	; 0x48
 800142c:	443b      	add	r3, r7
 800142e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001432:	441a      	add	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001438:	e00c      	b.n	8001454 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	78db      	ldrb	r3, [r3, #3]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	3348      	adds	r3, #72	; 0x48
 8001442:	443b      	add	r3, r7
 8001444:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800144c:	e002      	b.n	8001454 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800144e:	23ff      	movs	r3, #255	; 0xff
 8001450:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001454:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001458:	4618      	mov	r0, r3
 800145a:	3748      	adds	r7, #72	; 0x48
 800145c:	46bd      	mov	sp, r7
 800145e:	bdb0      	pop	{r4, r5, r7, pc}
 8001460:	0800b188 	.word	0x0800b188
 8001464:	0800b19c 	.word	0x0800b19c

08001468 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <null_ptr_check+0x26>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <null_ptr_check+0x26>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <null_ptr_check+0x26>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800148e:	23ff      	movs	r3, #255	; 0xff
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e001      	b.n	8001498 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001498:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e015      	b.n	80014e8 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	441a      	add	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	3b01      	subs	r3, #1
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	440b      	add	r3, r1
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	441a      	add	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	440b      	add	r3, r1
 80014de:	7812      	ldrb	r2, [r2, #0]
 80014e0:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d3e5      	bcc.n	80014bc <interleave_data+0x14>
    }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b08a      	sub	sp, #40	; 0x28
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 800151c:	f107 010c 	add.w	r1, r7, #12
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2219      	movs	r2, #25
 8001524:	2088      	movs	r0, #136	; 0x88
 8001526:	f7ff fd7c 	bl	8001022 <bmp2_get_regs>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8001530:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001534:	2b00      	cmp	r3, #0
 8001536:	d177      	bne.n	8001628 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	7b3b      	ldrb	r3, [r7, #12]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21a      	sxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800155e:	7c7b      	ldrb	r3, [r7, #17]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	7c3b      	ldrb	r3, [r7, #16]
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b21a      	sxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001570:	7cfb      	ldrb	r3, [r7, #19]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	7cbb      	ldrb	r3, [r7, #18]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001584:	7d7b      	ldrb	r3, [r7, #21]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21a      	sxth	r2, r3
 800158a:	7d3b      	ldrb	r3, [r7, #20]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b21a      	sxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	7dbb      	ldrb	r3, [r7, #22]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 80015a8:	7e7b      	ldrb	r3, [r7, #25]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7e3b      	ldrb	r3, [r7, #24]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 80015ba:	7efb      	ldrb	r3, [r7, #27]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b21a      	sxth	r2, r3
 80015c0:	7ebb      	ldrb	r3, [r7, #26]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 80015cc:	7f7b      	ldrb	r3, [r7, #29]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	7f3b      	ldrb	r3, [r7, #28]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21a      	sxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 80015de:	7ffb      	ldrb	r3, [r7, #31]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	7fbb      	ldrb	r3, [r7, #30]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80015f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21a      	sxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001612:	b21b      	sxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b21a      	sxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 800161c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001620:	b25a      	sxtb	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001628:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800162c:	4618      	mov	r0, r3
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001642:	2300      	movs	r3, #0
 8001644:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001646:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 800164a:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d074      	beq.n	800173c <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001652:	f107 0114 	add.w	r1, r7, #20
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	20f4      	movs	r0, #244	; 0xf4
 800165c:	f7ff fce1 	bl	8001022 <bmp2_get_regs>
 8001660:	4603      	mov	r3, r0
 8001662:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001664:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d169      	bne.n	8001740 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fd82 	bl	8001176 <bmp2_soft_reset>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d160      	bne.n	8001740 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f861 	bl	800174c <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 800168a:	7d7b      	ldrb	r3, [r7, #21]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	b25a      	sxtb	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	789b      	ldrb	r3, [r3, #2]
 8001698:	015b      	lsls	r3, r3, #5
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80016a4:	7d7b      	ldrb	r3, [r7, #21]
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f023 031c 	bic.w	r3, r3, #28
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	791b      	ldrb	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f003 031c 	and.w	r3, r3, #28
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 80016c4:	7d7b      	ldrb	r3, [r7, #21]
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	b25a      	sxtb	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	795b      	ldrb	r3, [r3, #5]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 80016e2:	f107 0114 	add.w	r1, r7, #20
 80016e6:	f107 0010 	add.w	r0, r7, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2202      	movs	r2, #2
 80016ee:	f7ff fcd0 	bl	8001092 <bmp2_set_regs>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d120      	bne.n	8001740 <conf_sensor+0x10c>
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01d      	beq.n	8001740 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 800170a:	7d3b      	ldrb	r3, [r7, #20]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	b25a      	sxtb	r2, r3
 8001714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001726:	f107 0114 	add.w	r1, r7, #20
 800172a:	f107 0010 	add.w	r0, r7, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f7ff fcae 	bl	8001092 <bmp2_set_regs>
 8001736:	4603      	mov	r3, r0
 8001738:	75fb      	strb	r3, [r7, #23]
 800173a:	e001      	b.n	8001740 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800173c:	23ff      	movs	r3, #255	; 0xff
 800173e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001740:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	78db      	ldrb	r3, [r3, #3]
 800175a:	2b04      	cmp	r3, #4
 800175c:	f200 808b 	bhi.w	8001876 <set_os_mode+0x12a>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <set_os_mode+0x1c>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	0800177d 	.word	0x0800177d
 800176c:	080017af 	.word	0x080017af
 8001770:	080017e1 	.word	0x080017e1
 8001774:	08001813 	.word	0x08001813
 8001778:	08001845 	.word	0x08001845
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b25b      	sxtb	r3, r3
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	b25b      	sxtb	r3, r3
 800178e:	b2da      	uxtb	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b25b      	sxtb	r3, r3
 800179a:	f023 031c 	bic.w	r3, r3, #28
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	701a      	strb	r2, [r3, #0]
            break;
 80017ac:	e064      	b.n	8001878 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f043 0320 	orr.w	r3, r3, #32
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	f023 031c 	bic.w	r3, r3, #28
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	701a      	strb	r2, [r3, #0]
            break;
 80017de:	e04b      	b.n	8001878 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	f023 031c 	bic.w	r3, r3, #28
 8001802:	b25b      	sxtb	r3, r3
 8001804:	f043 030c 	orr.w	r3, r3, #12
 8001808:	b25b      	sxtb	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	701a      	strb	r2, [r3, #0]
            break;
 8001810:	e032      	b.n	8001878 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25b      	sxtb	r3, r3
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f043 0320 	orr.w	r3, r3, #32
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2da      	uxtb	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b25b      	sxtb	r3, r3
 8001830:	f023 031c 	bic.w	r3, r3, #28
 8001834:	b25b      	sxtb	r3, r3
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	b25b      	sxtb	r3, r3
 800183c:	b2da      	uxtb	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	701a      	strb	r2, [r3, #0]
            break;
 8001842:	e019      	b.n	8001878 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b25b      	sxtb	r3, r3
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	b25b      	sxtb	r3, r3
 8001850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001854:	b25b      	sxtb	r3, r3
 8001856:	b2da      	uxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f023 031c 	bic.w	r3, r3, #28
 8001866:	b25b      	sxtb	r3, r3
 8001868:	f043 0314 	orr.w	r3, r3, #20
 800186c:	b25b      	sxtb	r3, r3
 800186e:	b2da      	uxtb	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	701a      	strb	r2, [r3, #0]
            break;
 8001874:	e000      	b.n	8001878 <set_os_mode+0x12c>
        default:
            break;
 8001876:	bf00      	nop
    }
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	031b      	lsls	r3, r3, #12
 8001894:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3302      	adds	r3, #2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3303      	adds	r3, #3
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	031b      	lsls	r3, r3, #12
 80018c2:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3304      	adds	r3, #4
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3305      	adds	r3, #5
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	431a      	orrs	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f000 fae3 	bl	8001ec0 <st_check_boundaries>
 80018fa:	4603      	mov	r3, r0
 80018fc:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 800190c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001910:	b08c      	sub	sp, #48	; 0x30
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe1d 	bl	8000564 <__aeabi_i2d>
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <compensate_temperature+0x1d4>)
 8001930:	f7fe ffac 	bl	800088c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	8b9b      	ldrh	r3, [r3, #28]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fdff 	bl	8000544 <__aeabi_ui2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <compensate_temperature+0x1d8>)
 800194c:	f7fe ff9e 	bl	800088c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fcb6 	bl	80002c8 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdfa 	bl	8000564 <__aeabi_i2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7fe fe5e 	bl	8000638 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fdeb 	bl	8000564 <__aeabi_i2d>
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001996:	f7fe ff79 	bl	800088c <__aeabi_ddiv>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4614      	mov	r4, r2
 80019a0:	461d      	mov	r5, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	8b9b      	ldrh	r3, [r3, #28]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdcc 	bl	8000544 <__aeabi_ui2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <compensate_temperature+0x1dc>)
 80019b2:	f7fe ff6b 	bl	800088c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe fc83 	bl	80002c8 <__aeabi_dsub>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdc8 	bl	8000564 <__aeabi_i2d>
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80019dc:	f7fe ff56 	bl	800088c <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4690      	mov	r8, r2
 80019e6:	4699      	mov	r9, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	8b9b      	ldrh	r3, [r3, #28]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fda9 	bl	8000544 <__aeabi_ui2d>
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <compensate_temperature+0x1dc>)
 80019f8:	f7fe ff48 	bl	800088c <__aeabi_ddiv>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4640      	mov	r0, r8
 8001a02:	4649      	mov	r1, r9
 8001a04:	f7fe fc60 	bl	80002c8 <__aeabi_dsub>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	4629      	mov	r1, r5
 8001a10:	f7fe fe12 	bl	8000638 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4614      	mov	r4, r2
 8001a1a:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd9e 	bl	8000564 <__aeabi_i2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
    var2 =
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7fe fe02 	bl	8000638 <__aeabi_dmul>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a44:	f7fe fc42 	bl	80002cc <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f8a2 	bl	8000b98 <__aeabi_d2iz>
 8001a54:	4602      	mov	r2, r0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a62:	f7fe fc33 	bl	80002cc <__adddf3>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <compensate_temperature+0x1e0>)
 8001a74:	f7fe ff0a 	bl	800088c <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <compensate_temperature+0x1e4>)
 8001a86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a8a:	f7ff f847 	bl	8000b1c <__aeabi_dcmplt>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <compensate_temperature+0x1e4>)
 8001a9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <compensate_temperature+0x1e8>)
 8001aaa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001aae:	f7ff f853 	bl	8000b58 <__aeabi_dcmpgt>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <compensate_temperature+0x1e8>)
 8001abe:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ace:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001ad2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3730      	adds	r7, #48	; 0x30
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ae0:	40d00000 	.word	0x40d00000
 8001ae4:	40900000 	.word	0x40900000
 8001ae8:	40c00000 	.word	0x40c00000
 8001aec:	40b40000 	.word	0x40b40000
 8001af0:	c0440000 	.word	0xc0440000
 8001af4:	40554000 	.word	0x40554000

08001af8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd22 	bl	8000564 <__aeabi_i2d>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b28:	f7fe feb0 	bl	800088c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4bcb      	ldr	r3, [pc, #812]	; (8001e68 <compensate_pressure+0x370>)
 8001b3a:	f7fe fbc5 	bl	80002c8 <__aeabi_dsub>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b4e:	f7fe fd73 	bl	8000638 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4614      	mov	r4, r2
 8001b58:	461d      	mov	r5, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcff 	bl	8000564 <__aeabi_i2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f7fe fd63 	bl	8000638 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4bbb      	ldr	r3, [pc, #748]	; (8001e6c <compensate_pressure+0x374>)
 8001b80:	f7fe fe84 	bl	800088c <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fce6 	bl	8000564 <__aeabi_i2d>
 8001b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9c:	f7fe fd4c 	bl	8000638 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	f7fe fb8e 	bl	80002cc <__adddf3>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bb8:	f7fe fb88 	bl	80002cc <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4ba9      	ldr	r3, [pc, #676]	; (8001e70 <compensate_pressure+0x378>)
 8001bca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bce:	f7fe fe5d 	bl	800088c <__aeabi_ddiv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4614      	mov	r4, r2
 8001bd8:	461d      	mov	r5, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcbf 	bl	8000564 <__aeabi_i2d>
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4ba2      	ldr	r3, [pc, #648]	; (8001e74 <compensate_pressure+0x37c>)
 8001bec:	f7fe fd24 	bl	8000638 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	f7fe fb68 	bl	80002cc <__adddf3>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fcaa 	bl	8000564 <__aeabi_i2d>
 8001c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c14:	f7fe fd10 	bl	8000638 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c24:	f7fe fd08 	bl	8000638 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b90      	ldr	r3, [pc, #576]	; (8001e78 <compensate_pressure+0x380>)
 8001c36:	f7fe fe29 	bl	800088c <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4614      	mov	r4, r2
 8001c40:	461d      	mov	r5, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc8b 	bl	8000564 <__aeabi_i2d>
 8001c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c52:	f7fe fcf1 	bl	8000638 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f7fe fb35 	bl	80002cc <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b82      	ldr	r3, [pc, #520]	; (8001e78 <compensate_pressure+0x380>)
 8001c70:	f7fe fe0c 	bl	800088c <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <compensate_pressure+0x374>)
 8001c82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c86:	f7fe fe01 	bl	800088c <__aeabi_ddiv>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <compensate_pressure+0x384>)
 8001c98:	f7fe fb18 	bl	80002cc <__adddf3>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4614      	mov	r4, r2
 8001ca2:	461d      	mov	r5, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc4b 	bl	8000544 <__aeabi_ui2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fcbf 	bl	8000638 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cce:	f7fe ff25 	bl	8000b1c <__aeabi_dcmplt>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10b      	bne.n	8001cf0 <compensate_pressure+0x1f8>
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ce4:	f7fe ff38 	bl	8000b58 <__aeabi_dcmpgt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80de 	beq.w	8001eac <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fc25 	bl	8000544 <__aeabi_ui2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	495f      	ldr	r1, [pc, #380]	; (8001e80 <compensate_pressure+0x388>)
 8001d04:	f7fe fae0 	bl	80002c8 <__aeabi_dsub>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <compensate_pressure+0x38c>)
 8001d16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d1a:	f7fe fdb7 	bl	800088c <__aeabi_ddiv>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d26:	f7fe facf 	bl	80002c8 <__aeabi_dsub>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	a347      	add	r3, pc, #284	; (adr r3, 8001e50 <compensate_pressure+0x358>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fc7e 	bl	8000638 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d48:	f7fe fda0 	bl	800088c <__aeabi_ddiv>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fc02 	bl	8000564 <__aeabi_i2d>
 8001d60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d64:	f7fe fc68 	bl	8000638 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d74:	f7fe fc60 	bl	8000638 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <compensate_pressure+0x390>)
 8001d86:	f7fe fd81 	bl	800088c <__aeabi_ddiv>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbe3 	bl	8000564 <__aeabi_i2d>
 8001d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001da2:	f7fe fc49 	bl	8000638 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <compensate_pressure+0x374>)
 8001db4:	f7fe fd6a 	bl	800088c <__aeabi_ddiv>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001dc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dc8:	f7fe fa80 	bl	80002cc <__adddf3>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbc2 	bl	8000564 <__aeabi_i2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7fe fa70 	bl	80002cc <__adddf3>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <compensate_pressure+0x394>)
 8001dfa:	f7fe fd47 	bl	800088c <__aeabi_ddiv>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e06:	f7fe fa61 	bl	80002cc <__adddf3>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e12:	a311      	add	r3, pc, #68	; (adr r3, 8001e58 <compensate_pressure+0x360>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e1c:	f7fe fe7e 	bl	8000b1c <__aeabi_dcmplt>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e26:	a30c      	add	r3, pc, #48	; (adr r3, 8001e58 <compensate_pressure+0x360>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e30:	2303      	movs	r3, #3
 8001e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e36:	a30a      	add	r3, pc, #40	; (adr r3, 8001e60 <compensate_pressure+0x368>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e40:	f7fe fe8a 	bl	8000b58 <__aeabi_dcmpgt>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	e022      	b.n	8001e90 <compensate_pressure+0x398>
 8001e4a:	bf00      	nop
 8001e4c:	f3af 8000 	nop.w
 8001e50:	00000000 	.word	0x00000000
 8001e54:	40b86a00 	.word	0x40b86a00
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	40dd4c00 	.word	0x40dd4c00
 8001e60:	00000000 	.word	0x00000000
 8001e64:	40fadb00 	.word	0x40fadb00
 8001e68:	40ef4000 	.word	0x40ef4000
 8001e6c:	40e00000 	.word	0x40e00000
 8001e70:	40100000 	.word	0x40100000
 8001e74:	40f00000 	.word	0x40f00000
 8001e78:	41200000 	.word	0x41200000
 8001e7c:	3ff00000 	.word	0x3ff00000
 8001e80:	41300000 	.word	0x41300000
 8001e84:	40b00000 	.word	0x40b00000
 8001e88:	41e00000 	.word	0x41e00000
 8001e8c:	40300000 	.word	0x40300000
 8001e90:	d007      	beq.n	8001ea2 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e92:	a309      	add	r3, pc, #36	; (adr r3, 8001eb8 <compensate_pressure+0x3c0>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001ea2:	68f9      	ldr	r1, [r7, #12]
 8001ea4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ea8:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001eac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3730      	adds	r7, #48	; 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40fadb00 	.word	0x40fadb00

08001ec0 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db03      	blt.n	8001edc <st_check_boundaries+0x1c>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <st_check_boundaries+0x88>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	dd09      	ble.n	8001ef0 <st_check_boundaries+0x30>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db06      	blt.n	8001ef0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <st_check_boundaries+0x88>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	dc02      	bgt.n	8001ef0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001eea:	23fa      	movs	r3, #250	; 0xfa
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e023      	b.n	8001f38 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db03      	blt.n	8001efe <st_check_boundaries+0x3e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <st_check_boundaries+0x88>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	dd09      	ble.n	8001f12 <st_check_boundaries+0x52>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db06      	blt.n	8001f12 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <st_check_boundaries+0x88>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	dc02      	bgt.n	8001f12 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001f0c:	23fb      	movs	r3, #251	; 0xfb
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e012      	b.n	8001f38 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db03      	blt.n	8001f20 <st_check_boundaries+0x60>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <st_check_boundaries+0x88>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	dd09      	ble.n	8001f34 <st_check_boundaries+0x74>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db03      	blt.n	8001f2e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <st_check_boundaries+0x88>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	dd02      	ble.n	8001f34 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f2e:	23f9      	movs	r3, #249	; 0xf9
 8001f30:	73fb      	strb	r3, [r7, #15]
 8001f32:	e001      	b.n	8001f38 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	000ffff0 	.word	0x000ffff0

08001f4c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff f839 	bl	8000fcc <bmp2_init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f91e 	bl	80011a6 <bmp2_get_config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f72:	2300      	movs	r3, #0
 8001f74:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f76:	2303      	movs	r3, #3
 8001f78:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f950 	bl	8001226 <bmp2_set_config>
 8001f86:	4603      	mov	r3, r0
 8001f88:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4619      	mov	r1, r3
 8001f92:	2003      	movs	r0, #3
 8001f94:	f7ff f982 	bl	800129c <bmp2_set_power_mode>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f9c:	f107 0108 	add.w	r1, r7, #8
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fa0c 	bl	80013c4 <bmp2_compute_meas_time>
 8001fac:	4603      	mov	r3, r0
 8001fae:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6858      	ldr	r0, [r3, #4]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	891b      	ldrh	r3, [r3, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f001 fbf8 	bl	80037d8 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	f107 010f 	add.w	r1, r7, #15
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f002 fdcf 	bl	8004b96 <HAL_SPI_Transmit>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	b29a      	uxth	r2, r3
 8002004:	2305      	movs	r3, #5
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	f002 ff33 	bl	8004e72 <HAL_SPI_Receive>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	7dbb      	ldrb	r3, [r7, #22]
 8002012:	4413      	add	r3, r2
 8002014:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6858      	ldr	r0, [r3, #4]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	891b      	ldrh	r3, [r3, #8]
 800201e:	2201      	movs	r2, #1
 8002020:	4619      	mov	r1, r3
 8002022:	f001 fbd9 	bl	80037d8 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002026:	7dbb      	ldrb	r3, [r7, #22]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <bmp2_spi_read+0x74>
    iError = -1;
 800202c:	23ff      	movs	r3, #255	; 0xff
 800202e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002030:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002050:	2300      	movs	r3, #0
 8002052:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6858      	ldr	r0, [r3, #4]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	891b      	ldrh	r3, [r3, #8]
 8002060:	2200      	movs	r2, #0
 8002062:	4619      	mov	r1, r3
 8002064:	f001 fbb8 	bl	80037d8 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	f107 010f 	add.w	r1, r7, #15
 8002070:	2305      	movs	r3, #5
 8002072:	2201      	movs	r2, #1
 8002074:	f002 fd8f 	bl	8004b96 <HAL_SPI_Transmit>
 8002078:	4603      	mov	r3, r0
 800207a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	b29a      	uxth	r2, r3
 8002084:	2305      	movs	r3, #5
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	f002 fd85 	bl	8004b96 <HAL_SPI_Transmit>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	7dbb      	ldrb	r3, [r7, #22]
 8002092:	4413      	add	r3, r2
 8002094:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6858      	ldr	r0, [r3, #4]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	891b      	ldrh	r3, [r3, #8]
 800209e:	2201      	movs	r2, #1
 80020a0:	4619      	mov	r1, r3
 80020a2:	f001 fb99 	bl	80037d8 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80020a6:	7dbb      	ldrb	r3, [r7, #22]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <bmp2_spi_write+0x74>
    iError = -1;
 80020ac:	23ff      	movs	r3, #255	; 0xff
 80020ae:	75fb      	strb	r3, [r7, #23]

  return iError;
 80020b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <bmp2_delay_us+0x24>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 f80d 	bl	80030f0 <HAL_Delay>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	10624dd3 	.word	0x10624dd3

080020e4 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b08b      	sub	sp, #44	; 0x2c
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020f0:	23ff      	movs	r3, #255	; 0xff
 80020f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	899b      	ldrh	r3, [r3, #12]
 80020fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	68f9      	ldr	r1, [r7, #12]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f89c 	bl	8001244 <bmp2_get_status>
 800210c:	4603      	mov	r3, r0
 800210e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002112:	f107 0310 	add.w	r3, r7, #16
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f8d4 	bl	80012c6 <bmp2_get_sensor_data>
 800211e:	4603      	mov	r3, r0
 8002120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    *temp = comp_data.temperature;
 8002124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 800212e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <BMP2_ReadData+0xc4>)
 8002138:	f7fe fba8 	bl	800088c <__aeabi_ddiv>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002146:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002154:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <BMP2_ReadData+0x80>
 800215c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002160:	2b00      	cmp	r3, #0
 8002162:	dccd      	bgt.n	8002100 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	68f9      	ldr	r1, [r7, #12]
 800216c:	684c      	ldr	r4, [r1, #4]
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe fd59 	bl	8000c28 <__aeabi_d2f>
 8002176:	4603      	mov	r3, r0
 8002178:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	684c      	ldr	r4, [r1, #4]
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fd4e 	bl	8000c28 <__aeabi_d2f>
 800218c:	4603      	mov	r3, r0
 800218e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002198:	729a      	strb	r2, [r3, #10]

  return rslt;
 800219a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800219e:	4618      	mov	r0, r3
 80021a0:	372c      	adds	r7, #44	; 0x2c
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40590000 	.word	0x40590000

080021ac <HEATER_PWM_Init>:
  * @brief Initialize PWM heater control
  * @param[in] hhtr   : Heater PWM handler
  * @retval None
  */
void HEATER_PWM_Init(HEATER_PWM_Handle_TypeDef* hhtr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  hhtr->Output.Duty = (hhtr->ActiveState == HEATER_ON_HIGH) ? (hhtr->Output.Duty) : (100.0f - hhtr->Output.Duty);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7b1b      	ldrb	r3, [r3, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d103      	bne.n	80021c4 <HEATER_PWM_Init+0x18>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c2:	e006      	b.n	80021d2 <HEATER_PWM_Init+0x26>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80021ca:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80021e8 <HEATER_PWM_Init+0x3c>
 80021ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hhtr->Output));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f82c 	bl	8002238 <PWM_Init>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	42c80000 	.word	0x42c80000

080021ec <pwmWriteDuty>:
  * @param[in/out] hhtr   : Heater PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void pwmWriteDuty(HEATER_PWM_Handle_TypeDef* hhtr, float duty)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	ed87 0a00 	vstr	s0, [r7]
  hhtr->Output.Duty = (hhtr->ActiveState == HEATER_ON_HIGH) ? (duty) : (100.0f - duty);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7b1b      	ldrb	r3, [r3, #12]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d006      	beq.n	800220e <pwmWriteDuty+0x22>
 8002200:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002234 <pwmWriteDuty+0x48>
 8002204:	edd7 7a00 	vldr	s15, [r7]
 8002208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220c:	e001      	b.n	8002212 <pwmWriteDuty+0x26>
 800220e:	edd7 7a00 	vldr	s15, [r7]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hhtr->Output), hhtr->Output.Duty);
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002220:	eeb0 0a67 	vmov.f32	s0, s15
 8002224:	4610      	mov	r0, r2
 8002226:	f000 f81f 	bl	8002268 <PWM_WriteDuty>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	42c80000 	.word	0x42c80000

08002238 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	edd3 7a02 	vldr	s15, [r3, #8]
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f80c 	bl	8002268 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f003 fc82 	bl	8005b64 <HAL_TIM_PWM_Start>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8002274:	edd7 7a00 	vldr	s15, [r7]
 8002278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	d503      	bpl.n	800228a <PWM_WriteDuty+0x22>
    duty = 0.0;
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	e00a      	b.n	80022a0 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800228a:	edd7 7a00 	vldr	s15, [r7]
 800228e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800234c <PWM_WriteDuty+0xe4>
 8002292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229a:	dd01      	ble.n	80022a0 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 800229c:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <PWM_WriteDuty+0xe8>)
 800229e:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	3301      	adds	r3, #1
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b8:	edd7 7a00 	vldr	s15, [r7]
 80022bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c0:	eddf 6a22 	vldr	s13, [pc, #136]	; 800234c <PWM_WriteDuty+0xe4>
 80022c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022cc:	ee17 3a90 	vmov	r3, s15
 80022d0:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <PWM_WriteDuty+0x7e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022e4:	e02c      	b.n	8002340 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d105      	bne.n	80022fa <PWM_WriteDuty+0x92>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022f8:	e022      	b.n	8002340 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d105      	bne.n	800230e <PWM_WriteDuty+0xa6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800230c:	e018      	b.n	8002340 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d105      	bne.n	8002322 <PWM_WriteDuty+0xba>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002320:	e00e      	b.n	8002340 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b10      	cmp	r3, #16
 8002328:	d105      	bne.n	8002336 <PWM_WriteDuty+0xce>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002334:	e004      	b.n	8002340 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	42c80000 	.word	0x42c80000
 8002350:	42c80000 	.word	0x42c80000

08002354 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	; 0x38
 8002358:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800236a:	4ba6      	ldr	r3, [pc, #664]	; (8002604 <MX_GPIO_Init+0x2b0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4aa5      	ldr	r2, [pc, #660]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4ba3      	ldr	r3, [pc, #652]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002382:	4ba0      	ldr	r3, [pc, #640]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a9f      	ldr	r2, [pc, #636]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b9d      	ldr	r3, [pc, #628]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239a:	4b9a      	ldr	r3, [pc, #616]	; (8002604 <MX_GPIO_Init+0x2b0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a99      	ldr	r2, [pc, #612]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b97      	ldr	r3, [pc, #604]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	4b94      	ldr	r3, [pc, #592]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a93      	ldr	r2, [pc, #588]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b91      	ldr	r3, [pc, #580]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	4b8e      	ldr	r3, [pc, #568]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a8d      	ldr	r2, [pc, #564]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b8b      	ldr	r3, [pc, #556]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023e2:	4b88      	ldr	r3, [pc, #544]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a87      	ldr	r2, [pc, #540]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023e8:	f043 0320 	orr.w	r3, r3, #32
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b85      	ldr	r3, [pc, #532]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fa:	4b82      	ldr	r3, [pc, #520]	; (8002604 <MX_GPIO_Init+0x2b0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a81      	ldr	r2, [pc, #516]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b7f      	ldr	r3, [pc, #508]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002412:	4b7c      	ldr	r3, [pc, #496]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a7b      	ldr	r2, [pc, #492]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b79      	ldr	r3, [pc, #484]	; (8002604 <MX_GPIO_Init+0x2b0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CSB_GPIO_Port, BMP2_CSB_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2110      	movs	r1, #16
 800242e:	4876      	ldr	r0, [pc, #472]	; (8002608 <MX_GPIO_Init+0x2b4>)
 8002430:	f001 f9d2 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002434:	2200      	movs	r2, #0
 8002436:	f244 0181 	movw	r1, #16513	; 0x4081
 800243a:	4874      	ldr	r0, [pc, #464]	; (800260c <MX_GPIO_Init+0x2b8>)
 800243c:	f001 f9cc 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002446:	4872      	ldr	r0, [pc, #456]	; (8002610 <MX_GPIO_Init+0x2bc>)
 8002448:	f001 f9c6 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	f244 2140 	movw	r1, #16960	; 0x4240
 8002452:	4870      	ldr	r0, [pc, #448]	; (8002614 <MX_GPIO_Init+0x2c0>)
 8002454:	f001 f9c0 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin;
 8002458:	2310      	movs	r3, #16
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BMP2_CSB_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246c:	4619      	mov	r1, r3
 800246e:	4866      	ldr	r0, [pc, #408]	; (8002608 <MX_GPIO_Init+0x2b4>)
 8002470:	f001 f806 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800247a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002488:	4619      	mov	r1, r3
 800248a:	4863      	ldr	r0, [pc, #396]	; (8002618 <MX_GPIO_Init+0x2c4>)
 800248c:	f000 fff8 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002490:	2332      	movs	r3, #50	; 0x32
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024a0:	230b      	movs	r3, #11
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	4619      	mov	r1, r3
 80024aa:	485b      	ldr	r0, [pc, #364]	; (8002618 <MX_GPIO_Init+0x2c4>)
 80024ac:	f000 ffe8 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80024b0:	2386      	movs	r3, #134	; 0x86
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024c0:	230b      	movs	r3, #11
 80024c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	4619      	mov	r1, r3
 80024ca:	4854      	ldr	r0, [pc, #336]	; (800261c <MX_GPIO_Init+0x2c8>)
 80024cc:	f000 ffd8 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80024d0:	f244 0381 	movw	r3, #16513	; 0x4081
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	2301      	movs	r3, #1
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e6:	4619      	mov	r1, r3
 80024e8:	4848      	ldr	r0, [pc, #288]	; (800260c <MX_GPIO_Init+0x2b8>)
 80024ea:	f000 ffc9 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 80024ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 80024fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002502:	4619      	mov	r1, r3
 8002504:	4842      	ldr	r0, [pc, #264]	; (8002610 <MX_GPIO_Init+0x2bc>)
 8002506:	f000 ffbb 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800250a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800251c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002520:	4619      	mov	r1, r3
 8002522:	483b      	ldr	r0, [pc, #236]	; (8002610 <MX_GPIO_Init+0x2bc>)
 8002524:	f000 ffac 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8002528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800252e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002534:	2302      	movs	r3, #2
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253c:	4619      	mov	r1, r3
 800253e:	4832      	ldr	r0, [pc, #200]	; (8002608 <MX_GPIO_Init+0x2b4>)
 8002540:	f000 ff9e 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002556:	230b      	movs	r3, #11
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800255a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255e:	4619      	mov	r1, r3
 8002560:	482a      	ldr	r0, [pc, #168]	; (800260c <MX_GPIO_Init+0x2b8>)
 8002562:	f000 ff8d 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8002566:	f244 2340 	movw	r3, #16960	; 0x4240
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256c:	2301      	movs	r3, #1
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257c:	4619      	mov	r1, r3
 800257e:	4825      	ldr	r0, [pc, #148]	; (8002614 <MX_GPIO_Init+0x2c0>)
 8002580:	f000 ff7e 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002588:	2300      	movs	r3, #0
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002594:	4619      	mov	r1, r3
 8002596:	481f      	ldr	r0, [pc, #124]	; (8002614 <MX_GPIO_Init+0x2c0>)
 8002598:	f000 ff72 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800259c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025ae:	230a      	movs	r3, #10
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	4818      	ldr	r0, [pc, #96]	; (800261c <MX_GPIO_Init+0x2c8>)
 80025ba:	f000 ff61 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d0:	4619      	mov	r1, r3
 80025d2:	4812      	ldr	r0, [pc, #72]	; (800261c <MX_GPIO_Init+0x2c8>)
 80025d4:	f000 ff54 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80025d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ea:	230b      	movs	r3, #11
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f2:	4619      	mov	r1, r3
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <MX_GPIO_Init+0x2c0>)
 80025f6:	f000 ff43 	bl	8003480 <HAL_GPIO_Init>

}
 80025fa:	bf00      	nop
 80025fc:	3738      	adds	r7, #56	; 0x38
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40021000 	.word	0x40021000
 800260c:	40020400 	.word	0x40020400
 8002610:	40021400 	.word	0x40021400
 8002614:	40021800 	.word	0x40021800
 8002618:	40020800 	.word	0x40020800
 800261c:	40020000 	.word	0x40020000

08002620 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b096      	sub	sp, #88	; 0x58
 8002624:	af02      	add	r7, sp, #8
 8002626:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a37      	ldr	r2, [pc, #220]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d166      	bne.n	80026fe <HAL_TIM_PeriodElapsedCallback+0xde>
  {
    static unsigned int cnt = 0;
    cnt++;
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a35      	ldr	r2, [pc, #212]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002638:	6013      	str	r3, [r2, #0]
    BMP2_ReadData(&bmp2dev, &press, &temp);
 800263a:	4a35      	ldr	r2, [pc, #212]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800263c:	4935      	ldr	r1, [pc, #212]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800263e:	4836      	ldr	r0, [pc, #216]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002640:	f7ff fd50 	bl	80020e4 <BMP2_ReadData>

    temp_int = 1000 * temp;
 8002644:	4b32      	ldr	r3, [pc, #200]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b33      	ldr	r3, [pc, #204]	; (800271c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002650:	f7fd fff2 	bl	8000638 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fac4 	bl	8000be8 <__aeabi_d2uiz>
 8002660:	4603      	mov	r3, r0
 8002662:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002664:	6013      	str	r3, [r2, #0]
    press_int = 100 * press;
 8002666:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002672:	f7fd ffe1 	bl	8000638 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7fe fab3 	bl	8000be8 <__aeabi_d2uiz>
 8002682:	4603      	mov	r3, r0
 8002684:	4a28      	ldr	r2, [pc, #160]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002686:	6013      	str	r3, [r2, #0]

    if(cnt == 4)
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d136      	bne.n	80026fe <HAL_TIM_PeriodElapsedCallback+0xde>
    {
      char tx_buffer[64];
      int tx_msg_len = sprintf(tx_buffer, "%2u.%03u;%5u.%02u\r", temp_int / 1000, temp_int % 1000, press_int / 100, press_int % 100);
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	099d      	lsrs	r5, r3, #6
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80026a2:	fba2 1203 	umull	r1, r2, r2, r3
 80026a6:	0992      	lsrs	r2, r2, #6
 80026a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026ac:	fb01 f202 	mul.w	r2, r1, r2
 80026b0:	1a9a      	subs	r2, r3, r2
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	491e      	ldr	r1, [pc, #120]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80026b8:	fba1 1303 	umull	r1, r3, r1, r3
 80026bc:	0958      	lsrs	r0, r3, #5
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80026c4:	fba3 4301 	umull	r4, r3, r3, r1
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	2464      	movs	r4, #100	; 0x64
 80026cc:	fb04 f303 	mul.w	r3, r4, r3
 80026d0:	1acb      	subs	r3, r1, r3
 80026d2:	f107 040c 	add.w	r4, r7, #12
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	9000      	str	r0, [sp, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	462a      	mov	r2, r5
 80026de:	4915      	ldr	r1, [pc, #84]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80026e0:	4620      	mov	r0, r4
 80026e2:	f006 fa41 	bl	8008b68 <siprintf>
 80026e6:	64f8      	str	r0, [r7, #76]	; 0x4c
      HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 80026e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	f107 010c 	add.w	r1, r7, #12
 80026f0:	2364      	movs	r3, #100	; 0x64
 80026f2:	4811      	ldr	r0, [pc, #68]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80026f4:	f004 fb0e 	bl	8006d14 <HAL_UART_Transmit>
      cnt = 0;
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
    }
  }
}
 80026fe:	bf00      	nop
 8002700:	3750      	adds	r7, #80	; 0x50
 8002702:	46bd      	mov	sp, r7
 8002704:	bdb0      	pop	{r4, r5, r7, pc}
 8002706:	bf00      	nop
 8002708:	200002f0 	.word	0x200002f0
 800270c:	20000284 	.word	0x20000284
 8002710:	20000260 	.word	0x20000260
 8002714:	20000270 	.word	0x20000270
 8002718:	20000018 	.word	0x20000018
 800271c:	408f4000 	.word	0x408f4000
 8002720:	20000268 	.word	0x20000268
 8002724:	40590000 	.word	0x40590000
 8002728:	20000278 	.word	0x20000278
 800272c:	10624dd3 	.word	0x10624dd3
 8002730:	51eb851f 	.word	0x51eb851f
 8002734:	0800b1bc 	.word	0x0800b1bc
 8002738:	20000388 	.word	0x20000388

0800273c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <HAL_UART_RxCpltCallback+0x48>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d116      	bne.n	800277a <HAL_UART_RxCpltCallback+0x3e>
  {
    int duty_cycle = strtol(rx_buffer, 0, 10);
 800274c:	220a      	movs	r2, #10
 800274e:	2100      	movs	r1, #0
 8002750:	480d      	ldr	r0, [pc, #52]	; (8002788 <HAL_UART_RxCpltCallback+0x4c>)
 8002752:	f006 faab 	bl	8008cac <strtol>
 8002756:	60f8      	str	r0, [r7, #12]
    pwmWriteDuty(&hpwm, duty_cycle);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	4809      	ldr	r0, [pc, #36]	; (800278c <HAL_UART_RxCpltCallback+0x50>)
 8002768:	f7ff fd40 	bl	80021ec <pwmWriteDuty>
    HAL_UART_Receive_IT(&huart3, rx_buffer, rx_msg_len);
 800276c:	2303      	movs	r3, #3
 800276e:	b29b      	uxth	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	4905      	ldr	r1, [pc, #20]	; (8002788 <HAL_UART_RxCpltCallback+0x4c>)
 8002774:	4803      	ldr	r0, [pc, #12]	; (8002784 <HAL_UART_RxCpltCallback+0x48>)
 8002776:	f004 fb50 	bl	8006e1a <HAL_UART_Receive_IT>
  }
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000388 	.word	0x20000388
 8002788:	2000027c 	.word	0x2000027c
 800278c:	20000054 	.word	0x20000054

08002790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002794:	f000 fc4f 	bl	8003036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002798:	f000 f826 	bl	80027e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800279c:	f7ff fdda 	bl	8002354 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80027a0:	f000 fb88 	bl	8002eb4 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 80027a4:	f000 f894 	bl	80028d0 <MX_SPI4_Init>
  MX_TIM2_Init();
 80027a8:	f000 fa4e 	bl	8002c48 <MX_TIM2_Init>
  MX_TIM4_Init();
 80027ac:	f000 fa9a 	bl	8002ce4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);
 80027b0:	4808      	ldr	r0, [pc, #32]	; (80027d4 <main+0x44>)
 80027b2:	f7ff fbcb 	bl	8001f4c <BMP2_Init>
  HEATER_PWM_Init(&hpwm);
 80027b6:	4808      	ldr	r0, [pc, #32]	; (80027d8 <main+0x48>)
 80027b8:	f7ff fcf8 	bl	80021ac <HEATER_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80027bc:	4807      	ldr	r0, [pc, #28]	; (80027dc <main+0x4c>)
 80027be:	f003 f8f7 	bl	80059b0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, rx_buffer, rx_msg_len);
 80027c2:	2303      	movs	r3, #3
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	4905      	ldr	r1, [pc, #20]	; (80027e0 <main+0x50>)
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <main+0x54>)
 80027cc:	f004 fb25 	bl	8006e1a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <main+0x40>
 80027d2:	bf00      	nop
 80027d4:	20000018 	.word	0x20000018
 80027d8:	20000054 	.word	0x20000054
 80027dc:	200002f0 	.word	0x200002f0
 80027e0:	2000027c 	.word	0x2000027c
 80027e4:	20000388 	.word	0x20000388

080027e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b094      	sub	sp, #80	; 0x50
 80027ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ee:	f107 0320 	add.w	r3, r7, #32
 80027f2:	2230      	movs	r2, #48	; 0x30
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f005 fd44 	bl	8008284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800280c:	f000 fffe 	bl	800380c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <SystemClock_Config+0xd4>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	4a29      	ldr	r2, [pc, #164]	; (80028bc <SystemClock_Config+0xd4>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281a:	6413      	str	r3, [r2, #64]	; 0x40
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <SystemClock_Config+0xd4>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <SystemClock_Config+0xd8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <SystemClock_Config+0xd8>)
 800282e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <SystemClock_Config+0xd8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002840:	2301      	movs	r3, #1
 8002842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002844:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284a:	2302      	movs	r3, #2
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800284e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002854:	2304      	movs	r3, #4
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002858:	23d8      	movs	r3, #216	; 0xd8
 800285a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800285c:	2302      	movs	r3, #2
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002860:	2303      	movs	r3, #3
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002864:	f107 0320 	add.w	r3, r7, #32
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f82f 	bl	80038cc <HAL_RCC_OscConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002874:	f000 f826 	bl	80028c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002878:	f000 ffd8 	bl	800382c <HAL_PWREx_EnableOverDrive>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002882:	f000 f81f 	bl	80028c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002886:	230f      	movs	r3, #15
 8002888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800288a:	2302      	movs	r3, #2
 800288c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002892:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002898:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800289c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	2107      	movs	r1, #7
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 fab5 	bl	8003e14 <HAL_RCC_ClockConfig>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80028b0:	f000 f808 	bl	80028c4 <Error_Handler>
  }
}
 80028b4:	bf00      	nop
 80028b6:	3750      	adds	r7, #80	; 0x50
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40007000 	.word	0x40007000

080028c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
}
 80028ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028cc:	e7fe      	b.n	80028cc <Error_Handler+0x8>
	...

080028d0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <MX_SPI4_Init+0x74>)
 80028d6:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <MX_SPI4_Init+0x78>)
 80028d8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <MX_SPI4_Init+0x74>)
 80028dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <MX_SPI4_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e8:	4b16      	ldr	r3, [pc, #88]	; (8002944 <MX_SPI4_Init+0x74>)
 80028ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028ee:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_SPI4_Init+0x74>)
 80028f2:	2202      	movs	r2, #2
 80028f4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <MX_SPI4_Init+0x74>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <MX_SPI4_Init+0x74>)
 80028fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002902:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <MX_SPI4_Init+0x74>)
 8002906:	2218      	movs	r2, #24
 8002908:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <MX_SPI4_Init+0x74>)
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <MX_SPI4_Init+0x74>)
 8002912:	2200      	movs	r2, #0
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <MX_SPI4_Init+0x74>)
 8002918:	2200      	movs	r2, #0
 800291a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <MX_SPI4_Init+0x74>)
 800291e:	2207      	movs	r2, #7
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <MX_SPI4_Init+0x74>)
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <MX_SPI4_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <MX_SPI4_Init+0x74>)
 8002930:	f002 f886 	bl	8004a40 <HAL_SPI_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800293a:	f7ff ffc3 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000288 	.word	0x20000288
 8002948:	40013400 	.word	0x40013400

0800294c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <HAL_SPI_MspInit+0x7c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d127      	bne.n	80029be <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_SPI_MspInit+0x80>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a16      	ldr	r2, [pc, #88]	; (80029cc <HAL_SPI_MspInit+0x80>)
 8002974:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_SPI_MspInit+0x80>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_SPI_MspInit+0x80>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_SPI_MspInit+0x80>)
 800298c:	f043 0310 	orr.w	r3, r3, #16
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_SPI_MspInit+0x80>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP2_SCK_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 800299e:	2364      	movs	r3, #100	; 0x64
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80029ae:	2305      	movs	r3, #5
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	; (80029d0 <HAL_SPI_MspInit+0x84>)
 80029ba:	f000 fd61 	bl	8003480 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40013400 	.word	0x40013400
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40021000 	.word	0x40021000

080029d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_MspInit+0x44>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_MspInit+0x44>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_MspInit+0x44>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_MspInit+0x44>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_MspInit+0x44>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_MspInit+0x44>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <NMI_Handler+0x4>

08002a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <HardFault_Handler+0x4>

08002a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <MemManage_Handler+0x4>

08002a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a32:	e7fe      	b.n	8002a32 <BusFault_Handler+0x4>

08002a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <UsageFault_Handler+0x4>

08002a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a68:	f000 fb22 	bl	80030b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <TIM2_IRQHandler+0x10>)
 8002a76:	f003 f96f 	bl	8005d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200002f0 	.word	0x200002f0

08002a84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <USART3_IRQHandler+0x10>)
 8002a8a:	f004 fa0b 	bl	8006ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000388 	.word	0x20000388

08002a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return 1;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_kill>:

int _kill(int pid, int sig)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ab2:	f005 fbbd 	bl	8008230 <__errno>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2216      	movs	r2, #22
 8002aba:	601a      	str	r2, [r3, #0]
  return -1;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_exit>:

void _exit (int status)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ffe7 	bl	8002aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ada:	e7fe      	b.n	8002ada <_exit+0x12>

08002adc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e00a      	b.n	8002b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aee:	f3af 8000 	nop.w
 8002af2:	4601      	mov	r1, r0
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	60ba      	str	r2, [r7, #8]
 8002afa:	b2ca      	uxtb	r2, r1
 8002afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3301      	adds	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	dbf0      	blt.n	8002aee <_read+0x12>
  }

  return len;
 8002b0c:	687b      	ldr	r3, [r7, #4]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e009      	b.n	8002b3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	60ba      	str	r2, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	dbf1      	blt.n	8002b28 <_write+0x12>
  }
  return len;
 8002b44:	687b      	ldr	r3, [r7, #4]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_close>:

int _close(int file)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b76:	605a      	str	r2, [r3, #4]
  return 0;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <_isatty>:

int _isatty(int file)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <_sbrk+0x5c>)
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <_sbrk+0x60>)
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <_sbrk+0x64>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <_sbrk+0x68>)
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d207      	bcs.n	8002bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be8:	f005 fb22 	bl	8008230 <__errno>
 8002bec:	4603      	mov	r3, r0
 8002bee:	220c      	movs	r2, #12
 8002bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	e009      	b.n	8002c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <_sbrk+0x64>)
 8002c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20050000 	.word	0x20050000
 8002c18:	00000400 	.word	0x00000400
 8002c1c:	200002ec 	.word	0x200002ec
 8002c20:	20000428 	.word	0x20000428

08002c24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <SystemInit+0x20>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <SystemInit+0x20>)
 8002c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4e:	f107 0310 	add.w	r3, r7, #16
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <MX_TIM2_Init+0x98>)
 8002c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1079;
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <MX_TIM2_Init+0x98>)
 8002c70:	f240 4237 	movw	r2, #1079	; 0x437
 8002c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <MX_TIM2_Init+0x98>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24999;
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <MX_TIM2_Init+0x98>)
 8002c7e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <MX_TIM2_Init+0x98>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <MX_TIM2_Init+0x98>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c90:	4813      	ldr	r0, [pc, #76]	; (8002ce0 <MX_TIM2_Init+0x98>)
 8002c92:	f002 fe35 	bl	8005900 <HAL_TIM_Base_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002c9c:	f7ff fe12 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ca6:	f107 0310 	add.w	r3, r7, #16
 8002caa:	4619      	mov	r1, r3
 8002cac:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <MX_TIM2_Init+0x98>)
 8002cae:	f003 fa87 	bl	80061c0 <HAL_TIM_ConfigClockSource>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002cb8:	f7ff fe04 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <MX_TIM2_Init+0x98>)
 8002cca:	f003 ff29 	bl	8006b20 <HAL_TIMEx_MasterConfigSynchronization>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002cd4:	f7ff fdf6 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cd8:	bf00      	nop
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200002f0 	.word	0x200002f0

08002ce4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08e      	sub	sp, #56	; 0x38
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf8:	f107 031c 	add.w	r3, r7, #28
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d04:	463b      	mov	r3, r7
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	611a      	str	r2, [r3, #16]
 8002d12:	615a      	str	r2, [r3, #20]
 8002d14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d18:	4a2d      	ldr	r2, [pc, #180]	; (8002dd0 <MX_TIM4_Init+0xec>)
 8002d1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d1e:	226b      	movs	r2, #107	; 0x6b
 8002d20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002d28:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d3c:	4823      	ldr	r0, [pc, #140]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d3e:	f002 fddf 	bl	8005900 <HAL_TIM_Base_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002d48:	f7ff fdbc 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d56:	4619      	mov	r1, r3
 8002d58:	481c      	ldr	r0, [pc, #112]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d5a:	f003 fa31 	bl	80061c0 <HAL_TIM_ConfigClockSource>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002d64:	f7ff fdae 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d68:	4818      	ldr	r0, [pc, #96]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d6a:	f002 fe99 	bl	8005aa0 <HAL_TIM_PWM_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002d74:	f7ff fda6 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	4619      	mov	r1, r3
 8002d86:	4811      	ldr	r0, [pc, #68]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002d88:	f003 feca 	bl	8006b20 <HAL_TIMEx_MasterConfigSynchronization>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002d92:	f7ff fd97 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d96:	2360      	movs	r3, #96	; 0x60
 8002d98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002da6:	463b      	mov	r3, r7
 8002da8:	2200      	movs	r2, #0
 8002daa:	4619      	mov	r1, r3
 8002dac:	4807      	ldr	r0, [pc, #28]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002dae:	f003 f8f3 	bl	8005f98 <HAL_TIM_PWM_ConfigChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002db8:	f7ff fd84 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002dbc:	4803      	ldr	r0, [pc, #12]	; (8002dcc <MX_TIM4_Init+0xe8>)
 8002dbe:	f000 f841 	bl	8002e44 <HAL_TIM_MspPostInit>

}
 8002dc2:	bf00      	nop
 8002dc4:	3738      	adds	r7, #56	; 0x38
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000033c 	.word	0x2000033c
 8002dd0:	40000800 	.word	0x40000800

08002dd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de4:	d114      	bne.n	8002e10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6413      	str	r3, [r2, #64]	; 0x40
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	201c      	movs	r0, #28
 8002e04:	f000 fa73 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e08:	201c      	movs	r0, #28
 8002e0a:	f000 fa8c 	bl	8003326 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002e0e:	e010      	b.n	8002e32 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_TIM_Base_MspInit+0x6c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10b      	bne.n	8002e32 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40000800 	.word	0x40000800

08002e44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_TIM_MspPostInit+0x64>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d11c      	bne.n	8002ea0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_TIM_MspPostInit+0x68>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_TIM_MspPostInit+0x68>)
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_TIM_MspPostInit+0x68>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e90:	2302      	movs	r3, #2
 8002e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <HAL_TIM_MspPostInit+0x6c>)
 8002e9c:	f000 faf0 	bl	8003480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ea0:	bf00      	nop
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40020c00 	.word	0x40020c00

08002eb4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <MX_USART3_UART_Init+0x5c>)
 8002ebc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ec4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002eda:	220c      	movs	r2, #12
 8002edc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ef8:	f003 febe 	bl	8006c78 <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f02:	f7ff fcdf 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000388 	.word	0x20000388
 8002f10:	40004800 	.word	0x40004800

08002f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b0aa      	sub	sp, #168	; 0xa8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f2c:	f107 0310 	add.w	r3, r7, #16
 8002f30:	2284      	movs	r2, #132	; 0x84
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f005 f9a5 	bl	8008284 <memset>
  if(uartHandle->Instance==USART3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <HAL_UART_MspInit+0xc4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d144      	bne.n	8002fce <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 f984 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f5e:	f7ff fcb1 	bl	80028c4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_UART_MspInit+0xc8>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_UART_MspInit+0xc8>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_UART_MspInit+0xc8>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7a:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <HAL_UART_MspInit+0xc8>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_UART_MspInit+0xc8>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_UART_MspInit+0xc8>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fac:	2307      	movs	r3, #7
 8002fae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4809      	ldr	r0, [pc, #36]	; (8002fe0 <HAL_UART_MspInit+0xcc>)
 8002fba:	f000 fa61 	bl	8003480 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2027      	movs	r0, #39	; 0x27
 8002fc4:	f000 f993 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fc8:	2027      	movs	r0, #39	; 0x27
 8002fca:	f000 f9ac 	bl	8003326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002fce:	bf00      	nop
 8002fd0:	37a8      	adds	r7, #168	; 0xa8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40004800 	.word	0x40004800
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40020c00 	.word	0x40020c00

08002fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800301c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fe8:	480d      	ldr	r0, [pc, #52]	; (8003020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fea:	490e      	ldr	r1, [pc, #56]	; (8003024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0b      	ldr	r2, [pc, #44]	; (800302c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003000:	4c0b      	ldr	r4, [pc, #44]	; (8003030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800300e:	f7ff fe09 	bl	8002c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003012:	f005 f913 	bl	800823c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003016:	f7ff fbbb 	bl	8002790 <main>
  bx  lr    
 800301a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800301c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003024:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8003028:	0800b5d4 	.word	0x0800b5d4
  ldr r2, =_sbss
 800302c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003030:	20000424 	.word	0x20000424

08003034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC_IRQHandler>

08003036 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303a:	2003      	movs	r0, #3
 800303c:	f000 f94c 	bl	80032d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003040:	2000      	movs	r0, #0
 8003042:	f000 f805 	bl	8003050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003046:	f7ff fcc5 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_InitTick+0x54>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_InitTick+0x58>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4619      	mov	r1, r3
 8003062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003066:	fbb3 f3f1 	udiv	r3, r3, r1
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f967 	bl	8003342 <HAL_SYSTICK_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e00e      	b.n	800309c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b0f      	cmp	r3, #15
 8003082:	d80a      	bhi.n	800309a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003084:	2200      	movs	r2, #0
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	f000 f92f 	bl	80032ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003090:	4a06      	ldr	r2, [pc, #24]	; (80030ac <HAL_InitTick+0x5c>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000064 	.word	0x20000064
 80030a8:	2000006c 	.word	0x2000006c
 80030ac:	20000068 	.word	0x20000068

080030b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_IncTick+0x20>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_IncTick+0x24>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_IncTick+0x24>)
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000006c 	.word	0x2000006c
 80030d4:	20000410 	.word	0x20000410

080030d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return uwTick;
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_GetTick+0x14>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20000410 	.word	0x20000410

080030f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030f8:	f7ff ffee 	bl	80030d8 <HAL_GetTick>
 80030fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d005      	beq.n	8003116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_Delay+0x44>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003116:	bf00      	nop
 8003118:	f7ff ffde 	bl	80030d8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	429a      	cmp	r2, r3
 8003126:	d8f7      	bhi.n	8003118 <HAL_Delay+0x28>
  {
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	2000006c 	.word	0x2000006c

08003138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <__NVIC_SetPriorityGrouping+0x40>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003154:	4013      	ands	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 8003162:	4313      	orrs	r3, r2
 8003164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <__NVIC_SetPriorityGrouping+0x40>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60d3      	str	r3, [r2, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00
 800317c:	05fa0000 	.word	0x05fa0000

08003180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <__NVIC_GetPriorityGrouping+0x18>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	f003 0307 	and.w	r3, r3, #7
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db0b      	blt.n	80031c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4907      	ldr	r1, [pc, #28]	; (80031d4 <__NVIC_EnableIRQ+0x38>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000e100 	.word	0xe000e100

080031d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	6039      	str	r1, [r7, #0]
 80031e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	db0a      	blt.n	8003202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	490c      	ldr	r1, [pc, #48]	; (8003224 <__NVIC_SetPriority+0x4c>)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	0112      	lsls	r2, r2, #4
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	440b      	add	r3, r1
 80031fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003200:	e00a      	b.n	8003218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4908      	ldr	r1, [pc, #32]	; (8003228 <__NVIC_SetPriority+0x50>)
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	3b04      	subs	r3, #4
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	440b      	add	r3, r1
 8003216:	761a      	strb	r2, [r3, #24]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000e100 	.word	0xe000e100
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322c:	b480      	push	{r7}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f1c3 0307 	rsb	r3, r3, #7
 8003246:	2b04      	cmp	r3, #4
 8003248:	bf28      	it	cs
 800324a:	2304      	movcs	r3, #4
 800324c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3304      	adds	r3, #4
 8003252:	2b06      	cmp	r3, #6
 8003254:	d902      	bls.n	800325c <NVIC_EncodePriority+0x30>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3b03      	subs	r3, #3
 800325a:	e000      	b.n	800325e <NVIC_EncodePriority+0x32>
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	f04f 32ff 	mov.w	r2, #4294967295
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	401a      	ands	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003274:	f04f 31ff 	mov.w	r1, #4294967295
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43d9      	mvns	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003284:	4313      	orrs	r3, r2
         );
}
 8003286:	4618      	mov	r0, r3
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a4:	d301      	bcc.n	80032aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00f      	b.n	80032ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <SysTick_Config+0x40>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b2:	210f      	movs	r1, #15
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	f7ff ff8e 	bl	80031d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <SysTick_Config+0x40>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <SysTick_Config+0x40>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	e000e010 	.word	0xe000e010

080032d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff29 	bl	8003138 <__NVIC_SetPriorityGrouping>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4603      	mov	r3, r0
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003300:	f7ff ff3e 	bl	8003180 <__NVIC_GetPriorityGrouping>
 8003304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	6978      	ldr	r0, [r7, #20]
 800330c:	f7ff ff8e 	bl	800322c <NVIC_EncodePriority>
 8003310:	4602      	mov	r2, r0
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff5d 	bl	80031d8 <__NVIC_SetPriority>
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff31 	bl	800319c <__NVIC_EnableIRQ>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ffa2 	bl	8003294 <SysTick_Config>
 8003350:	4603      	mov	r3, r0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff feb6 	bl	80030d8 <HAL_GetTick>
 800336c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d008      	beq.n	800338c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e052      	b.n	8003432 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0216 	bic.w	r2, r2, #22
 800339a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <HAL_DMA_Abort+0x62>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0208 	bic.w	r2, r2, #8
 80033ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033dc:	e013      	b.n	8003406 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033de:	f7ff fe7b 	bl	80030d8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d90c      	bls.n	8003406 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2203      	movs	r2, #3
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e015      	b.n	8003432 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e4      	bne.n	80033de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	223f      	movs	r2, #63	; 0x3f
 800341a:	409a      	lsls	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d004      	beq.n	8003458 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e00c      	b.n	8003472 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2205      	movs	r2, #5
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	e175      	b.n	800378c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80034a0:	2201      	movs	r2, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	f040 8164 	bne.w	8003786 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d005      	beq.n	80034d6 <HAL_GPIO_Init+0x56>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d130      	bne.n	8003538 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	2203      	movs	r2, #3
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800350c:	2201      	movs	r2, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 0201 	and.w	r2, r3, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b03      	cmp	r3, #3
 8003542:	d017      	beq.n	8003574 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d123      	bne.n	80035c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	08da      	lsrs	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3208      	adds	r2, #8
 8003588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	220f      	movs	r2, #15
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	08da      	lsrs	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3208      	adds	r2, #8
 80035c2:	69b9      	ldr	r1, [r7, #24]
 80035c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2203      	movs	r2, #3
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0203 	and.w	r2, r3, #3
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80be 	beq.w	8003786 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360a:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <HAL_GPIO_Init+0x324>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	4a65      	ldr	r2, [pc, #404]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003614:	6453      	str	r3, [r2, #68]	; 0x44
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003622:	4a61      	ldr	r2, [pc, #388]	; (80037a8 <HAL_GPIO_Init+0x328>)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	220f      	movs	r2, #15
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_GPIO_Init+0x32c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d037      	beq.n	80036be <HAL_GPIO_Init+0x23e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <HAL_GPIO_Init+0x330>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d031      	beq.n	80036ba <HAL_GPIO_Init+0x23a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a56      	ldr	r2, [pc, #344]	; (80037b4 <HAL_GPIO_Init+0x334>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02b      	beq.n	80036b6 <HAL_GPIO_Init+0x236>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a55      	ldr	r2, [pc, #340]	; (80037b8 <HAL_GPIO_Init+0x338>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d025      	beq.n	80036b2 <HAL_GPIO_Init+0x232>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a54      	ldr	r2, [pc, #336]	; (80037bc <HAL_GPIO_Init+0x33c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01f      	beq.n	80036ae <HAL_GPIO_Init+0x22e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a53      	ldr	r2, [pc, #332]	; (80037c0 <HAL_GPIO_Init+0x340>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d019      	beq.n	80036aa <HAL_GPIO_Init+0x22a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_GPIO_Init+0x344>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_GPIO_Init+0x226>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_GPIO_Init+0x348>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00d      	beq.n	80036a2 <HAL_GPIO_Init+0x222>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_GPIO_Init+0x34c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <HAL_GPIO_Init+0x21e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_GPIO_Init+0x350>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_GPIO_Init+0x21a>
 8003696:	2309      	movs	r3, #9
 8003698:	e012      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 800369a:	230a      	movs	r3, #10
 800369c:	e010      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 800369e:	2308      	movs	r3, #8
 80036a0:	e00e      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036a2:	2307      	movs	r3, #7
 80036a4:	e00c      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036a6:	2306      	movs	r3, #6
 80036a8:	e00a      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036aa:	2305      	movs	r3, #5
 80036ac:	e008      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036b2:	2303      	movs	r3, #3
 80036b4:	e004      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e002      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036be:	2300      	movs	r3, #0
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	f002 0203 	and.w	r2, r2, #3
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	4093      	lsls	r3, r2
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036d0:	4935      	ldr	r1, [pc, #212]	; (80037a8 <HAL_GPIO_Init+0x328>)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_GPIO_Init+0x354>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003702:	4a34      	ldr	r2, [pc, #208]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <HAL_GPIO_Init+0x354>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <HAL_GPIO_Init+0x354>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003756:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_GPIO_Init+0x354>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3301      	adds	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	f67f ae86 	bls.w	80034a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3724      	adds	r7, #36	; 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40020400 	.word	0x40020400
 80037b4:	40020800 	.word	0x40020800
 80037b8:	40020c00 	.word	0x40020c00
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40021400 	.word	0x40021400
 80037c4:	40021800 	.word	0x40021800
 80037c8:	40021c00 	.word	0x40021c00
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40022400 	.word	0x40022400
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037f4:	e003      	b.n	80037fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	6013      	str	r3, [r2, #0]
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003840:	6413      	str	r3, [r2, #64]	; 0x40
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800385a:	f7ff fc3d 	bl	80030d8 <HAL_GetTick>
 800385e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003860:	e009      	b.n	8003876 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003862:	f7ff fc39 	bl	80030d8 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003870:	d901      	bls.n	8003876 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e022      	b.n	80038bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d1ee      	bne.n	8003862 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003890:	f7ff fc22 	bl	80030d8 <HAL_GetTick>
 8003894:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003896:	e009      	b.n	80038ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003898:	f7ff fc1e 	bl	80030d8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038a6:	d901      	bls.n	80038ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e007      	b.n	80038bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b8:	d1ee      	bne.n	8003898 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40007000 	.word	0x40007000

080038cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e291      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8087 	beq.w	80039fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f0:	4b96      	ldr	r3, [pc, #600]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d00c      	beq.n	8003916 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fc:	4b93      	ldr	r3, [pc, #588]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d112      	bne.n	800392e <HAL_RCC_OscConfig+0x62>
 8003908:	4b90      	ldr	r3, [pc, #576]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003914:	d10b      	bne.n	800392e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003916:	4b8d      	ldr	r3, [pc, #564]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d06c      	beq.n	80039fc <HAL_RCC_OscConfig+0x130>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d168      	bne.n	80039fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e26b      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003936:	d106      	bne.n	8003946 <HAL_RCC_OscConfig+0x7a>
 8003938:	4b84      	ldr	r3, [pc, #528]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a83      	ldr	r2, [pc, #524]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 800393e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e02e      	b.n	80039a4 <HAL_RCC_OscConfig+0xd8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x9c>
 800394e:	4b7f      	ldr	r3, [pc, #508]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7e      	ldr	r2, [pc, #504]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b7c      	ldr	r3, [pc, #496]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7b      	ldr	r2, [pc, #492]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xd8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0xc0>
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a75      	ldr	r2, [pc, #468]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a72      	ldr	r2, [pc, #456]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xd8>
 800398c:	4b6f      	ldr	r3, [pc, #444]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6e      	ldr	r2, [pc, #440]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b6c      	ldr	r3, [pc, #432]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a6b      	ldr	r2, [pc, #428]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7ff fb94 	bl	80030d8 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7ff fb90 	bl	80030d8 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e21f      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b61      	ldr	r3, [pc, #388]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xe8>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7ff fb80 	bl	80030d8 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7ff fb7c 	bl	80030d8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e20b      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	4b57      	ldr	r3, [pc, #348]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x110>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d069      	beq.n	8003ade <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a0a:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a16:	4b4d      	ldr	r3, [pc, #308]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x190>
 8003a22:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d116      	bne.n	8003a5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x17a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e1df      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b41      	ldr	r3, [pc, #260]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	493d      	ldr	r1, [pc, #244]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	e040      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d023      	beq.n	8003aac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a38      	ldr	r2, [pc, #224]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7ff fb32 	bl	80030d8 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a78:	f7ff fb2e 	bl	80030d8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e1bd      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8a:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4929      	ldr	r1, [pc, #164]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
 8003aaa:	e018      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a26      	ldr	r2, [pc, #152]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7ff fb0e 	bl	80030d8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7ff fb0a 	bl	80030d8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e199      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d038      	beq.n	8003b5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d019      	beq.n	8003b26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7ff faeb 	bl	80030d8 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b06:	f7ff fae7 	bl	80030d8 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e176      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x23a>
 8003b24:	e01a      	b.n	8003b5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2a:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <HAL_RCC_OscConfig+0x280>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7ff fad1 	bl	80030d8 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7ff facd 	bl	80030d8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d903      	bls.n	8003b50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e15c      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
 8003b4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b50:	4b91      	ldr	r3, [pc, #580]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ee      	bne.n	8003b3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80a4 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b8b      	ldr	r3, [pc, #556]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	4b88      	ldr	r3, [pc, #544]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a87      	ldr	r2, [pc, #540]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b85      	ldr	r3, [pc, #532]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b92:	4b82      	ldr	r3, [pc, #520]	; (8003d9c <HAL_RCC_OscConfig+0x4d0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d118      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b9e:	4b7f      	ldr	r3, [pc, #508]	; (8003d9c <HAL_RCC_OscConfig+0x4d0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a7e      	ldr	r2, [pc, #504]	; (8003d9c <HAL_RCC_OscConfig+0x4d0>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003baa:	f7ff fa95 	bl	80030d8 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb2:	f7ff fa91 	bl	80030d8 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b64      	cmp	r3, #100	; 0x64
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e120      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc4:	4b75      	ldr	r3, [pc, #468]	; (8003d9c <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCC_OscConfig+0x31a>
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	4a6e      	ldr	r2, [pc, #440]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	e02d      	b.n	8003c42 <HAL_RCC_OscConfig+0x376>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x33c>
 8003bee:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a69      	ldr	r2, [pc, #420]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfa:	4b67      	ldr	r3, [pc, #412]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a66      	ldr	r2, [pc, #408]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	e01c      	b.n	8003c42 <HAL_RCC_OscConfig+0x376>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x35e>
 8003c10:	4b61      	ldr	r3, [pc, #388]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a60      	ldr	r2, [pc, #384]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1c:	4b5e      	ldr	r3, [pc, #376]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	4a5d      	ldr	r2, [pc, #372]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	; 0x70
 8003c28:	e00b      	b.n	8003c42 <HAL_RCC_OscConfig+0x376>
 8003c2a:	4b5b      	ldr	r3, [pc, #364]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a5a      	ldr	r2, [pc, #360]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	4b58      	ldr	r3, [pc, #352]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a57      	ldr	r2, [pc, #348]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7ff fa45 	bl	80030d8 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7ff fa41 	bl	80030d8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e0ce      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	4b4b      	ldr	r3, [pc, #300]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ee      	beq.n	8003c52 <HAL_RCC_OscConfig+0x386>
 8003c74:	e014      	b.n	8003ca0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7ff fa2f 	bl	80030d8 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7ff fa2b 	bl	80030d8 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0b8      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	4b40      	ldr	r3, [pc, #256]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ee      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b3c      	ldr	r3, [pc, #240]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a3b      	ldr	r2, [pc, #236]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80a4 	beq.w	8003e04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cbc:	4b36      	ldr	r3, [pc, #216]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d06b      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d149      	bne.n	8003d64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a30      	ldr	r2, [pc, #192]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7ff f9fc 	bl	80030d8 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7ff f9f8 	bl	80030d8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e087      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf6:	4b28      	ldr	r3, [pc, #160]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	019b      	lsls	r3, r3, #6
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	4313      	orrs	r3, r2
 8003d28:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003d2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7ff f9cc 	bl	80030d8 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d44:	f7ff f9c8 	bl	80030d8 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e057      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x478>
 8003d62:	e04f      	b.n	8003e04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7ff f9b2 	bl	80030d8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7ff f9ae 	bl	80030d8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e03d      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x4ac>
 8003d96:	e035      	b.n	8003e04 <HAL_RCC_OscConfig+0x538>
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003da0:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x544>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d028      	beq.n	8003e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d121      	bne.n	8003e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d11a      	bne.n	8003e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d111      	bne.n	8003e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	3b01      	subs	r3, #1
 8003dea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800

08003e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0d0      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d910      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b67      	ldr	r3, [pc, #412]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 020f 	bic.w	r2, r3, #15
 8003e42:	4965      	ldr	r1, [pc, #404]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b63      	ldr	r3, [pc, #396]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0b8      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d020      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e74:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a58      	ldr	r2, [pc, #352]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e8c:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a52      	ldr	r2, [pc, #328]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	494d      	ldr	r1, [pc, #308]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d040      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d115      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e07f      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e073      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e06b      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4936      	ldr	r1, [pc, #216]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f08:	f7ff f8e6 	bl	80030d8 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7ff f8e2 	bl	80030d8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e053      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 020c 	and.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1eb      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d210      	bcs.n	8003f68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 020f 	bic.w	r2, r3, #15
 8003f4e:	4922      	ldr	r1, [pc, #136]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e032      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4916      	ldr	r1, [pc, #88]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f92:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	490e      	ldr	r1, [pc, #56]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fa6:	f000 f821 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	490a      	ldr	r1, [pc, #40]	; (8003fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8003fb8:	5ccb      	ldrb	r3, [r1, r3]
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_RCC_ClockConfig+0x1d4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff f842 	bl	8003050 <HAL_InitTick>

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023c00 	.word	0x40023c00
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	0800b1d0 	.word	0x0800b1d0
 8003fe4:	20000064 	.word	0x20000064
 8003fe8:	20000068 	.word	0x20000068

08003fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff0:	b094      	sub	sp, #80	; 0x50
 8003ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004004:	4b79      	ldr	r3, [pc, #484]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d00d      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x40>
 8004010:	2b08      	cmp	r3, #8
 8004012:	f200 80e1 	bhi.w	80041d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x34>
 800401a:	2b04      	cmp	r3, #4
 800401c:	d003      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0x3a>
 800401e:	e0db      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b73      	ldr	r3, [pc, #460]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004022:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004024:	e0db      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004026:	4b73      	ldr	r3, [pc, #460]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800402a:	e0d8      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800402c:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004036:	4b6d      	ldr	r3, [pc, #436]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d063      	beq.n	800410a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b6a      	ldr	r3, [pc, #424]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	2200      	movs	r2, #0
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38
 800404c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
 8004056:	2300      	movs	r3, #0
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
 800405a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800405e:	4622      	mov	r2, r4
 8004060:	462b      	mov	r3, r5
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	0159      	lsls	r1, r3, #5
 800406c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004070:	0150      	lsls	r0, r2, #5
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4621      	mov	r1, r4
 8004078:	1a51      	subs	r1, r2, r1
 800407a:	6139      	str	r1, [r7, #16]
 800407c:	4629      	mov	r1, r5
 800407e:	eb63 0301 	sbc.w	r3, r3, r1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004090:	4659      	mov	r1, fp
 8004092:	018b      	lsls	r3, r1, #6
 8004094:	4651      	mov	r1, sl
 8004096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800409a:	4651      	mov	r1, sl
 800409c:	018a      	lsls	r2, r1, #6
 800409e:	4651      	mov	r1, sl
 80040a0:	ebb2 0801 	subs.w	r8, r2, r1
 80040a4:	4659      	mov	r1, fp
 80040a6:	eb63 0901 	sbc.w	r9, r3, r1
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040be:	4690      	mov	r8, r2
 80040c0:	4699      	mov	r9, r3
 80040c2:	4623      	mov	r3, r4
 80040c4:	eb18 0303 	adds.w	r3, r8, r3
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	462b      	mov	r3, r5
 80040cc:	eb49 0303 	adc.w	r3, r9, r3
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040de:	4629      	mov	r1, r5
 80040e0:	024b      	lsls	r3, r1, #9
 80040e2:	4621      	mov	r1, r4
 80040e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040e8:	4621      	mov	r1, r4
 80040ea:	024a      	lsls	r2, r1, #9
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f2:	2200      	movs	r2, #0
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040fc:	f7fc fde4 	bl	8000cc8 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4613      	mov	r3, r2
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004108:	e058      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410a:	4b38      	ldr	r3, [pc, #224]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	2200      	movs	r2, #0
 8004112:	4618      	mov	r0, r3
 8004114:	4611      	mov	r1, r2
 8004116:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	2300      	movs	r3, #0
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	f04f 0000 	mov.w	r0, #0
 800412c:	f04f 0100 	mov.w	r1, #0
 8004130:	0159      	lsls	r1, r3, #5
 8004132:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004136:	0150      	lsls	r0, r2, #5
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4641      	mov	r1, r8
 800413e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004142:	4649      	mov	r1, r9
 8004144:	eb63 0b01 	sbc.w	fp, r3, r1
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004154:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004158:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800415c:	ebb2 040a 	subs.w	r4, r2, sl
 8004160:	eb63 050b 	sbc.w	r5, r3, fp
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	00eb      	lsls	r3, r5, #3
 800416e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004172:	00e2      	lsls	r2, r4, #3
 8004174:	4614      	mov	r4, r2
 8004176:	461d      	mov	r5, r3
 8004178:	4643      	mov	r3, r8
 800417a:	18e3      	adds	r3, r4, r3
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	464b      	mov	r3, r9
 8004180:	eb45 0303 	adc.w	r3, r5, r3
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004192:	4629      	mov	r1, r5
 8004194:	028b      	lsls	r3, r1, #10
 8004196:	4621      	mov	r1, r4
 8004198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800419c:	4621      	mov	r1, r4
 800419e:	028a      	lsls	r2, r1, #10
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a6:	2200      	movs	r2, #0
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	61fa      	str	r2, [r7, #28]
 80041ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b0:	f7fc fd8a 	bl	8000cc8 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80041cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d6:	e002      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3750      	adds	r7, #80	; 0x50
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	007a1200 	.word	0x007a1200

080041f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_RCC_GetHCLKFreq+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000064 	.word	0x20000064

08004210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004214:	f7ff fff0 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0a9b      	lsrs	r3, r3, #10
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	0800b1e0 	.word	0x0800b1e0

08004238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800423c:	f7ff ffdc 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0b5b      	lsrs	r3, r3, #13
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	; (800425c <HAL_RCC_GetPCLK2Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	0800b1e0 	.word	0x0800b1e0

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d012      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004288:	4b69      	ldr	r3, [pc, #420]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a68      	ldr	r2, [pc, #416]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004292:	6093      	str	r3, [r2, #8]
 8004294:	4b66      	ldr	r3, [pc, #408]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429c:	4964      	ldr	r1, [pc, #400]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ba:	4b5d      	ldr	r3, [pc, #372]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	4959      	ldr	r1, [pc, #356]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d8:	d101      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042da:	2301      	movs	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d017      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042f6:	4b4e      	ldr	r3, [pc, #312]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	494a      	ldr	r1, [pc, #296]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 808b 	beq.w	800445a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004344:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	4a39      	ldr	r2, [pc, #228]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434e:	6413      	str	r3, [r2, #64]	; 0x40
 8004350:	4b37      	ldr	r3, [pc, #220]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800435c:	4b35      	ldr	r3, [pc, #212]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a34      	ldr	r2, [pc, #208]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004368:	f7fe feb6 	bl	80030d8 <HAL_GetTick>
 800436c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004370:	f7fe feb2 	bl	80030d8 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e357      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800438e:	4b28      	ldr	r3, [pc, #160]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004396:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d035      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d02e      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ac:	4b20      	ldr	r3, [pc, #128]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b6:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a1a      	ldr	r2, [pc, #104]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043ce:	4a18      	ldr	r2, [pc, #96]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d114      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fe fe7a 	bl	80030d8 <HAL_GetTick>
 80043e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e6:	e00a      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fe fe76 	bl	80030d8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e319      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ee      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004416:	d111      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004426:	400b      	ands	r3, r1
 8004428:	4901      	ldr	r1, [pc, #4]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
 800442e:	e00b      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004430:	40023800 	.word	0x40023800
 8004434:	40007000 	.word	0x40007000
 8004438:	0ffffcff 	.word	0x0ffffcff
 800443c:	4baa      	ldr	r3, [pc, #680]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4aa9      	ldr	r2, [pc, #676]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004442:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004446:	6093      	str	r3, [r2, #8]
 8004448:	4ba7      	ldr	r3, [pc, #668]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004454:	49a4      	ldr	r1, [pc, #656]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004456:	4313      	orrs	r3, r2
 8004458:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004466:	4ba0      	ldr	r3, [pc, #640]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800446c:	4a9e      	ldr	r2, [pc, #632]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004472:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004476:	4b9c      	ldr	r3, [pc, #624]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004478:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	4999      	ldr	r1, [pc, #612]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004494:	4b94      	ldr	r3, [pc, #592]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a2:	4991      	ldr	r1, [pc, #580]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b6:	4b8c      	ldr	r3, [pc, #560]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c4:	4988      	ldr	r1, [pc, #544]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044d8:	4b83      	ldr	r3, [pc, #524]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e6:	4980      	ldr	r1, [pc, #512]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044fa:	4b7b      	ldr	r3, [pc, #492]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	4977      	ldr	r1, [pc, #476]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800451c:	4b72      	ldr	r3, [pc, #456]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	496f      	ldr	r1, [pc, #444]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800453e:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f023 020c 	bic.w	r2, r3, #12
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454c:	4966      	ldr	r1, [pc, #408]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004560:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456e:	495e      	ldr	r1, [pc, #376]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004582:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	4955      	ldr	r1, [pc, #340]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045a4:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	494d      	ldr	r1, [pc, #308]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045c6:	4b48      	ldr	r3, [pc, #288]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	4944      	ldr	r1, [pc, #272]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045e8:	4b3f      	ldr	r3, [pc, #252]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f6:	493c      	ldr	r1, [pc, #240]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800460a:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004618:	4933      	ldr	r1, [pc, #204]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800462c:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800463a:	492b      	ldr	r1, [pc, #172]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800464e:	4b26      	ldr	r3, [pc, #152]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465c:	4922      	ldr	r1, [pc, #136]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800466c:	d101      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800467e:	2301      	movs	r3, #1
 8004680:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468e:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469c:	4912      	ldr	r1, [pc, #72]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046b0:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c0:	4909      	ldr	r1, [pc, #36]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d006      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80d9 	beq.w	800488e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046dc:	4b02      	ldr	r3, [pc, #8]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a01      	ldr	r2, [pc, #4]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046e6:	e001      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80046e8:	40023800 	.word	0x40023800
 80046ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ee:	f7fe fcf3 	bl	80030d8 <HAL_GetTick>
 80046f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046f6:	f7fe fcef 	bl	80030d8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b64      	cmp	r3, #100	; 0x64
 8004702:	d901      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e194      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004708:	4b6c      	ldr	r3, [pc, #432]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f0      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d021      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11d      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004728:	4b64      	ldr	r3, [pc, #400]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472e:	0c1b      	lsrs	r3, r3, #16
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004736:	4b61      	ldr	r3, [pc, #388]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473c:	0e1b      	lsrs	r3, r3, #24
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	019a      	lsls	r2, r3, #6
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	431a      	orrs	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	071b      	lsls	r3, r3, #28
 800475c:	4957      	ldr	r1, [pc, #348]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004782:	2b00      	cmp	r3, #0
 8004784:	d02e      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478e:	d129      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004790:	4b4a      	ldr	r3, [pc, #296]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a4:	0f1b      	lsrs	r3, r3, #28
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	019a      	lsls	r2, r3, #6
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	061b      	lsls	r3, r3, #24
 80047be:	431a      	orrs	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	071b      	lsls	r3, r3, #28
 80047c4:	493d      	ldr	r1, [pc, #244]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047cc:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d2:	f023 021f 	bic.w	r2, r3, #31
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	3b01      	subs	r3, #1
 80047dc:	4937      	ldr	r1, [pc, #220]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01d      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047f0:	4b32      	ldr	r3, [pc, #200]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f6:	0e1b      	lsrs	r3, r3, #24
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047fe:	4b2f      	ldr	r3, [pc, #188]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004804:	0f1b      	lsrs	r3, r3, #28
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	019a      	lsls	r2, r3, #6
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	431a      	orrs	r2, r3
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	431a      	orrs	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4925      	ldr	r1, [pc, #148]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d011      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	019a      	lsls	r2, r3, #6
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	071b      	lsls	r3, r3, #28
 8004854:	4919      	ldr	r1, [pc, #100]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a16      	ldr	r2, [pc, #88]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004868:	f7fe fc36 	bl	80030d8 <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004870:	f7fe fc32 	bl	80030d8 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0d7      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004882:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b01      	cmp	r3, #1
 8004892:	f040 80cd 	bne.w	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800489c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a2:	f7fe fc19 	bl	80030d8 <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048aa:	f7fe fc15 	bl	80030d8 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b64      	cmp	r3, #100	; 0x64
 80048b6:	d903      	bls.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e0ba      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80048bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048c0:	4b5e      	ldr	r3, [pc, #376]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048cc:	d0ed      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d02e      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d12a      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048f6:	4b51      	ldr	r3, [pc, #324]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004904:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	0f1b      	lsrs	r3, r3, #28
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	019a      	lsls	r2, r3, #6
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	061b      	lsls	r3, r3, #24
 8004924:	431a      	orrs	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	071b      	lsls	r3, r3, #28
 800492a:	4944      	ldr	r1, [pc, #272]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004932:	4b42      	ldr	r3, [pc, #264]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004938:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	493d      	ldr	r1, [pc, #244]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d022      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800495c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004960:	d11d      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004962:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	0e1b      	lsrs	r3, r3, #24
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004970:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	0f1b      	lsrs	r3, r3, #28
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	019a      	lsls	r2, r3, #6
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	431a      	orrs	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	061b      	lsls	r3, r3, #24
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	071b      	lsls	r3, r3, #28
 8004996:	4929      	ldr	r1, [pc, #164]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d028      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049aa:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	0e1b      	lsrs	r3, r3, #24
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049b8:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	019a      	lsls	r2, r3, #6
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	431a      	orrs	r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	071b      	lsls	r3, r3, #28
 80049de:	4917      	ldr	r1, [pc, #92]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	4911      	ldr	r1, [pc, #68]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049fc:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a08:	f7fe fb66 	bl	80030d8 <HAL_GetTick>
 8004a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a10:	f7fe fb62 	bl	80030d8 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	; 0x64
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e007      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a2e:	d1ef      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800

08004a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e09d      	b.n	8004b8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d108      	bne.n	8004a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a62:	d009      	beq.n	8004a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
 8004a6a:	e005      	b.n	8004a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fd ff5a 	bl	800294c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab8:	d902      	bls.n	8004ac0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e002      	b.n	8004ac6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ace:	d007      	beq.n	8004ae0 <HAL_SPI_Init+0xa0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	ea42 0103 	orr.w	r1, r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	f003 0204 	and.w	r2, r3, #4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b5c:	ea42 0103 	orr.w	r1, r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b088      	sub	sp, #32
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_SPI_Transmit+0x22>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e158      	b.n	8004e6a <HAL_SPI_Transmit+0x2d4>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bc0:	f7fe fa8a 	bl	80030d8 <HAL_GetTick>
 8004bc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d002      	beq.n	8004bdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bda:	e13d      	b.n	8004e58 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_SPI_Transmit+0x52>
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bec:	e134      	b.n	8004e58 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c38:	d10f      	bne.n	8004c5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d007      	beq.n	8004c78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c80:	d94b      	bls.n	8004d1a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_SPI_Transmit+0xfa>
 8004c8a:	8afb      	ldrh	r3, [r7, #22]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d13e      	bne.n	8004d0e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	881a      	ldrh	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	1c9a      	adds	r2, r3, #2
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cb4:	e02b      	b.n	8004d0e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d112      	bne.n	8004cea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	881a      	ldrh	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	1c9a      	adds	r2, r3, #2
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce8:	e011      	b.n	8004d0e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cea:	f7fe f9f5 	bl	80030d8 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d803      	bhi.n	8004d02 <HAL_SPI_Transmit+0x16c>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d102      	bne.n	8004d08 <HAL_SPI_Transmit+0x172>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d0c:	e0a4      	b.n	8004e58 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ce      	bne.n	8004cb6 <HAL_SPI_Transmit+0x120>
 8004d18:	e07c      	b.n	8004e14 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_SPI_Transmit+0x192>
 8004d22:	8afb      	ldrh	r3, [r7, #22]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d170      	bne.n	8004e0a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d912      	bls.n	8004d58 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	881a      	ldrh	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b02      	subs	r3, #2
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d56:	e058      	b.n	8004e0a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d7e:	e044      	b.n	8004e0a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d12b      	bne.n	8004de6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d912      	bls.n	8004dbe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	881a      	ldrh	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b02      	subs	r3, #2
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dbc:	e025      	b.n	8004e0a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	7812      	ldrb	r2, [r2, #0]
 8004dca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004de4:	e011      	b.n	8004e0a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de6:	f7fe f977 	bl	80030d8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d803      	bhi.n	8004dfe <HAL_SPI_Transmit+0x268>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d102      	bne.n	8004e04 <HAL_SPI_Transmit+0x26e>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e08:	e026      	b.n	8004e58 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1b5      	bne.n	8004d80 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fd07 	bl	800582c <SPI_EndRxTxTransaction>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e000      	b.n	8004e58 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004e56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e68:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b088      	sub	sp, #32
 8004e76:	af02      	add	r7, sp, #8
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e8e:	d112      	bne.n	8004eb6 <HAL_SPI_Receive+0x44>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10e      	bne.n	8004eb6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ea0:	88fa      	ldrh	r2, [r7, #6]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f910 	bl	80050d2 <HAL_SPI_TransmitReceive>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	e109      	b.n	80050ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_SPI_Receive+0x52>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e102      	b.n	80050ca <HAL_SPI_Receive+0x258>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ecc:	f7fe f904 	bl	80030d8 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d002      	beq.n	8004ee4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ee2:	e0e9      	b.n	80050b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Receive+0x7e>
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ef4:	e0e0      	b.n	80050b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f40:	d908      	bls.n	8004f54 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	e007      	b.n	8004f64 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f62:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6c:	d10f      	bne.n	8004f8e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d007      	beq.n	8004fac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004faa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fb4:	d867      	bhi.n	8005086 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fb6:	e030      	b.n	800501a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d117      	bne.n	8004ff6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f103 020c 	add.w	r2, r3, #12
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	7812      	ldrb	r2, [r2, #0]
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ff4:	e011      	b.n	800501a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff6:	f7fe f86f 	bl	80030d8 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d803      	bhi.n	800500e <HAL_SPI_Receive+0x19c>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d102      	bne.n	8005014 <HAL_SPI_Receive+0x1a2>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005018:	e04e      	b.n	80050b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1c8      	bne.n	8004fb8 <HAL_SPI_Receive+0x146>
 8005026:	e034      	b.n	8005092 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d115      	bne.n	8005062 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	b292      	uxth	r2, r2
 8005042:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005060:	e011      	b.n	8005086 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005062:	f7fe f839 	bl	80030d8 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d803      	bhi.n	800507a <HAL_SPI_Receive+0x208>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d102      	bne.n	8005080 <HAL_SPI_Receive+0x20e>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005084:	e018      	b.n	80050b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1ca      	bne.n	8005028 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	6839      	ldr	r1, [r7, #0]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fb4c 	bl	8005734 <SPI_EndRxTransaction>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	75fb      	strb	r3, [r7, #23]
 80050b4:	e000      	b.n	80050b8 <HAL_SPI_Receive+0x246>
  }

error :
 80050b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b08a      	sub	sp, #40	; 0x28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050e0:	2301      	movs	r3, #1
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x26>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e1fb      	b.n	80054f0 <HAL_SPI_TransmitReceive+0x41e>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005100:	f7fd ffea 	bl	80030d8 <HAL_GetTick>
 8005104:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800510c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005118:	887b      	ldrh	r3, [r7, #2]
 800511a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800511c:	7efb      	ldrb	r3, [r7, #27]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d00e      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x6e>
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005128:	d106      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x66>
 8005132:	7efb      	ldrb	r3, [r7, #27]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d003      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005138:	2302      	movs	r3, #2
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800513e:	e1cd      	b.n	80054dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_SPI_TransmitReceive+0x80>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_SPI_TransmitReceive+0x80>
 800514c:	887b      	ldrh	r3, [r7, #2]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005158:	e1c0      	b.n	80054dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b04      	cmp	r3, #4
 8005164:	d003      	beq.n	800516e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2205      	movs	r2, #5
 800516a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	887a      	ldrh	r2, [r7, #2]
 800517e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	887a      	ldrh	r2, [r7, #2]
 8005186:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	887a      	ldrh	r2, [r7, #2]
 8005194:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	887a      	ldrh	r2, [r7, #2]
 800519a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b0:	d802      	bhi.n	80051b8 <HAL_SPI_TransmitReceive+0xe6>
 80051b2:	8a3b      	ldrh	r3, [r7, #16]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d908      	bls.n	80051ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	e007      	b.n	80051da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d007      	beq.n	80051f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005200:	d97c      	bls.n	80052fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_SPI_TransmitReceive+0x13e>
 800520a:	8a7b      	ldrh	r3, [r7, #18]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d169      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	881a      	ldrh	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005234:	e056      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d11b      	bne.n	800527c <HAL_SPI_TransmitReceive+0x1aa>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <HAL_SPI_TransmitReceive+0x1aa>
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2b01      	cmp	r3, #1
 8005252:	d113      	bne.n	800527c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	881a      	ldrh	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b01      	cmp	r3, #1
 8005288:	d11c      	bne.n	80052c4 <HAL_SPI_TransmitReceive+0x1f2>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	b292      	uxth	r2, r2
 80052a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	1c9a      	adds	r2, r3, #2
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052c0:	2301      	movs	r3, #1
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052c4:	f7fd ff08 	bl	80030d8 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d807      	bhi.n	80052e4 <HAL_SPI_TransmitReceive+0x212>
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052da:	d003      	beq.n	80052e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052e2:	e0fb      	b.n	80054dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1a3      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x164>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d19d      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x164>
 80052fa:	e0df      	b.n	80054bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_SPI_TransmitReceive+0x23a>
 8005304:	8a7b      	ldrh	r3, [r7, #18]
 8005306:	2b01      	cmp	r3, #1
 8005308:	f040 80cb 	bne.w	80054a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	d912      	bls.n	800533c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	881a      	ldrh	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	1c9a      	adds	r2, r3, #2
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b02      	subs	r3, #2
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	87da      	strh	r2, [r3, #62]	; 0x3e
 800533a:	e0b2      	b.n	80054a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	330c      	adds	r3, #12
 8005346:	7812      	ldrb	r2, [r2, #0]
 8005348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005362:	e09e      	b.n	80054a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b02      	cmp	r3, #2
 8005370:	d134      	bne.n	80053dc <HAL_SPI_TransmitReceive+0x30a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d02f      	beq.n	80053dc <HAL_SPI_TransmitReceive+0x30a>
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	2b01      	cmp	r3, #1
 8005380:	d12c      	bne.n	80053dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	d912      	bls.n	80053b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	881a      	ldrh	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b02      	subs	r3, #2
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053b0:	e012      	b.n	80053d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	7812      	ldrb	r2, [r2, #0]
 80053be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d148      	bne.n	800547c <HAL_SPI_TransmitReceive+0x3aa>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d042      	beq.n	800547c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d923      	bls.n	800544a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	b292      	uxth	r2, r2
 800540e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	1c9a      	adds	r2, r3, #2
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b02      	subs	r3, #2
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d81f      	bhi.n	8005478 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005446:	605a      	str	r2, [r3, #4]
 8005448:	e016      	b.n	8005478 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f103 020c 	add.w	r2, r3, #12
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005478:	2301      	movs	r3, #1
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800547c:	f7fd fe2c 	bl	80030d8 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005488:	429a      	cmp	r2, r3
 800548a:	d803      	bhi.n	8005494 <HAL_SPI_TransmitReceive+0x3c2>
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d102      	bne.n	800549a <HAL_SPI_TransmitReceive+0x3c8>
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80054a0:	e01c      	b.n	80054dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f47f af5b 	bne.w	8005364 <HAL_SPI_TransmitReceive+0x292>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f47f af54 	bne.w	8005364 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f9b3 	bl	800582c <SPI_EndRxTxTransaction>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d006      	beq.n	80054da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	661a      	str	r2, [r3, #96]	; 0x60
 80054d8:	e000      	b.n	80054dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80054da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3728      	adds	r7, #40	; 0x28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005508:	f7fd fde6 	bl	80030d8 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	4413      	add	r3, r2
 8005516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005518:	f7fd fdde 	bl	80030d8 <HAL_GetTick>
 800551c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800551e:	4b39      	ldr	r3, [pc, #228]	; (8005604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	015b      	lsls	r3, r3, #5
 8005524:	0d1b      	lsrs	r3, r3, #20
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800552e:	e054      	b.n	80055da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d050      	beq.n	80055da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005538:	f7fd fdce 	bl	80030d8 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	429a      	cmp	r2, r3
 8005546:	d902      	bls.n	800554e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d13d      	bne.n	80055ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800555c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005566:	d111      	bne.n	800558c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005570:	d004      	beq.n	800557c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557a:	d107      	bne.n	800558c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005594:	d10f      	bne.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e017      	b.n	80055fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d19b      	bne.n	8005530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000064 	.word	0x20000064

08005608 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800561a:	f7fd fd5d 	bl	80030d8 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	4413      	add	r3, r2
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800562a:	f7fd fd55 	bl	80030d8 <HAL_GetTick>
 800562e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005638:	4b3d      	ldr	r3, [pc, #244]	; (8005730 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	00da      	lsls	r2, r3, #3
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	0d1b      	lsrs	r3, r3, #20
 8005648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564a:	fb02 f303 	mul.w	r3, r2, r3
 800564e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005650:	e060      	b.n	8005714 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005658:	d107      	bne.n	800566a <SPI_WaitFifoStateUntilTimeout+0x62>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d104      	bne.n	800566a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005668:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d050      	beq.n	8005714 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005672:	f7fd fd31 	bl	80030d8 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567e:	429a      	cmp	r2, r3
 8005680:	d902      	bls.n	8005688 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	2b00      	cmp	r3, #0
 8005686:	d13d      	bne.n	8005704 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005696:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a0:	d111      	bne.n	80056c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056aa:	d004      	beq.n	80056b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b4:	d107      	bne.n	80056c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ce:	d10f      	bne.n	80056f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e010      	b.n	8005726 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	3b01      	subs	r3, #1
 8005712:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d196      	bne.n	8005652 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3728      	adds	r7, #40	; 0x28
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000064 	.word	0x20000064

08005734 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005748:	d111      	bne.n	800576e <SPI_EndRxTransaction+0x3a>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005752:	d004      	beq.n	800575e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575c:	d107      	bne.n	800576e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005776:	d112      	bne.n	800579e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	2180      	movs	r1, #128	; 0x80
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff feb8 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d021      	beq.n	80057d2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e03d      	b.n	800581a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800579e:	4b21      	ldr	r3, [pc, #132]	; (8005824 <SPI_EndRxTransaction+0xf0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a21      	ldr	r2, [pc, #132]	; (8005828 <SPI_EndRxTransaction+0xf4>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	0d5b      	lsrs	r3, r3, #21
 80057aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	3b01      	subs	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b80      	cmp	r3, #128	; 0x80
 80057cc:	d0f2      	beq.n	80057b4 <SPI_EndRxTransaction+0x80>
 80057ce:	e000      	b.n	80057d2 <SPI_EndRxTransaction+0x9e>
        break;
 80057d0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057da:	d11d      	bne.n	8005818 <SPI_EndRxTransaction+0xe4>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	d004      	beq.n	80057f0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ee:	d113      	bne.n	8005818 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff ff03 	bl	8005608 <SPI_WaitFifoStateUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d007      	beq.n	8005818 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580c:	f043 0220 	orr.w	r2, r3, #32
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e000      	b.n	800581a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000064 	.word	0x20000064
 8005828:	165e9f81 	.word	0x165e9f81

0800582c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2200      	movs	r2, #0
 8005840:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff fedf 	bl	8005608 <SPI_WaitFifoStateUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e046      	b.n	80058ee <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005860:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <SPI_EndRxTxTransaction+0xcc>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a25      	ldr	r2, [pc, #148]	; (80058fc <SPI_EndRxTxTransaction+0xd0>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0d5b      	lsrs	r3, r3, #21
 800586c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587e:	d112      	bne.n	80058a6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	2180      	movs	r1, #128	; 0x80
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff fe34 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d016      	beq.n	80058c4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e023      	b.n	80058ee <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d0f2      	beq.n	80058a6 <SPI_EndRxTxTransaction+0x7a>
 80058c0:	e000      	b.n	80058c4 <SPI_EndRxTxTransaction+0x98>
        break;
 80058c2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff fe99 	bl	8005608 <SPI_WaitFifoStateUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e000      	b.n	80058ee <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000064 	.word	0x20000064
 80058fc:	165e9f81 	.word	0x165e9f81

08005900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e049      	b.n	80059a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fd fa54 	bl	8002dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f000 fd30 	bl	80063a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d001      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e054      	b.n	8005a72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <HAL_TIM_Base_Start_IT+0xd0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d022      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d01d      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <HAL_TIM_Base_Start_IT+0xd4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d018      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a21      	ldr	r2, [pc, #132]	; (8005a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00e      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d009      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d004      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d115      	bne.n	8005a5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_TIM_Base_Start_IT+0xec>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d015      	beq.n	8005a6e <HAL_TIM_Base_Start_IT+0xbe>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a48:	d011      	beq.n	8005a6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5a:	e008      	b.n	8005a6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e000      	b.n	8005a70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40010000 	.word	0x40010000
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	40000c00 	.word	0x40000c00
 8005a90:	40010400 	.word	0x40010400
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40001800 	.word	0x40001800
 8005a9c:	00010007 	.word	0x00010007

08005aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e049      	b.n	8005b46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f841 	bl	8005b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 fc60 	bl	80063a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d109      	bne.n	8005b88 <HAL_TIM_PWM_Start+0x24>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	e03c      	b.n	8005c02 <HAL_TIM_PWM_Start+0x9e>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d109      	bne.n	8005ba2 <HAL_TIM_PWM_Start+0x3e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	bf14      	ite	ne
 8005b9a:	2301      	movne	r3, #1
 8005b9c:	2300      	moveq	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	e02f      	b.n	8005c02 <HAL_TIM_PWM_Start+0x9e>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d109      	bne.n	8005bbc <HAL_TIM_PWM_Start+0x58>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	bf14      	ite	ne
 8005bb4:	2301      	movne	r3, #1
 8005bb6:	2300      	moveq	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	e022      	b.n	8005c02 <HAL_TIM_PWM_Start+0x9e>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b0c      	cmp	r3, #12
 8005bc0:	d109      	bne.n	8005bd6 <HAL_TIM_PWM_Start+0x72>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	bf14      	ite	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	2300      	moveq	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	e015      	b.n	8005c02 <HAL_TIM_PWM_Start+0x9e>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b10      	cmp	r3, #16
 8005bda:	d109      	bne.n	8005bf0 <HAL_TIM_PWM_Start+0x8c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	bf14      	ite	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	2300      	moveq	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	e008      	b.n	8005c02 <HAL_TIM_PWM_Start+0x9e>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	bf14      	ite	ne
 8005bfc:	2301      	movne	r3, #1
 8005bfe:	2300      	moveq	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e092      	b.n	8005d30 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_PWM_Start+0xb6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c18:	e023      	b.n	8005c62 <HAL_TIM_PWM_Start+0xfe>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_PWM_Start+0xc6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c28:	e01b      	b.n	8005c62 <HAL_TIM_PWM_Start+0xfe>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_PWM_Start+0xd6>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c38:	e013      	b.n	8005c62 <HAL_TIM_PWM_Start+0xfe>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b0c      	cmp	r3, #12
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_PWM_Start+0xe6>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c48:	e00b      	b.n	8005c62 <HAL_TIM_PWM_Start+0xfe>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0xf6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c58:	e003      	b.n	8005c62 <HAL_TIM_PWM_Start+0xfe>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2201      	movs	r2, #1
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 ff32 	bl	8006ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a30      	ldr	r2, [pc, #192]	; (8005d38 <HAL_TIM_PWM_Start+0x1d4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_TIM_PWM_Start+0x120>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a2f      	ldr	r2, [pc, #188]	; (8005d3c <HAL_TIM_PWM_Start+0x1d8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <HAL_TIM_PWM_Start+0x124>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <HAL_TIM_PWM_Start+0x126>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a25      	ldr	r2, [pc, #148]	; (8005d38 <HAL_TIM_PWM_Start+0x1d4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d022      	beq.n	8005cee <HAL_TIM_PWM_Start+0x18a>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d01d      	beq.n	8005cee <HAL_TIM_PWM_Start+0x18a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a22      	ldr	r2, [pc, #136]	; (8005d40 <HAL_TIM_PWM_Start+0x1dc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d018      	beq.n	8005cee <HAL_TIM_PWM_Start+0x18a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a20      	ldr	r2, [pc, #128]	; (8005d44 <HAL_TIM_PWM_Start+0x1e0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_TIM_PWM_Start+0x18a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <HAL_TIM_PWM_Start+0x1e4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00e      	beq.n	8005cee <HAL_TIM_PWM_Start+0x18a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a19      	ldr	r2, [pc, #100]	; (8005d3c <HAL_TIM_PWM_Start+0x1d8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_TIM_PWM_Start+0x18a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_TIM_PWM_Start+0x1e8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_TIM_PWM_Start+0x18a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_TIM_PWM_Start+0x1ec>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d115      	bne.n	8005d1a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	4b17      	ldr	r3, [pc, #92]	; (8005d54 <HAL_TIM_PWM_Start+0x1f0>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	d015      	beq.n	8005d2c <HAL_TIM_PWM_Start+0x1c8>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d06:	d011      	beq.n	8005d2c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d18:	e008      	b.n	8005d2c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0201 	orr.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e000      	b.n	8005d2e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40000c00 	.word	0x40000c00
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40001800 	.word	0x40001800
 8005d54:	00010007 	.word	0x00010007

08005d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d122      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d11b      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0202 	mvn.w	r2, #2
 8005d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fae4 	bl	8006368 <HAL_TIM_IC_CaptureCallback>
 8005da0:	e005      	b.n	8005dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fad6 	bl	8006354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fae7 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d122      	bne.n	8005e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d11b      	bne.n	8005e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0204 	mvn.w	r2, #4
 8005dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 faba 	bl	8006368 <HAL_TIM_IC_CaptureCallback>
 8005df4:	e005      	b.n	8005e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 faac 	bl	8006354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fabd 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d122      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d11b      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0208 	mvn.w	r2, #8
 8005e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2204      	movs	r2, #4
 8005e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa90 	bl	8006368 <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa82 	bl	8006354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fa93 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d122      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d11b      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0210 	mvn.w	r2, #16
 8005e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2208      	movs	r2, #8
 8005e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa66 	bl	8006368 <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa58 	bl	8006354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fa69 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d10e      	bne.n	8005edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d107      	bne.n	8005edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0201 	mvn.w	r2, #1
 8005ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fc fba2 	bl	8002620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b80      	cmp	r3, #128	; 0x80
 8005ee8:	d10e      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d107      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fea4 	bl	8006c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f16:	d10e      	bne.n	8005f36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b80      	cmp	r3, #128	; 0x80
 8005f24:	d107      	bne.n	8005f36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fe97 	bl	8006c64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	d10e      	bne.n	8005f62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d107      	bne.n	8005f62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa17 	bl	8006390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d10e      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d107      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f06f 0220 	mvn.w	r2, #32
 8005f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fe57 	bl	8006c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e0ff      	b.n	80061b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b14      	cmp	r3, #20
 8005fc2:	f200 80f0 	bhi.w	80061a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08006021 	.word	0x08006021
 8005fd0:	080061a7 	.word	0x080061a7
 8005fd4:	080061a7 	.word	0x080061a7
 8005fd8:	080061a7 	.word	0x080061a7
 8005fdc:	08006061 	.word	0x08006061
 8005fe0:	080061a7 	.word	0x080061a7
 8005fe4:	080061a7 	.word	0x080061a7
 8005fe8:	080061a7 	.word	0x080061a7
 8005fec:	080060a3 	.word	0x080060a3
 8005ff0:	080061a7 	.word	0x080061a7
 8005ff4:	080061a7 	.word	0x080061a7
 8005ff8:	080061a7 	.word	0x080061a7
 8005ffc:	080060e3 	.word	0x080060e3
 8006000:	080061a7 	.word	0x080061a7
 8006004:	080061a7 	.word	0x080061a7
 8006008:	080061a7 	.word	0x080061a7
 800600c:	08006125 	.word	0x08006125
 8006010:	080061a7 	.word	0x080061a7
 8006014:	080061a7 	.word	0x080061a7
 8006018:	080061a7 	.word	0x080061a7
 800601c:	08006165 	.word	0x08006165
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fa5c 	bl	80064e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0208 	orr.w	r2, r2, #8
 800603a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0204 	bic.w	r2, r2, #4
 800604a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6999      	ldr	r1, [r3, #24]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	619a      	str	r2, [r3, #24]
      break;
 800605e:	e0a5      	b.n	80061ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	4618      	mov	r0, r3
 8006068:	f000 faae 	bl	80065c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800607a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800608a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6999      	ldr	r1, [r3, #24]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	021a      	lsls	r2, r3, #8
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	619a      	str	r2, [r3, #24]
      break;
 80060a0:	e084      	b.n	80061ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fb05 	bl	80066b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0208 	orr.w	r2, r2, #8
 80060bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0204 	bic.w	r2, r2, #4
 80060cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69d9      	ldr	r1, [r3, #28]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	61da      	str	r2, [r3, #28]
      break;
 80060e0:	e064      	b.n	80061ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fb5b 	bl	80067a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69da      	ldr	r2, [r3, #28]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69d9      	ldr	r1, [r3, #28]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	021a      	lsls	r2, r3, #8
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	61da      	str	r2, [r3, #28]
      break;
 8006122:	e043      	b.n	80061ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fb92 	bl	8006854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0208 	orr.w	r2, r2, #8
 800613e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0204 	bic.w	r2, r2, #4
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006162:	e023      	b.n	80061ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fbc4 	bl	80068f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	021a      	lsls	r2, r3, #8
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061a4:	e002      	b.n	80061ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	75fb      	strb	r3, [r7, #23]
      break;
 80061aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop

080061c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_TIM_ConfigClockSource+0x1c>
 80061d8:	2302      	movs	r3, #2
 80061da:	e0b4      	b.n	8006346 <HAL_TIM_ConfigClockSource+0x186>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	4b56      	ldr	r3, [pc, #344]	; (8006350 <HAL_TIM_ConfigClockSource+0x190>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006214:	d03e      	beq.n	8006294 <HAL_TIM_ConfigClockSource+0xd4>
 8006216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621a:	f200 8087 	bhi.w	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	f000 8086 	beq.w	8006332 <HAL_TIM_ConfigClockSource+0x172>
 8006226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622a:	d87f      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800622c:	2b70      	cmp	r3, #112	; 0x70
 800622e:	d01a      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0xa6>
 8006230:	2b70      	cmp	r3, #112	; 0x70
 8006232:	d87b      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 8006234:	2b60      	cmp	r3, #96	; 0x60
 8006236:	d050      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x11a>
 8006238:	2b60      	cmp	r3, #96	; 0x60
 800623a:	d877      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800623c:	2b50      	cmp	r3, #80	; 0x50
 800623e:	d03c      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0xfa>
 8006240:	2b50      	cmp	r3, #80	; 0x50
 8006242:	d873      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	d058      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x13a>
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d86f      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800624c:	2b30      	cmp	r3, #48	; 0x30
 800624e:	d064      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x15a>
 8006250:	2b30      	cmp	r3, #48	; 0x30
 8006252:	d86b      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 8006254:	2b20      	cmp	r3, #32
 8006256:	d060      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x15a>
 8006258:	2b20      	cmp	r3, #32
 800625a:	d867      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d05c      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x15a>
 8006260:	2b10      	cmp	r3, #16
 8006262:	d05a      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x15a>
 8006264:	e062      	b.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6899      	ldr	r1, [r3, #8]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f000 fc0d 	bl	8006a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	609a      	str	r2, [r3, #8]
      break;
 8006292:	e04f      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	6899      	ldr	r1, [r3, #8]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f000 fbf6 	bl	8006a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062b6:	609a      	str	r2, [r3, #8]
      break;
 80062b8:	e03c      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f000 fb6a 	bl	80069a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2150      	movs	r1, #80	; 0x50
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fbc3 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 80062d8:	e02c      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6859      	ldr	r1, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f000 fb89 	bl	80069fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2160      	movs	r1, #96	; 0x60
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fbb3 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 80062f8:	e01c      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	461a      	mov	r2, r3
 8006308:	f000 fb4a 	bl	80069a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2140      	movs	r1, #64	; 0x40
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fba3 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 8006318:	e00c      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f000 fb9a 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 800632a:	e003      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
      break;
 8006330:	e000      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	fffeff88 	.word	0xfffeff88

08006354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a40      	ldr	r2, [pc, #256]	; (80064b8 <TIM_Base_SetConfig+0x114>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c2:	d00f      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3d      	ldr	r2, [pc, #244]	; (80064bc <TIM_Base_SetConfig+0x118>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00b      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3c      	ldr	r2, [pc, #240]	; (80064c0 <TIM_Base_SetConfig+0x11c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a3b      	ldr	r2, [pc, #236]	; (80064c4 <TIM_Base_SetConfig+0x120>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a3a      	ldr	r2, [pc, #232]	; (80064c8 <TIM_Base_SetConfig+0x124>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d108      	bne.n	80063f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2f      	ldr	r2, [pc, #188]	; (80064b8 <TIM_Base_SetConfig+0x114>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d02b      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006404:	d027      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2c      	ldr	r2, [pc, #176]	; (80064bc <TIM_Base_SetConfig+0x118>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d023      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2b      	ldr	r2, [pc, #172]	; (80064c0 <TIM_Base_SetConfig+0x11c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01f      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <TIM_Base_SetConfig+0x120>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01b      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a29      	ldr	r2, [pc, #164]	; (80064c8 <TIM_Base_SetConfig+0x124>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d017      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a28      	ldr	r2, [pc, #160]	; (80064cc <TIM_Base_SetConfig+0x128>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <TIM_Base_SetConfig+0x12c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00f      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a26      	ldr	r2, [pc, #152]	; (80064d4 <TIM_Base_SetConfig+0x130>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00b      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <TIM_Base_SetConfig+0x134>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d007      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a24      	ldr	r2, [pc, #144]	; (80064dc <TIM_Base_SetConfig+0x138>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a23      	ldr	r2, [pc, #140]	; (80064e0 <TIM_Base_SetConfig+0x13c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d108      	bne.n	8006468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a0a      	ldr	r2, [pc, #40]	; (80064b8 <TIM_Base_SetConfig+0x114>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_Base_SetConfig+0xf8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <TIM_Base_SetConfig+0x124>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d103      	bne.n	80064a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	615a      	str	r2, [r3, #20]
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	40010400 	.word	0x40010400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40014400 	.word	0x40014400
 80064d4:	40014800 	.word	0x40014800
 80064d8:	40001800 	.word	0x40001800
 80064dc:	40001c00 	.word	0x40001c00
 80064e0:	40002000 	.word	0x40002000

080064e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4b2b      	ldr	r3, [pc, #172]	; (80065bc <TIM_OC1_SetConfig+0xd8>)
 8006510:	4013      	ands	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 0302 	bic.w	r3, r3, #2
 800652c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <TIM_OC1_SetConfig+0xdc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_OC1_SetConfig+0x64>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a20      	ldr	r2, [pc, #128]	; (80065c4 <TIM_OC1_SetConfig+0xe0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d10c      	bne.n	8006562 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0308 	bic.w	r3, r3, #8
 800654e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f023 0304 	bic.w	r3, r3, #4
 8006560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a16      	ldr	r2, [pc, #88]	; (80065c0 <TIM_OC1_SetConfig+0xdc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_OC1_SetConfig+0x8e>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <TIM_OC1_SetConfig+0xe0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d111      	bne.n	8006596 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	fffeff8f 	.word	0xfffeff8f
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40010400 	.word	0x40010400

080065c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0210 	bic.w	r2, r3, #16
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4b2e      	ldr	r3, [pc, #184]	; (80066ac <TIM_OC2_SetConfig+0xe4>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 0320 	bic.w	r3, r3, #32
 8006612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a23      	ldr	r2, [pc, #140]	; (80066b0 <TIM_OC2_SetConfig+0xe8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d003      	beq.n	8006630 <TIM_OC2_SetConfig+0x68>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a22      	ldr	r2, [pc, #136]	; (80066b4 <TIM_OC2_SetConfig+0xec>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10d      	bne.n	800664c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a18      	ldr	r2, [pc, #96]	; (80066b0 <TIM_OC2_SetConfig+0xe8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_OC2_SetConfig+0x94>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a17      	ldr	r2, [pc, #92]	; (80066b4 <TIM_OC2_SetConfig+0xec>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d113      	bne.n	8006684 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800666a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	feff8fff 	.word	0xfeff8fff
 80066b0:	40010000 	.word	0x40010000
 80066b4:	40010400 	.word	0x40010400

080066b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4b2d      	ldr	r3, [pc, #180]	; (8006798 <TIM_OC3_SetConfig+0xe0>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a22      	ldr	r2, [pc, #136]	; (800679c <TIM_OC3_SetConfig+0xe4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <TIM_OC3_SetConfig+0x66>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <TIM_OC3_SetConfig+0xe8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d10d      	bne.n	800673a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	021b      	lsls	r3, r3, #8
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a17      	ldr	r2, [pc, #92]	; (800679c <TIM_OC3_SetConfig+0xe4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d003      	beq.n	800674a <TIM_OC3_SetConfig+0x92>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a16      	ldr	r2, [pc, #88]	; (80067a0 <TIM_OC3_SetConfig+0xe8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d113      	bne.n	8006772 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	fffeff8f 	.word	0xfffeff8f
 800679c:	40010000 	.word	0x40010000
 80067a0:	40010400 	.word	0x40010400

080067a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <TIM_OC4_SetConfig+0xa4>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	021b      	lsls	r3, r3, #8
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	031b      	lsls	r3, r3, #12
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a13      	ldr	r2, [pc, #76]	; (800684c <TIM_OC4_SetConfig+0xa8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_OC4_SetConfig+0x68>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a12      	ldr	r2, [pc, #72]	; (8006850 <TIM_OC4_SetConfig+0xac>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d109      	bne.n	8006820 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	019b      	lsls	r3, r3, #6
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	feff8fff 	.word	0xfeff8fff
 800684c:	40010000 	.word	0x40010000
 8006850:	40010400 	.word	0x40010400

08006854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4b1b      	ldr	r3, [pc, #108]	; (80068ec <TIM_OC5_SetConfig+0x98>)
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006894:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a12      	ldr	r2, [pc, #72]	; (80068f0 <TIM_OC5_SetConfig+0x9c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_OC5_SetConfig+0x5e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a11      	ldr	r2, [pc, #68]	; (80068f4 <TIM_OC5_SetConfig+0xa0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d109      	bne.n	80068c6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	621a      	str	r2, [r3, #32]
}
 80068e0:	bf00      	nop
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	fffeff8f 	.word	0xfffeff8f
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400

080068f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <TIM_OC6_SetConfig+0x9c>)
 8006924:	4013      	ands	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800693a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	051b      	lsls	r3, r3, #20
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a13      	ldr	r2, [pc, #76]	; (8006998 <TIM_OC6_SetConfig+0xa0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_OC6_SetConfig+0x60>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a12      	ldr	r2, [pc, #72]	; (800699c <TIM_OC6_SetConfig+0xa4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d109      	bne.n	800696c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800695e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	029b      	lsls	r3, r3, #10
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	feff8fff 	.word	0xfeff8fff
 8006998:	40010000 	.word	0x40010000
 800699c:	40010400 	.word	0x40010400

080069a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f023 0201 	bic.w	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 030a 	bic.w	r3, r3, #10
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0210 	bic.w	r2, r3, #16
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	031b      	lsls	r3, r3, #12
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b085      	sub	sp, #20
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f043 0307 	orr.w	r3, r3, #7
 8006a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	021a      	lsls	r2, r3, #8
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1a      	ldr	r2, [r3, #32]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	43db      	mvns	r3, r3
 8006af6:	401a      	ands	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a1a      	ldr	r2, [r3, #32]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e06d      	b.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a30      	ldr	r2, [pc, #192]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d004      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a2f      	ldr	r2, [pc, #188]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d108      	bne.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a20      	ldr	r2, [pc, #128]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d022      	beq.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006baa:	d01d      	beq.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1d      	ldr	r2, [pc, #116]	; (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d018      	beq.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1c      	ldr	r2, [pc, #112]	; (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d013      	beq.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1a      	ldr	r2, [pc, #104]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00e      	beq.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a15      	ldr	r2, [pc, #84]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d009      	beq.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d004      	beq.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d10c      	bne.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	40010000 	.word	0x40010000
 8006c24:	40010400 	.word	0x40010400
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40001800 	.word	0x40001800

08006c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e040      	b.n	8006d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fc f93a 	bl	8002f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2224      	movs	r2, #36	; 0x24
 8006ca4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0201 	bic.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fbe6 	bl	8007488 <UART_SetConfig>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e022      	b.n	8006d0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fe3e 	bl	8007950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fec5 	bl	8007a94 <UART_CheckIdleState>
 8006d0a:	4603      	mov	r3, r0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	; 0x28
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	4613      	mov	r3, r2
 8006d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d171      	bne.n	8006e10 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <HAL_UART_Transmit+0x24>
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e06a      	b.n	8006e12 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2221      	movs	r2, #33	; 0x21
 8006d48:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d4a:	f7fc f9c5 	bl	80030d8 <HAL_GetTick>
 8006d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	88fa      	ldrh	r2, [r7, #6]
 8006d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d68:	d108      	bne.n	8006d7c <HAL_UART_Transmit+0x68>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d104      	bne.n	8006d7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	e003      	b.n	8006d84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d84:	e02c      	b.n	8006de0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2180      	movs	r1, #128	; 0x80
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 feb6 	bl	8007b02 <UART_WaitOnFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e038      	b.n	8006e12 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	3302      	adds	r3, #2
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e007      	b.n	8006dce <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1cc      	bne.n	8006d86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2200      	movs	r2, #0
 8006df4:	2140      	movs	r1, #64	; 0x40
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fe83 	bl	8007b02 <UART_WaitOnFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e005      	b.n	8006e12 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e000      	b.n	8006e12 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006e10:	2302      	movs	r3, #2
  }
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3720      	adds	r7, #32
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b08a      	sub	sp, #40	; 0x28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	4613      	mov	r3, r2
 8006e26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d132      	bne.n	8006e98 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_UART_Receive_IT+0x24>
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e02b      	b.n	8006e9a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d018      	beq.n	8006e88 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	613b      	str	r3, [r7, #16]
   return(result);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	623b      	str	r3, [r7, #32]
 8006e76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	69f9      	ldr	r1, [r7, #28]
 8006e7a:	6a3a      	ldr	r2, [r7, #32]
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e6      	bne.n	8006e56 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	68b9      	ldr	r1, [r7, #8]
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fefe 	bl	8007c90 <UART_Start_Receive_IT>
 8006e94:	4603      	mov	r3, r0
 8006e96:	e000      	b.n	8006e9a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006e98:	2302      	movs	r3, #2
  }
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3728      	adds	r7, #40	; 0x28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b0ba      	sub	sp, #232	; 0xe8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006eca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006ece:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d115      	bne.n	8006f0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00f      	beq.n	8006f0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d009      	beq.n	8006f0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8297 	beq.w	8007430 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
      }
      return;
 8006f0a:	e291      	b.n	8007430 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8117 	beq.w	8007144 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f26:	4b85      	ldr	r3, [pc, #532]	; (800713c <HAL_UART_IRQHandler+0x298>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 810a 	beq.w	8007144 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d011      	beq.n	8006f60 <HAL_UART_IRQHandler+0xbc>
 8006f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f56:	f043 0201 	orr.w	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d011      	beq.n	8006f90 <HAL_UART_IRQHandler+0xec>
 8006f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f86:	f043 0204 	orr.w	r2, r3, #4
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d011      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x11c>
 8006f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2204      	movs	r2, #4
 8006fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb6:	f043 0202 	orr.w	r2, r3, #2
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d017      	beq.n	8006ffc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd0:	f003 0320 	and.w	r3, r3, #32
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d105      	bne.n	8006fe4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff2:	f043 0208 	orr.w	r2, r3, #8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007004:	2b00      	cmp	r3, #0
 8007006:	d012      	beq.n	800702e <HAL_UART_IRQHandler+0x18a>
 8007008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800700c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00c      	beq.n	800702e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800701c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007024:	f043 0220 	orr.w	r2, r3, #32
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 81fd 	beq.w	8007434 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00d      	beq.n	8007062 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007068:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d005      	beq.n	8007086 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800707a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800707e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007082:	2b00      	cmp	r3, #0
 8007084:	d04f      	beq.n	8007126 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fec8 	bl	8007e1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b40      	cmp	r3, #64	; 0x40
 8007098:	d141      	bne.n	800711e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3308      	adds	r3, #8
 80070a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80070b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3308      	adds	r3, #8
 80070c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1d9      	bne.n	800709a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d013      	beq.n	8007116 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f2:	4a13      	ldr	r2, [pc, #76]	; (8007140 <HAL_UART_IRQHandler+0x29c>)
 80070f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fc f99d 	bl	800343a <HAL_DMA_Abort_IT>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d017      	beq.n	8007136 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800710a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	e00f      	b.n	8007136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9a0 	bl	800745c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711c:	e00b      	b.n	8007136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f99c 	bl	800745c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	e007      	b.n	8007136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f998 	bl	800745c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007134:	e17e      	b.n	8007434 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007136:	bf00      	nop
    return;
 8007138:	e17c      	b.n	8007434 <HAL_UART_IRQHandler+0x590>
 800713a:	bf00      	nop
 800713c:	04000120 	.word	0x04000120
 8007140:	08007ee5 	.word	0x08007ee5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007148:	2b01      	cmp	r3, #1
 800714a:	f040 814c 	bne.w	80073e6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 8145 	beq.w	80073e6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800715c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 813e 	beq.w	80073e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2210      	movs	r2, #16
 8007170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	f040 80b6 	bne.w	80072ee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800718e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 8150 	beq.w	8007438 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800719e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071a2:	429a      	cmp	r2, r3
 80071a4:	f080 8148 	bcs.w	8007438 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071bc:	f000 8086 	beq.w	80072cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1da      	bne.n	80071c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800721a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800722e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007232:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007236:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e1      	bne.n	800720a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3308      	adds	r3, #8
 800724c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3308      	adds	r3, #8
 8007266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800726a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800726c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007270:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e3      	bne.n	8007246 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800729a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800729c:	f023 0310 	bic.w	r3, r3, #16
 80072a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80072b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e4      	bne.n	800728c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fc f847 	bl	800335a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072de:	b29b      	uxth	r3, r3
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f8c2 	bl	8007470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072ec:	e0a4      	b.n	8007438 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8096 	beq.w	800743c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8091 	beq.w	800743c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800732e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800733c:	647b      	str	r3, [r7, #68]	; 0x44
 800733e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e4      	bne.n	800731a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3308      	adds	r3, #8
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	623b      	str	r3, [r7, #32]
   return(result);
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007374:	633a      	str	r2, [r7, #48]	; 0x30
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800737a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e3      	bne.n	8007350 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f023 0310 	bic.w	r3, r3, #16
 80073b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	69b9      	ldr	r1, [r7, #24]
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	617b      	str	r3, [r7, #20]
   return(result);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e4      	bne.n	800739c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f846 	bl	8007470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073e4:	e02a      	b.n	800743c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80073e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00e      	beq.n	8007410 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80073f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d008      	beq.n	8007410 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d01c      	beq.n	8007440 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
    }
    return;
 800740e:	e017      	b.n	8007440 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d012      	beq.n	8007442 <HAL_UART_IRQHandler+0x59e>
 800741c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00c      	beq.n	8007442 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fd71 	bl	8007f10 <UART_EndTransmit_IT>
    return;
 800742e:	e008      	b.n	8007442 <HAL_UART_IRQHandler+0x59e>
      return;
 8007430:	bf00      	nop
 8007432:	e006      	b.n	8007442 <HAL_UART_IRQHandler+0x59e>
    return;
 8007434:	bf00      	nop
 8007436:	e004      	b.n	8007442 <HAL_UART_IRQHandler+0x59e>
      return;
 8007438:	bf00      	nop
 800743a:	e002      	b.n	8007442 <HAL_UART_IRQHandler+0x59e>
      return;
 800743c:	bf00      	nop
 800743e:	e000      	b.n	8007442 <HAL_UART_IRQHandler+0x59e>
    return;
 8007440:	bf00      	nop
  }

}
 8007442:	37e8      	adds	r7, #232	; 0xe8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	431a      	orrs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	4ba6      	ldr	r3, [pc, #664]	; (800774c <UART_SetConfig+0x2c4>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	6979      	ldr	r1, [r7, #20]
 80074bc:	430b      	orrs	r3, r1
 80074be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a94      	ldr	r2, [pc, #592]	; (8007750 <UART_SetConfig+0x2c8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d120      	bne.n	8007546 <UART_SetConfig+0xbe>
 8007504:	4b93      	ldr	r3, [pc, #588]	; (8007754 <UART_SetConfig+0x2cc>)
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	2b03      	cmp	r3, #3
 8007510:	d816      	bhi.n	8007540 <UART_SetConfig+0xb8>
 8007512:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <UART_SetConfig+0x90>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	08007529 	.word	0x08007529
 800751c:	08007535 	.word	0x08007535
 8007520:	0800752f 	.word	0x0800752f
 8007524:	0800753b 	.word	0x0800753b
 8007528:	2301      	movs	r3, #1
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e150      	b.n	80077d0 <UART_SetConfig+0x348>
 800752e:	2302      	movs	r3, #2
 8007530:	77fb      	strb	r3, [r7, #31]
 8007532:	e14d      	b.n	80077d0 <UART_SetConfig+0x348>
 8007534:	2304      	movs	r3, #4
 8007536:	77fb      	strb	r3, [r7, #31]
 8007538:	e14a      	b.n	80077d0 <UART_SetConfig+0x348>
 800753a:	2308      	movs	r3, #8
 800753c:	77fb      	strb	r3, [r7, #31]
 800753e:	e147      	b.n	80077d0 <UART_SetConfig+0x348>
 8007540:	2310      	movs	r3, #16
 8007542:	77fb      	strb	r3, [r7, #31]
 8007544:	e144      	b.n	80077d0 <UART_SetConfig+0x348>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a83      	ldr	r2, [pc, #524]	; (8007758 <UART_SetConfig+0x2d0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d132      	bne.n	80075b6 <UART_SetConfig+0x12e>
 8007550:	4b80      	ldr	r3, [pc, #512]	; (8007754 <UART_SetConfig+0x2cc>)
 8007552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007556:	f003 030c 	and.w	r3, r3, #12
 800755a:	2b0c      	cmp	r3, #12
 800755c:	d828      	bhi.n	80075b0 <UART_SetConfig+0x128>
 800755e:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <UART_SetConfig+0xdc>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	08007599 	.word	0x08007599
 8007568:	080075b1 	.word	0x080075b1
 800756c:	080075b1 	.word	0x080075b1
 8007570:	080075b1 	.word	0x080075b1
 8007574:	080075a5 	.word	0x080075a5
 8007578:	080075b1 	.word	0x080075b1
 800757c:	080075b1 	.word	0x080075b1
 8007580:	080075b1 	.word	0x080075b1
 8007584:	0800759f 	.word	0x0800759f
 8007588:	080075b1 	.word	0x080075b1
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075b1 	.word	0x080075b1
 8007594:	080075ab 	.word	0x080075ab
 8007598:	2300      	movs	r3, #0
 800759a:	77fb      	strb	r3, [r7, #31]
 800759c:	e118      	b.n	80077d0 <UART_SetConfig+0x348>
 800759e:	2302      	movs	r3, #2
 80075a0:	77fb      	strb	r3, [r7, #31]
 80075a2:	e115      	b.n	80077d0 <UART_SetConfig+0x348>
 80075a4:	2304      	movs	r3, #4
 80075a6:	77fb      	strb	r3, [r7, #31]
 80075a8:	e112      	b.n	80077d0 <UART_SetConfig+0x348>
 80075aa:	2308      	movs	r3, #8
 80075ac:	77fb      	strb	r3, [r7, #31]
 80075ae:	e10f      	b.n	80077d0 <UART_SetConfig+0x348>
 80075b0:	2310      	movs	r3, #16
 80075b2:	77fb      	strb	r3, [r7, #31]
 80075b4:	e10c      	b.n	80077d0 <UART_SetConfig+0x348>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a68      	ldr	r2, [pc, #416]	; (800775c <UART_SetConfig+0x2d4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d120      	bne.n	8007602 <UART_SetConfig+0x17a>
 80075c0:	4b64      	ldr	r3, [pc, #400]	; (8007754 <UART_SetConfig+0x2cc>)
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075ca:	2b30      	cmp	r3, #48	; 0x30
 80075cc:	d013      	beq.n	80075f6 <UART_SetConfig+0x16e>
 80075ce:	2b30      	cmp	r3, #48	; 0x30
 80075d0:	d814      	bhi.n	80075fc <UART_SetConfig+0x174>
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d009      	beq.n	80075ea <UART_SetConfig+0x162>
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d810      	bhi.n	80075fc <UART_SetConfig+0x174>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <UART_SetConfig+0x15c>
 80075de:	2b10      	cmp	r3, #16
 80075e0:	d006      	beq.n	80075f0 <UART_SetConfig+0x168>
 80075e2:	e00b      	b.n	80075fc <UART_SetConfig+0x174>
 80075e4:	2300      	movs	r3, #0
 80075e6:	77fb      	strb	r3, [r7, #31]
 80075e8:	e0f2      	b.n	80077d0 <UART_SetConfig+0x348>
 80075ea:	2302      	movs	r3, #2
 80075ec:	77fb      	strb	r3, [r7, #31]
 80075ee:	e0ef      	b.n	80077d0 <UART_SetConfig+0x348>
 80075f0:	2304      	movs	r3, #4
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	e0ec      	b.n	80077d0 <UART_SetConfig+0x348>
 80075f6:	2308      	movs	r3, #8
 80075f8:	77fb      	strb	r3, [r7, #31]
 80075fa:	e0e9      	b.n	80077d0 <UART_SetConfig+0x348>
 80075fc:	2310      	movs	r3, #16
 80075fe:	77fb      	strb	r3, [r7, #31]
 8007600:	e0e6      	b.n	80077d0 <UART_SetConfig+0x348>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a56      	ldr	r2, [pc, #344]	; (8007760 <UART_SetConfig+0x2d8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d120      	bne.n	800764e <UART_SetConfig+0x1c6>
 800760c:	4b51      	ldr	r3, [pc, #324]	; (8007754 <UART_SetConfig+0x2cc>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007612:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007616:	2bc0      	cmp	r3, #192	; 0xc0
 8007618:	d013      	beq.n	8007642 <UART_SetConfig+0x1ba>
 800761a:	2bc0      	cmp	r3, #192	; 0xc0
 800761c:	d814      	bhi.n	8007648 <UART_SetConfig+0x1c0>
 800761e:	2b80      	cmp	r3, #128	; 0x80
 8007620:	d009      	beq.n	8007636 <UART_SetConfig+0x1ae>
 8007622:	2b80      	cmp	r3, #128	; 0x80
 8007624:	d810      	bhi.n	8007648 <UART_SetConfig+0x1c0>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <UART_SetConfig+0x1a8>
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	d006      	beq.n	800763c <UART_SetConfig+0x1b4>
 800762e:	e00b      	b.n	8007648 <UART_SetConfig+0x1c0>
 8007630:	2300      	movs	r3, #0
 8007632:	77fb      	strb	r3, [r7, #31]
 8007634:	e0cc      	b.n	80077d0 <UART_SetConfig+0x348>
 8007636:	2302      	movs	r3, #2
 8007638:	77fb      	strb	r3, [r7, #31]
 800763a:	e0c9      	b.n	80077d0 <UART_SetConfig+0x348>
 800763c:	2304      	movs	r3, #4
 800763e:	77fb      	strb	r3, [r7, #31]
 8007640:	e0c6      	b.n	80077d0 <UART_SetConfig+0x348>
 8007642:	2308      	movs	r3, #8
 8007644:	77fb      	strb	r3, [r7, #31]
 8007646:	e0c3      	b.n	80077d0 <UART_SetConfig+0x348>
 8007648:	2310      	movs	r3, #16
 800764a:	77fb      	strb	r3, [r7, #31]
 800764c:	e0c0      	b.n	80077d0 <UART_SetConfig+0x348>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a44      	ldr	r2, [pc, #272]	; (8007764 <UART_SetConfig+0x2dc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d125      	bne.n	80076a4 <UART_SetConfig+0x21c>
 8007658:	4b3e      	ldr	r3, [pc, #248]	; (8007754 <UART_SetConfig+0x2cc>)
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007666:	d017      	beq.n	8007698 <UART_SetConfig+0x210>
 8007668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800766c:	d817      	bhi.n	800769e <UART_SetConfig+0x216>
 800766e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007672:	d00b      	beq.n	800768c <UART_SetConfig+0x204>
 8007674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007678:	d811      	bhi.n	800769e <UART_SetConfig+0x216>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <UART_SetConfig+0x1fe>
 800767e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007682:	d006      	beq.n	8007692 <UART_SetConfig+0x20a>
 8007684:	e00b      	b.n	800769e <UART_SetConfig+0x216>
 8007686:	2300      	movs	r3, #0
 8007688:	77fb      	strb	r3, [r7, #31]
 800768a:	e0a1      	b.n	80077d0 <UART_SetConfig+0x348>
 800768c:	2302      	movs	r3, #2
 800768e:	77fb      	strb	r3, [r7, #31]
 8007690:	e09e      	b.n	80077d0 <UART_SetConfig+0x348>
 8007692:	2304      	movs	r3, #4
 8007694:	77fb      	strb	r3, [r7, #31]
 8007696:	e09b      	b.n	80077d0 <UART_SetConfig+0x348>
 8007698:	2308      	movs	r3, #8
 800769a:	77fb      	strb	r3, [r7, #31]
 800769c:	e098      	b.n	80077d0 <UART_SetConfig+0x348>
 800769e:	2310      	movs	r3, #16
 80076a0:	77fb      	strb	r3, [r7, #31]
 80076a2:	e095      	b.n	80077d0 <UART_SetConfig+0x348>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a2f      	ldr	r2, [pc, #188]	; (8007768 <UART_SetConfig+0x2e0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d125      	bne.n	80076fa <UART_SetConfig+0x272>
 80076ae:	4b29      	ldr	r3, [pc, #164]	; (8007754 <UART_SetConfig+0x2cc>)
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076bc:	d017      	beq.n	80076ee <UART_SetConfig+0x266>
 80076be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076c2:	d817      	bhi.n	80076f4 <UART_SetConfig+0x26c>
 80076c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c8:	d00b      	beq.n	80076e2 <UART_SetConfig+0x25a>
 80076ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ce:	d811      	bhi.n	80076f4 <UART_SetConfig+0x26c>
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <UART_SetConfig+0x254>
 80076d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d8:	d006      	beq.n	80076e8 <UART_SetConfig+0x260>
 80076da:	e00b      	b.n	80076f4 <UART_SetConfig+0x26c>
 80076dc:	2301      	movs	r3, #1
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e076      	b.n	80077d0 <UART_SetConfig+0x348>
 80076e2:	2302      	movs	r3, #2
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e073      	b.n	80077d0 <UART_SetConfig+0x348>
 80076e8:	2304      	movs	r3, #4
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	e070      	b.n	80077d0 <UART_SetConfig+0x348>
 80076ee:	2308      	movs	r3, #8
 80076f0:	77fb      	strb	r3, [r7, #31]
 80076f2:	e06d      	b.n	80077d0 <UART_SetConfig+0x348>
 80076f4:	2310      	movs	r3, #16
 80076f6:	77fb      	strb	r3, [r7, #31]
 80076f8:	e06a      	b.n	80077d0 <UART_SetConfig+0x348>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1b      	ldr	r2, [pc, #108]	; (800776c <UART_SetConfig+0x2e4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d138      	bne.n	8007776 <UART_SetConfig+0x2ee>
 8007704:	4b13      	ldr	r3, [pc, #76]	; (8007754 <UART_SetConfig+0x2cc>)
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800770e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007712:	d017      	beq.n	8007744 <UART_SetConfig+0x2bc>
 8007714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007718:	d82a      	bhi.n	8007770 <UART_SetConfig+0x2e8>
 800771a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800771e:	d00b      	beq.n	8007738 <UART_SetConfig+0x2b0>
 8007720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007724:	d824      	bhi.n	8007770 <UART_SetConfig+0x2e8>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <UART_SetConfig+0x2aa>
 800772a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772e:	d006      	beq.n	800773e <UART_SetConfig+0x2b6>
 8007730:	e01e      	b.n	8007770 <UART_SetConfig+0x2e8>
 8007732:	2300      	movs	r3, #0
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	e04b      	b.n	80077d0 <UART_SetConfig+0x348>
 8007738:	2302      	movs	r3, #2
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e048      	b.n	80077d0 <UART_SetConfig+0x348>
 800773e:	2304      	movs	r3, #4
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e045      	b.n	80077d0 <UART_SetConfig+0x348>
 8007744:	2308      	movs	r3, #8
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e042      	b.n	80077d0 <UART_SetConfig+0x348>
 800774a:	bf00      	nop
 800774c:	efff69f3 	.word	0xefff69f3
 8007750:	40011000 	.word	0x40011000
 8007754:	40023800 	.word	0x40023800
 8007758:	40004400 	.word	0x40004400
 800775c:	40004800 	.word	0x40004800
 8007760:	40004c00 	.word	0x40004c00
 8007764:	40005000 	.word	0x40005000
 8007768:	40011400 	.word	0x40011400
 800776c:	40007800 	.word	0x40007800
 8007770:	2310      	movs	r3, #16
 8007772:	77fb      	strb	r3, [r7, #31]
 8007774:	e02c      	b.n	80077d0 <UART_SetConfig+0x348>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a72      	ldr	r2, [pc, #456]	; (8007944 <UART_SetConfig+0x4bc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d125      	bne.n	80077cc <UART_SetConfig+0x344>
 8007780:	4b71      	ldr	r3, [pc, #452]	; (8007948 <UART_SetConfig+0x4c0>)
 8007782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007786:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800778a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800778e:	d017      	beq.n	80077c0 <UART_SetConfig+0x338>
 8007790:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007794:	d817      	bhi.n	80077c6 <UART_SetConfig+0x33e>
 8007796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800779a:	d00b      	beq.n	80077b4 <UART_SetConfig+0x32c>
 800779c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a0:	d811      	bhi.n	80077c6 <UART_SetConfig+0x33e>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <UART_SetConfig+0x326>
 80077a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077aa:	d006      	beq.n	80077ba <UART_SetConfig+0x332>
 80077ac:	e00b      	b.n	80077c6 <UART_SetConfig+0x33e>
 80077ae:	2300      	movs	r3, #0
 80077b0:	77fb      	strb	r3, [r7, #31]
 80077b2:	e00d      	b.n	80077d0 <UART_SetConfig+0x348>
 80077b4:	2302      	movs	r3, #2
 80077b6:	77fb      	strb	r3, [r7, #31]
 80077b8:	e00a      	b.n	80077d0 <UART_SetConfig+0x348>
 80077ba:	2304      	movs	r3, #4
 80077bc:	77fb      	strb	r3, [r7, #31]
 80077be:	e007      	b.n	80077d0 <UART_SetConfig+0x348>
 80077c0:	2308      	movs	r3, #8
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	e004      	b.n	80077d0 <UART_SetConfig+0x348>
 80077c6:	2310      	movs	r3, #16
 80077c8:	77fb      	strb	r3, [r7, #31]
 80077ca:	e001      	b.n	80077d0 <UART_SetConfig+0x348>
 80077cc:	2310      	movs	r3, #16
 80077ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d8:	d15b      	bne.n	8007892 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80077da:	7ffb      	ldrb	r3, [r7, #31]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d828      	bhi.n	8007832 <UART_SetConfig+0x3aa>
 80077e0:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <UART_SetConfig+0x360>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	08007815 	.word	0x08007815
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	08007833 	.word	0x08007833
 80077f8:	08007823 	.word	0x08007823
 80077fc:	08007833 	.word	0x08007833
 8007800:	08007833 	.word	0x08007833
 8007804:	08007833 	.word	0x08007833
 8007808:	0800782b 	.word	0x0800782b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800780c:	f7fc fd00 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 8007810:	61b8      	str	r0, [r7, #24]
        break;
 8007812:	e013      	b.n	800783c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007814:	f7fc fd10 	bl	8004238 <HAL_RCC_GetPCLK2Freq>
 8007818:	61b8      	str	r0, [r7, #24]
        break;
 800781a:	e00f      	b.n	800783c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800781c:	4b4b      	ldr	r3, [pc, #300]	; (800794c <UART_SetConfig+0x4c4>)
 800781e:	61bb      	str	r3, [r7, #24]
        break;
 8007820:	e00c      	b.n	800783c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007822:	f7fc fbe3 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8007826:	61b8      	str	r0, [r7, #24]
        break;
 8007828:	e008      	b.n	800783c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800782a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800782e:	61bb      	str	r3, [r7, #24]
        break;
 8007830:	e004      	b.n	800783c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	77bb      	strb	r3, [r7, #30]
        break;
 800783a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d074      	beq.n	800792c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	005a      	lsls	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	085b      	lsrs	r3, r3, #1
 800784c:	441a      	add	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	fbb2 f3f3 	udiv	r3, r2, r3
 8007856:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2b0f      	cmp	r3, #15
 800785c:	d916      	bls.n	800788c <UART_SetConfig+0x404>
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007864:	d212      	bcs.n	800788c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f023 030f 	bic.w	r3, r3, #15
 800786e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	085b      	lsrs	r3, r3, #1
 8007874:	b29b      	uxth	r3, r3
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	b29a      	uxth	r2, r3
 800787c:	89fb      	ldrh	r3, [r7, #14]
 800787e:	4313      	orrs	r3, r2
 8007880:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	89fa      	ldrh	r2, [r7, #14]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	e04f      	b.n	800792c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	77bb      	strb	r3, [r7, #30]
 8007890:	e04c      	b.n	800792c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007892:	7ffb      	ldrb	r3, [r7, #31]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d828      	bhi.n	80078ea <UART_SetConfig+0x462>
 8007898:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <UART_SetConfig+0x418>)
 800789a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789e:	bf00      	nop
 80078a0:	080078c5 	.word	0x080078c5
 80078a4:	080078cd 	.word	0x080078cd
 80078a8:	080078d5 	.word	0x080078d5
 80078ac:	080078eb 	.word	0x080078eb
 80078b0:	080078db 	.word	0x080078db
 80078b4:	080078eb 	.word	0x080078eb
 80078b8:	080078eb 	.word	0x080078eb
 80078bc:	080078eb 	.word	0x080078eb
 80078c0:	080078e3 	.word	0x080078e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c4:	f7fc fca4 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 80078c8:	61b8      	str	r0, [r7, #24]
        break;
 80078ca:	e013      	b.n	80078f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078cc:	f7fc fcb4 	bl	8004238 <HAL_RCC_GetPCLK2Freq>
 80078d0:	61b8      	str	r0, [r7, #24]
        break;
 80078d2:	e00f      	b.n	80078f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078d4:	4b1d      	ldr	r3, [pc, #116]	; (800794c <UART_SetConfig+0x4c4>)
 80078d6:	61bb      	str	r3, [r7, #24]
        break;
 80078d8:	e00c      	b.n	80078f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078da:	f7fc fb87 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 80078de:	61b8      	str	r0, [r7, #24]
        break;
 80078e0:	e008      	b.n	80078f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e6:	61bb      	str	r3, [r7, #24]
        break;
 80078e8:	e004      	b.n	80078f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	77bb      	strb	r3, [r7, #30]
        break;
 80078f2:	bf00      	nop
    }

    if (pclk != 0U)
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d018      	beq.n	800792c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	085a      	lsrs	r2, r3, #1
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	441a      	add	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	fbb2 f3f3 	udiv	r3, r2, r3
 800790c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b0f      	cmp	r3, #15
 8007912:	d909      	bls.n	8007928 <UART_SetConfig+0x4a0>
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791a:	d205      	bcs.n	8007928 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60da      	str	r2, [r3, #12]
 8007926:	e001      	b.n	800792c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007938:	7fbb      	ldrb	r3, [r7, #30]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40007c00 	.word	0x40007c00
 8007948:	40023800 	.word	0x40023800
 800794c:	00f42400 	.word	0x00f42400

08007950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00a      	beq.n	80079be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00a      	beq.n	8007a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01a      	beq.n	8007a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a4e:	d10a      	bne.n	8007a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	605a      	str	r2, [r3, #4]
  }
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af02      	add	r7, sp, #8
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007aa4:	f7fb fb18 	bl	80030d8 <HAL_GetTick>
 8007aa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d10e      	bne.n	8007ad6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f81b 	bl	8007b02 <UART_WaitOnFlagUntilTimeout>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e011      	b.n	8007afa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b09c      	sub	sp, #112	; 0x70
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b12:	e0a7      	b.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1a:	f000 80a3 	beq.w	8007c64 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1e:	f7fb fadb 	bl	80030d8 <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d302      	bcc.n	8007b34 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d13f      	bne.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b48:	667b      	str	r3, [r7, #100]	; 0x64
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e6      	bne.n	8007b34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b86:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e068      	b.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d050      	beq.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd0:	d148      	bne.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e6      	bne.n	8007bdc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c2e:	623a      	str	r2, [r7, #32]
 8007c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	69f9      	ldr	r1, [r7, #28]
 8007c34:	6a3a      	ldr	r2, [r7, #32]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e5      	bne.n	8007c0e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e010      	b.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69da      	ldr	r2, [r3, #28]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	bf0c      	ite	eq
 8007c74:	2301      	moveq	r3, #1
 8007c76:	2300      	movne	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	f43f af48 	beq.w	8007b14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3770      	adds	r7, #112	; 0x70
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b097      	sub	sp, #92	; 0x5c
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	88fa      	ldrh	r2, [r7, #6]
 8007ca8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	88fa      	ldrh	r2, [r7, #6]
 8007cb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc2:	d10e      	bne.n	8007ce2 <UART_Start_Receive_IT+0x52>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d105      	bne.n	8007cd8 <UART_Start_Receive_IT+0x48>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007cd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cd6:	e02d      	b.n	8007d34 <UART_Start_Receive_IT+0xa4>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	22ff      	movs	r2, #255	; 0xff
 8007cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ce0:	e028      	b.n	8007d34 <UART_Start_Receive_IT+0xa4>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10d      	bne.n	8007d06 <UART_Start_Receive_IT+0x76>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <UART_Start_Receive_IT+0x6c>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	22ff      	movs	r2, #255	; 0xff
 8007cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cfa:	e01b      	b.n	8007d34 <UART_Start_Receive_IT+0xa4>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	227f      	movs	r2, #127	; 0x7f
 8007d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d04:	e016      	b.n	8007d34 <UART_Start_Receive_IT+0xa4>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d0e:	d10d      	bne.n	8007d2c <UART_Start_Receive_IT+0x9c>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d104      	bne.n	8007d22 <UART_Start_Receive_IT+0x92>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	227f      	movs	r2, #127	; 0x7f
 8007d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d20:	e008      	b.n	8007d34 <UART_Start_Receive_IT+0xa4>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	223f      	movs	r2, #63	; 0x3f
 8007d26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d2a:	e003      	b.n	8007d34 <UART_Start_Receive_IT+0xa4>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2222      	movs	r2, #34	; 0x22
 8007d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3308      	adds	r3, #8
 8007d62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d64:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e5      	bne.n	8007d44 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d80:	d107      	bne.n	8007d92 <UART_Start_Receive_IT+0x102>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d103      	bne.n	8007d92 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <UART_Start_Receive_IT+0x184>)
 8007d8e:	669a      	str	r2, [r3, #104]	; 0x68
 8007d90:	e002      	b.n	8007d98 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4a20      	ldr	r2, [pc, #128]	; (8007e18 <UART_Start_Receive_IT+0x188>)
 8007d96:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d019      	beq.n	8007dd4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e6      	bne.n	8007da0 <UART_Start_Receive_IT+0x110>
 8007dd2:	e018      	b.n	8007e06 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	613b      	str	r3, [r7, #16]
   return(result);
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f043 0320 	orr.w	r3, r3, #32
 8007de8:	653b      	str	r3, [r7, #80]	; 0x50
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df2:	623b      	str	r3, [r7, #32]
 8007df4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	69f9      	ldr	r1, [r7, #28]
 8007df8:	6a3a      	ldr	r2, [r7, #32]
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e6      	bne.n	8007dd4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	375c      	adds	r7, #92	; 0x5c
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	080080cb 	.word	0x080080cb
 8007e18:	08007f65 	.word	0x08007f65

08007e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b095      	sub	sp, #84	; 0x54
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e42:	643b      	str	r3, [r7, #64]	; 0x40
 8007e44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e6      	bne.n	8007e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f023 0301 	bic.w	r3, r3, #1
 8007e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3308      	adds	r3, #8
 8007e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e5      	bne.n	8007e56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d118      	bne.n	8007ec4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f023 0310 	bic.w	r3, r3, #16
 8007ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6979      	ldr	r1, [r7, #20]
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ed8:	bf00      	nop
 8007eda:	3754      	adds	r7, #84	; 0x54
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7ff faaa 	bl	800745c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	613b      	str	r3, [r7, #16]
   return(result);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff fa76 	bl	8007448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5c:	bf00      	nop
 8007f5e:	3720      	adds	r7, #32
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b096      	sub	sp, #88	; 0x58
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f72:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f7c:	2b22      	cmp	r3, #34	; 0x22
 8007f7e:	f040 8098 	bne.w	80080b2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f90:	b2d9      	uxtb	r1, r3
 8007f92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9c:	400a      	ands	r2, r1
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d17b      	bne.n	80080c2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fde:	653b      	str	r3, [r7, #80]	; 0x50
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e6      	bne.n	8007fca <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	623b      	str	r3, [r7, #32]
   return(result);
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800801c:	633a      	str	r2, [r7, #48]	; 0x30
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008048:	2b01      	cmp	r3, #1
 800804a:	d12e      	bne.n	80080aa <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0310 	bic.w	r3, r3, #16
 8008066:	64bb      	str	r3, [r7, #72]	; 0x48
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008070:	61fb      	str	r3, [r7, #28]
 8008072:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	69b9      	ldr	r1, [r7, #24]
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	617b      	str	r3, [r7, #20]
   return(result);
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e6      	bne.n	8008052 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b10      	cmp	r3, #16
 8008090:	d103      	bne.n	800809a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2210      	movs	r2, #16
 8008098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff f9e4 	bl	8007470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080a8:	e00b      	b.n	80080c2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fa fb46 	bl	800273c <HAL_UART_RxCpltCallback>
}
 80080b0:	e007      	b.n	80080c2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	699a      	ldr	r2, [r3, #24]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f042 0208 	orr.w	r2, r2, #8
 80080c0:	619a      	str	r2, [r3, #24]
}
 80080c2:	bf00      	nop
 80080c4:	3758      	adds	r7, #88	; 0x58
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b096      	sub	sp, #88	; 0x58
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e2:	2b22      	cmp	r3, #34	; 0x22
 80080e4:	f040 8098 	bne.w	8008218 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80080f8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80080fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008100:	4013      	ands	r3, r2
 8008102:	b29a      	uxth	r2, r3
 8008104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008106:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810c:	1c9a      	adds	r2, r3, #2
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b29a      	uxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800812a:	b29b      	uxth	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d17b      	bne.n	8008228 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800814e:	643b      	str	r3, [r7, #64]	; 0x40
 8008150:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008154:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e6      	bne.n	8008130 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	61fb      	str	r3, [r7, #28]
   return(result);
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	f023 0301 	bic.w	r3, r3, #1
 8008178:	64bb      	str	r3, [r7, #72]	; 0x48
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3308      	adds	r3, #8
 8008180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e5      	bne.n	8008162 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d12e      	bne.n	8008210 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f023 0310 	bic.w	r3, r3, #16
 80081cc:	647b      	str	r3, [r7, #68]	; 0x44
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d6:	61bb      	str	r3, [r7, #24]
 80081d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	613b      	str	r3, [r7, #16]
   return(result);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e6      	bne.n	80081b8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d103      	bne.n	8008200 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2210      	movs	r2, #16
 80081fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff f931 	bl	8007470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800820e:	e00b      	b.n	8008228 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7fa fa93 	bl	800273c <HAL_UART_RxCpltCallback>
}
 8008216:	e007      	b.n	8008228 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0208 	orr.w	r2, r2, #8
 8008226:	619a      	str	r2, [r3, #24]
}
 8008228:	bf00      	nop
 800822a:	3758      	adds	r7, #88	; 0x58
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <__errno>:
 8008230:	4b01      	ldr	r3, [pc, #4]	; (8008238 <__errno+0x8>)
 8008232:	6818      	ldr	r0, [r3, #0]
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	20000070 	.word	0x20000070

0800823c <__libc_init_array>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	4d0d      	ldr	r5, [pc, #52]	; (8008274 <__libc_init_array+0x38>)
 8008240:	4c0d      	ldr	r4, [pc, #52]	; (8008278 <__libc_init_array+0x3c>)
 8008242:	1b64      	subs	r4, r4, r5
 8008244:	10a4      	asrs	r4, r4, #2
 8008246:	2600      	movs	r6, #0
 8008248:	42a6      	cmp	r6, r4
 800824a:	d109      	bne.n	8008260 <__libc_init_array+0x24>
 800824c:	4d0b      	ldr	r5, [pc, #44]	; (800827c <__libc_init_array+0x40>)
 800824e:	4c0c      	ldr	r4, [pc, #48]	; (8008280 <__libc_init_array+0x44>)
 8008250:	f002 ff8e 	bl	800b170 <_init>
 8008254:	1b64      	subs	r4, r4, r5
 8008256:	10a4      	asrs	r4, r4, #2
 8008258:	2600      	movs	r6, #0
 800825a:	42a6      	cmp	r6, r4
 800825c:	d105      	bne.n	800826a <__libc_init_array+0x2e>
 800825e:	bd70      	pop	{r4, r5, r6, pc}
 8008260:	f855 3b04 	ldr.w	r3, [r5], #4
 8008264:	4798      	blx	r3
 8008266:	3601      	adds	r6, #1
 8008268:	e7ee      	b.n	8008248 <__libc_init_array+0xc>
 800826a:	f855 3b04 	ldr.w	r3, [r5], #4
 800826e:	4798      	blx	r3
 8008270:	3601      	adds	r6, #1
 8008272:	e7f2      	b.n	800825a <__libc_init_array+0x1e>
 8008274:	0800b5cc 	.word	0x0800b5cc
 8008278:	0800b5cc 	.word	0x0800b5cc
 800827c:	0800b5cc 	.word	0x0800b5cc
 8008280:	0800b5d0 	.word	0x0800b5d0

08008284 <memset>:
 8008284:	4402      	add	r2, r0
 8008286:	4603      	mov	r3, r0
 8008288:	4293      	cmp	r3, r2
 800828a:	d100      	bne.n	800828e <memset+0xa>
 800828c:	4770      	bx	lr
 800828e:	f803 1b01 	strb.w	r1, [r3], #1
 8008292:	e7f9      	b.n	8008288 <memset+0x4>

08008294 <__cvt>:
 8008294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	ec55 4b10 	vmov	r4, r5, d0
 800829c:	2d00      	cmp	r5, #0
 800829e:	460e      	mov	r6, r1
 80082a0:	4619      	mov	r1, r3
 80082a2:	462b      	mov	r3, r5
 80082a4:	bfbb      	ittet	lt
 80082a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80082aa:	461d      	movlt	r5, r3
 80082ac:	2300      	movge	r3, #0
 80082ae:	232d      	movlt	r3, #45	; 0x2d
 80082b0:	700b      	strb	r3, [r1, #0]
 80082b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80082b8:	4691      	mov	r9, r2
 80082ba:	f023 0820 	bic.w	r8, r3, #32
 80082be:	bfbc      	itt	lt
 80082c0:	4622      	movlt	r2, r4
 80082c2:	4614      	movlt	r4, r2
 80082c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082c8:	d005      	beq.n	80082d6 <__cvt+0x42>
 80082ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082ce:	d100      	bne.n	80082d2 <__cvt+0x3e>
 80082d0:	3601      	adds	r6, #1
 80082d2:	2102      	movs	r1, #2
 80082d4:	e000      	b.n	80082d8 <__cvt+0x44>
 80082d6:	2103      	movs	r1, #3
 80082d8:	ab03      	add	r3, sp, #12
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	ab02      	add	r3, sp, #8
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	ec45 4b10 	vmov	d0, r4, r5
 80082e4:	4653      	mov	r3, sl
 80082e6:	4632      	mov	r2, r6
 80082e8:	f000 fd76 	bl	8008dd8 <_dtoa_r>
 80082ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082f0:	4607      	mov	r7, r0
 80082f2:	d102      	bne.n	80082fa <__cvt+0x66>
 80082f4:	f019 0f01 	tst.w	r9, #1
 80082f8:	d022      	beq.n	8008340 <__cvt+0xac>
 80082fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082fe:	eb07 0906 	add.w	r9, r7, r6
 8008302:	d110      	bne.n	8008326 <__cvt+0x92>
 8008304:	783b      	ldrb	r3, [r7, #0]
 8008306:	2b30      	cmp	r3, #48	; 0x30
 8008308:	d10a      	bne.n	8008320 <__cvt+0x8c>
 800830a:	2200      	movs	r2, #0
 800830c:	2300      	movs	r3, #0
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f8 fbf9 	bl	8000b08 <__aeabi_dcmpeq>
 8008316:	b918      	cbnz	r0, 8008320 <__cvt+0x8c>
 8008318:	f1c6 0601 	rsb	r6, r6, #1
 800831c:	f8ca 6000 	str.w	r6, [sl]
 8008320:	f8da 3000 	ldr.w	r3, [sl]
 8008324:	4499      	add	r9, r3
 8008326:	2200      	movs	r2, #0
 8008328:	2300      	movs	r3, #0
 800832a:	4620      	mov	r0, r4
 800832c:	4629      	mov	r1, r5
 800832e:	f7f8 fbeb 	bl	8000b08 <__aeabi_dcmpeq>
 8008332:	b108      	cbz	r0, 8008338 <__cvt+0xa4>
 8008334:	f8cd 900c 	str.w	r9, [sp, #12]
 8008338:	2230      	movs	r2, #48	; 0x30
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	454b      	cmp	r3, r9
 800833e:	d307      	bcc.n	8008350 <__cvt+0xbc>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008344:	1bdb      	subs	r3, r3, r7
 8008346:	4638      	mov	r0, r7
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	b004      	add	sp, #16
 800834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008350:	1c59      	adds	r1, r3, #1
 8008352:	9103      	str	r1, [sp, #12]
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	e7f0      	b.n	800833a <__cvt+0xa6>

08008358 <__exponent>:
 8008358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800835a:	4603      	mov	r3, r0
 800835c:	2900      	cmp	r1, #0
 800835e:	bfb8      	it	lt
 8008360:	4249      	neglt	r1, r1
 8008362:	f803 2b02 	strb.w	r2, [r3], #2
 8008366:	bfb4      	ite	lt
 8008368:	222d      	movlt	r2, #45	; 0x2d
 800836a:	222b      	movge	r2, #43	; 0x2b
 800836c:	2909      	cmp	r1, #9
 800836e:	7042      	strb	r2, [r0, #1]
 8008370:	dd2a      	ble.n	80083c8 <__exponent+0x70>
 8008372:	f10d 0407 	add.w	r4, sp, #7
 8008376:	46a4      	mov	ip, r4
 8008378:	270a      	movs	r7, #10
 800837a:	46a6      	mov	lr, r4
 800837c:	460a      	mov	r2, r1
 800837e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008382:	fb07 1516 	mls	r5, r7, r6, r1
 8008386:	3530      	adds	r5, #48	; 0x30
 8008388:	2a63      	cmp	r2, #99	; 0x63
 800838a:	f104 34ff 	add.w	r4, r4, #4294967295
 800838e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008392:	4631      	mov	r1, r6
 8008394:	dcf1      	bgt.n	800837a <__exponent+0x22>
 8008396:	3130      	adds	r1, #48	; 0x30
 8008398:	f1ae 0502 	sub.w	r5, lr, #2
 800839c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083a0:	1c44      	adds	r4, r0, #1
 80083a2:	4629      	mov	r1, r5
 80083a4:	4561      	cmp	r1, ip
 80083a6:	d30a      	bcc.n	80083be <__exponent+0x66>
 80083a8:	f10d 0209 	add.w	r2, sp, #9
 80083ac:	eba2 020e 	sub.w	r2, r2, lr
 80083b0:	4565      	cmp	r5, ip
 80083b2:	bf88      	it	hi
 80083b4:	2200      	movhi	r2, #0
 80083b6:	4413      	add	r3, r2
 80083b8:	1a18      	subs	r0, r3, r0
 80083ba:	b003      	add	sp, #12
 80083bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083c6:	e7ed      	b.n	80083a4 <__exponent+0x4c>
 80083c8:	2330      	movs	r3, #48	; 0x30
 80083ca:	3130      	adds	r1, #48	; 0x30
 80083cc:	7083      	strb	r3, [r0, #2]
 80083ce:	70c1      	strb	r1, [r0, #3]
 80083d0:	1d03      	adds	r3, r0, #4
 80083d2:	e7f1      	b.n	80083b8 <__exponent+0x60>

080083d4 <_printf_float>:
 80083d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d8:	ed2d 8b02 	vpush	{d8}
 80083dc:	b08d      	sub	sp, #52	; 0x34
 80083de:	460c      	mov	r4, r1
 80083e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083e4:	4616      	mov	r6, r2
 80083e6:	461f      	mov	r7, r3
 80083e8:	4605      	mov	r5, r0
 80083ea:	f001 fae3 	bl	80099b4 <_localeconv_r>
 80083ee:	f8d0 a000 	ldr.w	sl, [r0]
 80083f2:	4650      	mov	r0, sl
 80083f4:	f7f7 ff0c 	bl	8000210 <strlen>
 80083f8:	2300      	movs	r3, #0
 80083fa:	930a      	str	r3, [sp, #40]	; 0x28
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	9305      	str	r3, [sp, #20]
 8008400:	f8d8 3000 	ldr.w	r3, [r8]
 8008404:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008408:	3307      	adds	r3, #7
 800840a:	f023 0307 	bic.w	r3, r3, #7
 800840e:	f103 0208 	add.w	r2, r3, #8
 8008412:	f8c8 2000 	str.w	r2, [r8]
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800841e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008422:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008426:	9307      	str	r3, [sp, #28]
 8008428:	f8cd 8018 	str.w	r8, [sp, #24]
 800842c:	ee08 0a10 	vmov	s16, r0
 8008430:	4b9f      	ldr	r3, [pc, #636]	; (80086b0 <_printf_float+0x2dc>)
 8008432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008436:	f04f 32ff 	mov.w	r2, #4294967295
 800843a:	f7f8 fb97 	bl	8000b6c <__aeabi_dcmpun>
 800843e:	bb88      	cbnz	r0, 80084a4 <_printf_float+0xd0>
 8008440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008444:	4b9a      	ldr	r3, [pc, #616]	; (80086b0 <_printf_float+0x2dc>)
 8008446:	f04f 32ff 	mov.w	r2, #4294967295
 800844a:	f7f8 fb71 	bl	8000b30 <__aeabi_dcmple>
 800844e:	bb48      	cbnz	r0, 80084a4 <_printf_float+0xd0>
 8008450:	2200      	movs	r2, #0
 8008452:	2300      	movs	r3, #0
 8008454:	4640      	mov	r0, r8
 8008456:	4649      	mov	r1, r9
 8008458:	f7f8 fb60 	bl	8000b1c <__aeabi_dcmplt>
 800845c:	b110      	cbz	r0, 8008464 <_printf_float+0x90>
 800845e:	232d      	movs	r3, #45	; 0x2d
 8008460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008464:	4b93      	ldr	r3, [pc, #588]	; (80086b4 <_printf_float+0x2e0>)
 8008466:	4894      	ldr	r0, [pc, #592]	; (80086b8 <_printf_float+0x2e4>)
 8008468:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800846c:	bf94      	ite	ls
 800846e:	4698      	movls	r8, r3
 8008470:	4680      	movhi	r8, r0
 8008472:	2303      	movs	r3, #3
 8008474:	6123      	str	r3, [r4, #16]
 8008476:	9b05      	ldr	r3, [sp, #20]
 8008478:	f023 0204 	bic.w	r2, r3, #4
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	f04f 0900 	mov.w	r9, #0
 8008482:	9700      	str	r7, [sp, #0]
 8008484:	4633      	mov	r3, r6
 8008486:	aa0b      	add	r2, sp, #44	; 0x2c
 8008488:	4621      	mov	r1, r4
 800848a:	4628      	mov	r0, r5
 800848c:	f000 f9d8 	bl	8008840 <_printf_common>
 8008490:	3001      	adds	r0, #1
 8008492:	f040 8090 	bne.w	80085b6 <_printf_float+0x1e2>
 8008496:	f04f 30ff 	mov.w	r0, #4294967295
 800849a:	b00d      	add	sp, #52	; 0x34
 800849c:	ecbd 8b02 	vpop	{d8}
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	f7f8 fb5e 	bl	8000b6c <__aeabi_dcmpun>
 80084b0:	b140      	cbz	r0, 80084c4 <_printf_float+0xf0>
 80084b2:	464b      	mov	r3, r9
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bfbc      	itt	lt
 80084b8:	232d      	movlt	r3, #45	; 0x2d
 80084ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084be:	487f      	ldr	r0, [pc, #508]	; (80086bc <_printf_float+0x2e8>)
 80084c0:	4b7f      	ldr	r3, [pc, #508]	; (80086c0 <_printf_float+0x2ec>)
 80084c2:	e7d1      	b.n	8008468 <_printf_float+0x94>
 80084c4:	6863      	ldr	r3, [r4, #4]
 80084c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084ca:	9206      	str	r2, [sp, #24]
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	d13f      	bne.n	8008550 <_printf_float+0x17c>
 80084d0:	2306      	movs	r3, #6
 80084d2:	6063      	str	r3, [r4, #4]
 80084d4:	9b05      	ldr	r3, [sp, #20]
 80084d6:	6861      	ldr	r1, [r4, #4]
 80084d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084dc:	2300      	movs	r3, #0
 80084de:	9303      	str	r3, [sp, #12]
 80084e0:	ab0a      	add	r3, sp, #40	; 0x28
 80084e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084e6:	ab09      	add	r3, sp, #36	; 0x24
 80084e8:	ec49 8b10 	vmov	d0, r8, r9
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	6022      	str	r2, [r4, #0]
 80084f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084f4:	4628      	mov	r0, r5
 80084f6:	f7ff fecd 	bl	8008294 <__cvt>
 80084fa:	9b06      	ldr	r3, [sp, #24]
 80084fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084fe:	2b47      	cmp	r3, #71	; 0x47
 8008500:	4680      	mov	r8, r0
 8008502:	d108      	bne.n	8008516 <_printf_float+0x142>
 8008504:	1cc8      	adds	r0, r1, #3
 8008506:	db02      	blt.n	800850e <_printf_float+0x13a>
 8008508:	6863      	ldr	r3, [r4, #4]
 800850a:	4299      	cmp	r1, r3
 800850c:	dd41      	ble.n	8008592 <_printf_float+0x1be>
 800850e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008512:	fa5f fb8b 	uxtb.w	fp, fp
 8008516:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800851a:	d820      	bhi.n	800855e <_printf_float+0x18a>
 800851c:	3901      	subs	r1, #1
 800851e:	465a      	mov	r2, fp
 8008520:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008524:	9109      	str	r1, [sp, #36]	; 0x24
 8008526:	f7ff ff17 	bl	8008358 <__exponent>
 800852a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800852c:	1813      	adds	r3, r2, r0
 800852e:	2a01      	cmp	r2, #1
 8008530:	4681      	mov	r9, r0
 8008532:	6123      	str	r3, [r4, #16]
 8008534:	dc02      	bgt.n	800853c <_printf_float+0x168>
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	07d2      	lsls	r2, r2, #31
 800853a:	d501      	bpl.n	8008540 <_printf_float+0x16c>
 800853c:	3301      	adds	r3, #1
 800853e:	6123      	str	r3, [r4, #16]
 8008540:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008544:	2b00      	cmp	r3, #0
 8008546:	d09c      	beq.n	8008482 <_printf_float+0xae>
 8008548:	232d      	movs	r3, #45	; 0x2d
 800854a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800854e:	e798      	b.n	8008482 <_printf_float+0xae>
 8008550:	9a06      	ldr	r2, [sp, #24]
 8008552:	2a47      	cmp	r2, #71	; 0x47
 8008554:	d1be      	bne.n	80084d4 <_printf_float+0x100>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1bc      	bne.n	80084d4 <_printf_float+0x100>
 800855a:	2301      	movs	r3, #1
 800855c:	e7b9      	b.n	80084d2 <_printf_float+0xfe>
 800855e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008562:	d118      	bne.n	8008596 <_printf_float+0x1c2>
 8008564:	2900      	cmp	r1, #0
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	dd0b      	ble.n	8008582 <_printf_float+0x1ae>
 800856a:	6121      	str	r1, [r4, #16]
 800856c:	b913      	cbnz	r3, 8008574 <_printf_float+0x1a0>
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	07d0      	lsls	r0, r2, #31
 8008572:	d502      	bpl.n	800857a <_printf_float+0x1a6>
 8008574:	3301      	adds	r3, #1
 8008576:	440b      	add	r3, r1
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	65a1      	str	r1, [r4, #88]	; 0x58
 800857c:	f04f 0900 	mov.w	r9, #0
 8008580:	e7de      	b.n	8008540 <_printf_float+0x16c>
 8008582:	b913      	cbnz	r3, 800858a <_printf_float+0x1b6>
 8008584:	6822      	ldr	r2, [r4, #0]
 8008586:	07d2      	lsls	r2, r2, #31
 8008588:	d501      	bpl.n	800858e <_printf_float+0x1ba>
 800858a:	3302      	adds	r3, #2
 800858c:	e7f4      	b.n	8008578 <_printf_float+0x1a4>
 800858e:	2301      	movs	r3, #1
 8008590:	e7f2      	b.n	8008578 <_printf_float+0x1a4>
 8008592:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008598:	4299      	cmp	r1, r3
 800859a:	db05      	blt.n	80085a8 <_printf_float+0x1d4>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	6121      	str	r1, [r4, #16]
 80085a0:	07d8      	lsls	r0, r3, #31
 80085a2:	d5ea      	bpl.n	800857a <_printf_float+0x1a6>
 80085a4:	1c4b      	adds	r3, r1, #1
 80085a6:	e7e7      	b.n	8008578 <_printf_float+0x1a4>
 80085a8:	2900      	cmp	r1, #0
 80085aa:	bfd4      	ite	le
 80085ac:	f1c1 0202 	rsble	r2, r1, #2
 80085b0:	2201      	movgt	r2, #1
 80085b2:	4413      	add	r3, r2
 80085b4:	e7e0      	b.n	8008578 <_printf_float+0x1a4>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	055a      	lsls	r2, r3, #21
 80085ba:	d407      	bmi.n	80085cc <_printf_float+0x1f8>
 80085bc:	6923      	ldr	r3, [r4, #16]
 80085be:	4642      	mov	r2, r8
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	d12c      	bne.n	8008624 <_printf_float+0x250>
 80085ca:	e764      	b.n	8008496 <_printf_float+0xc2>
 80085cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085d0:	f240 80e0 	bls.w	8008794 <_printf_float+0x3c0>
 80085d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085d8:	2200      	movs	r2, #0
 80085da:	2300      	movs	r3, #0
 80085dc:	f7f8 fa94 	bl	8000b08 <__aeabi_dcmpeq>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d034      	beq.n	800864e <_printf_float+0x27a>
 80085e4:	4a37      	ldr	r2, [pc, #220]	; (80086c4 <_printf_float+0x2f0>)
 80085e6:	2301      	movs	r3, #1
 80085e8:	4631      	mov	r1, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	47b8      	blx	r7
 80085ee:	3001      	adds	r0, #1
 80085f0:	f43f af51 	beq.w	8008496 <_printf_float+0xc2>
 80085f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085f8:	429a      	cmp	r2, r3
 80085fa:	db02      	blt.n	8008602 <_printf_float+0x22e>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	07d8      	lsls	r0, r3, #31
 8008600:	d510      	bpl.n	8008624 <_printf_float+0x250>
 8008602:	ee18 3a10 	vmov	r3, s16
 8008606:	4652      	mov	r2, sl
 8008608:	4631      	mov	r1, r6
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	f43f af41 	beq.w	8008496 <_printf_float+0xc2>
 8008614:	f04f 0800 	mov.w	r8, #0
 8008618:	f104 091a 	add.w	r9, r4, #26
 800861c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861e:	3b01      	subs	r3, #1
 8008620:	4543      	cmp	r3, r8
 8008622:	dc09      	bgt.n	8008638 <_printf_float+0x264>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	079b      	lsls	r3, r3, #30
 8008628:	f100 8105 	bmi.w	8008836 <_printf_float+0x462>
 800862c:	68e0      	ldr	r0, [r4, #12]
 800862e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008630:	4298      	cmp	r0, r3
 8008632:	bfb8      	it	lt
 8008634:	4618      	movlt	r0, r3
 8008636:	e730      	b.n	800849a <_printf_float+0xc6>
 8008638:	2301      	movs	r3, #1
 800863a:	464a      	mov	r2, r9
 800863c:	4631      	mov	r1, r6
 800863e:	4628      	mov	r0, r5
 8008640:	47b8      	blx	r7
 8008642:	3001      	adds	r0, #1
 8008644:	f43f af27 	beq.w	8008496 <_printf_float+0xc2>
 8008648:	f108 0801 	add.w	r8, r8, #1
 800864c:	e7e6      	b.n	800861c <_printf_float+0x248>
 800864e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	dc39      	bgt.n	80086c8 <_printf_float+0x2f4>
 8008654:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <_printf_float+0x2f0>)
 8008656:	2301      	movs	r3, #1
 8008658:	4631      	mov	r1, r6
 800865a:	4628      	mov	r0, r5
 800865c:	47b8      	blx	r7
 800865e:	3001      	adds	r0, #1
 8008660:	f43f af19 	beq.w	8008496 <_printf_float+0xc2>
 8008664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008668:	4313      	orrs	r3, r2
 800866a:	d102      	bne.n	8008672 <_printf_float+0x29e>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	07d9      	lsls	r1, r3, #31
 8008670:	d5d8      	bpl.n	8008624 <_printf_float+0x250>
 8008672:	ee18 3a10 	vmov	r3, s16
 8008676:	4652      	mov	r2, sl
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	47b8      	blx	r7
 800867e:	3001      	adds	r0, #1
 8008680:	f43f af09 	beq.w	8008496 <_printf_float+0xc2>
 8008684:	f04f 0900 	mov.w	r9, #0
 8008688:	f104 0a1a 	add.w	sl, r4, #26
 800868c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800868e:	425b      	negs	r3, r3
 8008690:	454b      	cmp	r3, r9
 8008692:	dc01      	bgt.n	8008698 <_printf_float+0x2c4>
 8008694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008696:	e792      	b.n	80085be <_printf_float+0x1ea>
 8008698:	2301      	movs	r3, #1
 800869a:	4652      	mov	r2, sl
 800869c:	4631      	mov	r1, r6
 800869e:	4628      	mov	r0, r5
 80086a0:	47b8      	blx	r7
 80086a2:	3001      	adds	r0, #1
 80086a4:	f43f aef7 	beq.w	8008496 <_printf_float+0xc2>
 80086a8:	f109 0901 	add.w	r9, r9, #1
 80086ac:	e7ee      	b.n	800868c <_printf_float+0x2b8>
 80086ae:	bf00      	nop
 80086b0:	7fefffff 	.word	0x7fefffff
 80086b4:	0800b1ec 	.word	0x0800b1ec
 80086b8:	0800b1f0 	.word	0x0800b1f0
 80086bc:	0800b1f8 	.word	0x0800b1f8
 80086c0:	0800b1f4 	.word	0x0800b1f4
 80086c4:	0800b1fc 	.word	0x0800b1fc
 80086c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086cc:	429a      	cmp	r2, r3
 80086ce:	bfa8      	it	ge
 80086d0:	461a      	movge	r2, r3
 80086d2:	2a00      	cmp	r2, #0
 80086d4:	4691      	mov	r9, r2
 80086d6:	dc37      	bgt.n	8008748 <_printf_float+0x374>
 80086d8:	f04f 0b00 	mov.w	fp, #0
 80086dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086e0:	f104 021a 	add.w	r2, r4, #26
 80086e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086e6:	9305      	str	r3, [sp, #20]
 80086e8:	eba3 0309 	sub.w	r3, r3, r9
 80086ec:	455b      	cmp	r3, fp
 80086ee:	dc33      	bgt.n	8008758 <_printf_float+0x384>
 80086f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086f4:	429a      	cmp	r2, r3
 80086f6:	db3b      	blt.n	8008770 <_printf_float+0x39c>
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	07da      	lsls	r2, r3, #31
 80086fc:	d438      	bmi.n	8008770 <_printf_float+0x39c>
 80086fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008700:	9a05      	ldr	r2, [sp, #20]
 8008702:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008704:	1a9a      	subs	r2, r3, r2
 8008706:	eba3 0901 	sub.w	r9, r3, r1
 800870a:	4591      	cmp	r9, r2
 800870c:	bfa8      	it	ge
 800870e:	4691      	movge	r9, r2
 8008710:	f1b9 0f00 	cmp.w	r9, #0
 8008714:	dc35      	bgt.n	8008782 <_printf_float+0x3ae>
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800871e:	f104 0a1a 	add.w	sl, r4, #26
 8008722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008726:	1a9b      	subs	r3, r3, r2
 8008728:	eba3 0309 	sub.w	r3, r3, r9
 800872c:	4543      	cmp	r3, r8
 800872e:	f77f af79 	ble.w	8008624 <_printf_float+0x250>
 8008732:	2301      	movs	r3, #1
 8008734:	4652      	mov	r2, sl
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	f43f aeaa 	beq.w	8008496 <_printf_float+0xc2>
 8008742:	f108 0801 	add.w	r8, r8, #1
 8008746:	e7ec      	b.n	8008722 <_printf_float+0x34e>
 8008748:	4613      	mov	r3, r2
 800874a:	4631      	mov	r1, r6
 800874c:	4642      	mov	r2, r8
 800874e:	4628      	mov	r0, r5
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	d1c0      	bne.n	80086d8 <_printf_float+0x304>
 8008756:	e69e      	b.n	8008496 <_printf_float+0xc2>
 8008758:	2301      	movs	r3, #1
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	9205      	str	r2, [sp, #20]
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	f43f ae97 	beq.w	8008496 <_printf_float+0xc2>
 8008768:	9a05      	ldr	r2, [sp, #20]
 800876a:	f10b 0b01 	add.w	fp, fp, #1
 800876e:	e7b9      	b.n	80086e4 <_printf_float+0x310>
 8008770:	ee18 3a10 	vmov	r3, s16
 8008774:	4652      	mov	r2, sl
 8008776:	4631      	mov	r1, r6
 8008778:	4628      	mov	r0, r5
 800877a:	47b8      	blx	r7
 800877c:	3001      	adds	r0, #1
 800877e:	d1be      	bne.n	80086fe <_printf_float+0x32a>
 8008780:	e689      	b.n	8008496 <_printf_float+0xc2>
 8008782:	9a05      	ldr	r2, [sp, #20]
 8008784:	464b      	mov	r3, r9
 8008786:	4442      	add	r2, r8
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	47b8      	blx	r7
 800878e:	3001      	adds	r0, #1
 8008790:	d1c1      	bne.n	8008716 <_printf_float+0x342>
 8008792:	e680      	b.n	8008496 <_printf_float+0xc2>
 8008794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008796:	2a01      	cmp	r2, #1
 8008798:	dc01      	bgt.n	800879e <_printf_float+0x3ca>
 800879a:	07db      	lsls	r3, r3, #31
 800879c:	d538      	bpl.n	8008810 <_printf_float+0x43c>
 800879e:	2301      	movs	r3, #1
 80087a0:	4642      	mov	r2, r8
 80087a2:	4631      	mov	r1, r6
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b8      	blx	r7
 80087a8:	3001      	adds	r0, #1
 80087aa:	f43f ae74 	beq.w	8008496 <_printf_float+0xc2>
 80087ae:	ee18 3a10 	vmov	r3, s16
 80087b2:	4652      	mov	r2, sl
 80087b4:	4631      	mov	r1, r6
 80087b6:	4628      	mov	r0, r5
 80087b8:	47b8      	blx	r7
 80087ba:	3001      	adds	r0, #1
 80087bc:	f43f ae6b 	beq.w	8008496 <_printf_float+0xc2>
 80087c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	f7f8 f99e 	bl	8000b08 <__aeabi_dcmpeq>
 80087cc:	b9d8      	cbnz	r0, 8008806 <_printf_float+0x432>
 80087ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d0:	f108 0201 	add.w	r2, r8, #1
 80087d4:	3b01      	subs	r3, #1
 80087d6:	4631      	mov	r1, r6
 80087d8:	4628      	mov	r0, r5
 80087da:	47b8      	blx	r7
 80087dc:	3001      	adds	r0, #1
 80087de:	d10e      	bne.n	80087fe <_printf_float+0x42a>
 80087e0:	e659      	b.n	8008496 <_printf_float+0xc2>
 80087e2:	2301      	movs	r3, #1
 80087e4:	4652      	mov	r2, sl
 80087e6:	4631      	mov	r1, r6
 80087e8:	4628      	mov	r0, r5
 80087ea:	47b8      	blx	r7
 80087ec:	3001      	adds	r0, #1
 80087ee:	f43f ae52 	beq.w	8008496 <_printf_float+0xc2>
 80087f2:	f108 0801 	add.w	r8, r8, #1
 80087f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f8:	3b01      	subs	r3, #1
 80087fa:	4543      	cmp	r3, r8
 80087fc:	dcf1      	bgt.n	80087e2 <_printf_float+0x40e>
 80087fe:	464b      	mov	r3, r9
 8008800:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008804:	e6dc      	b.n	80085c0 <_printf_float+0x1ec>
 8008806:	f04f 0800 	mov.w	r8, #0
 800880a:	f104 0a1a 	add.w	sl, r4, #26
 800880e:	e7f2      	b.n	80087f6 <_printf_float+0x422>
 8008810:	2301      	movs	r3, #1
 8008812:	4642      	mov	r2, r8
 8008814:	e7df      	b.n	80087d6 <_printf_float+0x402>
 8008816:	2301      	movs	r3, #1
 8008818:	464a      	mov	r2, r9
 800881a:	4631      	mov	r1, r6
 800881c:	4628      	mov	r0, r5
 800881e:	47b8      	blx	r7
 8008820:	3001      	adds	r0, #1
 8008822:	f43f ae38 	beq.w	8008496 <_printf_float+0xc2>
 8008826:	f108 0801 	add.w	r8, r8, #1
 800882a:	68e3      	ldr	r3, [r4, #12]
 800882c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800882e:	1a5b      	subs	r3, r3, r1
 8008830:	4543      	cmp	r3, r8
 8008832:	dcf0      	bgt.n	8008816 <_printf_float+0x442>
 8008834:	e6fa      	b.n	800862c <_printf_float+0x258>
 8008836:	f04f 0800 	mov.w	r8, #0
 800883a:	f104 0919 	add.w	r9, r4, #25
 800883e:	e7f4      	b.n	800882a <_printf_float+0x456>

08008840 <_printf_common>:
 8008840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	4616      	mov	r6, r2
 8008846:	4699      	mov	r9, r3
 8008848:	688a      	ldr	r2, [r1, #8]
 800884a:	690b      	ldr	r3, [r1, #16]
 800884c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008850:	4293      	cmp	r3, r2
 8008852:	bfb8      	it	lt
 8008854:	4613      	movlt	r3, r2
 8008856:	6033      	str	r3, [r6, #0]
 8008858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800885c:	4607      	mov	r7, r0
 800885e:	460c      	mov	r4, r1
 8008860:	b10a      	cbz	r2, 8008866 <_printf_common+0x26>
 8008862:	3301      	adds	r3, #1
 8008864:	6033      	str	r3, [r6, #0]
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	0699      	lsls	r1, r3, #26
 800886a:	bf42      	ittt	mi
 800886c:	6833      	ldrmi	r3, [r6, #0]
 800886e:	3302      	addmi	r3, #2
 8008870:	6033      	strmi	r3, [r6, #0]
 8008872:	6825      	ldr	r5, [r4, #0]
 8008874:	f015 0506 	ands.w	r5, r5, #6
 8008878:	d106      	bne.n	8008888 <_printf_common+0x48>
 800887a:	f104 0a19 	add.w	sl, r4, #25
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	6832      	ldr	r2, [r6, #0]
 8008882:	1a9b      	subs	r3, r3, r2
 8008884:	42ab      	cmp	r3, r5
 8008886:	dc26      	bgt.n	80088d6 <_printf_common+0x96>
 8008888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800888c:	1e13      	subs	r3, r2, #0
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	bf18      	it	ne
 8008892:	2301      	movne	r3, #1
 8008894:	0692      	lsls	r2, r2, #26
 8008896:	d42b      	bmi.n	80088f0 <_printf_common+0xb0>
 8008898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800889c:	4649      	mov	r1, r9
 800889e:	4638      	mov	r0, r7
 80088a0:	47c0      	blx	r8
 80088a2:	3001      	adds	r0, #1
 80088a4:	d01e      	beq.n	80088e4 <_printf_common+0xa4>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	68e5      	ldr	r5, [r4, #12]
 80088aa:	6832      	ldr	r2, [r6, #0]
 80088ac:	f003 0306 	and.w	r3, r3, #6
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	bf08      	it	eq
 80088b4:	1aad      	subeq	r5, r5, r2
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	6922      	ldr	r2, [r4, #16]
 80088ba:	bf0c      	ite	eq
 80088bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088c0:	2500      	movne	r5, #0
 80088c2:	4293      	cmp	r3, r2
 80088c4:	bfc4      	itt	gt
 80088c6:	1a9b      	subgt	r3, r3, r2
 80088c8:	18ed      	addgt	r5, r5, r3
 80088ca:	2600      	movs	r6, #0
 80088cc:	341a      	adds	r4, #26
 80088ce:	42b5      	cmp	r5, r6
 80088d0:	d11a      	bne.n	8008908 <_printf_common+0xc8>
 80088d2:	2000      	movs	r0, #0
 80088d4:	e008      	b.n	80088e8 <_printf_common+0xa8>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4652      	mov	r2, sl
 80088da:	4649      	mov	r1, r9
 80088dc:	4638      	mov	r0, r7
 80088de:	47c0      	blx	r8
 80088e0:	3001      	adds	r0, #1
 80088e2:	d103      	bne.n	80088ec <_printf_common+0xac>
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ec:	3501      	adds	r5, #1
 80088ee:	e7c6      	b.n	800887e <_printf_common+0x3e>
 80088f0:	18e1      	adds	r1, r4, r3
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	2030      	movs	r0, #48	; 0x30
 80088f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088fa:	4422      	add	r2, r4
 80088fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008904:	3302      	adds	r3, #2
 8008906:	e7c7      	b.n	8008898 <_printf_common+0x58>
 8008908:	2301      	movs	r3, #1
 800890a:	4622      	mov	r2, r4
 800890c:	4649      	mov	r1, r9
 800890e:	4638      	mov	r0, r7
 8008910:	47c0      	blx	r8
 8008912:	3001      	adds	r0, #1
 8008914:	d0e6      	beq.n	80088e4 <_printf_common+0xa4>
 8008916:	3601      	adds	r6, #1
 8008918:	e7d9      	b.n	80088ce <_printf_common+0x8e>
	...

0800891c <_printf_i>:
 800891c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	7e0f      	ldrb	r7, [r1, #24]
 8008922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008924:	2f78      	cmp	r7, #120	; 0x78
 8008926:	4691      	mov	r9, r2
 8008928:	4680      	mov	r8, r0
 800892a:	460c      	mov	r4, r1
 800892c:	469a      	mov	sl, r3
 800892e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008932:	d807      	bhi.n	8008944 <_printf_i+0x28>
 8008934:	2f62      	cmp	r7, #98	; 0x62
 8008936:	d80a      	bhi.n	800894e <_printf_i+0x32>
 8008938:	2f00      	cmp	r7, #0
 800893a:	f000 80d8 	beq.w	8008aee <_printf_i+0x1d2>
 800893e:	2f58      	cmp	r7, #88	; 0x58
 8008940:	f000 80a3 	beq.w	8008a8a <_printf_i+0x16e>
 8008944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800894c:	e03a      	b.n	80089c4 <_printf_i+0xa8>
 800894e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008952:	2b15      	cmp	r3, #21
 8008954:	d8f6      	bhi.n	8008944 <_printf_i+0x28>
 8008956:	a101      	add	r1, pc, #4	; (adr r1, 800895c <_printf_i+0x40>)
 8008958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800895c:	080089b5 	.word	0x080089b5
 8008960:	080089c9 	.word	0x080089c9
 8008964:	08008945 	.word	0x08008945
 8008968:	08008945 	.word	0x08008945
 800896c:	08008945 	.word	0x08008945
 8008970:	08008945 	.word	0x08008945
 8008974:	080089c9 	.word	0x080089c9
 8008978:	08008945 	.word	0x08008945
 800897c:	08008945 	.word	0x08008945
 8008980:	08008945 	.word	0x08008945
 8008984:	08008945 	.word	0x08008945
 8008988:	08008ad5 	.word	0x08008ad5
 800898c:	080089f9 	.word	0x080089f9
 8008990:	08008ab7 	.word	0x08008ab7
 8008994:	08008945 	.word	0x08008945
 8008998:	08008945 	.word	0x08008945
 800899c:	08008af7 	.word	0x08008af7
 80089a0:	08008945 	.word	0x08008945
 80089a4:	080089f9 	.word	0x080089f9
 80089a8:	08008945 	.word	0x08008945
 80089ac:	08008945 	.word	0x08008945
 80089b0:	08008abf 	.word	0x08008abf
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	1d1a      	adds	r2, r3, #4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	602a      	str	r2, [r5, #0]
 80089bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089c4:	2301      	movs	r3, #1
 80089c6:	e0a3      	b.n	8008b10 <_printf_i+0x1f4>
 80089c8:	6820      	ldr	r0, [r4, #0]
 80089ca:	6829      	ldr	r1, [r5, #0]
 80089cc:	0606      	lsls	r6, r0, #24
 80089ce:	f101 0304 	add.w	r3, r1, #4
 80089d2:	d50a      	bpl.n	80089ea <_printf_i+0xce>
 80089d4:	680e      	ldr	r6, [r1, #0]
 80089d6:	602b      	str	r3, [r5, #0]
 80089d8:	2e00      	cmp	r6, #0
 80089da:	da03      	bge.n	80089e4 <_printf_i+0xc8>
 80089dc:	232d      	movs	r3, #45	; 0x2d
 80089de:	4276      	negs	r6, r6
 80089e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089e4:	485e      	ldr	r0, [pc, #376]	; (8008b60 <_printf_i+0x244>)
 80089e6:	230a      	movs	r3, #10
 80089e8:	e019      	b.n	8008a1e <_printf_i+0x102>
 80089ea:	680e      	ldr	r6, [r1, #0]
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089f2:	bf18      	it	ne
 80089f4:	b236      	sxthne	r6, r6
 80089f6:	e7ef      	b.n	80089d8 <_printf_i+0xbc>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	6820      	ldr	r0, [r4, #0]
 80089fc:	1d19      	adds	r1, r3, #4
 80089fe:	6029      	str	r1, [r5, #0]
 8008a00:	0601      	lsls	r1, r0, #24
 8008a02:	d501      	bpl.n	8008a08 <_printf_i+0xec>
 8008a04:	681e      	ldr	r6, [r3, #0]
 8008a06:	e002      	b.n	8008a0e <_printf_i+0xf2>
 8008a08:	0646      	lsls	r6, r0, #25
 8008a0a:	d5fb      	bpl.n	8008a04 <_printf_i+0xe8>
 8008a0c:	881e      	ldrh	r6, [r3, #0]
 8008a0e:	4854      	ldr	r0, [pc, #336]	; (8008b60 <_printf_i+0x244>)
 8008a10:	2f6f      	cmp	r7, #111	; 0x6f
 8008a12:	bf0c      	ite	eq
 8008a14:	2308      	moveq	r3, #8
 8008a16:	230a      	movne	r3, #10
 8008a18:	2100      	movs	r1, #0
 8008a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a1e:	6865      	ldr	r5, [r4, #4]
 8008a20:	60a5      	str	r5, [r4, #8]
 8008a22:	2d00      	cmp	r5, #0
 8008a24:	bfa2      	ittt	ge
 8008a26:	6821      	ldrge	r1, [r4, #0]
 8008a28:	f021 0104 	bicge.w	r1, r1, #4
 8008a2c:	6021      	strge	r1, [r4, #0]
 8008a2e:	b90e      	cbnz	r6, 8008a34 <_printf_i+0x118>
 8008a30:	2d00      	cmp	r5, #0
 8008a32:	d04d      	beq.n	8008ad0 <_printf_i+0x1b4>
 8008a34:	4615      	mov	r5, r2
 8008a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8008a3e:	5dc7      	ldrb	r7, [r0, r7]
 8008a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a44:	4637      	mov	r7, r6
 8008a46:	42bb      	cmp	r3, r7
 8008a48:	460e      	mov	r6, r1
 8008a4a:	d9f4      	bls.n	8008a36 <_printf_i+0x11a>
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d10b      	bne.n	8008a68 <_printf_i+0x14c>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	07de      	lsls	r6, r3, #31
 8008a54:	d508      	bpl.n	8008a68 <_printf_i+0x14c>
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	6861      	ldr	r1, [r4, #4]
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	bfde      	ittt	le
 8008a5e:	2330      	movle	r3, #48	; 0x30
 8008a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a68:	1b52      	subs	r2, r2, r5
 8008a6a:	6122      	str	r2, [r4, #16]
 8008a6c:	f8cd a000 	str.w	sl, [sp]
 8008a70:	464b      	mov	r3, r9
 8008a72:	aa03      	add	r2, sp, #12
 8008a74:	4621      	mov	r1, r4
 8008a76:	4640      	mov	r0, r8
 8008a78:	f7ff fee2 	bl	8008840 <_printf_common>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d14c      	bne.n	8008b1a <_printf_i+0x1fe>
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	b004      	add	sp, #16
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	4835      	ldr	r0, [pc, #212]	; (8008b60 <_printf_i+0x244>)
 8008a8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a90:	6829      	ldr	r1, [r5, #0]
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a98:	6029      	str	r1, [r5, #0]
 8008a9a:	061d      	lsls	r5, r3, #24
 8008a9c:	d514      	bpl.n	8008ac8 <_printf_i+0x1ac>
 8008a9e:	07df      	lsls	r7, r3, #31
 8008aa0:	bf44      	itt	mi
 8008aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8008aa6:	6023      	strmi	r3, [r4, #0]
 8008aa8:	b91e      	cbnz	r6, 8008ab2 <_printf_i+0x196>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	f023 0320 	bic.w	r3, r3, #32
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	2310      	movs	r3, #16
 8008ab4:	e7b0      	b.n	8008a18 <_printf_i+0xfc>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	f043 0320 	orr.w	r3, r3, #32
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	2378      	movs	r3, #120	; 0x78
 8008ac0:	4828      	ldr	r0, [pc, #160]	; (8008b64 <_printf_i+0x248>)
 8008ac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ac6:	e7e3      	b.n	8008a90 <_printf_i+0x174>
 8008ac8:	0659      	lsls	r1, r3, #25
 8008aca:	bf48      	it	mi
 8008acc:	b2b6      	uxthmi	r6, r6
 8008ace:	e7e6      	b.n	8008a9e <_printf_i+0x182>
 8008ad0:	4615      	mov	r5, r2
 8008ad2:	e7bb      	b.n	8008a4c <_printf_i+0x130>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	6826      	ldr	r6, [r4, #0]
 8008ad8:	6961      	ldr	r1, [r4, #20]
 8008ada:	1d18      	adds	r0, r3, #4
 8008adc:	6028      	str	r0, [r5, #0]
 8008ade:	0635      	lsls	r5, r6, #24
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	d501      	bpl.n	8008ae8 <_printf_i+0x1cc>
 8008ae4:	6019      	str	r1, [r3, #0]
 8008ae6:	e002      	b.n	8008aee <_printf_i+0x1d2>
 8008ae8:	0670      	lsls	r0, r6, #25
 8008aea:	d5fb      	bpl.n	8008ae4 <_printf_i+0x1c8>
 8008aec:	8019      	strh	r1, [r3, #0]
 8008aee:	2300      	movs	r3, #0
 8008af0:	6123      	str	r3, [r4, #16]
 8008af2:	4615      	mov	r5, r2
 8008af4:	e7ba      	b.n	8008a6c <_printf_i+0x150>
 8008af6:	682b      	ldr	r3, [r5, #0]
 8008af8:	1d1a      	adds	r2, r3, #4
 8008afa:	602a      	str	r2, [r5, #0]
 8008afc:	681d      	ldr	r5, [r3, #0]
 8008afe:	6862      	ldr	r2, [r4, #4]
 8008b00:	2100      	movs	r1, #0
 8008b02:	4628      	mov	r0, r5
 8008b04:	f7f7 fb8c 	bl	8000220 <memchr>
 8008b08:	b108      	cbz	r0, 8008b0e <_printf_i+0x1f2>
 8008b0a:	1b40      	subs	r0, r0, r5
 8008b0c:	6060      	str	r0, [r4, #4]
 8008b0e:	6863      	ldr	r3, [r4, #4]
 8008b10:	6123      	str	r3, [r4, #16]
 8008b12:	2300      	movs	r3, #0
 8008b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b18:	e7a8      	b.n	8008a6c <_printf_i+0x150>
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4640      	mov	r0, r8
 8008b22:	47d0      	blx	sl
 8008b24:	3001      	adds	r0, #1
 8008b26:	d0ab      	beq.n	8008a80 <_printf_i+0x164>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	079b      	lsls	r3, r3, #30
 8008b2c:	d413      	bmi.n	8008b56 <_printf_i+0x23a>
 8008b2e:	68e0      	ldr	r0, [r4, #12]
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	4298      	cmp	r0, r3
 8008b34:	bfb8      	it	lt
 8008b36:	4618      	movlt	r0, r3
 8008b38:	e7a4      	b.n	8008a84 <_printf_i+0x168>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	4649      	mov	r1, r9
 8008b40:	4640      	mov	r0, r8
 8008b42:	47d0      	blx	sl
 8008b44:	3001      	adds	r0, #1
 8008b46:	d09b      	beq.n	8008a80 <_printf_i+0x164>
 8008b48:	3501      	adds	r5, #1
 8008b4a:	68e3      	ldr	r3, [r4, #12]
 8008b4c:	9903      	ldr	r1, [sp, #12]
 8008b4e:	1a5b      	subs	r3, r3, r1
 8008b50:	42ab      	cmp	r3, r5
 8008b52:	dcf2      	bgt.n	8008b3a <_printf_i+0x21e>
 8008b54:	e7eb      	b.n	8008b2e <_printf_i+0x212>
 8008b56:	2500      	movs	r5, #0
 8008b58:	f104 0619 	add.w	r6, r4, #25
 8008b5c:	e7f5      	b.n	8008b4a <_printf_i+0x22e>
 8008b5e:	bf00      	nop
 8008b60:	0800b1fe 	.word	0x0800b1fe
 8008b64:	0800b20f 	.word	0x0800b20f

08008b68 <siprintf>:
 8008b68:	b40e      	push	{r1, r2, r3}
 8008b6a:	b500      	push	{lr}
 8008b6c:	b09c      	sub	sp, #112	; 0x70
 8008b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8008b70:	9002      	str	r0, [sp, #8]
 8008b72:	9006      	str	r0, [sp, #24]
 8008b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b78:	4809      	ldr	r0, [pc, #36]	; (8008ba0 <siprintf+0x38>)
 8008b7a:	9107      	str	r1, [sp, #28]
 8008b7c:	9104      	str	r1, [sp, #16]
 8008b7e:	4909      	ldr	r1, [pc, #36]	; (8008ba4 <siprintf+0x3c>)
 8008b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b84:	9105      	str	r1, [sp, #20]
 8008b86:	6800      	ldr	r0, [r0, #0]
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	a902      	add	r1, sp, #8
 8008b8c:	f001 fc02 	bl	800a394 <_svfiprintf_r>
 8008b90:	9b02      	ldr	r3, [sp, #8]
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	b01c      	add	sp, #112	; 0x70
 8008b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b9c:	b003      	add	sp, #12
 8008b9e:	4770      	bx	lr
 8008ba0:	20000070 	.word	0x20000070
 8008ba4:	ffff0208 	.word	0xffff0208

08008ba8 <_strtol_l.constprop.0>:
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bae:	d001      	beq.n	8008bb4 <_strtol_l.constprop.0+0xc>
 8008bb0:	2b24      	cmp	r3, #36	; 0x24
 8008bb2:	d906      	bls.n	8008bc2 <_strtol_l.constprop.0+0x1a>
 8008bb4:	f7ff fb3c 	bl	8008230 <__errno>
 8008bb8:	2316      	movs	r3, #22
 8008bba:	6003      	str	r3, [r0, #0]
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ca8 <_strtol_l.constprop.0+0x100>
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	462e      	mov	r6, r5
 8008bca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bce:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bd2:	f017 0708 	ands.w	r7, r7, #8
 8008bd6:	d1f7      	bne.n	8008bc8 <_strtol_l.constprop.0+0x20>
 8008bd8:	2c2d      	cmp	r4, #45	; 0x2d
 8008bda:	d132      	bne.n	8008c42 <_strtol_l.constprop.0+0x9a>
 8008bdc:	782c      	ldrb	r4, [r5, #0]
 8008bde:	2701      	movs	r7, #1
 8008be0:	1cb5      	adds	r5, r6, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d05b      	beq.n	8008c9e <_strtol_l.constprop.0+0xf6>
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d109      	bne.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008bea:	2c30      	cmp	r4, #48	; 0x30
 8008bec:	d107      	bne.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008bee:	782c      	ldrb	r4, [r5, #0]
 8008bf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008bf4:	2c58      	cmp	r4, #88	; 0x58
 8008bf6:	d14d      	bne.n	8008c94 <_strtol_l.constprop.0+0xec>
 8008bf8:	786c      	ldrb	r4, [r5, #1]
 8008bfa:	2310      	movs	r3, #16
 8008bfc:	3502      	adds	r5, #2
 8008bfe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c02:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c06:	f04f 0c00 	mov.w	ip, #0
 8008c0a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c0e:	4666      	mov	r6, ip
 8008c10:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c18:	f1be 0f09 	cmp.w	lr, #9
 8008c1c:	d816      	bhi.n	8008c4c <_strtol_l.constprop.0+0xa4>
 8008c1e:	4674      	mov	r4, lr
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	dd24      	ble.n	8008c6e <_strtol_l.constprop.0+0xc6>
 8008c24:	f1bc 0f00 	cmp.w	ip, #0
 8008c28:	db1e      	blt.n	8008c68 <_strtol_l.constprop.0+0xc0>
 8008c2a:	45b1      	cmp	r9, r6
 8008c2c:	d31c      	bcc.n	8008c68 <_strtol_l.constprop.0+0xc0>
 8008c2e:	d101      	bne.n	8008c34 <_strtol_l.constprop.0+0x8c>
 8008c30:	45a2      	cmp	sl, r4
 8008c32:	db19      	blt.n	8008c68 <_strtol_l.constprop.0+0xc0>
 8008c34:	fb06 4603 	mla	r6, r6, r3, r4
 8008c38:	f04f 0c01 	mov.w	ip, #1
 8008c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c40:	e7e8      	b.n	8008c14 <_strtol_l.constprop.0+0x6c>
 8008c42:	2c2b      	cmp	r4, #43	; 0x2b
 8008c44:	bf04      	itt	eq
 8008c46:	782c      	ldrbeq	r4, [r5, #0]
 8008c48:	1cb5      	addeq	r5, r6, #2
 8008c4a:	e7ca      	b.n	8008be2 <_strtol_l.constprop.0+0x3a>
 8008c4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c50:	f1be 0f19 	cmp.w	lr, #25
 8008c54:	d801      	bhi.n	8008c5a <_strtol_l.constprop.0+0xb2>
 8008c56:	3c37      	subs	r4, #55	; 0x37
 8008c58:	e7e2      	b.n	8008c20 <_strtol_l.constprop.0+0x78>
 8008c5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c5e:	f1be 0f19 	cmp.w	lr, #25
 8008c62:	d804      	bhi.n	8008c6e <_strtol_l.constprop.0+0xc6>
 8008c64:	3c57      	subs	r4, #87	; 0x57
 8008c66:	e7db      	b.n	8008c20 <_strtol_l.constprop.0+0x78>
 8008c68:	f04f 3cff 	mov.w	ip, #4294967295
 8008c6c:	e7e6      	b.n	8008c3c <_strtol_l.constprop.0+0x94>
 8008c6e:	f1bc 0f00 	cmp.w	ip, #0
 8008c72:	da05      	bge.n	8008c80 <_strtol_l.constprop.0+0xd8>
 8008c74:	2322      	movs	r3, #34	; 0x22
 8008c76:	6003      	str	r3, [r0, #0]
 8008c78:	4646      	mov	r6, r8
 8008c7a:	b942      	cbnz	r2, 8008c8e <_strtol_l.constprop.0+0xe6>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	e79e      	b.n	8008bbe <_strtol_l.constprop.0+0x16>
 8008c80:	b107      	cbz	r7, 8008c84 <_strtol_l.constprop.0+0xdc>
 8008c82:	4276      	negs	r6, r6
 8008c84:	2a00      	cmp	r2, #0
 8008c86:	d0f9      	beq.n	8008c7c <_strtol_l.constprop.0+0xd4>
 8008c88:	f1bc 0f00 	cmp.w	ip, #0
 8008c8c:	d000      	beq.n	8008c90 <_strtol_l.constprop.0+0xe8>
 8008c8e:	1e69      	subs	r1, r5, #1
 8008c90:	6011      	str	r1, [r2, #0]
 8008c92:	e7f3      	b.n	8008c7c <_strtol_l.constprop.0+0xd4>
 8008c94:	2430      	movs	r4, #48	; 0x30
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1b1      	bne.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008c9a:	2308      	movs	r3, #8
 8008c9c:	e7af      	b.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008c9e:	2c30      	cmp	r4, #48	; 0x30
 8008ca0:	d0a5      	beq.n	8008bee <_strtol_l.constprop.0+0x46>
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	e7ab      	b.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008ca6:	bf00      	nop
 8008ca8:	0800b221 	.word	0x0800b221

08008cac <strtol>:
 8008cac:	4613      	mov	r3, r2
 8008cae:	460a      	mov	r2, r1
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	4802      	ldr	r0, [pc, #8]	; (8008cbc <strtol+0x10>)
 8008cb4:	6800      	ldr	r0, [r0, #0]
 8008cb6:	f7ff bf77 	b.w	8008ba8 <_strtol_l.constprop.0>
 8008cba:	bf00      	nop
 8008cbc:	20000070 	.word	0x20000070

08008cc0 <quorem>:
 8008cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	6903      	ldr	r3, [r0, #16]
 8008cc6:	690c      	ldr	r4, [r1, #16]
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	4607      	mov	r7, r0
 8008ccc:	f2c0 8081 	blt.w	8008dd2 <quorem+0x112>
 8008cd0:	3c01      	subs	r4, #1
 8008cd2:	f101 0814 	add.w	r8, r1, #20
 8008cd6:	f100 0514 	add.w	r5, r0, #20
 8008cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	429a      	cmp	r2, r3
 8008cec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cf8:	d331      	bcc.n	8008d5e <quorem+0x9e>
 8008cfa:	f04f 0e00 	mov.w	lr, #0
 8008cfe:	4640      	mov	r0, r8
 8008d00:	46ac      	mov	ip, r5
 8008d02:	46f2      	mov	sl, lr
 8008d04:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d08:	b293      	uxth	r3, r2
 8008d0a:	fb06 e303 	mla	r3, r6, r3, lr
 8008d0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	ebaa 0303 	sub.w	r3, sl, r3
 8008d18:	f8dc a000 	ldr.w	sl, [ip]
 8008d1c:	0c12      	lsrs	r2, r2, #16
 8008d1e:	fa13 f38a 	uxtah	r3, r3, sl
 8008d22:	fb06 e202 	mla	r2, r6, r2, lr
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	9b00      	ldr	r3, [sp, #0]
 8008d2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d2e:	b292      	uxth	r2, r2
 8008d30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d38:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d3c:	4581      	cmp	r9, r0
 8008d3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d42:	f84c 3b04 	str.w	r3, [ip], #4
 8008d46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d4a:	d2db      	bcs.n	8008d04 <quorem+0x44>
 8008d4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d50:	b92b      	cbnz	r3, 8008d5e <quorem+0x9e>
 8008d52:	9b01      	ldr	r3, [sp, #4]
 8008d54:	3b04      	subs	r3, #4
 8008d56:	429d      	cmp	r5, r3
 8008d58:	461a      	mov	r2, r3
 8008d5a:	d32e      	bcc.n	8008dba <quorem+0xfa>
 8008d5c:	613c      	str	r4, [r7, #16]
 8008d5e:	4638      	mov	r0, r7
 8008d60:	f001 f8c4 	bl	8009eec <__mcmp>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	db24      	blt.n	8008db2 <quorem+0xf2>
 8008d68:	3601      	adds	r6, #1
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f04f 0c00 	mov.w	ip, #0
 8008d70:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d74:	f8d0 e000 	ldr.w	lr, [r0]
 8008d78:	b293      	uxth	r3, r2
 8008d7a:	ebac 0303 	sub.w	r3, ip, r3
 8008d7e:	0c12      	lsrs	r2, r2, #16
 8008d80:	fa13 f38e 	uxtah	r3, r3, lr
 8008d84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d92:	45c1      	cmp	r9, r8
 8008d94:	f840 3b04 	str.w	r3, [r0], #4
 8008d98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d9c:	d2e8      	bcs.n	8008d70 <quorem+0xb0>
 8008d9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008da6:	b922      	cbnz	r2, 8008db2 <quorem+0xf2>
 8008da8:	3b04      	subs	r3, #4
 8008daa:	429d      	cmp	r5, r3
 8008dac:	461a      	mov	r2, r3
 8008dae:	d30a      	bcc.n	8008dc6 <quorem+0x106>
 8008db0:	613c      	str	r4, [r7, #16]
 8008db2:	4630      	mov	r0, r6
 8008db4:	b003      	add	sp, #12
 8008db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	d1cc      	bne.n	8008d5c <quorem+0x9c>
 8008dc2:	3c01      	subs	r4, #1
 8008dc4:	e7c7      	b.n	8008d56 <quorem+0x96>
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	2a00      	cmp	r2, #0
 8008dcc:	d1f0      	bne.n	8008db0 <quorem+0xf0>
 8008dce:	3c01      	subs	r4, #1
 8008dd0:	e7eb      	b.n	8008daa <quorem+0xea>
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e7ee      	b.n	8008db4 <quorem+0xf4>
	...

08008dd8 <_dtoa_r>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ed2d 8b04 	vpush	{d8-d9}
 8008de0:	ec57 6b10 	vmov	r6, r7, d0
 8008de4:	b093      	sub	sp, #76	; 0x4c
 8008de6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008de8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dec:	9106      	str	r1, [sp, #24]
 8008dee:	ee10 aa10 	vmov	sl, s0
 8008df2:	4604      	mov	r4, r0
 8008df4:	9209      	str	r2, [sp, #36]	; 0x24
 8008df6:	930c      	str	r3, [sp, #48]	; 0x30
 8008df8:	46bb      	mov	fp, r7
 8008dfa:	b975      	cbnz	r5, 8008e1a <_dtoa_r+0x42>
 8008dfc:	2010      	movs	r0, #16
 8008dfe:	f000 fddd 	bl	80099bc <malloc>
 8008e02:	4602      	mov	r2, r0
 8008e04:	6260      	str	r0, [r4, #36]	; 0x24
 8008e06:	b920      	cbnz	r0, 8008e12 <_dtoa_r+0x3a>
 8008e08:	4ba7      	ldr	r3, [pc, #668]	; (80090a8 <_dtoa_r+0x2d0>)
 8008e0a:	21ea      	movs	r1, #234	; 0xea
 8008e0c:	48a7      	ldr	r0, [pc, #668]	; (80090ac <_dtoa_r+0x2d4>)
 8008e0e:	f001 fbd1 	bl	800a5b4 <__assert_func>
 8008e12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e16:	6005      	str	r5, [r0, #0]
 8008e18:	60c5      	str	r5, [r0, #12]
 8008e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e1c:	6819      	ldr	r1, [r3, #0]
 8008e1e:	b151      	cbz	r1, 8008e36 <_dtoa_r+0x5e>
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	604a      	str	r2, [r1, #4]
 8008e24:	2301      	movs	r3, #1
 8008e26:	4093      	lsls	r3, r2
 8008e28:	608b      	str	r3, [r1, #8]
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 fe1c 	bl	8009a68 <_Bfree>
 8008e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	1e3b      	subs	r3, r7, #0
 8008e38:	bfaa      	itet	ge
 8008e3a:	2300      	movge	r3, #0
 8008e3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e40:	f8c8 3000 	strge.w	r3, [r8]
 8008e44:	4b9a      	ldr	r3, [pc, #616]	; (80090b0 <_dtoa_r+0x2d8>)
 8008e46:	bfbc      	itt	lt
 8008e48:	2201      	movlt	r2, #1
 8008e4a:	f8c8 2000 	strlt.w	r2, [r8]
 8008e4e:	ea33 030b 	bics.w	r3, r3, fp
 8008e52:	d11b      	bne.n	8008e8c <_dtoa_r+0xb4>
 8008e54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e56:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e60:	4333      	orrs	r3, r6
 8008e62:	f000 8592 	beq.w	800998a <_dtoa_r+0xbb2>
 8008e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e68:	b963      	cbnz	r3, 8008e84 <_dtoa_r+0xac>
 8008e6a:	4b92      	ldr	r3, [pc, #584]	; (80090b4 <_dtoa_r+0x2dc>)
 8008e6c:	e022      	b.n	8008eb4 <_dtoa_r+0xdc>
 8008e6e:	4b92      	ldr	r3, [pc, #584]	; (80090b8 <_dtoa_r+0x2e0>)
 8008e70:	9301      	str	r3, [sp, #4]
 8008e72:	3308      	adds	r3, #8
 8008e74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	9801      	ldr	r0, [sp, #4]
 8008e7a:	b013      	add	sp, #76	; 0x4c
 8008e7c:	ecbd 8b04 	vpop	{d8-d9}
 8008e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e84:	4b8b      	ldr	r3, [pc, #556]	; (80090b4 <_dtoa_r+0x2dc>)
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	3303      	adds	r3, #3
 8008e8a:	e7f3      	b.n	8008e74 <_dtoa_r+0x9c>
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2300      	movs	r3, #0
 8008e90:	4650      	mov	r0, sl
 8008e92:	4659      	mov	r1, fp
 8008e94:	f7f7 fe38 	bl	8000b08 <__aeabi_dcmpeq>
 8008e98:	ec4b ab19 	vmov	d9, sl, fp
 8008e9c:	4680      	mov	r8, r0
 8008e9e:	b158      	cbz	r0, 8008eb8 <_dtoa_r+0xe0>
 8008ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 856b 	beq.w	8009984 <_dtoa_r+0xbac>
 8008eae:	4883      	ldr	r0, [pc, #524]	; (80090bc <_dtoa_r+0x2e4>)
 8008eb0:	6018      	str	r0, [r3, #0]
 8008eb2:	1e43      	subs	r3, r0, #1
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	e7df      	b.n	8008e78 <_dtoa_r+0xa0>
 8008eb8:	ec4b ab10 	vmov	d0, sl, fp
 8008ebc:	aa10      	add	r2, sp, #64	; 0x40
 8008ebe:	a911      	add	r1, sp, #68	; 0x44
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f001 f8b9 	bl	800a038 <__d2b>
 8008ec6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008eca:	ee08 0a10 	vmov	s16, r0
 8008ece:	2d00      	cmp	r5, #0
 8008ed0:	f000 8084 	beq.w	8008fdc <_dtoa_r+0x204>
 8008ed4:	ee19 3a90 	vmov	r3, s19
 8008ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008edc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ee0:	4656      	mov	r6, sl
 8008ee2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008eea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008eee:	4b74      	ldr	r3, [pc, #464]	; (80090c0 <_dtoa_r+0x2e8>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	f7f7 f9e7 	bl	80002c8 <__aeabi_dsub>
 8008efa:	a365      	add	r3, pc, #404	; (adr r3, 8009090 <_dtoa_r+0x2b8>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f7f7 fb9a 	bl	8000638 <__aeabi_dmul>
 8008f04:	a364      	add	r3, pc, #400	; (adr r3, 8009098 <_dtoa_r+0x2c0>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f7f7 f9df 	bl	80002cc <__adddf3>
 8008f0e:	4606      	mov	r6, r0
 8008f10:	4628      	mov	r0, r5
 8008f12:	460f      	mov	r7, r1
 8008f14:	f7f7 fb26 	bl	8000564 <__aeabi_i2d>
 8008f18:	a361      	add	r3, pc, #388	; (adr r3, 80090a0 <_dtoa_r+0x2c8>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	f7f7 fb8b 	bl	8000638 <__aeabi_dmul>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4630      	mov	r0, r6
 8008f28:	4639      	mov	r1, r7
 8008f2a:	f7f7 f9cf 	bl	80002cc <__adddf3>
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	f7f7 fe31 	bl	8000b98 <__aeabi_d2iz>
 8008f36:	2200      	movs	r2, #0
 8008f38:	9000      	str	r0, [sp, #0]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	4639      	mov	r1, r7
 8008f40:	f7f7 fdec 	bl	8000b1c <__aeabi_dcmplt>
 8008f44:	b150      	cbz	r0, 8008f5c <_dtoa_r+0x184>
 8008f46:	9800      	ldr	r0, [sp, #0]
 8008f48:	f7f7 fb0c 	bl	8000564 <__aeabi_i2d>
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	463b      	mov	r3, r7
 8008f50:	f7f7 fdda 	bl	8000b08 <__aeabi_dcmpeq>
 8008f54:	b910      	cbnz	r0, 8008f5c <_dtoa_r+0x184>
 8008f56:	9b00      	ldr	r3, [sp, #0]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	2b16      	cmp	r3, #22
 8008f60:	d85a      	bhi.n	8009018 <_dtoa_r+0x240>
 8008f62:	9a00      	ldr	r2, [sp, #0]
 8008f64:	4b57      	ldr	r3, [pc, #348]	; (80090c4 <_dtoa_r+0x2ec>)
 8008f66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	ec51 0b19 	vmov	r0, r1, d9
 8008f72:	f7f7 fdd3 	bl	8000b1c <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d050      	beq.n	800901c <_dtoa_r+0x244>
 8008f7a:	9b00      	ldr	r3, [sp, #0]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	2300      	movs	r3, #0
 8008f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f86:	1b5d      	subs	r5, r3, r5
 8008f88:	1e6b      	subs	r3, r5, #1
 8008f8a:	9305      	str	r3, [sp, #20]
 8008f8c:	bf45      	ittet	mi
 8008f8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008f92:	9304      	strmi	r3, [sp, #16]
 8008f94:	2300      	movpl	r3, #0
 8008f96:	2300      	movmi	r3, #0
 8008f98:	bf4c      	ite	mi
 8008f9a:	9305      	strmi	r3, [sp, #20]
 8008f9c:	9304      	strpl	r3, [sp, #16]
 8008f9e:	9b00      	ldr	r3, [sp, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	db3d      	blt.n	8009020 <_dtoa_r+0x248>
 8008fa4:	9b05      	ldr	r3, [sp, #20]
 8008fa6:	9a00      	ldr	r2, [sp, #0]
 8008fa8:	920a      	str	r2, [sp, #40]	; 0x28
 8008faa:	4413      	add	r3, r2
 8008fac:	9305      	str	r3, [sp, #20]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9307      	str	r3, [sp, #28]
 8008fb2:	9b06      	ldr	r3, [sp, #24]
 8008fb4:	2b09      	cmp	r3, #9
 8008fb6:	f200 8089 	bhi.w	80090cc <_dtoa_r+0x2f4>
 8008fba:	2b05      	cmp	r3, #5
 8008fbc:	bfc4      	itt	gt
 8008fbe:	3b04      	subgt	r3, #4
 8008fc0:	9306      	strgt	r3, [sp, #24]
 8008fc2:	9b06      	ldr	r3, [sp, #24]
 8008fc4:	f1a3 0302 	sub.w	r3, r3, #2
 8008fc8:	bfcc      	ite	gt
 8008fca:	2500      	movgt	r5, #0
 8008fcc:	2501      	movle	r5, #1
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	f200 8087 	bhi.w	80090e2 <_dtoa_r+0x30a>
 8008fd4:	e8df f003 	tbb	[pc, r3]
 8008fd8:	59383a2d 	.word	0x59383a2d
 8008fdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fe0:	441d      	add	r5, r3
 8008fe2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	bfc1      	itttt	gt
 8008fea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ff2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008ff6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ffa:	bfda      	itte	le
 8008ffc:	f1c3 0320 	rsble	r3, r3, #32
 8009000:	fa06 f003 	lslle.w	r0, r6, r3
 8009004:	4318      	orrgt	r0, r3
 8009006:	f7f7 fa9d 	bl	8000544 <__aeabi_ui2d>
 800900a:	2301      	movs	r3, #1
 800900c:	4606      	mov	r6, r0
 800900e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009012:	3d01      	subs	r5, #1
 8009014:	930e      	str	r3, [sp, #56]	; 0x38
 8009016:	e76a      	b.n	8008eee <_dtoa_r+0x116>
 8009018:	2301      	movs	r3, #1
 800901a:	e7b2      	b.n	8008f82 <_dtoa_r+0x1aa>
 800901c:	900b      	str	r0, [sp, #44]	; 0x2c
 800901e:	e7b1      	b.n	8008f84 <_dtoa_r+0x1ac>
 8009020:	9b04      	ldr	r3, [sp, #16]
 8009022:	9a00      	ldr	r2, [sp, #0]
 8009024:	1a9b      	subs	r3, r3, r2
 8009026:	9304      	str	r3, [sp, #16]
 8009028:	4253      	negs	r3, r2
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	2300      	movs	r3, #0
 800902e:	930a      	str	r3, [sp, #40]	; 0x28
 8009030:	e7bf      	b.n	8008fb2 <_dtoa_r+0x1da>
 8009032:	2300      	movs	r3, #0
 8009034:	9308      	str	r3, [sp, #32]
 8009036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009038:	2b00      	cmp	r3, #0
 800903a:	dc55      	bgt.n	80090e8 <_dtoa_r+0x310>
 800903c:	2301      	movs	r3, #1
 800903e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009042:	461a      	mov	r2, r3
 8009044:	9209      	str	r2, [sp, #36]	; 0x24
 8009046:	e00c      	b.n	8009062 <_dtoa_r+0x28a>
 8009048:	2301      	movs	r3, #1
 800904a:	e7f3      	b.n	8009034 <_dtoa_r+0x25c>
 800904c:	2300      	movs	r3, #0
 800904e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009050:	9308      	str	r3, [sp, #32]
 8009052:	9b00      	ldr	r3, [sp, #0]
 8009054:	4413      	add	r3, r2
 8009056:	9302      	str	r3, [sp, #8]
 8009058:	3301      	adds	r3, #1
 800905a:	2b01      	cmp	r3, #1
 800905c:	9303      	str	r3, [sp, #12]
 800905e:	bfb8      	it	lt
 8009060:	2301      	movlt	r3, #1
 8009062:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009064:	2200      	movs	r2, #0
 8009066:	6042      	str	r2, [r0, #4]
 8009068:	2204      	movs	r2, #4
 800906a:	f102 0614 	add.w	r6, r2, #20
 800906e:	429e      	cmp	r6, r3
 8009070:	6841      	ldr	r1, [r0, #4]
 8009072:	d93d      	bls.n	80090f0 <_dtoa_r+0x318>
 8009074:	4620      	mov	r0, r4
 8009076:	f000 fcb7 	bl	80099e8 <_Balloc>
 800907a:	9001      	str	r0, [sp, #4]
 800907c:	2800      	cmp	r0, #0
 800907e:	d13b      	bne.n	80090f8 <_dtoa_r+0x320>
 8009080:	4b11      	ldr	r3, [pc, #68]	; (80090c8 <_dtoa_r+0x2f0>)
 8009082:	4602      	mov	r2, r0
 8009084:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009088:	e6c0      	b.n	8008e0c <_dtoa_r+0x34>
 800908a:	2301      	movs	r3, #1
 800908c:	e7df      	b.n	800904e <_dtoa_r+0x276>
 800908e:	bf00      	nop
 8009090:	636f4361 	.word	0x636f4361
 8009094:	3fd287a7 	.word	0x3fd287a7
 8009098:	8b60c8b3 	.word	0x8b60c8b3
 800909c:	3fc68a28 	.word	0x3fc68a28
 80090a0:	509f79fb 	.word	0x509f79fb
 80090a4:	3fd34413 	.word	0x3fd34413
 80090a8:	0800b32e 	.word	0x0800b32e
 80090ac:	0800b345 	.word	0x0800b345
 80090b0:	7ff00000 	.word	0x7ff00000
 80090b4:	0800b32a 	.word	0x0800b32a
 80090b8:	0800b321 	.word	0x0800b321
 80090bc:	0800b1fd 	.word	0x0800b1fd
 80090c0:	3ff80000 	.word	0x3ff80000
 80090c4:	0800b438 	.word	0x0800b438
 80090c8:	0800b3a0 	.word	0x0800b3a0
 80090cc:	2501      	movs	r5, #1
 80090ce:	2300      	movs	r3, #0
 80090d0:	9306      	str	r3, [sp, #24]
 80090d2:	9508      	str	r5, [sp, #32]
 80090d4:	f04f 33ff 	mov.w	r3, #4294967295
 80090d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090dc:	2200      	movs	r2, #0
 80090de:	2312      	movs	r3, #18
 80090e0:	e7b0      	b.n	8009044 <_dtoa_r+0x26c>
 80090e2:	2301      	movs	r3, #1
 80090e4:	9308      	str	r3, [sp, #32]
 80090e6:	e7f5      	b.n	80090d4 <_dtoa_r+0x2fc>
 80090e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090ee:	e7b8      	b.n	8009062 <_dtoa_r+0x28a>
 80090f0:	3101      	adds	r1, #1
 80090f2:	6041      	str	r1, [r0, #4]
 80090f4:	0052      	lsls	r2, r2, #1
 80090f6:	e7b8      	b.n	800906a <_dtoa_r+0x292>
 80090f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090fa:	9a01      	ldr	r2, [sp, #4]
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	2b0e      	cmp	r3, #14
 8009102:	f200 809d 	bhi.w	8009240 <_dtoa_r+0x468>
 8009106:	2d00      	cmp	r5, #0
 8009108:	f000 809a 	beq.w	8009240 <_dtoa_r+0x468>
 800910c:	9b00      	ldr	r3, [sp, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	dd32      	ble.n	8009178 <_dtoa_r+0x3a0>
 8009112:	4ab7      	ldr	r2, [pc, #732]	; (80093f0 <_dtoa_r+0x618>)
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800911c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009120:	9b00      	ldr	r3, [sp, #0]
 8009122:	05d8      	lsls	r0, r3, #23
 8009124:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009128:	d516      	bpl.n	8009158 <_dtoa_r+0x380>
 800912a:	4bb2      	ldr	r3, [pc, #712]	; (80093f4 <_dtoa_r+0x61c>)
 800912c:	ec51 0b19 	vmov	r0, r1, d9
 8009130:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009134:	f7f7 fbaa 	bl	800088c <__aeabi_ddiv>
 8009138:	f007 070f 	and.w	r7, r7, #15
 800913c:	4682      	mov	sl, r0
 800913e:	468b      	mov	fp, r1
 8009140:	2503      	movs	r5, #3
 8009142:	4eac      	ldr	r6, [pc, #688]	; (80093f4 <_dtoa_r+0x61c>)
 8009144:	b957      	cbnz	r7, 800915c <_dtoa_r+0x384>
 8009146:	4642      	mov	r2, r8
 8009148:	464b      	mov	r3, r9
 800914a:	4650      	mov	r0, sl
 800914c:	4659      	mov	r1, fp
 800914e:	f7f7 fb9d 	bl	800088c <__aeabi_ddiv>
 8009152:	4682      	mov	sl, r0
 8009154:	468b      	mov	fp, r1
 8009156:	e028      	b.n	80091aa <_dtoa_r+0x3d2>
 8009158:	2502      	movs	r5, #2
 800915a:	e7f2      	b.n	8009142 <_dtoa_r+0x36a>
 800915c:	07f9      	lsls	r1, r7, #31
 800915e:	d508      	bpl.n	8009172 <_dtoa_r+0x39a>
 8009160:	4640      	mov	r0, r8
 8009162:	4649      	mov	r1, r9
 8009164:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009168:	f7f7 fa66 	bl	8000638 <__aeabi_dmul>
 800916c:	3501      	adds	r5, #1
 800916e:	4680      	mov	r8, r0
 8009170:	4689      	mov	r9, r1
 8009172:	107f      	asrs	r7, r7, #1
 8009174:	3608      	adds	r6, #8
 8009176:	e7e5      	b.n	8009144 <_dtoa_r+0x36c>
 8009178:	f000 809b 	beq.w	80092b2 <_dtoa_r+0x4da>
 800917c:	9b00      	ldr	r3, [sp, #0]
 800917e:	4f9d      	ldr	r7, [pc, #628]	; (80093f4 <_dtoa_r+0x61c>)
 8009180:	425e      	negs	r6, r3
 8009182:	4b9b      	ldr	r3, [pc, #620]	; (80093f0 <_dtoa_r+0x618>)
 8009184:	f006 020f 	and.w	r2, r6, #15
 8009188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	ec51 0b19 	vmov	r0, r1, d9
 8009194:	f7f7 fa50 	bl	8000638 <__aeabi_dmul>
 8009198:	1136      	asrs	r6, r6, #4
 800919a:	4682      	mov	sl, r0
 800919c:	468b      	mov	fp, r1
 800919e:	2300      	movs	r3, #0
 80091a0:	2502      	movs	r5, #2
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	d17a      	bne.n	800929c <_dtoa_r+0x4c4>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1d3      	bne.n	8009152 <_dtoa_r+0x37a>
 80091aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 8082 	beq.w	80092b6 <_dtoa_r+0x4de>
 80091b2:	4b91      	ldr	r3, [pc, #580]	; (80093f8 <_dtoa_r+0x620>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	4650      	mov	r0, sl
 80091b8:	4659      	mov	r1, fp
 80091ba:	f7f7 fcaf 	bl	8000b1c <__aeabi_dcmplt>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d079      	beq.n	80092b6 <_dtoa_r+0x4de>
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d076      	beq.n	80092b6 <_dtoa_r+0x4de>
 80091c8:	9b02      	ldr	r3, [sp, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dd36      	ble.n	800923c <_dtoa_r+0x464>
 80091ce:	9b00      	ldr	r3, [sp, #0]
 80091d0:	4650      	mov	r0, sl
 80091d2:	4659      	mov	r1, fp
 80091d4:	1e5f      	subs	r7, r3, #1
 80091d6:	2200      	movs	r2, #0
 80091d8:	4b88      	ldr	r3, [pc, #544]	; (80093fc <_dtoa_r+0x624>)
 80091da:	f7f7 fa2d 	bl	8000638 <__aeabi_dmul>
 80091de:	9e02      	ldr	r6, [sp, #8]
 80091e0:	4682      	mov	sl, r0
 80091e2:	468b      	mov	fp, r1
 80091e4:	3501      	adds	r5, #1
 80091e6:	4628      	mov	r0, r5
 80091e8:	f7f7 f9bc 	bl	8000564 <__aeabi_i2d>
 80091ec:	4652      	mov	r2, sl
 80091ee:	465b      	mov	r3, fp
 80091f0:	f7f7 fa22 	bl	8000638 <__aeabi_dmul>
 80091f4:	4b82      	ldr	r3, [pc, #520]	; (8009400 <_dtoa_r+0x628>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	f7f7 f868 	bl	80002cc <__adddf3>
 80091fc:	46d0      	mov	r8, sl
 80091fe:	46d9      	mov	r9, fp
 8009200:	4682      	mov	sl, r0
 8009202:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009206:	2e00      	cmp	r6, #0
 8009208:	d158      	bne.n	80092bc <_dtoa_r+0x4e4>
 800920a:	4b7e      	ldr	r3, [pc, #504]	; (8009404 <_dtoa_r+0x62c>)
 800920c:	2200      	movs	r2, #0
 800920e:	4640      	mov	r0, r8
 8009210:	4649      	mov	r1, r9
 8009212:	f7f7 f859 	bl	80002c8 <__aeabi_dsub>
 8009216:	4652      	mov	r2, sl
 8009218:	465b      	mov	r3, fp
 800921a:	4680      	mov	r8, r0
 800921c:	4689      	mov	r9, r1
 800921e:	f7f7 fc9b 	bl	8000b58 <__aeabi_dcmpgt>
 8009222:	2800      	cmp	r0, #0
 8009224:	f040 8295 	bne.w	8009752 <_dtoa_r+0x97a>
 8009228:	4652      	mov	r2, sl
 800922a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800922e:	4640      	mov	r0, r8
 8009230:	4649      	mov	r1, r9
 8009232:	f7f7 fc73 	bl	8000b1c <__aeabi_dcmplt>
 8009236:	2800      	cmp	r0, #0
 8009238:	f040 8289 	bne.w	800974e <_dtoa_r+0x976>
 800923c:	ec5b ab19 	vmov	sl, fp, d9
 8009240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009242:	2b00      	cmp	r3, #0
 8009244:	f2c0 8148 	blt.w	80094d8 <_dtoa_r+0x700>
 8009248:	9a00      	ldr	r2, [sp, #0]
 800924a:	2a0e      	cmp	r2, #14
 800924c:	f300 8144 	bgt.w	80094d8 <_dtoa_r+0x700>
 8009250:	4b67      	ldr	r3, [pc, #412]	; (80093f0 <_dtoa_r+0x618>)
 8009252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009256:	e9d3 8900 	ldrd	r8, r9, [r3]
 800925a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925c:	2b00      	cmp	r3, #0
 800925e:	f280 80d5 	bge.w	800940c <_dtoa_r+0x634>
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f300 80d1 	bgt.w	800940c <_dtoa_r+0x634>
 800926a:	f040 826f 	bne.w	800974c <_dtoa_r+0x974>
 800926e:	4b65      	ldr	r3, [pc, #404]	; (8009404 <_dtoa_r+0x62c>)
 8009270:	2200      	movs	r2, #0
 8009272:	4640      	mov	r0, r8
 8009274:	4649      	mov	r1, r9
 8009276:	f7f7 f9df 	bl	8000638 <__aeabi_dmul>
 800927a:	4652      	mov	r2, sl
 800927c:	465b      	mov	r3, fp
 800927e:	f7f7 fc61 	bl	8000b44 <__aeabi_dcmpge>
 8009282:	9e03      	ldr	r6, [sp, #12]
 8009284:	4637      	mov	r7, r6
 8009286:	2800      	cmp	r0, #0
 8009288:	f040 8245 	bne.w	8009716 <_dtoa_r+0x93e>
 800928c:	9d01      	ldr	r5, [sp, #4]
 800928e:	2331      	movs	r3, #49	; 0x31
 8009290:	f805 3b01 	strb.w	r3, [r5], #1
 8009294:	9b00      	ldr	r3, [sp, #0]
 8009296:	3301      	adds	r3, #1
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	e240      	b.n	800971e <_dtoa_r+0x946>
 800929c:	07f2      	lsls	r2, r6, #31
 800929e:	d505      	bpl.n	80092ac <_dtoa_r+0x4d4>
 80092a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a4:	f7f7 f9c8 	bl	8000638 <__aeabi_dmul>
 80092a8:	3501      	adds	r5, #1
 80092aa:	2301      	movs	r3, #1
 80092ac:	1076      	asrs	r6, r6, #1
 80092ae:	3708      	adds	r7, #8
 80092b0:	e777      	b.n	80091a2 <_dtoa_r+0x3ca>
 80092b2:	2502      	movs	r5, #2
 80092b4:	e779      	b.n	80091aa <_dtoa_r+0x3d2>
 80092b6:	9f00      	ldr	r7, [sp, #0]
 80092b8:	9e03      	ldr	r6, [sp, #12]
 80092ba:	e794      	b.n	80091e6 <_dtoa_r+0x40e>
 80092bc:	9901      	ldr	r1, [sp, #4]
 80092be:	4b4c      	ldr	r3, [pc, #304]	; (80093f0 <_dtoa_r+0x618>)
 80092c0:	4431      	add	r1, r6
 80092c2:	910d      	str	r1, [sp, #52]	; 0x34
 80092c4:	9908      	ldr	r1, [sp, #32]
 80092c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092ce:	2900      	cmp	r1, #0
 80092d0:	d043      	beq.n	800935a <_dtoa_r+0x582>
 80092d2:	494d      	ldr	r1, [pc, #308]	; (8009408 <_dtoa_r+0x630>)
 80092d4:	2000      	movs	r0, #0
 80092d6:	f7f7 fad9 	bl	800088c <__aeabi_ddiv>
 80092da:	4652      	mov	r2, sl
 80092dc:	465b      	mov	r3, fp
 80092de:	f7f6 fff3 	bl	80002c8 <__aeabi_dsub>
 80092e2:	9d01      	ldr	r5, [sp, #4]
 80092e4:	4682      	mov	sl, r0
 80092e6:	468b      	mov	fp, r1
 80092e8:	4649      	mov	r1, r9
 80092ea:	4640      	mov	r0, r8
 80092ec:	f7f7 fc54 	bl	8000b98 <__aeabi_d2iz>
 80092f0:	4606      	mov	r6, r0
 80092f2:	f7f7 f937 	bl	8000564 <__aeabi_i2d>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4640      	mov	r0, r8
 80092fc:	4649      	mov	r1, r9
 80092fe:	f7f6 ffe3 	bl	80002c8 <__aeabi_dsub>
 8009302:	3630      	adds	r6, #48	; 0x30
 8009304:	f805 6b01 	strb.w	r6, [r5], #1
 8009308:	4652      	mov	r2, sl
 800930a:	465b      	mov	r3, fp
 800930c:	4680      	mov	r8, r0
 800930e:	4689      	mov	r9, r1
 8009310:	f7f7 fc04 	bl	8000b1c <__aeabi_dcmplt>
 8009314:	2800      	cmp	r0, #0
 8009316:	d163      	bne.n	80093e0 <_dtoa_r+0x608>
 8009318:	4642      	mov	r2, r8
 800931a:	464b      	mov	r3, r9
 800931c:	4936      	ldr	r1, [pc, #216]	; (80093f8 <_dtoa_r+0x620>)
 800931e:	2000      	movs	r0, #0
 8009320:	f7f6 ffd2 	bl	80002c8 <__aeabi_dsub>
 8009324:	4652      	mov	r2, sl
 8009326:	465b      	mov	r3, fp
 8009328:	f7f7 fbf8 	bl	8000b1c <__aeabi_dcmplt>
 800932c:	2800      	cmp	r0, #0
 800932e:	f040 80b5 	bne.w	800949c <_dtoa_r+0x6c4>
 8009332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009334:	429d      	cmp	r5, r3
 8009336:	d081      	beq.n	800923c <_dtoa_r+0x464>
 8009338:	4b30      	ldr	r3, [pc, #192]	; (80093fc <_dtoa_r+0x624>)
 800933a:	2200      	movs	r2, #0
 800933c:	4650      	mov	r0, sl
 800933e:	4659      	mov	r1, fp
 8009340:	f7f7 f97a 	bl	8000638 <__aeabi_dmul>
 8009344:	4b2d      	ldr	r3, [pc, #180]	; (80093fc <_dtoa_r+0x624>)
 8009346:	4682      	mov	sl, r0
 8009348:	468b      	mov	fp, r1
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	2200      	movs	r2, #0
 8009350:	f7f7 f972 	bl	8000638 <__aeabi_dmul>
 8009354:	4680      	mov	r8, r0
 8009356:	4689      	mov	r9, r1
 8009358:	e7c6      	b.n	80092e8 <_dtoa_r+0x510>
 800935a:	4650      	mov	r0, sl
 800935c:	4659      	mov	r1, fp
 800935e:	f7f7 f96b 	bl	8000638 <__aeabi_dmul>
 8009362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009364:	9d01      	ldr	r5, [sp, #4]
 8009366:	930f      	str	r3, [sp, #60]	; 0x3c
 8009368:	4682      	mov	sl, r0
 800936a:	468b      	mov	fp, r1
 800936c:	4649      	mov	r1, r9
 800936e:	4640      	mov	r0, r8
 8009370:	f7f7 fc12 	bl	8000b98 <__aeabi_d2iz>
 8009374:	4606      	mov	r6, r0
 8009376:	f7f7 f8f5 	bl	8000564 <__aeabi_i2d>
 800937a:	3630      	adds	r6, #48	; 0x30
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4640      	mov	r0, r8
 8009382:	4649      	mov	r1, r9
 8009384:	f7f6 ffa0 	bl	80002c8 <__aeabi_dsub>
 8009388:	f805 6b01 	strb.w	r6, [r5], #1
 800938c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800938e:	429d      	cmp	r5, r3
 8009390:	4680      	mov	r8, r0
 8009392:	4689      	mov	r9, r1
 8009394:	f04f 0200 	mov.w	r2, #0
 8009398:	d124      	bne.n	80093e4 <_dtoa_r+0x60c>
 800939a:	4b1b      	ldr	r3, [pc, #108]	; (8009408 <_dtoa_r+0x630>)
 800939c:	4650      	mov	r0, sl
 800939e:	4659      	mov	r1, fp
 80093a0:	f7f6 ff94 	bl	80002cc <__adddf3>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	4640      	mov	r0, r8
 80093aa:	4649      	mov	r1, r9
 80093ac:	f7f7 fbd4 	bl	8000b58 <__aeabi_dcmpgt>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d173      	bne.n	800949c <_dtoa_r+0x6c4>
 80093b4:	4652      	mov	r2, sl
 80093b6:	465b      	mov	r3, fp
 80093b8:	4913      	ldr	r1, [pc, #76]	; (8009408 <_dtoa_r+0x630>)
 80093ba:	2000      	movs	r0, #0
 80093bc:	f7f6 ff84 	bl	80002c8 <__aeabi_dsub>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4640      	mov	r0, r8
 80093c6:	4649      	mov	r1, r9
 80093c8:	f7f7 fba8 	bl	8000b1c <__aeabi_dcmplt>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	f43f af35 	beq.w	800923c <_dtoa_r+0x464>
 80093d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093d4:	1e6b      	subs	r3, r5, #1
 80093d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093dc:	2b30      	cmp	r3, #48	; 0x30
 80093de:	d0f8      	beq.n	80093d2 <_dtoa_r+0x5fa>
 80093e0:	9700      	str	r7, [sp, #0]
 80093e2:	e049      	b.n	8009478 <_dtoa_r+0x6a0>
 80093e4:	4b05      	ldr	r3, [pc, #20]	; (80093fc <_dtoa_r+0x624>)
 80093e6:	f7f7 f927 	bl	8000638 <__aeabi_dmul>
 80093ea:	4680      	mov	r8, r0
 80093ec:	4689      	mov	r9, r1
 80093ee:	e7bd      	b.n	800936c <_dtoa_r+0x594>
 80093f0:	0800b438 	.word	0x0800b438
 80093f4:	0800b410 	.word	0x0800b410
 80093f8:	3ff00000 	.word	0x3ff00000
 80093fc:	40240000 	.word	0x40240000
 8009400:	401c0000 	.word	0x401c0000
 8009404:	40140000 	.word	0x40140000
 8009408:	3fe00000 	.word	0x3fe00000
 800940c:	9d01      	ldr	r5, [sp, #4]
 800940e:	4656      	mov	r6, sl
 8009410:	465f      	mov	r7, fp
 8009412:	4642      	mov	r2, r8
 8009414:	464b      	mov	r3, r9
 8009416:	4630      	mov	r0, r6
 8009418:	4639      	mov	r1, r7
 800941a:	f7f7 fa37 	bl	800088c <__aeabi_ddiv>
 800941e:	f7f7 fbbb 	bl	8000b98 <__aeabi_d2iz>
 8009422:	4682      	mov	sl, r0
 8009424:	f7f7 f89e 	bl	8000564 <__aeabi_i2d>
 8009428:	4642      	mov	r2, r8
 800942a:	464b      	mov	r3, r9
 800942c:	f7f7 f904 	bl	8000638 <__aeabi_dmul>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4630      	mov	r0, r6
 8009436:	4639      	mov	r1, r7
 8009438:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800943c:	f7f6 ff44 	bl	80002c8 <__aeabi_dsub>
 8009440:	f805 6b01 	strb.w	r6, [r5], #1
 8009444:	9e01      	ldr	r6, [sp, #4]
 8009446:	9f03      	ldr	r7, [sp, #12]
 8009448:	1bae      	subs	r6, r5, r6
 800944a:	42b7      	cmp	r7, r6
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	d135      	bne.n	80094be <_dtoa_r+0x6e6>
 8009452:	f7f6 ff3b 	bl	80002cc <__adddf3>
 8009456:	4642      	mov	r2, r8
 8009458:	464b      	mov	r3, r9
 800945a:	4606      	mov	r6, r0
 800945c:	460f      	mov	r7, r1
 800945e:	f7f7 fb7b 	bl	8000b58 <__aeabi_dcmpgt>
 8009462:	b9d0      	cbnz	r0, 800949a <_dtoa_r+0x6c2>
 8009464:	4642      	mov	r2, r8
 8009466:	464b      	mov	r3, r9
 8009468:	4630      	mov	r0, r6
 800946a:	4639      	mov	r1, r7
 800946c:	f7f7 fb4c 	bl	8000b08 <__aeabi_dcmpeq>
 8009470:	b110      	cbz	r0, 8009478 <_dtoa_r+0x6a0>
 8009472:	f01a 0f01 	tst.w	sl, #1
 8009476:	d110      	bne.n	800949a <_dtoa_r+0x6c2>
 8009478:	4620      	mov	r0, r4
 800947a:	ee18 1a10 	vmov	r1, s16
 800947e:	f000 faf3 	bl	8009a68 <_Bfree>
 8009482:	2300      	movs	r3, #0
 8009484:	9800      	ldr	r0, [sp, #0]
 8009486:	702b      	strb	r3, [r5, #0]
 8009488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800948a:	3001      	adds	r0, #1
 800948c:	6018      	str	r0, [r3, #0]
 800948e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009490:	2b00      	cmp	r3, #0
 8009492:	f43f acf1 	beq.w	8008e78 <_dtoa_r+0xa0>
 8009496:	601d      	str	r5, [r3, #0]
 8009498:	e4ee      	b.n	8008e78 <_dtoa_r+0xa0>
 800949a:	9f00      	ldr	r7, [sp, #0]
 800949c:	462b      	mov	r3, r5
 800949e:	461d      	mov	r5, r3
 80094a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094a4:	2a39      	cmp	r2, #57	; 0x39
 80094a6:	d106      	bne.n	80094b6 <_dtoa_r+0x6de>
 80094a8:	9a01      	ldr	r2, [sp, #4]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d1f7      	bne.n	800949e <_dtoa_r+0x6c6>
 80094ae:	9901      	ldr	r1, [sp, #4]
 80094b0:	2230      	movs	r2, #48	; 0x30
 80094b2:	3701      	adds	r7, #1
 80094b4:	700a      	strb	r2, [r1, #0]
 80094b6:	781a      	ldrb	r2, [r3, #0]
 80094b8:	3201      	adds	r2, #1
 80094ba:	701a      	strb	r2, [r3, #0]
 80094bc:	e790      	b.n	80093e0 <_dtoa_r+0x608>
 80094be:	4ba6      	ldr	r3, [pc, #664]	; (8009758 <_dtoa_r+0x980>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	f7f7 f8b9 	bl	8000638 <__aeabi_dmul>
 80094c6:	2200      	movs	r2, #0
 80094c8:	2300      	movs	r3, #0
 80094ca:	4606      	mov	r6, r0
 80094cc:	460f      	mov	r7, r1
 80094ce:	f7f7 fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d09d      	beq.n	8009412 <_dtoa_r+0x63a>
 80094d6:	e7cf      	b.n	8009478 <_dtoa_r+0x6a0>
 80094d8:	9a08      	ldr	r2, [sp, #32]
 80094da:	2a00      	cmp	r2, #0
 80094dc:	f000 80d7 	beq.w	800968e <_dtoa_r+0x8b6>
 80094e0:	9a06      	ldr	r2, [sp, #24]
 80094e2:	2a01      	cmp	r2, #1
 80094e4:	f300 80ba 	bgt.w	800965c <_dtoa_r+0x884>
 80094e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094ea:	2a00      	cmp	r2, #0
 80094ec:	f000 80b2 	beq.w	8009654 <_dtoa_r+0x87c>
 80094f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094f4:	9e07      	ldr	r6, [sp, #28]
 80094f6:	9d04      	ldr	r5, [sp, #16]
 80094f8:	9a04      	ldr	r2, [sp, #16]
 80094fa:	441a      	add	r2, r3
 80094fc:	9204      	str	r2, [sp, #16]
 80094fe:	9a05      	ldr	r2, [sp, #20]
 8009500:	2101      	movs	r1, #1
 8009502:	441a      	add	r2, r3
 8009504:	4620      	mov	r0, r4
 8009506:	9205      	str	r2, [sp, #20]
 8009508:	f000 fb66 	bl	8009bd8 <__i2b>
 800950c:	4607      	mov	r7, r0
 800950e:	2d00      	cmp	r5, #0
 8009510:	dd0c      	ble.n	800952c <_dtoa_r+0x754>
 8009512:	9b05      	ldr	r3, [sp, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	dd09      	ble.n	800952c <_dtoa_r+0x754>
 8009518:	42ab      	cmp	r3, r5
 800951a:	9a04      	ldr	r2, [sp, #16]
 800951c:	bfa8      	it	ge
 800951e:	462b      	movge	r3, r5
 8009520:	1ad2      	subs	r2, r2, r3
 8009522:	9204      	str	r2, [sp, #16]
 8009524:	9a05      	ldr	r2, [sp, #20]
 8009526:	1aed      	subs	r5, r5, r3
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	9305      	str	r3, [sp, #20]
 800952c:	9b07      	ldr	r3, [sp, #28]
 800952e:	b31b      	cbz	r3, 8009578 <_dtoa_r+0x7a0>
 8009530:	9b08      	ldr	r3, [sp, #32]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80af 	beq.w	8009696 <_dtoa_r+0x8be>
 8009538:	2e00      	cmp	r6, #0
 800953a:	dd13      	ble.n	8009564 <_dtoa_r+0x78c>
 800953c:	4639      	mov	r1, r7
 800953e:	4632      	mov	r2, r6
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fc09 	bl	8009d58 <__pow5mult>
 8009546:	ee18 2a10 	vmov	r2, s16
 800954a:	4601      	mov	r1, r0
 800954c:	4607      	mov	r7, r0
 800954e:	4620      	mov	r0, r4
 8009550:	f000 fb58 	bl	8009c04 <__multiply>
 8009554:	ee18 1a10 	vmov	r1, s16
 8009558:	4680      	mov	r8, r0
 800955a:	4620      	mov	r0, r4
 800955c:	f000 fa84 	bl	8009a68 <_Bfree>
 8009560:	ee08 8a10 	vmov	s16, r8
 8009564:	9b07      	ldr	r3, [sp, #28]
 8009566:	1b9a      	subs	r2, r3, r6
 8009568:	d006      	beq.n	8009578 <_dtoa_r+0x7a0>
 800956a:	ee18 1a10 	vmov	r1, s16
 800956e:	4620      	mov	r0, r4
 8009570:	f000 fbf2 	bl	8009d58 <__pow5mult>
 8009574:	ee08 0a10 	vmov	s16, r0
 8009578:	2101      	movs	r1, #1
 800957a:	4620      	mov	r0, r4
 800957c:	f000 fb2c 	bl	8009bd8 <__i2b>
 8009580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	4606      	mov	r6, r0
 8009586:	f340 8088 	ble.w	800969a <_dtoa_r+0x8c2>
 800958a:	461a      	mov	r2, r3
 800958c:	4601      	mov	r1, r0
 800958e:	4620      	mov	r0, r4
 8009590:	f000 fbe2 	bl	8009d58 <__pow5mult>
 8009594:	9b06      	ldr	r3, [sp, #24]
 8009596:	2b01      	cmp	r3, #1
 8009598:	4606      	mov	r6, r0
 800959a:	f340 8081 	ble.w	80096a0 <_dtoa_r+0x8c8>
 800959e:	f04f 0800 	mov.w	r8, #0
 80095a2:	6933      	ldr	r3, [r6, #16]
 80095a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095a8:	6918      	ldr	r0, [r3, #16]
 80095aa:	f000 fac5 	bl	8009b38 <__hi0bits>
 80095ae:	f1c0 0020 	rsb	r0, r0, #32
 80095b2:	9b05      	ldr	r3, [sp, #20]
 80095b4:	4418      	add	r0, r3
 80095b6:	f010 001f 	ands.w	r0, r0, #31
 80095ba:	f000 8092 	beq.w	80096e2 <_dtoa_r+0x90a>
 80095be:	f1c0 0320 	rsb	r3, r0, #32
 80095c2:	2b04      	cmp	r3, #4
 80095c4:	f340 808a 	ble.w	80096dc <_dtoa_r+0x904>
 80095c8:	f1c0 001c 	rsb	r0, r0, #28
 80095cc:	9b04      	ldr	r3, [sp, #16]
 80095ce:	4403      	add	r3, r0
 80095d0:	9304      	str	r3, [sp, #16]
 80095d2:	9b05      	ldr	r3, [sp, #20]
 80095d4:	4403      	add	r3, r0
 80095d6:	4405      	add	r5, r0
 80095d8:	9305      	str	r3, [sp, #20]
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dd07      	ble.n	80095f0 <_dtoa_r+0x818>
 80095e0:	ee18 1a10 	vmov	r1, s16
 80095e4:	461a      	mov	r2, r3
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 fc10 	bl	8009e0c <__lshift>
 80095ec:	ee08 0a10 	vmov	s16, r0
 80095f0:	9b05      	ldr	r3, [sp, #20]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dd05      	ble.n	8009602 <_dtoa_r+0x82a>
 80095f6:	4631      	mov	r1, r6
 80095f8:	461a      	mov	r2, r3
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 fc06 	bl	8009e0c <__lshift>
 8009600:	4606      	mov	r6, r0
 8009602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d06e      	beq.n	80096e6 <_dtoa_r+0x90e>
 8009608:	ee18 0a10 	vmov	r0, s16
 800960c:	4631      	mov	r1, r6
 800960e:	f000 fc6d 	bl	8009eec <__mcmp>
 8009612:	2800      	cmp	r0, #0
 8009614:	da67      	bge.n	80096e6 <_dtoa_r+0x90e>
 8009616:	9b00      	ldr	r3, [sp, #0]
 8009618:	3b01      	subs	r3, #1
 800961a:	ee18 1a10 	vmov	r1, s16
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	220a      	movs	r2, #10
 8009622:	2300      	movs	r3, #0
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fa41 	bl	8009aac <__multadd>
 800962a:	9b08      	ldr	r3, [sp, #32]
 800962c:	ee08 0a10 	vmov	s16, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 81b1 	beq.w	8009998 <_dtoa_r+0xbc0>
 8009636:	2300      	movs	r3, #0
 8009638:	4639      	mov	r1, r7
 800963a:	220a      	movs	r2, #10
 800963c:	4620      	mov	r0, r4
 800963e:	f000 fa35 	bl	8009aac <__multadd>
 8009642:	9b02      	ldr	r3, [sp, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	4607      	mov	r7, r0
 8009648:	f300 808e 	bgt.w	8009768 <_dtoa_r+0x990>
 800964c:	9b06      	ldr	r3, [sp, #24]
 800964e:	2b02      	cmp	r3, #2
 8009650:	dc51      	bgt.n	80096f6 <_dtoa_r+0x91e>
 8009652:	e089      	b.n	8009768 <_dtoa_r+0x990>
 8009654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800965a:	e74b      	b.n	80094f4 <_dtoa_r+0x71c>
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	1e5e      	subs	r6, r3, #1
 8009660:	9b07      	ldr	r3, [sp, #28]
 8009662:	42b3      	cmp	r3, r6
 8009664:	bfbf      	itttt	lt
 8009666:	9b07      	ldrlt	r3, [sp, #28]
 8009668:	9607      	strlt	r6, [sp, #28]
 800966a:	1af2      	sublt	r2, r6, r3
 800966c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800966e:	bfb6      	itet	lt
 8009670:	189b      	addlt	r3, r3, r2
 8009672:	1b9e      	subge	r6, r3, r6
 8009674:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	bfb8      	it	lt
 800967a:	2600      	movlt	r6, #0
 800967c:	2b00      	cmp	r3, #0
 800967e:	bfb7      	itett	lt
 8009680:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009684:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009688:	1a9d      	sublt	r5, r3, r2
 800968a:	2300      	movlt	r3, #0
 800968c:	e734      	b.n	80094f8 <_dtoa_r+0x720>
 800968e:	9e07      	ldr	r6, [sp, #28]
 8009690:	9d04      	ldr	r5, [sp, #16]
 8009692:	9f08      	ldr	r7, [sp, #32]
 8009694:	e73b      	b.n	800950e <_dtoa_r+0x736>
 8009696:	9a07      	ldr	r2, [sp, #28]
 8009698:	e767      	b.n	800956a <_dtoa_r+0x792>
 800969a:	9b06      	ldr	r3, [sp, #24]
 800969c:	2b01      	cmp	r3, #1
 800969e:	dc18      	bgt.n	80096d2 <_dtoa_r+0x8fa>
 80096a0:	f1ba 0f00 	cmp.w	sl, #0
 80096a4:	d115      	bne.n	80096d2 <_dtoa_r+0x8fa>
 80096a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096aa:	b993      	cbnz	r3, 80096d2 <_dtoa_r+0x8fa>
 80096ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096b0:	0d1b      	lsrs	r3, r3, #20
 80096b2:	051b      	lsls	r3, r3, #20
 80096b4:	b183      	cbz	r3, 80096d8 <_dtoa_r+0x900>
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	3301      	adds	r3, #1
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	9b05      	ldr	r3, [sp, #20]
 80096be:	3301      	adds	r3, #1
 80096c0:	9305      	str	r3, [sp, #20]
 80096c2:	f04f 0801 	mov.w	r8, #1
 80096c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f47f af6a 	bne.w	80095a2 <_dtoa_r+0x7ca>
 80096ce:	2001      	movs	r0, #1
 80096d0:	e76f      	b.n	80095b2 <_dtoa_r+0x7da>
 80096d2:	f04f 0800 	mov.w	r8, #0
 80096d6:	e7f6      	b.n	80096c6 <_dtoa_r+0x8ee>
 80096d8:	4698      	mov	r8, r3
 80096da:	e7f4      	b.n	80096c6 <_dtoa_r+0x8ee>
 80096dc:	f43f af7d 	beq.w	80095da <_dtoa_r+0x802>
 80096e0:	4618      	mov	r0, r3
 80096e2:	301c      	adds	r0, #28
 80096e4:	e772      	b.n	80095cc <_dtoa_r+0x7f4>
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dc37      	bgt.n	800975c <_dtoa_r+0x984>
 80096ec:	9b06      	ldr	r3, [sp, #24]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	dd34      	ble.n	800975c <_dtoa_r+0x984>
 80096f2:	9b03      	ldr	r3, [sp, #12]
 80096f4:	9302      	str	r3, [sp, #8]
 80096f6:	9b02      	ldr	r3, [sp, #8]
 80096f8:	b96b      	cbnz	r3, 8009716 <_dtoa_r+0x93e>
 80096fa:	4631      	mov	r1, r6
 80096fc:	2205      	movs	r2, #5
 80096fe:	4620      	mov	r0, r4
 8009700:	f000 f9d4 	bl	8009aac <__multadd>
 8009704:	4601      	mov	r1, r0
 8009706:	4606      	mov	r6, r0
 8009708:	ee18 0a10 	vmov	r0, s16
 800970c:	f000 fbee 	bl	8009eec <__mcmp>
 8009710:	2800      	cmp	r0, #0
 8009712:	f73f adbb 	bgt.w	800928c <_dtoa_r+0x4b4>
 8009716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009718:	9d01      	ldr	r5, [sp, #4]
 800971a:	43db      	mvns	r3, r3
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	4631      	mov	r1, r6
 8009724:	4620      	mov	r0, r4
 8009726:	f000 f99f 	bl	8009a68 <_Bfree>
 800972a:	2f00      	cmp	r7, #0
 800972c:	f43f aea4 	beq.w	8009478 <_dtoa_r+0x6a0>
 8009730:	f1b8 0f00 	cmp.w	r8, #0
 8009734:	d005      	beq.n	8009742 <_dtoa_r+0x96a>
 8009736:	45b8      	cmp	r8, r7
 8009738:	d003      	beq.n	8009742 <_dtoa_r+0x96a>
 800973a:	4641      	mov	r1, r8
 800973c:	4620      	mov	r0, r4
 800973e:	f000 f993 	bl	8009a68 <_Bfree>
 8009742:	4639      	mov	r1, r7
 8009744:	4620      	mov	r0, r4
 8009746:	f000 f98f 	bl	8009a68 <_Bfree>
 800974a:	e695      	b.n	8009478 <_dtoa_r+0x6a0>
 800974c:	2600      	movs	r6, #0
 800974e:	4637      	mov	r7, r6
 8009750:	e7e1      	b.n	8009716 <_dtoa_r+0x93e>
 8009752:	9700      	str	r7, [sp, #0]
 8009754:	4637      	mov	r7, r6
 8009756:	e599      	b.n	800928c <_dtoa_r+0x4b4>
 8009758:	40240000 	.word	0x40240000
 800975c:	9b08      	ldr	r3, [sp, #32]
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 80ca 	beq.w	80098f8 <_dtoa_r+0xb20>
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	9302      	str	r3, [sp, #8]
 8009768:	2d00      	cmp	r5, #0
 800976a:	dd05      	ble.n	8009778 <_dtoa_r+0x9a0>
 800976c:	4639      	mov	r1, r7
 800976e:	462a      	mov	r2, r5
 8009770:	4620      	mov	r0, r4
 8009772:	f000 fb4b 	bl	8009e0c <__lshift>
 8009776:	4607      	mov	r7, r0
 8009778:	f1b8 0f00 	cmp.w	r8, #0
 800977c:	d05b      	beq.n	8009836 <_dtoa_r+0xa5e>
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	4620      	mov	r0, r4
 8009782:	f000 f931 	bl	80099e8 <_Balloc>
 8009786:	4605      	mov	r5, r0
 8009788:	b928      	cbnz	r0, 8009796 <_dtoa_r+0x9be>
 800978a:	4b87      	ldr	r3, [pc, #540]	; (80099a8 <_dtoa_r+0xbd0>)
 800978c:	4602      	mov	r2, r0
 800978e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009792:	f7ff bb3b 	b.w	8008e0c <_dtoa_r+0x34>
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	3202      	adds	r2, #2
 800979a:	0092      	lsls	r2, r2, #2
 800979c:	f107 010c 	add.w	r1, r7, #12
 80097a0:	300c      	adds	r0, #12
 80097a2:	f000 f913 	bl	80099cc <memcpy>
 80097a6:	2201      	movs	r2, #1
 80097a8:	4629      	mov	r1, r5
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fb2e 	bl	8009e0c <__lshift>
 80097b0:	9b01      	ldr	r3, [sp, #4]
 80097b2:	f103 0901 	add.w	r9, r3, #1
 80097b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097ba:	4413      	add	r3, r2
 80097bc:	9305      	str	r3, [sp, #20]
 80097be:	f00a 0301 	and.w	r3, sl, #1
 80097c2:	46b8      	mov	r8, r7
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	4607      	mov	r7, r0
 80097c8:	4631      	mov	r1, r6
 80097ca:	ee18 0a10 	vmov	r0, s16
 80097ce:	f7ff fa77 	bl	8008cc0 <quorem>
 80097d2:	4641      	mov	r1, r8
 80097d4:	9002      	str	r0, [sp, #8]
 80097d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097da:	ee18 0a10 	vmov	r0, s16
 80097de:	f000 fb85 	bl	8009eec <__mcmp>
 80097e2:	463a      	mov	r2, r7
 80097e4:	9003      	str	r0, [sp, #12]
 80097e6:	4631      	mov	r1, r6
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 fb9b 	bl	8009f24 <__mdiff>
 80097ee:	68c2      	ldr	r2, [r0, #12]
 80097f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80097f4:	4605      	mov	r5, r0
 80097f6:	bb02      	cbnz	r2, 800983a <_dtoa_r+0xa62>
 80097f8:	4601      	mov	r1, r0
 80097fa:	ee18 0a10 	vmov	r0, s16
 80097fe:	f000 fb75 	bl	8009eec <__mcmp>
 8009802:	4602      	mov	r2, r0
 8009804:	4629      	mov	r1, r5
 8009806:	4620      	mov	r0, r4
 8009808:	9207      	str	r2, [sp, #28]
 800980a:	f000 f92d 	bl	8009a68 <_Bfree>
 800980e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009812:	ea43 0102 	orr.w	r1, r3, r2
 8009816:	9b04      	ldr	r3, [sp, #16]
 8009818:	430b      	orrs	r3, r1
 800981a:	464d      	mov	r5, r9
 800981c:	d10f      	bne.n	800983e <_dtoa_r+0xa66>
 800981e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009822:	d02a      	beq.n	800987a <_dtoa_r+0xaa2>
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	dd02      	ble.n	8009830 <_dtoa_r+0xa58>
 800982a:	9b02      	ldr	r3, [sp, #8]
 800982c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009830:	f88b a000 	strb.w	sl, [fp]
 8009834:	e775      	b.n	8009722 <_dtoa_r+0x94a>
 8009836:	4638      	mov	r0, r7
 8009838:	e7ba      	b.n	80097b0 <_dtoa_r+0x9d8>
 800983a:	2201      	movs	r2, #1
 800983c:	e7e2      	b.n	8009804 <_dtoa_r+0xa2c>
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	db04      	blt.n	800984e <_dtoa_r+0xa76>
 8009844:	9906      	ldr	r1, [sp, #24]
 8009846:	430b      	orrs	r3, r1
 8009848:	9904      	ldr	r1, [sp, #16]
 800984a:	430b      	orrs	r3, r1
 800984c:	d122      	bne.n	8009894 <_dtoa_r+0xabc>
 800984e:	2a00      	cmp	r2, #0
 8009850:	ddee      	ble.n	8009830 <_dtoa_r+0xa58>
 8009852:	ee18 1a10 	vmov	r1, s16
 8009856:	2201      	movs	r2, #1
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fad7 	bl	8009e0c <__lshift>
 800985e:	4631      	mov	r1, r6
 8009860:	ee08 0a10 	vmov	s16, r0
 8009864:	f000 fb42 	bl	8009eec <__mcmp>
 8009868:	2800      	cmp	r0, #0
 800986a:	dc03      	bgt.n	8009874 <_dtoa_r+0xa9c>
 800986c:	d1e0      	bne.n	8009830 <_dtoa_r+0xa58>
 800986e:	f01a 0f01 	tst.w	sl, #1
 8009872:	d0dd      	beq.n	8009830 <_dtoa_r+0xa58>
 8009874:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009878:	d1d7      	bne.n	800982a <_dtoa_r+0xa52>
 800987a:	2339      	movs	r3, #57	; 0x39
 800987c:	f88b 3000 	strb.w	r3, [fp]
 8009880:	462b      	mov	r3, r5
 8009882:	461d      	mov	r5, r3
 8009884:	3b01      	subs	r3, #1
 8009886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800988a:	2a39      	cmp	r2, #57	; 0x39
 800988c:	d071      	beq.n	8009972 <_dtoa_r+0xb9a>
 800988e:	3201      	adds	r2, #1
 8009890:	701a      	strb	r2, [r3, #0]
 8009892:	e746      	b.n	8009722 <_dtoa_r+0x94a>
 8009894:	2a00      	cmp	r2, #0
 8009896:	dd07      	ble.n	80098a8 <_dtoa_r+0xad0>
 8009898:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800989c:	d0ed      	beq.n	800987a <_dtoa_r+0xaa2>
 800989e:	f10a 0301 	add.w	r3, sl, #1
 80098a2:	f88b 3000 	strb.w	r3, [fp]
 80098a6:	e73c      	b.n	8009722 <_dtoa_r+0x94a>
 80098a8:	9b05      	ldr	r3, [sp, #20]
 80098aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098ae:	4599      	cmp	r9, r3
 80098b0:	d047      	beq.n	8009942 <_dtoa_r+0xb6a>
 80098b2:	ee18 1a10 	vmov	r1, s16
 80098b6:	2300      	movs	r3, #0
 80098b8:	220a      	movs	r2, #10
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 f8f6 	bl	8009aac <__multadd>
 80098c0:	45b8      	cmp	r8, r7
 80098c2:	ee08 0a10 	vmov	s16, r0
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	f04f 020a 	mov.w	r2, #10
 80098ce:	4641      	mov	r1, r8
 80098d0:	4620      	mov	r0, r4
 80098d2:	d106      	bne.n	80098e2 <_dtoa_r+0xb0a>
 80098d4:	f000 f8ea 	bl	8009aac <__multadd>
 80098d8:	4680      	mov	r8, r0
 80098da:	4607      	mov	r7, r0
 80098dc:	f109 0901 	add.w	r9, r9, #1
 80098e0:	e772      	b.n	80097c8 <_dtoa_r+0x9f0>
 80098e2:	f000 f8e3 	bl	8009aac <__multadd>
 80098e6:	4639      	mov	r1, r7
 80098e8:	4680      	mov	r8, r0
 80098ea:	2300      	movs	r3, #0
 80098ec:	220a      	movs	r2, #10
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 f8dc 	bl	8009aac <__multadd>
 80098f4:	4607      	mov	r7, r0
 80098f6:	e7f1      	b.n	80098dc <_dtoa_r+0xb04>
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	9302      	str	r3, [sp, #8]
 80098fc:	9d01      	ldr	r5, [sp, #4]
 80098fe:	ee18 0a10 	vmov	r0, s16
 8009902:	4631      	mov	r1, r6
 8009904:	f7ff f9dc 	bl	8008cc0 <quorem>
 8009908:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	f805 ab01 	strb.w	sl, [r5], #1
 8009912:	1aea      	subs	r2, r5, r3
 8009914:	9b02      	ldr	r3, [sp, #8]
 8009916:	4293      	cmp	r3, r2
 8009918:	dd09      	ble.n	800992e <_dtoa_r+0xb56>
 800991a:	ee18 1a10 	vmov	r1, s16
 800991e:	2300      	movs	r3, #0
 8009920:	220a      	movs	r2, #10
 8009922:	4620      	mov	r0, r4
 8009924:	f000 f8c2 	bl	8009aac <__multadd>
 8009928:	ee08 0a10 	vmov	s16, r0
 800992c:	e7e7      	b.n	80098fe <_dtoa_r+0xb26>
 800992e:	9b02      	ldr	r3, [sp, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfc8      	it	gt
 8009934:	461d      	movgt	r5, r3
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	bfd8      	it	le
 800993a:	2501      	movle	r5, #1
 800993c:	441d      	add	r5, r3
 800993e:	f04f 0800 	mov.w	r8, #0
 8009942:	ee18 1a10 	vmov	r1, s16
 8009946:	2201      	movs	r2, #1
 8009948:	4620      	mov	r0, r4
 800994a:	f000 fa5f 	bl	8009e0c <__lshift>
 800994e:	4631      	mov	r1, r6
 8009950:	ee08 0a10 	vmov	s16, r0
 8009954:	f000 faca 	bl	8009eec <__mcmp>
 8009958:	2800      	cmp	r0, #0
 800995a:	dc91      	bgt.n	8009880 <_dtoa_r+0xaa8>
 800995c:	d102      	bne.n	8009964 <_dtoa_r+0xb8c>
 800995e:	f01a 0f01 	tst.w	sl, #1
 8009962:	d18d      	bne.n	8009880 <_dtoa_r+0xaa8>
 8009964:	462b      	mov	r3, r5
 8009966:	461d      	mov	r5, r3
 8009968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800996c:	2a30      	cmp	r2, #48	; 0x30
 800996e:	d0fa      	beq.n	8009966 <_dtoa_r+0xb8e>
 8009970:	e6d7      	b.n	8009722 <_dtoa_r+0x94a>
 8009972:	9a01      	ldr	r2, [sp, #4]
 8009974:	429a      	cmp	r2, r3
 8009976:	d184      	bne.n	8009882 <_dtoa_r+0xaaa>
 8009978:	9b00      	ldr	r3, [sp, #0]
 800997a:	3301      	adds	r3, #1
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	2331      	movs	r3, #49	; 0x31
 8009980:	7013      	strb	r3, [r2, #0]
 8009982:	e6ce      	b.n	8009722 <_dtoa_r+0x94a>
 8009984:	4b09      	ldr	r3, [pc, #36]	; (80099ac <_dtoa_r+0xbd4>)
 8009986:	f7ff ba95 	b.w	8008eb4 <_dtoa_r+0xdc>
 800998a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800998c:	2b00      	cmp	r3, #0
 800998e:	f47f aa6e 	bne.w	8008e6e <_dtoa_r+0x96>
 8009992:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <_dtoa_r+0xbd8>)
 8009994:	f7ff ba8e 	b.w	8008eb4 <_dtoa_r+0xdc>
 8009998:	9b02      	ldr	r3, [sp, #8]
 800999a:	2b00      	cmp	r3, #0
 800999c:	dcae      	bgt.n	80098fc <_dtoa_r+0xb24>
 800999e:	9b06      	ldr	r3, [sp, #24]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	f73f aea8 	bgt.w	80096f6 <_dtoa_r+0x91e>
 80099a6:	e7a9      	b.n	80098fc <_dtoa_r+0xb24>
 80099a8:	0800b3a0 	.word	0x0800b3a0
 80099ac:	0800b1fc 	.word	0x0800b1fc
 80099b0:	0800b321 	.word	0x0800b321

080099b4 <_localeconv_r>:
 80099b4:	4800      	ldr	r0, [pc, #0]	; (80099b8 <_localeconv_r+0x4>)
 80099b6:	4770      	bx	lr
 80099b8:	200001c4 	.word	0x200001c4

080099bc <malloc>:
 80099bc:	4b02      	ldr	r3, [pc, #8]	; (80099c8 <malloc+0xc>)
 80099be:	4601      	mov	r1, r0
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	f000 bc17 	b.w	800a1f4 <_malloc_r>
 80099c6:	bf00      	nop
 80099c8:	20000070 	.word	0x20000070

080099cc <memcpy>:
 80099cc:	440a      	add	r2, r1
 80099ce:	4291      	cmp	r1, r2
 80099d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099d4:	d100      	bne.n	80099d8 <memcpy+0xc>
 80099d6:	4770      	bx	lr
 80099d8:	b510      	push	{r4, lr}
 80099da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099e2:	4291      	cmp	r1, r2
 80099e4:	d1f9      	bne.n	80099da <memcpy+0xe>
 80099e6:	bd10      	pop	{r4, pc}

080099e8 <_Balloc>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099ec:	4604      	mov	r4, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	b976      	cbnz	r6, 8009a10 <_Balloc+0x28>
 80099f2:	2010      	movs	r0, #16
 80099f4:	f7ff ffe2 	bl	80099bc <malloc>
 80099f8:	4602      	mov	r2, r0
 80099fa:	6260      	str	r0, [r4, #36]	; 0x24
 80099fc:	b920      	cbnz	r0, 8009a08 <_Balloc+0x20>
 80099fe:	4b18      	ldr	r3, [pc, #96]	; (8009a60 <_Balloc+0x78>)
 8009a00:	4818      	ldr	r0, [pc, #96]	; (8009a64 <_Balloc+0x7c>)
 8009a02:	2166      	movs	r1, #102	; 0x66
 8009a04:	f000 fdd6 	bl	800a5b4 <__assert_func>
 8009a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a0c:	6006      	str	r6, [r0, #0]
 8009a0e:	60c6      	str	r6, [r0, #12]
 8009a10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a12:	68f3      	ldr	r3, [r6, #12]
 8009a14:	b183      	cbz	r3, 8009a38 <_Balloc+0x50>
 8009a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a1e:	b9b8      	cbnz	r0, 8009a50 <_Balloc+0x68>
 8009a20:	2101      	movs	r1, #1
 8009a22:	fa01 f605 	lsl.w	r6, r1, r5
 8009a26:	1d72      	adds	r2, r6, #5
 8009a28:	0092      	lsls	r2, r2, #2
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 fb60 	bl	800a0f0 <_calloc_r>
 8009a30:	b160      	cbz	r0, 8009a4c <_Balloc+0x64>
 8009a32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a36:	e00e      	b.n	8009a56 <_Balloc+0x6e>
 8009a38:	2221      	movs	r2, #33	; 0x21
 8009a3a:	2104      	movs	r1, #4
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 fb57 	bl	800a0f0 <_calloc_r>
 8009a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a44:	60f0      	str	r0, [r6, #12]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e4      	bne.n	8009a16 <_Balloc+0x2e>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	6802      	ldr	r2, [r0, #0]
 8009a52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a56:	2300      	movs	r3, #0
 8009a58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a5c:	e7f7      	b.n	8009a4e <_Balloc+0x66>
 8009a5e:	bf00      	nop
 8009a60:	0800b32e 	.word	0x0800b32e
 8009a64:	0800b3b1 	.word	0x0800b3b1

08009a68 <_Bfree>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	b976      	cbnz	r6, 8009a90 <_Bfree+0x28>
 8009a72:	2010      	movs	r0, #16
 8009a74:	f7ff ffa2 	bl	80099bc <malloc>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	6268      	str	r0, [r5, #36]	; 0x24
 8009a7c:	b920      	cbnz	r0, 8009a88 <_Bfree+0x20>
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <_Bfree+0x3c>)
 8009a80:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <_Bfree+0x40>)
 8009a82:	218a      	movs	r1, #138	; 0x8a
 8009a84:	f000 fd96 	bl	800a5b4 <__assert_func>
 8009a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a8c:	6006      	str	r6, [r0, #0]
 8009a8e:	60c6      	str	r6, [r0, #12]
 8009a90:	b13c      	cbz	r4, 8009aa2 <_Bfree+0x3a>
 8009a92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a94:	6862      	ldr	r2, [r4, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a9c:	6021      	str	r1, [r4, #0]
 8009a9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	0800b32e 	.word	0x0800b32e
 8009aa8:	0800b3b1 	.word	0x0800b3b1

08009aac <__multadd>:
 8009aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab0:	690d      	ldr	r5, [r1, #16]
 8009ab2:	4607      	mov	r7, r0
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	461e      	mov	r6, r3
 8009ab8:	f101 0c14 	add.w	ip, r1, #20
 8009abc:	2000      	movs	r0, #0
 8009abe:	f8dc 3000 	ldr.w	r3, [ip]
 8009ac2:	b299      	uxth	r1, r3
 8009ac4:	fb02 6101 	mla	r1, r2, r1, r6
 8009ac8:	0c1e      	lsrs	r6, r3, #16
 8009aca:	0c0b      	lsrs	r3, r1, #16
 8009acc:	fb02 3306 	mla	r3, r2, r6, r3
 8009ad0:	b289      	uxth	r1, r1
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ad8:	4285      	cmp	r5, r0
 8009ada:	f84c 1b04 	str.w	r1, [ip], #4
 8009ade:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ae2:	dcec      	bgt.n	8009abe <__multadd+0x12>
 8009ae4:	b30e      	cbz	r6, 8009b2a <__multadd+0x7e>
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	dc19      	bgt.n	8009b20 <__multadd+0x74>
 8009aec:	6861      	ldr	r1, [r4, #4]
 8009aee:	4638      	mov	r0, r7
 8009af0:	3101      	adds	r1, #1
 8009af2:	f7ff ff79 	bl	80099e8 <_Balloc>
 8009af6:	4680      	mov	r8, r0
 8009af8:	b928      	cbnz	r0, 8009b06 <__multadd+0x5a>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b0c      	ldr	r3, [pc, #48]	; (8009b30 <__multadd+0x84>)
 8009afe:	480d      	ldr	r0, [pc, #52]	; (8009b34 <__multadd+0x88>)
 8009b00:	21b5      	movs	r1, #181	; 0xb5
 8009b02:	f000 fd57 	bl	800a5b4 <__assert_func>
 8009b06:	6922      	ldr	r2, [r4, #16]
 8009b08:	3202      	adds	r2, #2
 8009b0a:	f104 010c 	add.w	r1, r4, #12
 8009b0e:	0092      	lsls	r2, r2, #2
 8009b10:	300c      	adds	r0, #12
 8009b12:	f7ff ff5b 	bl	80099cc <memcpy>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f7ff ffa5 	bl	8009a68 <_Bfree>
 8009b1e:	4644      	mov	r4, r8
 8009b20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b24:	3501      	adds	r5, #1
 8009b26:	615e      	str	r6, [r3, #20]
 8009b28:	6125      	str	r5, [r4, #16]
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b30:	0800b3a0 	.word	0x0800b3a0
 8009b34:	0800b3b1 	.word	0x0800b3b1

08009b38 <__hi0bits>:
 8009b38:	0c03      	lsrs	r3, r0, #16
 8009b3a:	041b      	lsls	r3, r3, #16
 8009b3c:	b9d3      	cbnz	r3, 8009b74 <__hi0bits+0x3c>
 8009b3e:	0400      	lsls	r0, r0, #16
 8009b40:	2310      	movs	r3, #16
 8009b42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b46:	bf04      	itt	eq
 8009b48:	0200      	lsleq	r0, r0, #8
 8009b4a:	3308      	addeq	r3, #8
 8009b4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b50:	bf04      	itt	eq
 8009b52:	0100      	lsleq	r0, r0, #4
 8009b54:	3304      	addeq	r3, #4
 8009b56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b5a:	bf04      	itt	eq
 8009b5c:	0080      	lsleq	r0, r0, #2
 8009b5e:	3302      	addeq	r3, #2
 8009b60:	2800      	cmp	r0, #0
 8009b62:	db05      	blt.n	8009b70 <__hi0bits+0x38>
 8009b64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b68:	f103 0301 	add.w	r3, r3, #1
 8009b6c:	bf08      	it	eq
 8009b6e:	2320      	moveq	r3, #32
 8009b70:	4618      	mov	r0, r3
 8009b72:	4770      	bx	lr
 8009b74:	2300      	movs	r3, #0
 8009b76:	e7e4      	b.n	8009b42 <__hi0bits+0xa>

08009b78 <__lo0bits>:
 8009b78:	6803      	ldr	r3, [r0, #0]
 8009b7a:	f013 0207 	ands.w	r2, r3, #7
 8009b7e:	4601      	mov	r1, r0
 8009b80:	d00b      	beq.n	8009b9a <__lo0bits+0x22>
 8009b82:	07da      	lsls	r2, r3, #31
 8009b84:	d423      	bmi.n	8009bce <__lo0bits+0x56>
 8009b86:	0798      	lsls	r0, r3, #30
 8009b88:	bf49      	itett	mi
 8009b8a:	085b      	lsrmi	r3, r3, #1
 8009b8c:	089b      	lsrpl	r3, r3, #2
 8009b8e:	2001      	movmi	r0, #1
 8009b90:	600b      	strmi	r3, [r1, #0]
 8009b92:	bf5c      	itt	pl
 8009b94:	600b      	strpl	r3, [r1, #0]
 8009b96:	2002      	movpl	r0, #2
 8009b98:	4770      	bx	lr
 8009b9a:	b298      	uxth	r0, r3
 8009b9c:	b9a8      	cbnz	r0, 8009bca <__lo0bits+0x52>
 8009b9e:	0c1b      	lsrs	r3, r3, #16
 8009ba0:	2010      	movs	r0, #16
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	b90a      	cbnz	r2, 8009baa <__lo0bits+0x32>
 8009ba6:	3008      	adds	r0, #8
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	071a      	lsls	r2, r3, #28
 8009bac:	bf04      	itt	eq
 8009bae:	091b      	lsreq	r3, r3, #4
 8009bb0:	3004      	addeq	r0, #4
 8009bb2:	079a      	lsls	r2, r3, #30
 8009bb4:	bf04      	itt	eq
 8009bb6:	089b      	lsreq	r3, r3, #2
 8009bb8:	3002      	addeq	r0, #2
 8009bba:	07da      	lsls	r2, r3, #31
 8009bbc:	d403      	bmi.n	8009bc6 <__lo0bits+0x4e>
 8009bbe:	085b      	lsrs	r3, r3, #1
 8009bc0:	f100 0001 	add.w	r0, r0, #1
 8009bc4:	d005      	beq.n	8009bd2 <__lo0bits+0x5a>
 8009bc6:	600b      	str	r3, [r1, #0]
 8009bc8:	4770      	bx	lr
 8009bca:	4610      	mov	r0, r2
 8009bcc:	e7e9      	b.n	8009ba2 <__lo0bits+0x2a>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	4770      	bx	lr
 8009bd2:	2020      	movs	r0, #32
 8009bd4:	4770      	bx	lr
	...

08009bd8 <__i2b>:
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	460c      	mov	r4, r1
 8009bdc:	2101      	movs	r1, #1
 8009bde:	f7ff ff03 	bl	80099e8 <_Balloc>
 8009be2:	4602      	mov	r2, r0
 8009be4:	b928      	cbnz	r0, 8009bf2 <__i2b+0x1a>
 8009be6:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <__i2b+0x24>)
 8009be8:	4805      	ldr	r0, [pc, #20]	; (8009c00 <__i2b+0x28>)
 8009bea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bee:	f000 fce1 	bl	800a5b4 <__assert_func>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	6144      	str	r4, [r0, #20]
 8009bf6:	6103      	str	r3, [r0, #16]
 8009bf8:	bd10      	pop	{r4, pc}
 8009bfa:	bf00      	nop
 8009bfc:	0800b3a0 	.word	0x0800b3a0
 8009c00:	0800b3b1 	.word	0x0800b3b1

08009c04 <__multiply>:
 8009c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c08:	4691      	mov	r9, r2
 8009c0a:	690a      	ldr	r2, [r1, #16]
 8009c0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	bfb8      	it	lt
 8009c14:	460b      	movlt	r3, r1
 8009c16:	460c      	mov	r4, r1
 8009c18:	bfbc      	itt	lt
 8009c1a:	464c      	movlt	r4, r9
 8009c1c:	4699      	movlt	r9, r3
 8009c1e:	6927      	ldr	r7, [r4, #16]
 8009c20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c24:	68a3      	ldr	r3, [r4, #8]
 8009c26:	6861      	ldr	r1, [r4, #4]
 8009c28:	eb07 060a 	add.w	r6, r7, sl
 8009c2c:	42b3      	cmp	r3, r6
 8009c2e:	b085      	sub	sp, #20
 8009c30:	bfb8      	it	lt
 8009c32:	3101      	addlt	r1, #1
 8009c34:	f7ff fed8 	bl	80099e8 <_Balloc>
 8009c38:	b930      	cbnz	r0, 8009c48 <__multiply+0x44>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	4b44      	ldr	r3, [pc, #272]	; (8009d50 <__multiply+0x14c>)
 8009c3e:	4845      	ldr	r0, [pc, #276]	; (8009d54 <__multiply+0x150>)
 8009c40:	f240 115d 	movw	r1, #349	; 0x15d
 8009c44:	f000 fcb6 	bl	800a5b4 <__assert_func>
 8009c48:	f100 0514 	add.w	r5, r0, #20
 8009c4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c50:	462b      	mov	r3, r5
 8009c52:	2200      	movs	r2, #0
 8009c54:	4543      	cmp	r3, r8
 8009c56:	d321      	bcc.n	8009c9c <__multiply+0x98>
 8009c58:	f104 0314 	add.w	r3, r4, #20
 8009c5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c60:	f109 0314 	add.w	r3, r9, #20
 8009c64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c68:	9202      	str	r2, [sp, #8]
 8009c6a:	1b3a      	subs	r2, r7, r4
 8009c6c:	3a15      	subs	r2, #21
 8009c6e:	f022 0203 	bic.w	r2, r2, #3
 8009c72:	3204      	adds	r2, #4
 8009c74:	f104 0115 	add.w	r1, r4, #21
 8009c78:	428f      	cmp	r7, r1
 8009c7a:	bf38      	it	cc
 8009c7c:	2204      	movcc	r2, #4
 8009c7e:	9201      	str	r2, [sp, #4]
 8009c80:	9a02      	ldr	r2, [sp, #8]
 8009c82:	9303      	str	r3, [sp, #12]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d80c      	bhi.n	8009ca2 <__multiply+0x9e>
 8009c88:	2e00      	cmp	r6, #0
 8009c8a:	dd03      	ble.n	8009c94 <__multiply+0x90>
 8009c8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d05a      	beq.n	8009d4a <__multiply+0x146>
 8009c94:	6106      	str	r6, [r0, #16]
 8009c96:	b005      	add	sp, #20
 8009c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9c:	f843 2b04 	str.w	r2, [r3], #4
 8009ca0:	e7d8      	b.n	8009c54 <__multiply+0x50>
 8009ca2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ca6:	f1ba 0f00 	cmp.w	sl, #0
 8009caa:	d024      	beq.n	8009cf6 <__multiply+0xf2>
 8009cac:	f104 0e14 	add.w	lr, r4, #20
 8009cb0:	46a9      	mov	r9, r5
 8009cb2:	f04f 0c00 	mov.w	ip, #0
 8009cb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cba:	f8d9 1000 	ldr.w	r1, [r9]
 8009cbe:	fa1f fb82 	uxth.w	fp, r2
 8009cc2:	b289      	uxth	r1, r1
 8009cc4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8009cd0:	4461      	add	r1, ip
 8009cd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cd6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cde:	b289      	uxth	r1, r1
 8009ce0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ce4:	4577      	cmp	r7, lr
 8009ce6:	f849 1b04 	str.w	r1, [r9], #4
 8009cea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cee:	d8e2      	bhi.n	8009cb6 <__multiply+0xb2>
 8009cf0:	9a01      	ldr	r2, [sp, #4]
 8009cf2:	f845 c002 	str.w	ip, [r5, r2]
 8009cf6:	9a03      	ldr	r2, [sp, #12]
 8009cf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	f1b9 0f00 	cmp.w	r9, #0
 8009d02:	d020      	beq.n	8009d46 <__multiply+0x142>
 8009d04:	6829      	ldr	r1, [r5, #0]
 8009d06:	f104 0c14 	add.w	ip, r4, #20
 8009d0a:	46ae      	mov	lr, r5
 8009d0c:	f04f 0a00 	mov.w	sl, #0
 8009d10:	f8bc b000 	ldrh.w	fp, [ip]
 8009d14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d18:	fb09 220b 	mla	r2, r9, fp, r2
 8009d1c:	4492      	add	sl, r2
 8009d1e:	b289      	uxth	r1, r1
 8009d20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d24:	f84e 1b04 	str.w	r1, [lr], #4
 8009d28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d2c:	f8be 1000 	ldrh.w	r1, [lr]
 8009d30:	0c12      	lsrs	r2, r2, #16
 8009d32:	fb09 1102 	mla	r1, r9, r2, r1
 8009d36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d3a:	4567      	cmp	r7, ip
 8009d3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d40:	d8e6      	bhi.n	8009d10 <__multiply+0x10c>
 8009d42:	9a01      	ldr	r2, [sp, #4]
 8009d44:	50a9      	str	r1, [r5, r2]
 8009d46:	3504      	adds	r5, #4
 8009d48:	e79a      	b.n	8009c80 <__multiply+0x7c>
 8009d4a:	3e01      	subs	r6, #1
 8009d4c:	e79c      	b.n	8009c88 <__multiply+0x84>
 8009d4e:	bf00      	nop
 8009d50:	0800b3a0 	.word	0x0800b3a0
 8009d54:	0800b3b1 	.word	0x0800b3b1

08009d58 <__pow5mult>:
 8009d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d5c:	4615      	mov	r5, r2
 8009d5e:	f012 0203 	ands.w	r2, r2, #3
 8009d62:	4606      	mov	r6, r0
 8009d64:	460f      	mov	r7, r1
 8009d66:	d007      	beq.n	8009d78 <__pow5mult+0x20>
 8009d68:	4c25      	ldr	r4, [pc, #148]	; (8009e00 <__pow5mult+0xa8>)
 8009d6a:	3a01      	subs	r2, #1
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d72:	f7ff fe9b 	bl	8009aac <__multadd>
 8009d76:	4607      	mov	r7, r0
 8009d78:	10ad      	asrs	r5, r5, #2
 8009d7a:	d03d      	beq.n	8009df8 <__pow5mult+0xa0>
 8009d7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d7e:	b97c      	cbnz	r4, 8009da0 <__pow5mult+0x48>
 8009d80:	2010      	movs	r0, #16
 8009d82:	f7ff fe1b 	bl	80099bc <malloc>
 8009d86:	4602      	mov	r2, r0
 8009d88:	6270      	str	r0, [r6, #36]	; 0x24
 8009d8a:	b928      	cbnz	r0, 8009d98 <__pow5mult+0x40>
 8009d8c:	4b1d      	ldr	r3, [pc, #116]	; (8009e04 <__pow5mult+0xac>)
 8009d8e:	481e      	ldr	r0, [pc, #120]	; (8009e08 <__pow5mult+0xb0>)
 8009d90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d94:	f000 fc0e 	bl	800a5b4 <__assert_func>
 8009d98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d9c:	6004      	str	r4, [r0, #0]
 8009d9e:	60c4      	str	r4, [r0, #12]
 8009da0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009da4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009da8:	b94c      	cbnz	r4, 8009dbe <__pow5mult+0x66>
 8009daa:	f240 2171 	movw	r1, #625	; 0x271
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7ff ff12 	bl	8009bd8 <__i2b>
 8009db4:	2300      	movs	r3, #0
 8009db6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dba:	4604      	mov	r4, r0
 8009dbc:	6003      	str	r3, [r0, #0]
 8009dbe:	f04f 0900 	mov.w	r9, #0
 8009dc2:	07eb      	lsls	r3, r5, #31
 8009dc4:	d50a      	bpl.n	8009ddc <__pow5mult+0x84>
 8009dc6:	4639      	mov	r1, r7
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7ff ff1a 	bl	8009c04 <__multiply>
 8009dd0:	4639      	mov	r1, r7
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7ff fe47 	bl	8009a68 <_Bfree>
 8009dda:	4647      	mov	r7, r8
 8009ddc:	106d      	asrs	r5, r5, #1
 8009dde:	d00b      	beq.n	8009df8 <__pow5mult+0xa0>
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	b938      	cbnz	r0, 8009df4 <__pow5mult+0x9c>
 8009de4:	4622      	mov	r2, r4
 8009de6:	4621      	mov	r1, r4
 8009de8:	4630      	mov	r0, r6
 8009dea:	f7ff ff0b 	bl	8009c04 <__multiply>
 8009dee:	6020      	str	r0, [r4, #0]
 8009df0:	f8c0 9000 	str.w	r9, [r0]
 8009df4:	4604      	mov	r4, r0
 8009df6:	e7e4      	b.n	8009dc2 <__pow5mult+0x6a>
 8009df8:	4638      	mov	r0, r7
 8009dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dfe:	bf00      	nop
 8009e00:	0800b500 	.word	0x0800b500
 8009e04:	0800b32e 	.word	0x0800b32e
 8009e08:	0800b3b1 	.word	0x0800b3b1

08009e0c <__lshift>:
 8009e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e10:	460c      	mov	r4, r1
 8009e12:	6849      	ldr	r1, [r1, #4]
 8009e14:	6923      	ldr	r3, [r4, #16]
 8009e16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e1a:	68a3      	ldr	r3, [r4, #8]
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	4691      	mov	r9, r2
 8009e20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e24:	f108 0601 	add.w	r6, r8, #1
 8009e28:	42b3      	cmp	r3, r6
 8009e2a:	db0b      	blt.n	8009e44 <__lshift+0x38>
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	f7ff fddb 	bl	80099e8 <_Balloc>
 8009e32:	4605      	mov	r5, r0
 8009e34:	b948      	cbnz	r0, 8009e4a <__lshift+0x3e>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4b2a      	ldr	r3, [pc, #168]	; (8009ee4 <__lshift+0xd8>)
 8009e3a:	482b      	ldr	r0, [pc, #172]	; (8009ee8 <__lshift+0xdc>)
 8009e3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e40:	f000 fbb8 	bl	800a5b4 <__assert_func>
 8009e44:	3101      	adds	r1, #1
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	e7ee      	b.n	8009e28 <__lshift+0x1c>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f100 0114 	add.w	r1, r0, #20
 8009e50:	f100 0210 	add.w	r2, r0, #16
 8009e54:	4618      	mov	r0, r3
 8009e56:	4553      	cmp	r3, sl
 8009e58:	db37      	blt.n	8009eca <__lshift+0xbe>
 8009e5a:	6920      	ldr	r0, [r4, #16]
 8009e5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e60:	f104 0314 	add.w	r3, r4, #20
 8009e64:	f019 091f 	ands.w	r9, r9, #31
 8009e68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e70:	d02f      	beq.n	8009ed2 <__lshift+0xc6>
 8009e72:	f1c9 0e20 	rsb	lr, r9, #32
 8009e76:	468a      	mov	sl, r1
 8009e78:	f04f 0c00 	mov.w	ip, #0
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	fa02 f209 	lsl.w	r2, r2, r9
 8009e82:	ea42 020c 	orr.w	r2, r2, ip
 8009e86:	f84a 2b04 	str.w	r2, [sl], #4
 8009e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e8e:	4298      	cmp	r0, r3
 8009e90:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e94:	d8f2      	bhi.n	8009e7c <__lshift+0x70>
 8009e96:	1b03      	subs	r3, r0, r4
 8009e98:	3b15      	subs	r3, #21
 8009e9a:	f023 0303 	bic.w	r3, r3, #3
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	f104 0215 	add.w	r2, r4, #21
 8009ea4:	4290      	cmp	r0, r2
 8009ea6:	bf38      	it	cc
 8009ea8:	2304      	movcc	r3, #4
 8009eaa:	f841 c003 	str.w	ip, [r1, r3]
 8009eae:	f1bc 0f00 	cmp.w	ip, #0
 8009eb2:	d001      	beq.n	8009eb8 <__lshift+0xac>
 8009eb4:	f108 0602 	add.w	r6, r8, #2
 8009eb8:	3e01      	subs	r6, #1
 8009eba:	4638      	mov	r0, r7
 8009ebc:	612e      	str	r6, [r5, #16]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	f7ff fdd2 	bl	8009a68 <_Bfree>
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eca:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ece:	3301      	adds	r3, #1
 8009ed0:	e7c1      	b.n	8009e56 <__lshift+0x4a>
 8009ed2:	3904      	subs	r1, #4
 8009ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009edc:	4298      	cmp	r0, r3
 8009ede:	d8f9      	bhi.n	8009ed4 <__lshift+0xc8>
 8009ee0:	e7ea      	b.n	8009eb8 <__lshift+0xac>
 8009ee2:	bf00      	nop
 8009ee4:	0800b3a0 	.word	0x0800b3a0
 8009ee8:	0800b3b1 	.word	0x0800b3b1

08009eec <__mcmp>:
 8009eec:	b530      	push	{r4, r5, lr}
 8009eee:	6902      	ldr	r2, [r0, #16]
 8009ef0:	690c      	ldr	r4, [r1, #16]
 8009ef2:	1b12      	subs	r2, r2, r4
 8009ef4:	d10e      	bne.n	8009f14 <__mcmp+0x28>
 8009ef6:	f100 0314 	add.w	r3, r0, #20
 8009efa:	3114      	adds	r1, #20
 8009efc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f0c:	42a5      	cmp	r5, r4
 8009f0e:	d003      	beq.n	8009f18 <__mcmp+0x2c>
 8009f10:	d305      	bcc.n	8009f1e <__mcmp+0x32>
 8009f12:	2201      	movs	r2, #1
 8009f14:	4610      	mov	r0, r2
 8009f16:	bd30      	pop	{r4, r5, pc}
 8009f18:	4283      	cmp	r3, r0
 8009f1a:	d3f3      	bcc.n	8009f04 <__mcmp+0x18>
 8009f1c:	e7fa      	b.n	8009f14 <__mcmp+0x28>
 8009f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f22:	e7f7      	b.n	8009f14 <__mcmp+0x28>

08009f24 <__mdiff>:
 8009f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	460c      	mov	r4, r1
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4690      	mov	r8, r2
 8009f32:	f7ff ffdb 	bl	8009eec <__mcmp>
 8009f36:	1e05      	subs	r5, r0, #0
 8009f38:	d110      	bne.n	8009f5c <__mdiff+0x38>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7ff fd53 	bl	80099e8 <_Balloc>
 8009f42:	b930      	cbnz	r0, 8009f52 <__mdiff+0x2e>
 8009f44:	4b3a      	ldr	r3, [pc, #232]	; (800a030 <__mdiff+0x10c>)
 8009f46:	4602      	mov	r2, r0
 8009f48:	f240 2132 	movw	r1, #562	; 0x232
 8009f4c:	4839      	ldr	r0, [pc, #228]	; (800a034 <__mdiff+0x110>)
 8009f4e:	f000 fb31 	bl	800a5b4 <__assert_func>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5c:	bfa4      	itt	ge
 8009f5e:	4643      	movge	r3, r8
 8009f60:	46a0      	movge	r8, r4
 8009f62:	4630      	mov	r0, r6
 8009f64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f68:	bfa6      	itte	ge
 8009f6a:	461c      	movge	r4, r3
 8009f6c:	2500      	movge	r5, #0
 8009f6e:	2501      	movlt	r5, #1
 8009f70:	f7ff fd3a 	bl	80099e8 <_Balloc>
 8009f74:	b920      	cbnz	r0, 8009f80 <__mdiff+0x5c>
 8009f76:	4b2e      	ldr	r3, [pc, #184]	; (800a030 <__mdiff+0x10c>)
 8009f78:	4602      	mov	r2, r0
 8009f7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f7e:	e7e5      	b.n	8009f4c <__mdiff+0x28>
 8009f80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f84:	6926      	ldr	r6, [r4, #16]
 8009f86:	60c5      	str	r5, [r0, #12]
 8009f88:	f104 0914 	add.w	r9, r4, #20
 8009f8c:	f108 0514 	add.w	r5, r8, #20
 8009f90:	f100 0e14 	add.w	lr, r0, #20
 8009f94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f9c:	f108 0210 	add.w	r2, r8, #16
 8009fa0:	46f2      	mov	sl, lr
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fa8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fac:	fa1f f883 	uxth.w	r8, r3
 8009fb0:	fa11 f18b 	uxtah	r1, r1, fp
 8009fb4:	0c1b      	lsrs	r3, r3, #16
 8009fb6:	eba1 0808 	sub.w	r8, r1, r8
 8009fba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fc2:	fa1f f888 	uxth.w	r8, r8
 8009fc6:	1419      	asrs	r1, r3, #16
 8009fc8:	454e      	cmp	r6, r9
 8009fca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fce:	f84a 3b04 	str.w	r3, [sl], #4
 8009fd2:	d8e7      	bhi.n	8009fa4 <__mdiff+0x80>
 8009fd4:	1b33      	subs	r3, r6, r4
 8009fd6:	3b15      	subs	r3, #21
 8009fd8:	f023 0303 	bic.w	r3, r3, #3
 8009fdc:	3304      	adds	r3, #4
 8009fde:	3415      	adds	r4, #21
 8009fe0:	42a6      	cmp	r6, r4
 8009fe2:	bf38      	it	cc
 8009fe4:	2304      	movcc	r3, #4
 8009fe6:	441d      	add	r5, r3
 8009fe8:	4473      	add	r3, lr
 8009fea:	469e      	mov	lr, r3
 8009fec:	462e      	mov	r6, r5
 8009fee:	4566      	cmp	r6, ip
 8009ff0:	d30e      	bcc.n	800a010 <__mdiff+0xec>
 8009ff2:	f10c 0203 	add.w	r2, ip, #3
 8009ff6:	1b52      	subs	r2, r2, r5
 8009ff8:	f022 0203 	bic.w	r2, r2, #3
 8009ffc:	3d03      	subs	r5, #3
 8009ffe:	45ac      	cmp	ip, r5
 800a000:	bf38      	it	cc
 800a002:	2200      	movcc	r2, #0
 800a004:	441a      	add	r2, r3
 800a006:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a00a:	b17b      	cbz	r3, 800a02c <__mdiff+0x108>
 800a00c:	6107      	str	r7, [r0, #16]
 800a00e:	e7a3      	b.n	8009f58 <__mdiff+0x34>
 800a010:	f856 8b04 	ldr.w	r8, [r6], #4
 800a014:	fa11 f288 	uxtah	r2, r1, r8
 800a018:	1414      	asrs	r4, r2, #16
 800a01a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a01e:	b292      	uxth	r2, r2
 800a020:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a024:	f84e 2b04 	str.w	r2, [lr], #4
 800a028:	1421      	asrs	r1, r4, #16
 800a02a:	e7e0      	b.n	8009fee <__mdiff+0xca>
 800a02c:	3f01      	subs	r7, #1
 800a02e:	e7ea      	b.n	800a006 <__mdiff+0xe2>
 800a030:	0800b3a0 	.word	0x0800b3a0
 800a034:	0800b3b1 	.word	0x0800b3b1

0800a038 <__d2b>:
 800a038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	4689      	mov	r9, r1
 800a03e:	2101      	movs	r1, #1
 800a040:	ec57 6b10 	vmov	r6, r7, d0
 800a044:	4690      	mov	r8, r2
 800a046:	f7ff fccf 	bl	80099e8 <_Balloc>
 800a04a:	4604      	mov	r4, r0
 800a04c:	b930      	cbnz	r0, 800a05c <__d2b+0x24>
 800a04e:	4602      	mov	r2, r0
 800a050:	4b25      	ldr	r3, [pc, #148]	; (800a0e8 <__d2b+0xb0>)
 800a052:	4826      	ldr	r0, [pc, #152]	; (800a0ec <__d2b+0xb4>)
 800a054:	f240 310a 	movw	r1, #778	; 0x30a
 800a058:	f000 faac 	bl	800a5b4 <__assert_func>
 800a05c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a060:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a064:	bb35      	cbnz	r5, 800a0b4 <__d2b+0x7c>
 800a066:	2e00      	cmp	r6, #0
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	d028      	beq.n	800a0be <__d2b+0x86>
 800a06c:	4668      	mov	r0, sp
 800a06e:	9600      	str	r6, [sp, #0]
 800a070:	f7ff fd82 	bl	8009b78 <__lo0bits>
 800a074:	9900      	ldr	r1, [sp, #0]
 800a076:	b300      	cbz	r0, 800a0ba <__d2b+0x82>
 800a078:	9a01      	ldr	r2, [sp, #4]
 800a07a:	f1c0 0320 	rsb	r3, r0, #32
 800a07e:	fa02 f303 	lsl.w	r3, r2, r3
 800a082:	430b      	orrs	r3, r1
 800a084:	40c2      	lsrs	r2, r0
 800a086:	6163      	str	r3, [r4, #20]
 800a088:	9201      	str	r2, [sp, #4]
 800a08a:	9b01      	ldr	r3, [sp, #4]
 800a08c:	61a3      	str	r3, [r4, #24]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bf14      	ite	ne
 800a092:	2202      	movne	r2, #2
 800a094:	2201      	moveq	r2, #1
 800a096:	6122      	str	r2, [r4, #16]
 800a098:	b1d5      	cbz	r5, 800a0d0 <__d2b+0x98>
 800a09a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a09e:	4405      	add	r5, r0
 800a0a0:	f8c9 5000 	str.w	r5, [r9]
 800a0a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0a8:	f8c8 0000 	str.w	r0, [r8]
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	b003      	add	sp, #12
 800a0b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0b8:	e7d5      	b.n	800a066 <__d2b+0x2e>
 800a0ba:	6161      	str	r1, [r4, #20]
 800a0bc:	e7e5      	b.n	800a08a <__d2b+0x52>
 800a0be:	a801      	add	r0, sp, #4
 800a0c0:	f7ff fd5a 	bl	8009b78 <__lo0bits>
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	6163      	str	r3, [r4, #20]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	6122      	str	r2, [r4, #16]
 800a0cc:	3020      	adds	r0, #32
 800a0ce:	e7e3      	b.n	800a098 <__d2b+0x60>
 800a0d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0d8:	f8c9 0000 	str.w	r0, [r9]
 800a0dc:	6918      	ldr	r0, [r3, #16]
 800a0de:	f7ff fd2b 	bl	8009b38 <__hi0bits>
 800a0e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0e6:	e7df      	b.n	800a0a8 <__d2b+0x70>
 800a0e8:	0800b3a0 	.word	0x0800b3a0
 800a0ec:	0800b3b1 	.word	0x0800b3b1

0800a0f0 <_calloc_r>:
 800a0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f2:	fba1 2402 	umull	r2, r4, r1, r2
 800a0f6:	b94c      	cbnz	r4, 800a10c <_calloc_r+0x1c>
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	9201      	str	r2, [sp, #4]
 800a0fc:	f000 f87a 	bl	800a1f4 <_malloc_r>
 800a100:	9a01      	ldr	r2, [sp, #4]
 800a102:	4605      	mov	r5, r0
 800a104:	b930      	cbnz	r0, 800a114 <_calloc_r+0x24>
 800a106:	4628      	mov	r0, r5
 800a108:	b003      	add	sp, #12
 800a10a:	bd30      	pop	{r4, r5, pc}
 800a10c:	220c      	movs	r2, #12
 800a10e:	6002      	str	r2, [r0, #0]
 800a110:	2500      	movs	r5, #0
 800a112:	e7f8      	b.n	800a106 <_calloc_r+0x16>
 800a114:	4621      	mov	r1, r4
 800a116:	f7fe f8b5 	bl	8008284 <memset>
 800a11a:	e7f4      	b.n	800a106 <_calloc_r+0x16>

0800a11c <_free_r>:
 800a11c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a11e:	2900      	cmp	r1, #0
 800a120:	d044      	beq.n	800a1ac <_free_r+0x90>
 800a122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a126:	9001      	str	r0, [sp, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f1a1 0404 	sub.w	r4, r1, #4
 800a12e:	bfb8      	it	lt
 800a130:	18e4      	addlt	r4, r4, r3
 800a132:	f000 fa9b 	bl	800a66c <__malloc_lock>
 800a136:	4a1e      	ldr	r2, [pc, #120]	; (800a1b0 <_free_r+0x94>)
 800a138:	9801      	ldr	r0, [sp, #4]
 800a13a:	6813      	ldr	r3, [r2, #0]
 800a13c:	b933      	cbnz	r3, 800a14c <_free_r+0x30>
 800a13e:	6063      	str	r3, [r4, #4]
 800a140:	6014      	str	r4, [r2, #0]
 800a142:	b003      	add	sp, #12
 800a144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a148:	f000 ba96 	b.w	800a678 <__malloc_unlock>
 800a14c:	42a3      	cmp	r3, r4
 800a14e:	d908      	bls.n	800a162 <_free_r+0x46>
 800a150:	6825      	ldr	r5, [r4, #0]
 800a152:	1961      	adds	r1, r4, r5
 800a154:	428b      	cmp	r3, r1
 800a156:	bf01      	itttt	eq
 800a158:	6819      	ldreq	r1, [r3, #0]
 800a15a:	685b      	ldreq	r3, [r3, #4]
 800a15c:	1949      	addeq	r1, r1, r5
 800a15e:	6021      	streq	r1, [r4, #0]
 800a160:	e7ed      	b.n	800a13e <_free_r+0x22>
 800a162:	461a      	mov	r2, r3
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	b10b      	cbz	r3, 800a16c <_free_r+0x50>
 800a168:	42a3      	cmp	r3, r4
 800a16a:	d9fa      	bls.n	800a162 <_free_r+0x46>
 800a16c:	6811      	ldr	r1, [r2, #0]
 800a16e:	1855      	adds	r5, r2, r1
 800a170:	42a5      	cmp	r5, r4
 800a172:	d10b      	bne.n	800a18c <_free_r+0x70>
 800a174:	6824      	ldr	r4, [r4, #0]
 800a176:	4421      	add	r1, r4
 800a178:	1854      	adds	r4, r2, r1
 800a17a:	42a3      	cmp	r3, r4
 800a17c:	6011      	str	r1, [r2, #0]
 800a17e:	d1e0      	bne.n	800a142 <_free_r+0x26>
 800a180:	681c      	ldr	r4, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	6053      	str	r3, [r2, #4]
 800a186:	4421      	add	r1, r4
 800a188:	6011      	str	r1, [r2, #0]
 800a18a:	e7da      	b.n	800a142 <_free_r+0x26>
 800a18c:	d902      	bls.n	800a194 <_free_r+0x78>
 800a18e:	230c      	movs	r3, #12
 800a190:	6003      	str	r3, [r0, #0]
 800a192:	e7d6      	b.n	800a142 <_free_r+0x26>
 800a194:	6825      	ldr	r5, [r4, #0]
 800a196:	1961      	adds	r1, r4, r5
 800a198:	428b      	cmp	r3, r1
 800a19a:	bf04      	itt	eq
 800a19c:	6819      	ldreq	r1, [r3, #0]
 800a19e:	685b      	ldreq	r3, [r3, #4]
 800a1a0:	6063      	str	r3, [r4, #4]
 800a1a2:	bf04      	itt	eq
 800a1a4:	1949      	addeq	r1, r1, r5
 800a1a6:	6021      	streq	r1, [r4, #0]
 800a1a8:	6054      	str	r4, [r2, #4]
 800a1aa:	e7ca      	b.n	800a142 <_free_r+0x26>
 800a1ac:	b003      	add	sp, #12
 800a1ae:	bd30      	pop	{r4, r5, pc}
 800a1b0:	20000414 	.word	0x20000414

0800a1b4 <sbrk_aligned>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	4e0e      	ldr	r6, [pc, #56]	; (800a1f0 <sbrk_aligned+0x3c>)
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	6831      	ldr	r1, [r6, #0]
 800a1bc:	4605      	mov	r5, r0
 800a1be:	b911      	cbnz	r1, 800a1c6 <sbrk_aligned+0x12>
 800a1c0:	f000 f9e8 	bl	800a594 <_sbrk_r>
 800a1c4:	6030      	str	r0, [r6, #0]
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f000 f9e3 	bl	800a594 <_sbrk_r>
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	d00a      	beq.n	800a1e8 <sbrk_aligned+0x34>
 800a1d2:	1cc4      	adds	r4, r0, #3
 800a1d4:	f024 0403 	bic.w	r4, r4, #3
 800a1d8:	42a0      	cmp	r0, r4
 800a1da:	d007      	beq.n	800a1ec <sbrk_aligned+0x38>
 800a1dc:	1a21      	subs	r1, r4, r0
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 f9d8 	bl	800a594 <_sbrk_r>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d101      	bne.n	800a1ec <sbrk_aligned+0x38>
 800a1e8:	f04f 34ff 	mov.w	r4, #4294967295
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	20000418 	.word	0x20000418

0800a1f4 <_malloc_r>:
 800a1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f8:	1ccd      	adds	r5, r1, #3
 800a1fa:	f025 0503 	bic.w	r5, r5, #3
 800a1fe:	3508      	adds	r5, #8
 800a200:	2d0c      	cmp	r5, #12
 800a202:	bf38      	it	cc
 800a204:	250c      	movcc	r5, #12
 800a206:	2d00      	cmp	r5, #0
 800a208:	4607      	mov	r7, r0
 800a20a:	db01      	blt.n	800a210 <_malloc_r+0x1c>
 800a20c:	42a9      	cmp	r1, r5
 800a20e:	d905      	bls.n	800a21c <_malloc_r+0x28>
 800a210:	230c      	movs	r3, #12
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	2600      	movs	r6, #0
 800a216:	4630      	mov	r0, r6
 800a218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a21c:	4e2e      	ldr	r6, [pc, #184]	; (800a2d8 <_malloc_r+0xe4>)
 800a21e:	f000 fa25 	bl	800a66c <__malloc_lock>
 800a222:	6833      	ldr	r3, [r6, #0]
 800a224:	461c      	mov	r4, r3
 800a226:	bb34      	cbnz	r4, 800a276 <_malloc_r+0x82>
 800a228:	4629      	mov	r1, r5
 800a22a:	4638      	mov	r0, r7
 800a22c:	f7ff ffc2 	bl	800a1b4 <sbrk_aligned>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	4604      	mov	r4, r0
 800a234:	d14d      	bne.n	800a2d2 <_malloc_r+0xde>
 800a236:	6834      	ldr	r4, [r6, #0]
 800a238:	4626      	mov	r6, r4
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	d140      	bne.n	800a2c0 <_malloc_r+0xcc>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	4631      	mov	r1, r6
 800a242:	4638      	mov	r0, r7
 800a244:	eb04 0803 	add.w	r8, r4, r3
 800a248:	f000 f9a4 	bl	800a594 <_sbrk_r>
 800a24c:	4580      	cmp	r8, r0
 800a24e:	d13a      	bne.n	800a2c6 <_malloc_r+0xd2>
 800a250:	6821      	ldr	r1, [r4, #0]
 800a252:	3503      	adds	r5, #3
 800a254:	1a6d      	subs	r5, r5, r1
 800a256:	f025 0503 	bic.w	r5, r5, #3
 800a25a:	3508      	adds	r5, #8
 800a25c:	2d0c      	cmp	r5, #12
 800a25e:	bf38      	it	cc
 800a260:	250c      	movcc	r5, #12
 800a262:	4629      	mov	r1, r5
 800a264:	4638      	mov	r0, r7
 800a266:	f7ff ffa5 	bl	800a1b4 <sbrk_aligned>
 800a26a:	3001      	adds	r0, #1
 800a26c:	d02b      	beq.n	800a2c6 <_malloc_r+0xd2>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	442b      	add	r3, r5
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	e00e      	b.n	800a294 <_malloc_r+0xa0>
 800a276:	6822      	ldr	r2, [r4, #0]
 800a278:	1b52      	subs	r2, r2, r5
 800a27a:	d41e      	bmi.n	800a2ba <_malloc_r+0xc6>
 800a27c:	2a0b      	cmp	r2, #11
 800a27e:	d916      	bls.n	800a2ae <_malloc_r+0xba>
 800a280:	1961      	adds	r1, r4, r5
 800a282:	42a3      	cmp	r3, r4
 800a284:	6025      	str	r5, [r4, #0]
 800a286:	bf18      	it	ne
 800a288:	6059      	strne	r1, [r3, #4]
 800a28a:	6863      	ldr	r3, [r4, #4]
 800a28c:	bf08      	it	eq
 800a28e:	6031      	streq	r1, [r6, #0]
 800a290:	5162      	str	r2, [r4, r5]
 800a292:	604b      	str	r3, [r1, #4]
 800a294:	4638      	mov	r0, r7
 800a296:	f104 060b 	add.w	r6, r4, #11
 800a29a:	f000 f9ed 	bl	800a678 <__malloc_unlock>
 800a29e:	f026 0607 	bic.w	r6, r6, #7
 800a2a2:	1d23      	adds	r3, r4, #4
 800a2a4:	1af2      	subs	r2, r6, r3
 800a2a6:	d0b6      	beq.n	800a216 <_malloc_r+0x22>
 800a2a8:	1b9b      	subs	r3, r3, r6
 800a2aa:	50a3      	str	r3, [r4, r2]
 800a2ac:	e7b3      	b.n	800a216 <_malloc_r+0x22>
 800a2ae:	6862      	ldr	r2, [r4, #4]
 800a2b0:	42a3      	cmp	r3, r4
 800a2b2:	bf0c      	ite	eq
 800a2b4:	6032      	streq	r2, [r6, #0]
 800a2b6:	605a      	strne	r2, [r3, #4]
 800a2b8:	e7ec      	b.n	800a294 <_malloc_r+0xa0>
 800a2ba:	4623      	mov	r3, r4
 800a2bc:	6864      	ldr	r4, [r4, #4]
 800a2be:	e7b2      	b.n	800a226 <_malloc_r+0x32>
 800a2c0:	4634      	mov	r4, r6
 800a2c2:	6876      	ldr	r6, [r6, #4]
 800a2c4:	e7b9      	b.n	800a23a <_malloc_r+0x46>
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	603b      	str	r3, [r7, #0]
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	f000 f9d4 	bl	800a678 <__malloc_unlock>
 800a2d0:	e7a1      	b.n	800a216 <_malloc_r+0x22>
 800a2d2:	6025      	str	r5, [r4, #0]
 800a2d4:	e7de      	b.n	800a294 <_malloc_r+0xa0>
 800a2d6:	bf00      	nop
 800a2d8:	20000414 	.word	0x20000414

0800a2dc <__ssputs_r>:
 800a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e0:	688e      	ldr	r6, [r1, #8]
 800a2e2:	429e      	cmp	r6, r3
 800a2e4:	4682      	mov	sl, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	4690      	mov	r8, r2
 800a2ea:	461f      	mov	r7, r3
 800a2ec:	d838      	bhi.n	800a360 <__ssputs_r+0x84>
 800a2ee:	898a      	ldrh	r2, [r1, #12]
 800a2f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2f4:	d032      	beq.n	800a35c <__ssputs_r+0x80>
 800a2f6:	6825      	ldr	r5, [r4, #0]
 800a2f8:	6909      	ldr	r1, [r1, #16]
 800a2fa:	eba5 0901 	sub.w	r9, r5, r1
 800a2fe:	6965      	ldr	r5, [r4, #20]
 800a300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a308:	3301      	adds	r3, #1
 800a30a:	444b      	add	r3, r9
 800a30c:	106d      	asrs	r5, r5, #1
 800a30e:	429d      	cmp	r5, r3
 800a310:	bf38      	it	cc
 800a312:	461d      	movcc	r5, r3
 800a314:	0553      	lsls	r3, r2, #21
 800a316:	d531      	bpl.n	800a37c <__ssputs_r+0xa0>
 800a318:	4629      	mov	r1, r5
 800a31a:	f7ff ff6b 	bl	800a1f4 <_malloc_r>
 800a31e:	4606      	mov	r6, r0
 800a320:	b950      	cbnz	r0, 800a338 <__ssputs_r+0x5c>
 800a322:	230c      	movs	r3, #12
 800a324:	f8ca 3000 	str.w	r3, [sl]
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	f04f 30ff 	mov.w	r0, #4294967295
 800a334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a338:	6921      	ldr	r1, [r4, #16]
 800a33a:	464a      	mov	r2, r9
 800a33c:	f7ff fb46 	bl	80099cc <memcpy>
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a34a:	81a3      	strh	r3, [r4, #12]
 800a34c:	6126      	str	r6, [r4, #16]
 800a34e:	6165      	str	r5, [r4, #20]
 800a350:	444e      	add	r6, r9
 800a352:	eba5 0509 	sub.w	r5, r5, r9
 800a356:	6026      	str	r6, [r4, #0]
 800a358:	60a5      	str	r5, [r4, #8]
 800a35a:	463e      	mov	r6, r7
 800a35c:	42be      	cmp	r6, r7
 800a35e:	d900      	bls.n	800a362 <__ssputs_r+0x86>
 800a360:	463e      	mov	r6, r7
 800a362:	6820      	ldr	r0, [r4, #0]
 800a364:	4632      	mov	r2, r6
 800a366:	4641      	mov	r1, r8
 800a368:	f000 f966 	bl	800a638 <memmove>
 800a36c:	68a3      	ldr	r3, [r4, #8]
 800a36e:	1b9b      	subs	r3, r3, r6
 800a370:	60a3      	str	r3, [r4, #8]
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	4433      	add	r3, r6
 800a376:	6023      	str	r3, [r4, #0]
 800a378:	2000      	movs	r0, #0
 800a37a:	e7db      	b.n	800a334 <__ssputs_r+0x58>
 800a37c:	462a      	mov	r2, r5
 800a37e:	f000 f981 	bl	800a684 <_realloc_r>
 800a382:	4606      	mov	r6, r0
 800a384:	2800      	cmp	r0, #0
 800a386:	d1e1      	bne.n	800a34c <__ssputs_r+0x70>
 800a388:	6921      	ldr	r1, [r4, #16]
 800a38a:	4650      	mov	r0, sl
 800a38c:	f7ff fec6 	bl	800a11c <_free_r>
 800a390:	e7c7      	b.n	800a322 <__ssputs_r+0x46>
	...

0800a394 <_svfiprintf_r>:
 800a394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a398:	4698      	mov	r8, r3
 800a39a:	898b      	ldrh	r3, [r1, #12]
 800a39c:	061b      	lsls	r3, r3, #24
 800a39e:	b09d      	sub	sp, #116	; 0x74
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	4614      	mov	r4, r2
 800a3a6:	d50e      	bpl.n	800a3c6 <_svfiprintf_r+0x32>
 800a3a8:	690b      	ldr	r3, [r1, #16]
 800a3aa:	b963      	cbnz	r3, 800a3c6 <_svfiprintf_r+0x32>
 800a3ac:	2140      	movs	r1, #64	; 0x40
 800a3ae:	f7ff ff21 	bl	800a1f4 <_malloc_r>
 800a3b2:	6028      	str	r0, [r5, #0]
 800a3b4:	6128      	str	r0, [r5, #16]
 800a3b6:	b920      	cbnz	r0, 800a3c2 <_svfiprintf_r+0x2e>
 800a3b8:	230c      	movs	r3, #12
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	e0d1      	b.n	800a566 <_svfiprintf_r+0x1d2>
 800a3c2:	2340      	movs	r3, #64	; 0x40
 800a3c4:	616b      	str	r3, [r5, #20]
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ca:	2320      	movs	r3, #32
 800a3cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3d4:	2330      	movs	r3, #48	; 0x30
 800a3d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a580 <_svfiprintf_r+0x1ec>
 800a3da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3de:	f04f 0901 	mov.w	r9, #1
 800a3e2:	4623      	mov	r3, r4
 800a3e4:	469a      	mov	sl, r3
 800a3e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ea:	b10a      	cbz	r2, 800a3f0 <_svfiprintf_r+0x5c>
 800a3ec:	2a25      	cmp	r2, #37	; 0x25
 800a3ee:	d1f9      	bne.n	800a3e4 <_svfiprintf_r+0x50>
 800a3f0:	ebba 0b04 	subs.w	fp, sl, r4
 800a3f4:	d00b      	beq.n	800a40e <_svfiprintf_r+0x7a>
 800a3f6:	465b      	mov	r3, fp
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff ff6d 	bl	800a2dc <__ssputs_r>
 800a402:	3001      	adds	r0, #1
 800a404:	f000 80aa 	beq.w	800a55c <_svfiprintf_r+0x1c8>
 800a408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a40a:	445a      	add	r2, fp
 800a40c:	9209      	str	r2, [sp, #36]	; 0x24
 800a40e:	f89a 3000 	ldrb.w	r3, [sl]
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 80a2 	beq.w	800a55c <_svfiprintf_r+0x1c8>
 800a418:	2300      	movs	r3, #0
 800a41a:	f04f 32ff 	mov.w	r2, #4294967295
 800a41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a422:	f10a 0a01 	add.w	sl, sl, #1
 800a426:	9304      	str	r3, [sp, #16]
 800a428:	9307      	str	r3, [sp, #28]
 800a42a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a42e:	931a      	str	r3, [sp, #104]	; 0x68
 800a430:	4654      	mov	r4, sl
 800a432:	2205      	movs	r2, #5
 800a434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a438:	4851      	ldr	r0, [pc, #324]	; (800a580 <_svfiprintf_r+0x1ec>)
 800a43a:	f7f5 fef1 	bl	8000220 <memchr>
 800a43e:	9a04      	ldr	r2, [sp, #16]
 800a440:	b9d8      	cbnz	r0, 800a47a <_svfiprintf_r+0xe6>
 800a442:	06d0      	lsls	r0, r2, #27
 800a444:	bf44      	itt	mi
 800a446:	2320      	movmi	r3, #32
 800a448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a44c:	0711      	lsls	r1, r2, #28
 800a44e:	bf44      	itt	mi
 800a450:	232b      	movmi	r3, #43	; 0x2b
 800a452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a456:	f89a 3000 	ldrb.w	r3, [sl]
 800a45a:	2b2a      	cmp	r3, #42	; 0x2a
 800a45c:	d015      	beq.n	800a48a <_svfiprintf_r+0xf6>
 800a45e:	9a07      	ldr	r2, [sp, #28]
 800a460:	4654      	mov	r4, sl
 800a462:	2000      	movs	r0, #0
 800a464:	f04f 0c0a 	mov.w	ip, #10
 800a468:	4621      	mov	r1, r4
 800a46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a46e:	3b30      	subs	r3, #48	; 0x30
 800a470:	2b09      	cmp	r3, #9
 800a472:	d94e      	bls.n	800a512 <_svfiprintf_r+0x17e>
 800a474:	b1b0      	cbz	r0, 800a4a4 <_svfiprintf_r+0x110>
 800a476:	9207      	str	r2, [sp, #28]
 800a478:	e014      	b.n	800a4a4 <_svfiprintf_r+0x110>
 800a47a:	eba0 0308 	sub.w	r3, r0, r8
 800a47e:	fa09 f303 	lsl.w	r3, r9, r3
 800a482:	4313      	orrs	r3, r2
 800a484:	9304      	str	r3, [sp, #16]
 800a486:	46a2      	mov	sl, r4
 800a488:	e7d2      	b.n	800a430 <_svfiprintf_r+0x9c>
 800a48a:	9b03      	ldr	r3, [sp, #12]
 800a48c:	1d19      	adds	r1, r3, #4
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	9103      	str	r1, [sp, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	bfbb      	ittet	lt
 800a496:	425b      	neglt	r3, r3
 800a498:	f042 0202 	orrlt.w	r2, r2, #2
 800a49c:	9307      	strge	r3, [sp, #28]
 800a49e:	9307      	strlt	r3, [sp, #28]
 800a4a0:	bfb8      	it	lt
 800a4a2:	9204      	strlt	r2, [sp, #16]
 800a4a4:	7823      	ldrb	r3, [r4, #0]
 800a4a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a4a8:	d10c      	bne.n	800a4c4 <_svfiprintf_r+0x130>
 800a4aa:	7863      	ldrb	r3, [r4, #1]
 800a4ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ae:	d135      	bne.n	800a51c <_svfiprintf_r+0x188>
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	1d1a      	adds	r2, r3, #4
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	9203      	str	r2, [sp, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bfb8      	it	lt
 800a4bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4c0:	3402      	adds	r4, #2
 800a4c2:	9305      	str	r3, [sp, #20]
 800a4c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a590 <_svfiprintf_r+0x1fc>
 800a4c8:	7821      	ldrb	r1, [r4, #0]
 800a4ca:	2203      	movs	r2, #3
 800a4cc:	4650      	mov	r0, sl
 800a4ce:	f7f5 fea7 	bl	8000220 <memchr>
 800a4d2:	b140      	cbz	r0, 800a4e6 <_svfiprintf_r+0x152>
 800a4d4:	2340      	movs	r3, #64	; 0x40
 800a4d6:	eba0 000a 	sub.w	r0, r0, sl
 800a4da:	fa03 f000 	lsl.w	r0, r3, r0
 800a4de:	9b04      	ldr	r3, [sp, #16]
 800a4e0:	4303      	orrs	r3, r0
 800a4e2:	3401      	adds	r4, #1
 800a4e4:	9304      	str	r3, [sp, #16]
 800a4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ea:	4826      	ldr	r0, [pc, #152]	; (800a584 <_svfiprintf_r+0x1f0>)
 800a4ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4f0:	2206      	movs	r2, #6
 800a4f2:	f7f5 fe95 	bl	8000220 <memchr>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d038      	beq.n	800a56c <_svfiprintf_r+0x1d8>
 800a4fa:	4b23      	ldr	r3, [pc, #140]	; (800a588 <_svfiprintf_r+0x1f4>)
 800a4fc:	bb1b      	cbnz	r3, 800a546 <_svfiprintf_r+0x1b2>
 800a4fe:	9b03      	ldr	r3, [sp, #12]
 800a500:	3307      	adds	r3, #7
 800a502:	f023 0307 	bic.w	r3, r3, #7
 800a506:	3308      	adds	r3, #8
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50c:	4433      	add	r3, r6
 800a50e:	9309      	str	r3, [sp, #36]	; 0x24
 800a510:	e767      	b.n	800a3e2 <_svfiprintf_r+0x4e>
 800a512:	fb0c 3202 	mla	r2, ip, r2, r3
 800a516:	460c      	mov	r4, r1
 800a518:	2001      	movs	r0, #1
 800a51a:	e7a5      	b.n	800a468 <_svfiprintf_r+0xd4>
 800a51c:	2300      	movs	r3, #0
 800a51e:	3401      	adds	r4, #1
 800a520:	9305      	str	r3, [sp, #20]
 800a522:	4619      	mov	r1, r3
 800a524:	f04f 0c0a 	mov.w	ip, #10
 800a528:	4620      	mov	r0, r4
 800a52a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a52e:	3a30      	subs	r2, #48	; 0x30
 800a530:	2a09      	cmp	r2, #9
 800a532:	d903      	bls.n	800a53c <_svfiprintf_r+0x1a8>
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0c5      	beq.n	800a4c4 <_svfiprintf_r+0x130>
 800a538:	9105      	str	r1, [sp, #20]
 800a53a:	e7c3      	b.n	800a4c4 <_svfiprintf_r+0x130>
 800a53c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a540:	4604      	mov	r4, r0
 800a542:	2301      	movs	r3, #1
 800a544:	e7f0      	b.n	800a528 <_svfiprintf_r+0x194>
 800a546:	ab03      	add	r3, sp, #12
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	462a      	mov	r2, r5
 800a54c:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <_svfiprintf_r+0x1f8>)
 800a54e:	a904      	add	r1, sp, #16
 800a550:	4638      	mov	r0, r7
 800a552:	f7fd ff3f 	bl	80083d4 <_printf_float>
 800a556:	1c42      	adds	r2, r0, #1
 800a558:	4606      	mov	r6, r0
 800a55a:	d1d6      	bne.n	800a50a <_svfiprintf_r+0x176>
 800a55c:	89ab      	ldrh	r3, [r5, #12]
 800a55e:	065b      	lsls	r3, r3, #25
 800a560:	f53f af2c 	bmi.w	800a3bc <_svfiprintf_r+0x28>
 800a564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a566:	b01d      	add	sp, #116	; 0x74
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	ab03      	add	r3, sp, #12
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	462a      	mov	r2, r5
 800a572:	4b06      	ldr	r3, [pc, #24]	; (800a58c <_svfiprintf_r+0x1f8>)
 800a574:	a904      	add	r1, sp, #16
 800a576:	4638      	mov	r0, r7
 800a578:	f7fe f9d0 	bl	800891c <_printf_i>
 800a57c:	e7eb      	b.n	800a556 <_svfiprintf_r+0x1c2>
 800a57e:	bf00      	nop
 800a580:	0800b50c 	.word	0x0800b50c
 800a584:	0800b516 	.word	0x0800b516
 800a588:	080083d5 	.word	0x080083d5
 800a58c:	0800a2dd 	.word	0x0800a2dd
 800a590:	0800b512 	.word	0x0800b512

0800a594 <_sbrk_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	4d06      	ldr	r5, [pc, #24]	; (800a5b0 <_sbrk_r+0x1c>)
 800a598:	2300      	movs	r3, #0
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	602b      	str	r3, [r5, #0]
 800a5a0:	f7f8 fb0a 	bl	8002bb8 <_sbrk>
 800a5a4:	1c43      	adds	r3, r0, #1
 800a5a6:	d102      	bne.n	800a5ae <_sbrk_r+0x1a>
 800a5a8:	682b      	ldr	r3, [r5, #0]
 800a5aa:	b103      	cbz	r3, 800a5ae <_sbrk_r+0x1a>
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	bd38      	pop	{r3, r4, r5, pc}
 800a5b0:	2000041c 	.word	0x2000041c

0800a5b4 <__assert_func>:
 800a5b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5b6:	4614      	mov	r4, r2
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <__assert_func+0x2c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4605      	mov	r5, r0
 800a5c0:	68d8      	ldr	r0, [r3, #12]
 800a5c2:	b14c      	cbz	r4, 800a5d8 <__assert_func+0x24>
 800a5c4:	4b07      	ldr	r3, [pc, #28]	; (800a5e4 <__assert_func+0x30>)
 800a5c6:	9100      	str	r1, [sp, #0]
 800a5c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5cc:	4906      	ldr	r1, [pc, #24]	; (800a5e8 <__assert_func+0x34>)
 800a5ce:	462b      	mov	r3, r5
 800a5d0:	f000 f80e 	bl	800a5f0 <fiprintf>
 800a5d4:	f000 faac 	bl	800ab30 <abort>
 800a5d8:	4b04      	ldr	r3, [pc, #16]	; (800a5ec <__assert_func+0x38>)
 800a5da:	461c      	mov	r4, r3
 800a5dc:	e7f3      	b.n	800a5c6 <__assert_func+0x12>
 800a5de:	bf00      	nop
 800a5e0:	20000070 	.word	0x20000070
 800a5e4:	0800b51d 	.word	0x0800b51d
 800a5e8:	0800b52a 	.word	0x0800b52a
 800a5ec:	0800b558 	.word	0x0800b558

0800a5f0 <fiprintf>:
 800a5f0:	b40e      	push	{r1, r2, r3}
 800a5f2:	b503      	push	{r0, r1, lr}
 800a5f4:	4601      	mov	r1, r0
 800a5f6:	ab03      	add	r3, sp, #12
 800a5f8:	4805      	ldr	r0, [pc, #20]	; (800a610 <fiprintf+0x20>)
 800a5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fe:	6800      	ldr	r0, [r0, #0]
 800a600:	9301      	str	r3, [sp, #4]
 800a602:	f000 f897 	bl	800a734 <_vfiprintf_r>
 800a606:	b002      	add	sp, #8
 800a608:	f85d eb04 	ldr.w	lr, [sp], #4
 800a60c:	b003      	add	sp, #12
 800a60e:	4770      	bx	lr
 800a610:	20000070 	.word	0x20000070

0800a614 <__ascii_mbtowc>:
 800a614:	b082      	sub	sp, #8
 800a616:	b901      	cbnz	r1, 800a61a <__ascii_mbtowc+0x6>
 800a618:	a901      	add	r1, sp, #4
 800a61a:	b142      	cbz	r2, 800a62e <__ascii_mbtowc+0x1a>
 800a61c:	b14b      	cbz	r3, 800a632 <__ascii_mbtowc+0x1e>
 800a61e:	7813      	ldrb	r3, [r2, #0]
 800a620:	600b      	str	r3, [r1, #0]
 800a622:	7812      	ldrb	r2, [r2, #0]
 800a624:	1e10      	subs	r0, r2, #0
 800a626:	bf18      	it	ne
 800a628:	2001      	movne	r0, #1
 800a62a:	b002      	add	sp, #8
 800a62c:	4770      	bx	lr
 800a62e:	4610      	mov	r0, r2
 800a630:	e7fb      	b.n	800a62a <__ascii_mbtowc+0x16>
 800a632:	f06f 0001 	mvn.w	r0, #1
 800a636:	e7f8      	b.n	800a62a <__ascii_mbtowc+0x16>

0800a638 <memmove>:
 800a638:	4288      	cmp	r0, r1
 800a63a:	b510      	push	{r4, lr}
 800a63c:	eb01 0402 	add.w	r4, r1, r2
 800a640:	d902      	bls.n	800a648 <memmove+0x10>
 800a642:	4284      	cmp	r4, r0
 800a644:	4623      	mov	r3, r4
 800a646:	d807      	bhi.n	800a658 <memmove+0x20>
 800a648:	1e43      	subs	r3, r0, #1
 800a64a:	42a1      	cmp	r1, r4
 800a64c:	d008      	beq.n	800a660 <memmove+0x28>
 800a64e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a652:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a656:	e7f8      	b.n	800a64a <memmove+0x12>
 800a658:	4402      	add	r2, r0
 800a65a:	4601      	mov	r1, r0
 800a65c:	428a      	cmp	r2, r1
 800a65e:	d100      	bne.n	800a662 <memmove+0x2a>
 800a660:	bd10      	pop	{r4, pc}
 800a662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a66a:	e7f7      	b.n	800a65c <memmove+0x24>

0800a66c <__malloc_lock>:
 800a66c:	4801      	ldr	r0, [pc, #4]	; (800a674 <__malloc_lock+0x8>)
 800a66e:	f000 bc1f 	b.w	800aeb0 <__retarget_lock_acquire_recursive>
 800a672:	bf00      	nop
 800a674:	20000420 	.word	0x20000420

0800a678 <__malloc_unlock>:
 800a678:	4801      	ldr	r0, [pc, #4]	; (800a680 <__malloc_unlock+0x8>)
 800a67a:	f000 bc1a 	b.w	800aeb2 <__retarget_lock_release_recursive>
 800a67e:	bf00      	nop
 800a680:	20000420 	.word	0x20000420

0800a684 <_realloc_r>:
 800a684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a688:	4680      	mov	r8, r0
 800a68a:	4614      	mov	r4, r2
 800a68c:	460e      	mov	r6, r1
 800a68e:	b921      	cbnz	r1, 800a69a <_realloc_r+0x16>
 800a690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a694:	4611      	mov	r1, r2
 800a696:	f7ff bdad 	b.w	800a1f4 <_malloc_r>
 800a69a:	b92a      	cbnz	r2, 800a6a8 <_realloc_r+0x24>
 800a69c:	f7ff fd3e 	bl	800a11c <_free_r>
 800a6a0:	4625      	mov	r5, r4
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a8:	f000 fc6a 	bl	800af80 <_malloc_usable_size_r>
 800a6ac:	4284      	cmp	r4, r0
 800a6ae:	4607      	mov	r7, r0
 800a6b0:	d802      	bhi.n	800a6b8 <_realloc_r+0x34>
 800a6b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6b6:	d812      	bhi.n	800a6de <_realloc_r+0x5a>
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	f7ff fd9a 	bl	800a1f4 <_malloc_r>
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d0ed      	beq.n	800a6a2 <_realloc_r+0x1e>
 800a6c6:	42bc      	cmp	r4, r7
 800a6c8:	4622      	mov	r2, r4
 800a6ca:	4631      	mov	r1, r6
 800a6cc:	bf28      	it	cs
 800a6ce:	463a      	movcs	r2, r7
 800a6d0:	f7ff f97c 	bl	80099cc <memcpy>
 800a6d4:	4631      	mov	r1, r6
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	f7ff fd20 	bl	800a11c <_free_r>
 800a6dc:	e7e1      	b.n	800a6a2 <_realloc_r+0x1e>
 800a6de:	4635      	mov	r5, r6
 800a6e0:	e7df      	b.n	800a6a2 <_realloc_r+0x1e>

0800a6e2 <__sfputc_r>:
 800a6e2:	6893      	ldr	r3, [r2, #8]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	b410      	push	{r4}
 800a6ea:	6093      	str	r3, [r2, #8]
 800a6ec:	da08      	bge.n	800a700 <__sfputc_r+0x1e>
 800a6ee:	6994      	ldr	r4, [r2, #24]
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	db01      	blt.n	800a6f8 <__sfputc_r+0x16>
 800a6f4:	290a      	cmp	r1, #10
 800a6f6:	d103      	bne.n	800a700 <__sfputc_r+0x1e>
 800a6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6fc:	f000 b94a 	b.w	800a994 <__swbuf_r>
 800a700:	6813      	ldr	r3, [r2, #0]
 800a702:	1c58      	adds	r0, r3, #1
 800a704:	6010      	str	r0, [r2, #0]
 800a706:	7019      	strb	r1, [r3, #0]
 800a708:	4608      	mov	r0, r1
 800a70a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <__sfputs_r>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	4606      	mov	r6, r0
 800a714:	460f      	mov	r7, r1
 800a716:	4614      	mov	r4, r2
 800a718:	18d5      	adds	r5, r2, r3
 800a71a:	42ac      	cmp	r4, r5
 800a71c:	d101      	bne.n	800a722 <__sfputs_r+0x12>
 800a71e:	2000      	movs	r0, #0
 800a720:	e007      	b.n	800a732 <__sfputs_r+0x22>
 800a722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a726:	463a      	mov	r2, r7
 800a728:	4630      	mov	r0, r6
 800a72a:	f7ff ffda 	bl	800a6e2 <__sfputc_r>
 800a72e:	1c43      	adds	r3, r0, #1
 800a730:	d1f3      	bne.n	800a71a <__sfputs_r+0xa>
 800a732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a734 <_vfiprintf_r>:
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	460d      	mov	r5, r1
 800a73a:	b09d      	sub	sp, #116	; 0x74
 800a73c:	4614      	mov	r4, r2
 800a73e:	4698      	mov	r8, r3
 800a740:	4606      	mov	r6, r0
 800a742:	b118      	cbz	r0, 800a74c <_vfiprintf_r+0x18>
 800a744:	6983      	ldr	r3, [r0, #24]
 800a746:	b90b      	cbnz	r3, 800a74c <_vfiprintf_r+0x18>
 800a748:	f000 fb14 	bl	800ad74 <__sinit>
 800a74c:	4b89      	ldr	r3, [pc, #548]	; (800a974 <_vfiprintf_r+0x240>)
 800a74e:	429d      	cmp	r5, r3
 800a750:	d11b      	bne.n	800a78a <_vfiprintf_r+0x56>
 800a752:	6875      	ldr	r5, [r6, #4]
 800a754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a756:	07d9      	lsls	r1, r3, #31
 800a758:	d405      	bmi.n	800a766 <_vfiprintf_r+0x32>
 800a75a:	89ab      	ldrh	r3, [r5, #12]
 800a75c:	059a      	lsls	r2, r3, #22
 800a75e:	d402      	bmi.n	800a766 <_vfiprintf_r+0x32>
 800a760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a762:	f000 fba5 	bl	800aeb0 <__retarget_lock_acquire_recursive>
 800a766:	89ab      	ldrh	r3, [r5, #12]
 800a768:	071b      	lsls	r3, r3, #28
 800a76a:	d501      	bpl.n	800a770 <_vfiprintf_r+0x3c>
 800a76c:	692b      	ldr	r3, [r5, #16]
 800a76e:	b9eb      	cbnz	r3, 800a7ac <_vfiprintf_r+0x78>
 800a770:	4629      	mov	r1, r5
 800a772:	4630      	mov	r0, r6
 800a774:	f000 f96e 	bl	800aa54 <__swsetup_r>
 800a778:	b1c0      	cbz	r0, 800a7ac <_vfiprintf_r+0x78>
 800a77a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a77c:	07dc      	lsls	r4, r3, #31
 800a77e:	d50e      	bpl.n	800a79e <_vfiprintf_r+0x6a>
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	b01d      	add	sp, #116	; 0x74
 800a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78a:	4b7b      	ldr	r3, [pc, #492]	; (800a978 <_vfiprintf_r+0x244>)
 800a78c:	429d      	cmp	r5, r3
 800a78e:	d101      	bne.n	800a794 <_vfiprintf_r+0x60>
 800a790:	68b5      	ldr	r5, [r6, #8]
 800a792:	e7df      	b.n	800a754 <_vfiprintf_r+0x20>
 800a794:	4b79      	ldr	r3, [pc, #484]	; (800a97c <_vfiprintf_r+0x248>)
 800a796:	429d      	cmp	r5, r3
 800a798:	bf08      	it	eq
 800a79a:	68f5      	ldreq	r5, [r6, #12]
 800a79c:	e7da      	b.n	800a754 <_vfiprintf_r+0x20>
 800a79e:	89ab      	ldrh	r3, [r5, #12]
 800a7a0:	0598      	lsls	r0, r3, #22
 800a7a2:	d4ed      	bmi.n	800a780 <_vfiprintf_r+0x4c>
 800a7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a6:	f000 fb84 	bl	800aeb2 <__retarget_lock_release_recursive>
 800a7aa:	e7e9      	b.n	800a780 <_vfiprintf_r+0x4c>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ba:	2330      	movs	r3, #48	; 0x30
 800a7bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a980 <_vfiprintf_r+0x24c>
 800a7c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c4:	f04f 0901 	mov.w	r9, #1
 800a7c8:	4623      	mov	r3, r4
 800a7ca:	469a      	mov	sl, r3
 800a7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7d0:	b10a      	cbz	r2, 800a7d6 <_vfiprintf_r+0xa2>
 800a7d2:	2a25      	cmp	r2, #37	; 0x25
 800a7d4:	d1f9      	bne.n	800a7ca <_vfiprintf_r+0x96>
 800a7d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7da:	d00b      	beq.n	800a7f4 <_vfiprintf_r+0xc0>
 800a7dc:	465b      	mov	r3, fp
 800a7de:	4622      	mov	r2, r4
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7ff ff94 	bl	800a710 <__sfputs_r>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	f000 80aa 	beq.w	800a942 <_vfiprintf_r+0x20e>
 800a7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f0:	445a      	add	r2, fp
 800a7f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 80a2 	beq.w	800a942 <_vfiprintf_r+0x20e>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a808:	f10a 0a01 	add.w	sl, sl, #1
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	9307      	str	r3, [sp, #28]
 800a810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a814:	931a      	str	r3, [sp, #104]	; 0x68
 800a816:	4654      	mov	r4, sl
 800a818:	2205      	movs	r2, #5
 800a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81e:	4858      	ldr	r0, [pc, #352]	; (800a980 <_vfiprintf_r+0x24c>)
 800a820:	f7f5 fcfe 	bl	8000220 <memchr>
 800a824:	9a04      	ldr	r2, [sp, #16]
 800a826:	b9d8      	cbnz	r0, 800a860 <_vfiprintf_r+0x12c>
 800a828:	06d1      	lsls	r1, r2, #27
 800a82a:	bf44      	itt	mi
 800a82c:	2320      	movmi	r3, #32
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a832:	0713      	lsls	r3, r2, #28
 800a834:	bf44      	itt	mi
 800a836:	232b      	movmi	r3, #43	; 0x2b
 800a838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a83c:	f89a 3000 	ldrb.w	r3, [sl]
 800a840:	2b2a      	cmp	r3, #42	; 0x2a
 800a842:	d015      	beq.n	800a870 <_vfiprintf_r+0x13c>
 800a844:	9a07      	ldr	r2, [sp, #28]
 800a846:	4654      	mov	r4, sl
 800a848:	2000      	movs	r0, #0
 800a84a:	f04f 0c0a 	mov.w	ip, #10
 800a84e:	4621      	mov	r1, r4
 800a850:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a854:	3b30      	subs	r3, #48	; 0x30
 800a856:	2b09      	cmp	r3, #9
 800a858:	d94e      	bls.n	800a8f8 <_vfiprintf_r+0x1c4>
 800a85a:	b1b0      	cbz	r0, 800a88a <_vfiprintf_r+0x156>
 800a85c:	9207      	str	r2, [sp, #28]
 800a85e:	e014      	b.n	800a88a <_vfiprintf_r+0x156>
 800a860:	eba0 0308 	sub.w	r3, r0, r8
 800a864:	fa09 f303 	lsl.w	r3, r9, r3
 800a868:	4313      	orrs	r3, r2
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	46a2      	mov	sl, r4
 800a86e:	e7d2      	b.n	800a816 <_vfiprintf_r+0xe2>
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	1d19      	adds	r1, r3, #4
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	9103      	str	r1, [sp, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bfbb      	ittet	lt
 800a87c:	425b      	neglt	r3, r3
 800a87e:	f042 0202 	orrlt.w	r2, r2, #2
 800a882:	9307      	strge	r3, [sp, #28]
 800a884:	9307      	strlt	r3, [sp, #28]
 800a886:	bfb8      	it	lt
 800a888:	9204      	strlt	r2, [sp, #16]
 800a88a:	7823      	ldrb	r3, [r4, #0]
 800a88c:	2b2e      	cmp	r3, #46	; 0x2e
 800a88e:	d10c      	bne.n	800a8aa <_vfiprintf_r+0x176>
 800a890:	7863      	ldrb	r3, [r4, #1]
 800a892:	2b2a      	cmp	r3, #42	; 0x2a
 800a894:	d135      	bne.n	800a902 <_vfiprintf_r+0x1ce>
 800a896:	9b03      	ldr	r3, [sp, #12]
 800a898:	1d1a      	adds	r2, r3, #4
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	9203      	str	r2, [sp, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bfb8      	it	lt
 800a8a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8a6:	3402      	adds	r4, #2
 800a8a8:	9305      	str	r3, [sp, #20]
 800a8aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a990 <_vfiprintf_r+0x25c>
 800a8ae:	7821      	ldrb	r1, [r4, #0]
 800a8b0:	2203      	movs	r2, #3
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	f7f5 fcb4 	bl	8000220 <memchr>
 800a8b8:	b140      	cbz	r0, 800a8cc <_vfiprintf_r+0x198>
 800a8ba:	2340      	movs	r3, #64	; 0x40
 800a8bc:	eba0 000a 	sub.w	r0, r0, sl
 800a8c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	4303      	orrs	r3, r0
 800a8c8:	3401      	adds	r4, #1
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d0:	482c      	ldr	r0, [pc, #176]	; (800a984 <_vfiprintf_r+0x250>)
 800a8d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8d6:	2206      	movs	r2, #6
 800a8d8:	f7f5 fca2 	bl	8000220 <memchr>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d03f      	beq.n	800a960 <_vfiprintf_r+0x22c>
 800a8e0:	4b29      	ldr	r3, [pc, #164]	; (800a988 <_vfiprintf_r+0x254>)
 800a8e2:	bb1b      	cbnz	r3, 800a92c <_vfiprintf_r+0x1f8>
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	3307      	adds	r3, #7
 800a8e8:	f023 0307 	bic.w	r3, r3, #7
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f2:	443b      	add	r3, r7
 800a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f6:	e767      	b.n	800a7c8 <_vfiprintf_r+0x94>
 800a8f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	2001      	movs	r0, #1
 800a900:	e7a5      	b.n	800a84e <_vfiprintf_r+0x11a>
 800a902:	2300      	movs	r3, #0
 800a904:	3401      	adds	r4, #1
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	4619      	mov	r1, r3
 800a90a:	f04f 0c0a 	mov.w	ip, #10
 800a90e:	4620      	mov	r0, r4
 800a910:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a914:	3a30      	subs	r2, #48	; 0x30
 800a916:	2a09      	cmp	r2, #9
 800a918:	d903      	bls.n	800a922 <_vfiprintf_r+0x1ee>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d0c5      	beq.n	800a8aa <_vfiprintf_r+0x176>
 800a91e:	9105      	str	r1, [sp, #20]
 800a920:	e7c3      	b.n	800a8aa <_vfiprintf_r+0x176>
 800a922:	fb0c 2101 	mla	r1, ip, r1, r2
 800a926:	4604      	mov	r4, r0
 800a928:	2301      	movs	r3, #1
 800a92a:	e7f0      	b.n	800a90e <_vfiprintf_r+0x1da>
 800a92c:	ab03      	add	r3, sp, #12
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	462a      	mov	r2, r5
 800a932:	4b16      	ldr	r3, [pc, #88]	; (800a98c <_vfiprintf_r+0x258>)
 800a934:	a904      	add	r1, sp, #16
 800a936:	4630      	mov	r0, r6
 800a938:	f7fd fd4c 	bl	80083d4 <_printf_float>
 800a93c:	4607      	mov	r7, r0
 800a93e:	1c78      	adds	r0, r7, #1
 800a940:	d1d6      	bne.n	800a8f0 <_vfiprintf_r+0x1bc>
 800a942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a944:	07d9      	lsls	r1, r3, #31
 800a946:	d405      	bmi.n	800a954 <_vfiprintf_r+0x220>
 800a948:	89ab      	ldrh	r3, [r5, #12]
 800a94a:	059a      	lsls	r2, r3, #22
 800a94c:	d402      	bmi.n	800a954 <_vfiprintf_r+0x220>
 800a94e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a950:	f000 faaf 	bl	800aeb2 <__retarget_lock_release_recursive>
 800a954:	89ab      	ldrh	r3, [r5, #12]
 800a956:	065b      	lsls	r3, r3, #25
 800a958:	f53f af12 	bmi.w	800a780 <_vfiprintf_r+0x4c>
 800a95c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a95e:	e711      	b.n	800a784 <_vfiprintf_r+0x50>
 800a960:	ab03      	add	r3, sp, #12
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	462a      	mov	r2, r5
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <_vfiprintf_r+0x258>)
 800a968:	a904      	add	r1, sp, #16
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7fd ffd6 	bl	800891c <_printf_i>
 800a970:	e7e4      	b.n	800a93c <_vfiprintf_r+0x208>
 800a972:	bf00      	nop
 800a974:	0800b584 	.word	0x0800b584
 800a978:	0800b5a4 	.word	0x0800b5a4
 800a97c:	0800b564 	.word	0x0800b564
 800a980:	0800b50c 	.word	0x0800b50c
 800a984:	0800b516 	.word	0x0800b516
 800a988:	080083d5 	.word	0x080083d5
 800a98c:	0800a711 	.word	0x0800a711
 800a990:	0800b512 	.word	0x0800b512

0800a994 <__swbuf_r>:
 800a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a996:	460e      	mov	r6, r1
 800a998:	4614      	mov	r4, r2
 800a99a:	4605      	mov	r5, r0
 800a99c:	b118      	cbz	r0, 800a9a6 <__swbuf_r+0x12>
 800a99e:	6983      	ldr	r3, [r0, #24]
 800a9a0:	b90b      	cbnz	r3, 800a9a6 <__swbuf_r+0x12>
 800a9a2:	f000 f9e7 	bl	800ad74 <__sinit>
 800a9a6:	4b21      	ldr	r3, [pc, #132]	; (800aa2c <__swbuf_r+0x98>)
 800a9a8:	429c      	cmp	r4, r3
 800a9aa:	d12b      	bne.n	800aa04 <__swbuf_r+0x70>
 800a9ac:	686c      	ldr	r4, [r5, #4]
 800a9ae:	69a3      	ldr	r3, [r4, #24]
 800a9b0:	60a3      	str	r3, [r4, #8]
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	071a      	lsls	r2, r3, #28
 800a9b6:	d52f      	bpl.n	800aa18 <__swbuf_r+0x84>
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	b36b      	cbz	r3, 800aa18 <__swbuf_r+0x84>
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	1ac0      	subs	r0, r0, r3
 800a9c2:	6963      	ldr	r3, [r4, #20]
 800a9c4:	b2f6      	uxtb	r6, r6
 800a9c6:	4283      	cmp	r3, r0
 800a9c8:	4637      	mov	r7, r6
 800a9ca:	dc04      	bgt.n	800a9d6 <__swbuf_r+0x42>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f000 f93c 	bl	800ac4c <_fflush_r>
 800a9d4:	bb30      	cbnz	r0, 800aa24 <__swbuf_r+0x90>
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	60a3      	str	r3, [r4, #8]
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	6022      	str	r2, [r4, #0]
 800a9e2:	701e      	strb	r6, [r3, #0]
 800a9e4:	6963      	ldr	r3, [r4, #20]
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	4283      	cmp	r3, r0
 800a9ea:	d004      	beq.n	800a9f6 <__swbuf_r+0x62>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	07db      	lsls	r3, r3, #31
 800a9f0:	d506      	bpl.n	800aa00 <__swbuf_r+0x6c>
 800a9f2:	2e0a      	cmp	r6, #10
 800a9f4:	d104      	bne.n	800aa00 <__swbuf_r+0x6c>
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	f000 f927 	bl	800ac4c <_fflush_r>
 800a9fe:	b988      	cbnz	r0, 800aa24 <__swbuf_r+0x90>
 800aa00:	4638      	mov	r0, r7
 800aa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <__swbuf_r+0x9c>)
 800aa06:	429c      	cmp	r4, r3
 800aa08:	d101      	bne.n	800aa0e <__swbuf_r+0x7a>
 800aa0a:	68ac      	ldr	r4, [r5, #8]
 800aa0c:	e7cf      	b.n	800a9ae <__swbuf_r+0x1a>
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <__swbuf_r+0xa0>)
 800aa10:	429c      	cmp	r4, r3
 800aa12:	bf08      	it	eq
 800aa14:	68ec      	ldreq	r4, [r5, #12]
 800aa16:	e7ca      	b.n	800a9ae <__swbuf_r+0x1a>
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f000 f81a 	bl	800aa54 <__swsetup_r>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d0cb      	beq.n	800a9bc <__swbuf_r+0x28>
 800aa24:	f04f 37ff 	mov.w	r7, #4294967295
 800aa28:	e7ea      	b.n	800aa00 <__swbuf_r+0x6c>
 800aa2a:	bf00      	nop
 800aa2c:	0800b584 	.word	0x0800b584
 800aa30:	0800b5a4 	.word	0x0800b5a4
 800aa34:	0800b564 	.word	0x0800b564

0800aa38 <__ascii_wctomb>:
 800aa38:	b149      	cbz	r1, 800aa4e <__ascii_wctomb+0x16>
 800aa3a:	2aff      	cmp	r2, #255	; 0xff
 800aa3c:	bf85      	ittet	hi
 800aa3e:	238a      	movhi	r3, #138	; 0x8a
 800aa40:	6003      	strhi	r3, [r0, #0]
 800aa42:	700a      	strbls	r2, [r1, #0]
 800aa44:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa48:	bf98      	it	ls
 800aa4a:	2001      	movls	r0, #1
 800aa4c:	4770      	bx	lr
 800aa4e:	4608      	mov	r0, r1
 800aa50:	4770      	bx	lr
	...

0800aa54 <__swsetup_r>:
 800aa54:	4b32      	ldr	r3, [pc, #200]	; (800ab20 <__swsetup_r+0xcc>)
 800aa56:	b570      	push	{r4, r5, r6, lr}
 800aa58:	681d      	ldr	r5, [r3, #0]
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	b125      	cbz	r5, 800aa6a <__swsetup_r+0x16>
 800aa60:	69ab      	ldr	r3, [r5, #24]
 800aa62:	b913      	cbnz	r3, 800aa6a <__swsetup_r+0x16>
 800aa64:	4628      	mov	r0, r5
 800aa66:	f000 f985 	bl	800ad74 <__sinit>
 800aa6a:	4b2e      	ldr	r3, [pc, #184]	; (800ab24 <__swsetup_r+0xd0>)
 800aa6c:	429c      	cmp	r4, r3
 800aa6e:	d10f      	bne.n	800aa90 <__swsetup_r+0x3c>
 800aa70:	686c      	ldr	r4, [r5, #4]
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa78:	0719      	lsls	r1, r3, #28
 800aa7a:	d42c      	bmi.n	800aad6 <__swsetup_r+0x82>
 800aa7c:	06dd      	lsls	r5, r3, #27
 800aa7e:	d411      	bmi.n	800aaa4 <__swsetup_r+0x50>
 800aa80:	2309      	movs	r3, #9
 800aa82:	6033      	str	r3, [r6, #0]
 800aa84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8e:	e03e      	b.n	800ab0e <__swsetup_r+0xba>
 800aa90:	4b25      	ldr	r3, [pc, #148]	; (800ab28 <__swsetup_r+0xd4>)
 800aa92:	429c      	cmp	r4, r3
 800aa94:	d101      	bne.n	800aa9a <__swsetup_r+0x46>
 800aa96:	68ac      	ldr	r4, [r5, #8]
 800aa98:	e7eb      	b.n	800aa72 <__swsetup_r+0x1e>
 800aa9a:	4b24      	ldr	r3, [pc, #144]	; (800ab2c <__swsetup_r+0xd8>)
 800aa9c:	429c      	cmp	r4, r3
 800aa9e:	bf08      	it	eq
 800aaa0:	68ec      	ldreq	r4, [r5, #12]
 800aaa2:	e7e6      	b.n	800aa72 <__swsetup_r+0x1e>
 800aaa4:	0758      	lsls	r0, r3, #29
 800aaa6:	d512      	bpl.n	800aace <__swsetup_r+0x7a>
 800aaa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaaa:	b141      	cbz	r1, 800aabe <__swsetup_r+0x6a>
 800aaac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aab0:	4299      	cmp	r1, r3
 800aab2:	d002      	beq.n	800aaba <__swsetup_r+0x66>
 800aab4:	4630      	mov	r0, r6
 800aab6:	f7ff fb31 	bl	800a11c <_free_r>
 800aaba:	2300      	movs	r3, #0
 800aabc:	6363      	str	r3, [r4, #52]	; 0x34
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	2300      	movs	r3, #0
 800aac8:	6063      	str	r3, [r4, #4]
 800aaca:	6923      	ldr	r3, [r4, #16]
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	f043 0308 	orr.w	r3, r3, #8
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	6923      	ldr	r3, [r4, #16]
 800aad8:	b94b      	cbnz	r3, 800aaee <__swsetup_r+0x9a>
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aae4:	d003      	beq.n	800aaee <__swsetup_r+0x9a>
 800aae6:	4621      	mov	r1, r4
 800aae8:	4630      	mov	r0, r6
 800aaea:	f000 fa09 	bl	800af00 <__smakebuf_r>
 800aaee:	89a0      	ldrh	r0, [r4, #12]
 800aaf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaf4:	f010 0301 	ands.w	r3, r0, #1
 800aaf8:	d00a      	beq.n	800ab10 <__swsetup_r+0xbc>
 800aafa:	2300      	movs	r3, #0
 800aafc:	60a3      	str	r3, [r4, #8]
 800aafe:	6963      	ldr	r3, [r4, #20]
 800ab00:	425b      	negs	r3, r3
 800ab02:	61a3      	str	r3, [r4, #24]
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	b943      	cbnz	r3, 800ab1a <__swsetup_r+0xc6>
 800ab08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab0c:	d1ba      	bne.n	800aa84 <__swsetup_r+0x30>
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}
 800ab10:	0781      	lsls	r1, r0, #30
 800ab12:	bf58      	it	pl
 800ab14:	6963      	ldrpl	r3, [r4, #20]
 800ab16:	60a3      	str	r3, [r4, #8]
 800ab18:	e7f4      	b.n	800ab04 <__swsetup_r+0xb0>
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	e7f7      	b.n	800ab0e <__swsetup_r+0xba>
 800ab1e:	bf00      	nop
 800ab20:	20000070 	.word	0x20000070
 800ab24:	0800b584 	.word	0x0800b584
 800ab28:	0800b5a4 	.word	0x0800b5a4
 800ab2c:	0800b564 	.word	0x0800b564

0800ab30 <abort>:
 800ab30:	b508      	push	{r3, lr}
 800ab32:	2006      	movs	r0, #6
 800ab34:	f000 fa54 	bl	800afe0 <raise>
 800ab38:	2001      	movs	r0, #1
 800ab3a:	f7f7 ffc5 	bl	8002ac8 <_exit>
	...

0800ab40 <__sflush_r>:
 800ab40:	898a      	ldrh	r2, [r1, #12]
 800ab42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab46:	4605      	mov	r5, r0
 800ab48:	0710      	lsls	r0, r2, #28
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	d458      	bmi.n	800ac00 <__sflush_r+0xc0>
 800ab4e:	684b      	ldr	r3, [r1, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dc05      	bgt.n	800ab60 <__sflush_r+0x20>
 800ab54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dc02      	bgt.n	800ab60 <__sflush_r+0x20>
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab62:	2e00      	cmp	r6, #0
 800ab64:	d0f9      	beq.n	800ab5a <__sflush_r+0x1a>
 800ab66:	2300      	movs	r3, #0
 800ab68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab6c:	682f      	ldr	r7, [r5, #0]
 800ab6e:	602b      	str	r3, [r5, #0]
 800ab70:	d032      	beq.n	800abd8 <__sflush_r+0x98>
 800ab72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	075a      	lsls	r2, r3, #29
 800ab78:	d505      	bpl.n	800ab86 <__sflush_r+0x46>
 800ab7a:	6863      	ldr	r3, [r4, #4]
 800ab7c:	1ac0      	subs	r0, r0, r3
 800ab7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab80:	b10b      	cbz	r3, 800ab86 <__sflush_r+0x46>
 800ab82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab84:	1ac0      	subs	r0, r0, r3
 800ab86:	2300      	movs	r3, #0
 800ab88:	4602      	mov	r2, r0
 800ab8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab8c:	6a21      	ldr	r1, [r4, #32]
 800ab8e:	4628      	mov	r0, r5
 800ab90:	47b0      	blx	r6
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	d106      	bne.n	800aba6 <__sflush_r+0x66>
 800ab98:	6829      	ldr	r1, [r5, #0]
 800ab9a:	291d      	cmp	r1, #29
 800ab9c:	d82c      	bhi.n	800abf8 <__sflush_r+0xb8>
 800ab9e:	4a2a      	ldr	r2, [pc, #168]	; (800ac48 <__sflush_r+0x108>)
 800aba0:	40ca      	lsrs	r2, r1
 800aba2:	07d6      	lsls	r6, r2, #31
 800aba4:	d528      	bpl.n	800abf8 <__sflush_r+0xb8>
 800aba6:	2200      	movs	r2, #0
 800aba8:	6062      	str	r2, [r4, #4]
 800abaa:	04d9      	lsls	r1, r3, #19
 800abac:	6922      	ldr	r2, [r4, #16]
 800abae:	6022      	str	r2, [r4, #0]
 800abb0:	d504      	bpl.n	800abbc <__sflush_r+0x7c>
 800abb2:	1c42      	adds	r2, r0, #1
 800abb4:	d101      	bne.n	800abba <__sflush_r+0x7a>
 800abb6:	682b      	ldr	r3, [r5, #0]
 800abb8:	b903      	cbnz	r3, 800abbc <__sflush_r+0x7c>
 800abba:	6560      	str	r0, [r4, #84]	; 0x54
 800abbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abbe:	602f      	str	r7, [r5, #0]
 800abc0:	2900      	cmp	r1, #0
 800abc2:	d0ca      	beq.n	800ab5a <__sflush_r+0x1a>
 800abc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abc8:	4299      	cmp	r1, r3
 800abca:	d002      	beq.n	800abd2 <__sflush_r+0x92>
 800abcc:	4628      	mov	r0, r5
 800abce:	f7ff faa5 	bl	800a11c <_free_r>
 800abd2:	2000      	movs	r0, #0
 800abd4:	6360      	str	r0, [r4, #52]	; 0x34
 800abd6:	e7c1      	b.n	800ab5c <__sflush_r+0x1c>
 800abd8:	6a21      	ldr	r1, [r4, #32]
 800abda:	2301      	movs	r3, #1
 800abdc:	4628      	mov	r0, r5
 800abde:	47b0      	blx	r6
 800abe0:	1c41      	adds	r1, r0, #1
 800abe2:	d1c7      	bne.n	800ab74 <__sflush_r+0x34>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0c4      	beq.n	800ab74 <__sflush_r+0x34>
 800abea:	2b1d      	cmp	r3, #29
 800abec:	d001      	beq.n	800abf2 <__sflush_r+0xb2>
 800abee:	2b16      	cmp	r3, #22
 800abf0:	d101      	bne.n	800abf6 <__sflush_r+0xb6>
 800abf2:	602f      	str	r7, [r5, #0]
 800abf4:	e7b1      	b.n	800ab5a <__sflush_r+0x1a>
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	e7ad      	b.n	800ab5c <__sflush_r+0x1c>
 800ac00:	690f      	ldr	r7, [r1, #16]
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	d0a9      	beq.n	800ab5a <__sflush_r+0x1a>
 800ac06:	0793      	lsls	r3, r2, #30
 800ac08:	680e      	ldr	r6, [r1, #0]
 800ac0a:	bf08      	it	eq
 800ac0c:	694b      	ldreq	r3, [r1, #20]
 800ac0e:	600f      	str	r7, [r1, #0]
 800ac10:	bf18      	it	ne
 800ac12:	2300      	movne	r3, #0
 800ac14:	eba6 0807 	sub.w	r8, r6, r7
 800ac18:	608b      	str	r3, [r1, #8]
 800ac1a:	f1b8 0f00 	cmp.w	r8, #0
 800ac1e:	dd9c      	ble.n	800ab5a <__sflush_r+0x1a>
 800ac20:	6a21      	ldr	r1, [r4, #32]
 800ac22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac24:	4643      	mov	r3, r8
 800ac26:	463a      	mov	r2, r7
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b0      	blx	r6
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	dc06      	bgt.n	800ac3e <__sflush_r+0xfe>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac36:	81a3      	strh	r3, [r4, #12]
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3c:	e78e      	b.n	800ab5c <__sflush_r+0x1c>
 800ac3e:	4407      	add	r7, r0
 800ac40:	eba8 0800 	sub.w	r8, r8, r0
 800ac44:	e7e9      	b.n	800ac1a <__sflush_r+0xda>
 800ac46:	bf00      	nop
 800ac48:	20400001 	.word	0x20400001

0800ac4c <_fflush_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	690b      	ldr	r3, [r1, #16]
 800ac50:	4605      	mov	r5, r0
 800ac52:	460c      	mov	r4, r1
 800ac54:	b913      	cbnz	r3, 800ac5c <_fflush_r+0x10>
 800ac56:	2500      	movs	r5, #0
 800ac58:	4628      	mov	r0, r5
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	b118      	cbz	r0, 800ac66 <_fflush_r+0x1a>
 800ac5e:	6983      	ldr	r3, [r0, #24]
 800ac60:	b90b      	cbnz	r3, 800ac66 <_fflush_r+0x1a>
 800ac62:	f000 f887 	bl	800ad74 <__sinit>
 800ac66:	4b14      	ldr	r3, [pc, #80]	; (800acb8 <_fflush_r+0x6c>)
 800ac68:	429c      	cmp	r4, r3
 800ac6a:	d11b      	bne.n	800aca4 <_fflush_r+0x58>
 800ac6c:	686c      	ldr	r4, [r5, #4]
 800ac6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0ef      	beq.n	800ac56 <_fflush_r+0xa>
 800ac76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac78:	07d0      	lsls	r0, r2, #31
 800ac7a:	d404      	bmi.n	800ac86 <_fflush_r+0x3a>
 800ac7c:	0599      	lsls	r1, r3, #22
 800ac7e:	d402      	bmi.n	800ac86 <_fflush_r+0x3a>
 800ac80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac82:	f000 f915 	bl	800aeb0 <__retarget_lock_acquire_recursive>
 800ac86:	4628      	mov	r0, r5
 800ac88:	4621      	mov	r1, r4
 800ac8a:	f7ff ff59 	bl	800ab40 <__sflush_r>
 800ac8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac90:	07da      	lsls	r2, r3, #31
 800ac92:	4605      	mov	r5, r0
 800ac94:	d4e0      	bmi.n	800ac58 <_fflush_r+0xc>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	059b      	lsls	r3, r3, #22
 800ac9a:	d4dd      	bmi.n	800ac58 <_fflush_r+0xc>
 800ac9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac9e:	f000 f908 	bl	800aeb2 <__retarget_lock_release_recursive>
 800aca2:	e7d9      	b.n	800ac58 <_fflush_r+0xc>
 800aca4:	4b05      	ldr	r3, [pc, #20]	; (800acbc <_fflush_r+0x70>)
 800aca6:	429c      	cmp	r4, r3
 800aca8:	d101      	bne.n	800acae <_fflush_r+0x62>
 800acaa:	68ac      	ldr	r4, [r5, #8]
 800acac:	e7df      	b.n	800ac6e <_fflush_r+0x22>
 800acae:	4b04      	ldr	r3, [pc, #16]	; (800acc0 <_fflush_r+0x74>)
 800acb0:	429c      	cmp	r4, r3
 800acb2:	bf08      	it	eq
 800acb4:	68ec      	ldreq	r4, [r5, #12]
 800acb6:	e7da      	b.n	800ac6e <_fflush_r+0x22>
 800acb8:	0800b584 	.word	0x0800b584
 800acbc:	0800b5a4 	.word	0x0800b5a4
 800acc0:	0800b564 	.word	0x0800b564

0800acc4 <std>:
 800acc4:	2300      	movs	r3, #0
 800acc6:	b510      	push	{r4, lr}
 800acc8:	4604      	mov	r4, r0
 800acca:	e9c0 3300 	strd	r3, r3, [r0]
 800acce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acd2:	6083      	str	r3, [r0, #8]
 800acd4:	8181      	strh	r1, [r0, #12]
 800acd6:	6643      	str	r3, [r0, #100]	; 0x64
 800acd8:	81c2      	strh	r2, [r0, #14]
 800acda:	6183      	str	r3, [r0, #24]
 800acdc:	4619      	mov	r1, r3
 800acde:	2208      	movs	r2, #8
 800ace0:	305c      	adds	r0, #92	; 0x5c
 800ace2:	f7fd facf 	bl	8008284 <memset>
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <std+0x38>)
 800ace8:	6263      	str	r3, [r4, #36]	; 0x24
 800acea:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <std+0x3c>)
 800acec:	62a3      	str	r3, [r4, #40]	; 0x28
 800acee:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <std+0x40>)
 800acf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acf2:	4b05      	ldr	r3, [pc, #20]	; (800ad08 <std+0x44>)
 800acf4:	6224      	str	r4, [r4, #32]
 800acf6:	6323      	str	r3, [r4, #48]	; 0x30
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	0800b019 	.word	0x0800b019
 800ad00:	0800b03b 	.word	0x0800b03b
 800ad04:	0800b073 	.word	0x0800b073
 800ad08:	0800b097 	.word	0x0800b097

0800ad0c <_cleanup_r>:
 800ad0c:	4901      	ldr	r1, [pc, #4]	; (800ad14 <_cleanup_r+0x8>)
 800ad0e:	f000 b8af 	b.w	800ae70 <_fwalk_reent>
 800ad12:	bf00      	nop
 800ad14:	0800ac4d 	.word	0x0800ac4d

0800ad18 <__sfmoreglue>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	2268      	movs	r2, #104	; 0x68
 800ad1c:	1e4d      	subs	r5, r1, #1
 800ad1e:	4355      	muls	r5, r2
 800ad20:	460e      	mov	r6, r1
 800ad22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad26:	f7ff fa65 	bl	800a1f4 <_malloc_r>
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	b140      	cbz	r0, 800ad40 <__sfmoreglue+0x28>
 800ad2e:	2100      	movs	r1, #0
 800ad30:	e9c0 1600 	strd	r1, r6, [r0]
 800ad34:	300c      	adds	r0, #12
 800ad36:	60a0      	str	r0, [r4, #8]
 800ad38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad3c:	f7fd faa2 	bl	8008284 <memset>
 800ad40:	4620      	mov	r0, r4
 800ad42:	bd70      	pop	{r4, r5, r6, pc}

0800ad44 <__sfp_lock_acquire>:
 800ad44:	4801      	ldr	r0, [pc, #4]	; (800ad4c <__sfp_lock_acquire+0x8>)
 800ad46:	f000 b8b3 	b.w	800aeb0 <__retarget_lock_acquire_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	20000421 	.word	0x20000421

0800ad50 <__sfp_lock_release>:
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <__sfp_lock_release+0x8>)
 800ad52:	f000 b8ae 	b.w	800aeb2 <__retarget_lock_release_recursive>
 800ad56:	bf00      	nop
 800ad58:	20000421 	.word	0x20000421

0800ad5c <__sinit_lock_acquire>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <__sinit_lock_acquire+0x8>)
 800ad5e:	f000 b8a7 	b.w	800aeb0 <__retarget_lock_acquire_recursive>
 800ad62:	bf00      	nop
 800ad64:	20000422 	.word	0x20000422

0800ad68 <__sinit_lock_release>:
 800ad68:	4801      	ldr	r0, [pc, #4]	; (800ad70 <__sinit_lock_release+0x8>)
 800ad6a:	f000 b8a2 	b.w	800aeb2 <__retarget_lock_release_recursive>
 800ad6e:	bf00      	nop
 800ad70:	20000422 	.word	0x20000422

0800ad74 <__sinit>:
 800ad74:	b510      	push	{r4, lr}
 800ad76:	4604      	mov	r4, r0
 800ad78:	f7ff fff0 	bl	800ad5c <__sinit_lock_acquire>
 800ad7c:	69a3      	ldr	r3, [r4, #24]
 800ad7e:	b11b      	cbz	r3, 800ad88 <__sinit+0x14>
 800ad80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad84:	f7ff bff0 	b.w	800ad68 <__sinit_lock_release>
 800ad88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad8e:	4b13      	ldr	r3, [pc, #76]	; (800addc <__sinit+0x68>)
 800ad90:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <__sinit+0x6c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad96:	42a3      	cmp	r3, r4
 800ad98:	bf04      	itt	eq
 800ad9a:	2301      	moveq	r3, #1
 800ad9c:	61a3      	streq	r3, [r4, #24]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 f820 	bl	800ade4 <__sfp>
 800ada4:	6060      	str	r0, [r4, #4]
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 f81c 	bl	800ade4 <__sfp>
 800adac:	60a0      	str	r0, [r4, #8]
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 f818 	bl	800ade4 <__sfp>
 800adb4:	2200      	movs	r2, #0
 800adb6:	60e0      	str	r0, [r4, #12]
 800adb8:	2104      	movs	r1, #4
 800adba:	6860      	ldr	r0, [r4, #4]
 800adbc:	f7ff ff82 	bl	800acc4 <std>
 800adc0:	68a0      	ldr	r0, [r4, #8]
 800adc2:	2201      	movs	r2, #1
 800adc4:	2109      	movs	r1, #9
 800adc6:	f7ff ff7d 	bl	800acc4 <std>
 800adca:	68e0      	ldr	r0, [r4, #12]
 800adcc:	2202      	movs	r2, #2
 800adce:	2112      	movs	r1, #18
 800add0:	f7ff ff78 	bl	800acc4 <std>
 800add4:	2301      	movs	r3, #1
 800add6:	61a3      	str	r3, [r4, #24]
 800add8:	e7d2      	b.n	800ad80 <__sinit+0xc>
 800adda:	bf00      	nop
 800addc:	0800b1e8 	.word	0x0800b1e8
 800ade0:	0800ad0d 	.word	0x0800ad0d

0800ade4 <__sfp>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	4607      	mov	r7, r0
 800ade8:	f7ff ffac 	bl	800ad44 <__sfp_lock_acquire>
 800adec:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <__sfp+0x84>)
 800adee:	681e      	ldr	r6, [r3, #0]
 800adf0:	69b3      	ldr	r3, [r6, #24]
 800adf2:	b913      	cbnz	r3, 800adfa <__sfp+0x16>
 800adf4:	4630      	mov	r0, r6
 800adf6:	f7ff ffbd 	bl	800ad74 <__sinit>
 800adfa:	3648      	adds	r6, #72	; 0x48
 800adfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	d503      	bpl.n	800ae0c <__sfp+0x28>
 800ae04:	6833      	ldr	r3, [r6, #0]
 800ae06:	b30b      	cbz	r3, 800ae4c <__sfp+0x68>
 800ae08:	6836      	ldr	r6, [r6, #0]
 800ae0a:	e7f7      	b.n	800adfc <__sfp+0x18>
 800ae0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae10:	b9d5      	cbnz	r5, 800ae48 <__sfp+0x64>
 800ae12:	4b16      	ldr	r3, [pc, #88]	; (800ae6c <__sfp+0x88>)
 800ae14:	60e3      	str	r3, [r4, #12]
 800ae16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae1a:	6665      	str	r5, [r4, #100]	; 0x64
 800ae1c:	f000 f847 	bl	800aeae <__retarget_lock_init_recursive>
 800ae20:	f7ff ff96 	bl	800ad50 <__sfp_lock_release>
 800ae24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae2c:	6025      	str	r5, [r4, #0]
 800ae2e:	61a5      	str	r5, [r4, #24]
 800ae30:	2208      	movs	r2, #8
 800ae32:	4629      	mov	r1, r5
 800ae34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae38:	f7fd fa24 	bl	8008284 <memset>
 800ae3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae44:	4620      	mov	r0, r4
 800ae46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae48:	3468      	adds	r4, #104	; 0x68
 800ae4a:	e7d9      	b.n	800ae00 <__sfp+0x1c>
 800ae4c:	2104      	movs	r1, #4
 800ae4e:	4638      	mov	r0, r7
 800ae50:	f7ff ff62 	bl	800ad18 <__sfmoreglue>
 800ae54:	4604      	mov	r4, r0
 800ae56:	6030      	str	r0, [r6, #0]
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1d5      	bne.n	800ae08 <__sfp+0x24>
 800ae5c:	f7ff ff78 	bl	800ad50 <__sfp_lock_release>
 800ae60:	230c      	movs	r3, #12
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	e7ee      	b.n	800ae44 <__sfp+0x60>
 800ae66:	bf00      	nop
 800ae68:	0800b1e8 	.word	0x0800b1e8
 800ae6c:	ffff0001 	.word	0xffff0001

0800ae70 <_fwalk_reent>:
 800ae70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae74:	4606      	mov	r6, r0
 800ae76:	4688      	mov	r8, r1
 800ae78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae7c:	2700      	movs	r7, #0
 800ae7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae82:	f1b9 0901 	subs.w	r9, r9, #1
 800ae86:	d505      	bpl.n	800ae94 <_fwalk_reent+0x24>
 800ae88:	6824      	ldr	r4, [r4, #0]
 800ae8a:	2c00      	cmp	r4, #0
 800ae8c:	d1f7      	bne.n	800ae7e <_fwalk_reent+0xe>
 800ae8e:	4638      	mov	r0, r7
 800ae90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae94:	89ab      	ldrh	r3, [r5, #12]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d907      	bls.n	800aeaa <_fwalk_reent+0x3a>
 800ae9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	d003      	beq.n	800aeaa <_fwalk_reent+0x3a>
 800aea2:	4629      	mov	r1, r5
 800aea4:	4630      	mov	r0, r6
 800aea6:	47c0      	blx	r8
 800aea8:	4307      	orrs	r7, r0
 800aeaa:	3568      	adds	r5, #104	; 0x68
 800aeac:	e7e9      	b.n	800ae82 <_fwalk_reent+0x12>

0800aeae <__retarget_lock_init_recursive>:
 800aeae:	4770      	bx	lr

0800aeb0 <__retarget_lock_acquire_recursive>:
 800aeb0:	4770      	bx	lr

0800aeb2 <__retarget_lock_release_recursive>:
 800aeb2:	4770      	bx	lr

0800aeb4 <__swhatbuf_r>:
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	460e      	mov	r6, r1
 800aeb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aebc:	2900      	cmp	r1, #0
 800aebe:	b096      	sub	sp, #88	; 0x58
 800aec0:	4614      	mov	r4, r2
 800aec2:	461d      	mov	r5, r3
 800aec4:	da08      	bge.n	800aed8 <__swhatbuf_r+0x24>
 800aec6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	602a      	str	r2, [r5, #0]
 800aece:	061a      	lsls	r2, r3, #24
 800aed0:	d410      	bmi.n	800aef4 <__swhatbuf_r+0x40>
 800aed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aed6:	e00e      	b.n	800aef6 <__swhatbuf_r+0x42>
 800aed8:	466a      	mov	r2, sp
 800aeda:	f000 f903 	bl	800b0e4 <_fstat_r>
 800aede:	2800      	cmp	r0, #0
 800aee0:	dbf1      	blt.n	800aec6 <__swhatbuf_r+0x12>
 800aee2:	9a01      	ldr	r2, [sp, #4]
 800aee4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aee8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aeec:	425a      	negs	r2, r3
 800aeee:	415a      	adcs	r2, r3
 800aef0:	602a      	str	r2, [r5, #0]
 800aef2:	e7ee      	b.n	800aed2 <__swhatbuf_r+0x1e>
 800aef4:	2340      	movs	r3, #64	; 0x40
 800aef6:	2000      	movs	r0, #0
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	b016      	add	sp, #88	; 0x58
 800aefc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af00 <__smakebuf_r>:
 800af00:	898b      	ldrh	r3, [r1, #12]
 800af02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af04:	079d      	lsls	r5, r3, #30
 800af06:	4606      	mov	r6, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	d507      	bpl.n	800af1c <__smakebuf_r+0x1c>
 800af0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	6123      	str	r3, [r4, #16]
 800af14:	2301      	movs	r3, #1
 800af16:	6163      	str	r3, [r4, #20]
 800af18:	b002      	add	sp, #8
 800af1a:	bd70      	pop	{r4, r5, r6, pc}
 800af1c:	ab01      	add	r3, sp, #4
 800af1e:	466a      	mov	r2, sp
 800af20:	f7ff ffc8 	bl	800aeb4 <__swhatbuf_r>
 800af24:	9900      	ldr	r1, [sp, #0]
 800af26:	4605      	mov	r5, r0
 800af28:	4630      	mov	r0, r6
 800af2a:	f7ff f963 	bl	800a1f4 <_malloc_r>
 800af2e:	b948      	cbnz	r0, 800af44 <__smakebuf_r+0x44>
 800af30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af34:	059a      	lsls	r2, r3, #22
 800af36:	d4ef      	bmi.n	800af18 <__smakebuf_r+0x18>
 800af38:	f023 0303 	bic.w	r3, r3, #3
 800af3c:	f043 0302 	orr.w	r3, r3, #2
 800af40:	81a3      	strh	r3, [r4, #12]
 800af42:	e7e3      	b.n	800af0c <__smakebuf_r+0xc>
 800af44:	4b0d      	ldr	r3, [pc, #52]	; (800af7c <__smakebuf_r+0x7c>)
 800af46:	62b3      	str	r3, [r6, #40]	; 0x28
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	6020      	str	r0, [r4, #0]
 800af4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	9b00      	ldr	r3, [sp, #0]
 800af54:	6163      	str	r3, [r4, #20]
 800af56:	9b01      	ldr	r3, [sp, #4]
 800af58:	6120      	str	r0, [r4, #16]
 800af5a:	b15b      	cbz	r3, 800af74 <__smakebuf_r+0x74>
 800af5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af60:	4630      	mov	r0, r6
 800af62:	f000 f8d1 	bl	800b108 <_isatty_r>
 800af66:	b128      	cbz	r0, 800af74 <__smakebuf_r+0x74>
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	f023 0303 	bic.w	r3, r3, #3
 800af6e:	f043 0301 	orr.w	r3, r3, #1
 800af72:	81a3      	strh	r3, [r4, #12]
 800af74:	89a0      	ldrh	r0, [r4, #12]
 800af76:	4305      	orrs	r5, r0
 800af78:	81a5      	strh	r5, [r4, #12]
 800af7a:	e7cd      	b.n	800af18 <__smakebuf_r+0x18>
 800af7c:	0800ad0d 	.word	0x0800ad0d

0800af80 <_malloc_usable_size_r>:
 800af80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af84:	1f18      	subs	r0, r3, #4
 800af86:	2b00      	cmp	r3, #0
 800af88:	bfbc      	itt	lt
 800af8a:	580b      	ldrlt	r3, [r1, r0]
 800af8c:	18c0      	addlt	r0, r0, r3
 800af8e:	4770      	bx	lr

0800af90 <_raise_r>:
 800af90:	291f      	cmp	r1, #31
 800af92:	b538      	push	{r3, r4, r5, lr}
 800af94:	4604      	mov	r4, r0
 800af96:	460d      	mov	r5, r1
 800af98:	d904      	bls.n	800afa4 <_raise_r+0x14>
 800af9a:	2316      	movs	r3, #22
 800af9c:	6003      	str	r3, [r0, #0]
 800af9e:	f04f 30ff 	mov.w	r0, #4294967295
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afa6:	b112      	cbz	r2, 800afae <_raise_r+0x1e>
 800afa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afac:	b94b      	cbnz	r3, 800afc2 <_raise_r+0x32>
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 f830 	bl	800b014 <_getpid_r>
 800afb4:	462a      	mov	r2, r5
 800afb6:	4601      	mov	r1, r0
 800afb8:	4620      	mov	r0, r4
 800afba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afbe:	f000 b817 	b.w	800aff0 <_kill_r>
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d00a      	beq.n	800afdc <_raise_r+0x4c>
 800afc6:	1c59      	adds	r1, r3, #1
 800afc8:	d103      	bne.n	800afd2 <_raise_r+0x42>
 800afca:	2316      	movs	r3, #22
 800afcc:	6003      	str	r3, [r0, #0]
 800afce:	2001      	movs	r0, #1
 800afd0:	e7e7      	b.n	800afa2 <_raise_r+0x12>
 800afd2:	2400      	movs	r4, #0
 800afd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afd8:	4628      	mov	r0, r5
 800afda:	4798      	blx	r3
 800afdc:	2000      	movs	r0, #0
 800afde:	e7e0      	b.n	800afa2 <_raise_r+0x12>

0800afe0 <raise>:
 800afe0:	4b02      	ldr	r3, [pc, #8]	; (800afec <raise+0xc>)
 800afe2:	4601      	mov	r1, r0
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	f7ff bfd3 	b.w	800af90 <_raise_r>
 800afea:	bf00      	nop
 800afec:	20000070 	.word	0x20000070

0800aff0 <_kill_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4d07      	ldr	r5, [pc, #28]	; (800b010 <_kill_r+0x20>)
 800aff4:	2300      	movs	r3, #0
 800aff6:	4604      	mov	r4, r0
 800aff8:	4608      	mov	r0, r1
 800affa:	4611      	mov	r1, r2
 800affc:	602b      	str	r3, [r5, #0]
 800affe:	f7f7 fd53 	bl	8002aa8 <_kill>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	d102      	bne.n	800b00c <_kill_r+0x1c>
 800b006:	682b      	ldr	r3, [r5, #0]
 800b008:	b103      	cbz	r3, 800b00c <_kill_r+0x1c>
 800b00a:	6023      	str	r3, [r4, #0]
 800b00c:	bd38      	pop	{r3, r4, r5, pc}
 800b00e:	bf00      	nop
 800b010:	2000041c 	.word	0x2000041c

0800b014 <_getpid_r>:
 800b014:	f7f7 bd40 	b.w	8002a98 <_getpid>

0800b018 <__sread>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	460c      	mov	r4, r1
 800b01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b020:	f000 f894 	bl	800b14c <_read_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	bfab      	itete	ge
 800b028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b02a:	89a3      	ldrhlt	r3, [r4, #12]
 800b02c:	181b      	addge	r3, r3, r0
 800b02e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b032:	bfac      	ite	ge
 800b034:	6563      	strge	r3, [r4, #84]	; 0x54
 800b036:	81a3      	strhlt	r3, [r4, #12]
 800b038:	bd10      	pop	{r4, pc}

0800b03a <__swrite>:
 800b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03e:	461f      	mov	r7, r3
 800b040:	898b      	ldrh	r3, [r1, #12]
 800b042:	05db      	lsls	r3, r3, #23
 800b044:	4605      	mov	r5, r0
 800b046:	460c      	mov	r4, r1
 800b048:	4616      	mov	r6, r2
 800b04a:	d505      	bpl.n	800b058 <__swrite+0x1e>
 800b04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b050:	2302      	movs	r3, #2
 800b052:	2200      	movs	r2, #0
 800b054:	f000 f868 	bl	800b128 <_lseek_r>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	4632      	mov	r2, r6
 800b066:	463b      	mov	r3, r7
 800b068:	4628      	mov	r0, r5
 800b06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b06e:	f000 b817 	b.w	800b0a0 <_write_r>

0800b072 <__sseek>:
 800b072:	b510      	push	{r4, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07a:	f000 f855 	bl	800b128 <_lseek_r>
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	bf15      	itete	ne
 800b084:	6560      	strne	r0, [r4, #84]	; 0x54
 800b086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b08e:	81a3      	strheq	r3, [r4, #12]
 800b090:	bf18      	it	ne
 800b092:	81a3      	strhne	r3, [r4, #12]
 800b094:	bd10      	pop	{r4, pc}

0800b096 <__sclose>:
 800b096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b09a:	f000 b813 	b.w	800b0c4 <_close_r>
	...

0800b0a0 <_write_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4d07      	ldr	r5, [pc, #28]	; (800b0c0 <_write_r+0x20>)
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	602a      	str	r2, [r5, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f7f7 fd31 	bl	8002b16 <_write>
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	d102      	bne.n	800b0be <_write_r+0x1e>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	b103      	cbz	r3, 800b0be <_write_r+0x1e>
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	2000041c 	.word	0x2000041c

0800b0c4 <_close_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4d06      	ldr	r5, [pc, #24]	; (800b0e0 <_close_r+0x1c>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	602b      	str	r3, [r5, #0]
 800b0d0:	f7f7 fd3d 	bl	8002b4e <_close>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d102      	bne.n	800b0de <_close_r+0x1a>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b103      	cbz	r3, 800b0de <_close_r+0x1a>
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	2000041c 	.word	0x2000041c

0800b0e4 <_fstat_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d07      	ldr	r5, [pc, #28]	; (800b104 <_fstat_r+0x20>)
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	602b      	str	r3, [r5, #0]
 800b0f2:	f7f7 fd38 	bl	8002b66 <_fstat>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	d102      	bne.n	800b100 <_fstat_r+0x1c>
 800b0fa:	682b      	ldr	r3, [r5, #0]
 800b0fc:	b103      	cbz	r3, 800b100 <_fstat_r+0x1c>
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	bf00      	nop
 800b104:	2000041c 	.word	0x2000041c

0800b108 <_isatty_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d06      	ldr	r5, [pc, #24]	; (800b124 <_isatty_r+0x1c>)
 800b10c:	2300      	movs	r3, #0
 800b10e:	4604      	mov	r4, r0
 800b110:	4608      	mov	r0, r1
 800b112:	602b      	str	r3, [r5, #0]
 800b114:	f7f7 fd37 	bl	8002b86 <_isatty>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	d102      	bne.n	800b122 <_isatty_r+0x1a>
 800b11c:	682b      	ldr	r3, [r5, #0]
 800b11e:	b103      	cbz	r3, 800b122 <_isatty_r+0x1a>
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	bd38      	pop	{r3, r4, r5, pc}
 800b124:	2000041c 	.word	0x2000041c

0800b128 <_lseek_r>:
 800b128:	b538      	push	{r3, r4, r5, lr}
 800b12a:	4d07      	ldr	r5, [pc, #28]	; (800b148 <_lseek_r+0x20>)
 800b12c:	4604      	mov	r4, r0
 800b12e:	4608      	mov	r0, r1
 800b130:	4611      	mov	r1, r2
 800b132:	2200      	movs	r2, #0
 800b134:	602a      	str	r2, [r5, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	f7f7 fd30 	bl	8002b9c <_lseek>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d102      	bne.n	800b146 <_lseek_r+0x1e>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	b103      	cbz	r3, 800b146 <_lseek_r+0x1e>
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	2000041c 	.word	0x2000041c

0800b14c <_read_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4d07      	ldr	r5, [pc, #28]	; (800b16c <_read_r+0x20>)
 800b150:	4604      	mov	r4, r0
 800b152:	4608      	mov	r0, r1
 800b154:	4611      	mov	r1, r2
 800b156:	2200      	movs	r2, #0
 800b158:	602a      	str	r2, [r5, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	f7f7 fcbe 	bl	8002adc <_read>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d102      	bne.n	800b16a <_read_r+0x1e>
 800b164:	682b      	ldr	r3, [r5, #0]
 800b166:	b103      	cbz	r3, 800b16a <_read_r+0x1e>
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	bd38      	pop	{r3, r4, r5, pc}
 800b16c:	2000041c 	.word	0x2000041c

0800b170 <_init>:
 800b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b172:	bf00      	nop
 800b174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b176:	bc08      	pop	{r3}
 800b178:	469e      	mov	lr, r3
 800b17a:	4770      	bx	lr

0800b17c <_fini>:
 800b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17e:	bf00      	nop
 800b180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b182:	bc08      	pop	{r3}
 800b184:	469e      	mov	lr, r3
 800b186:	4770      	bx	lr
