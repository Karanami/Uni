
19_10_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005628  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005864  08005864  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800586c  0800586c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  080058fc  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0800599c  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b8  200001c8  08005a3c  000201c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000880  08005a3c  00020880  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012dce  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002578  00000000  00000000  00032fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d50  00000000  00000000  00035540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000c68  00000000  00000000  00036290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026ad7  00000000  00000000  00036ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000101dc  00000000  00000000  0005d9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ee68b  00000000  00000000  0006dbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0015c236  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003b80  00000000  00000000  0015c288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080057e0 	.word	0x080057e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	080057e0 	.word	0x080057e0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
char ch = 0;

char cmd[3];

int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fce3 	bl	8000fa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f814 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f926 	bl	8000830 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e4:	f000 f878 	bl	80006d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f8c4 	bl	8000774 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 f8f2 	bl	80007d4 <MX_USB_OTG_FS_PCD_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005f0:	b662      	cpsie	i
}
 80005f2:	bf00      	nop
 	__enable_irq();
	HAL_UART_Receive_IT (&huart3, &ch, 1);
#endif
#if ZAD == 5
 	__enable_irq();
	HAL_UART_Receive_IT (&huart3, cmd, 4);
 80005f4:	2204      	movs	r2, #4
 80005f6:	4902      	ldr	r1, [pc, #8]	; (8000600 <main+0x2c>)
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <main+0x30>)
 80005fa:	f002 fea1 	bl	8003340 <HAL_UART_Receive_IT>
#endif

 while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x2a>
 8000600:	2000085c 	.word	0x2000085c
 8000604:	200002cc 	.word	0x200002cc

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fc6c 	bl	8004ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f001 fd12 	bl	8002054 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <SystemClock_Config+0xc8>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000650:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <SystemClock_Config+0xcc>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800067c:	2348      	movs	r3, #72	; 0x48
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000684:	2303      	movs	r3, #3
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fcf1 	bl	8002074 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 fa1a 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 ff7f 	bl	80025bc <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c4:	f000 fa04 	bl	8000ad0 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_ETH_Init+0x84>)
 80006de:	4a20      	ldr	r2, [pc, #128]	; (8000760 <MX_ETH_Init+0x88>)
 80006e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_ETH_Init+0x8c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_ETH_Init+0x8c>)
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ETH_Init+0x8c>)
 80006f0:	22e1      	movs	r2, #225	; 0xe1
 80006f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_ETH_Init+0x8c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ETH_Init+0x8c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_ETH_Init+0x8c>)
 8000702:	2200      	movs	r2, #0
 8000704:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_ETH_Init+0x84>)
 8000708:	4a16      	ldr	r2, [pc, #88]	; (8000764 <MX_ETH_Init+0x8c>)
 800070a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_ETH_Init+0x84>)
 800070e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000712:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_ETH_Init+0x84>)
 8000716:	4a14      	ldr	r2, [pc, #80]	; (8000768 <MX_ETH_Init+0x90>)
 8000718:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_ETH_Init+0x84>)
 800071c:	4a13      	ldr	r2, [pc, #76]	; (800076c <MX_ETH_Init+0x94>)
 800071e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_ETH_Init+0x84>)
 8000722:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000726:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_ETH_Init+0x84>)
 800072a:	f000 fe5f 	bl	80013ec <HAL_ETH_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000734:	f000 f9cc 	bl	8000ad0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000738:	2238      	movs	r2, #56	; 0x38
 800073a:	2100      	movs	r1, #0
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_ETH_Init+0x98>)
 800073e:	f004 fbd9 	bl	8004ef4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_ETH_Init+0x98>)
 8000744:	2221      	movs	r2, #33	; 0x21
 8000746:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_ETH_Init+0x98>)
 800074a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800074e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_ETH_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000021c 	.word	0x2000021c
 8000760:	40028000 	.word	0x40028000
 8000764:	20000860 	.word	0x20000860
 8000768:	20000128 	.word	0x20000128
 800076c:	20000088 	.word	0x20000088
 8000770:	200001e4 	.word	0x200001e4

08000774 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART3_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART3_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART3_UART_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART3_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART3_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007b8:	f002 fd16 	bl	80031e8 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f985 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200002cc 	.word	0x200002cc
 80007d0:	40004800 	.word	0x40004800

080007d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2206      	movs	r2, #6
 80007e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2201      	movs	r2, #1
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	f001 fad3 	bl	8001dc2 <HAL_PCD_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f955 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000354 	.word	0x20000354

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b47      	ldr	r3, [pc, #284]	; (8000964 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a46      	ldr	r2, [pc, #280]	; (8000964 <MX_GPIO_Init+0x134>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b44      	ldr	r3, [pc, #272]	; (8000964 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	4b41      	ldr	r3, [pc, #260]	; (8000964 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a40      	ldr	r2, [pc, #256]	; (8000964 <MX_GPIO_Init+0x134>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a3a      	ldr	r2, [pc, #232]	; (8000964 <MX_GPIO_Init+0x134>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b38      	ldr	r3, [pc, #224]	; (8000964 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a34      	ldr	r2, [pc, #208]	; (8000964 <MX_GPIO_Init+0x134>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a2e      	ldr	r2, [pc, #184]	; (8000964 <MX_GPIO_Init+0x134>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a28      	ldr	r2, [pc, #160]	; (8000964 <MX_GPIO_Init+0x134>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008dc:	4822      	ldr	r0, [pc, #136]	; (8000968 <MX_GPIO_Init+0x138>)
 80008de:	f001 fa57 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	4821      	ldr	r0, [pc, #132]	; (800096c <MX_GPIO_Init+0x13c>)
 80008e8:	f001 fa52 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	481b      	ldr	r0, [pc, #108]	; (8000970 <MX_GPIO_Init+0x140>)
 8000904:	f001 f898 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000908:	f244 0381 	movw	r3, #16513	; 0x4081
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_GPIO_Init+0x138>)
 8000922:	f001 f889 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0x13c>)
 800093e:	f001 f87b 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_GPIO_Init+0x13c>)
 8000956:	f001 f86f 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	; 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40021800 	.word	0x40021800
 8000970:	40020800 	.word	0x40020800

08000974 <compLdOn>:

/* USER CODE BEGIN 4 */
#if ZAD == 5
_Bool compLdOn(char *cmd, uint8_t n)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	char led[] = "LDox";
 8000980:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <compLdOn+0x4c>)
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800098a:	6018      	str	r0, [r3, #0]
 800098c:	3304      	adds	r3, #4
 800098e:	7019      	strb	r1, [r3, #0]
	sprintf(led, "LDo%i", n);
 8000990:	78fa      	ldrb	r2, [r7, #3]
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	490b      	ldr	r1, [pc, #44]	; (80009c4 <compLdOn+0x50>)
 8000998:	4618      	mov	r0, r3
 800099a:	f004 fab3 	bl	8004f04 <siprintf>
	return (strcmp(cmd, led));
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4619      	mov	r1, r3
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fc33 	bl	8000210 <strcmp>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	08005800 	.word	0x08005800
 80009c4:	080057f8 	.word	0x080057f8

080009c8 <compLdOff>:
_Bool compLdOff(char *cmd, uint8_t n)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
	char led[] = "LDxx";
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <compLdOff+0x4c>)
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009de:	6018      	str	r0, [r3, #0]
 80009e0:	3304      	adds	r3, #4
 80009e2:	7019      	strb	r1, [r3, #0]
	sprintf(led, "LDx%i", n);
 80009e4:	78fa      	ldrb	r2, [r7, #3]
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	490b      	ldr	r1, [pc, #44]	; (8000a18 <compLdOff+0x50>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 fa89 	bl	8004f04 <siprintf>
	return (strcmp(cmd, led));
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fc09 	bl	8000210 <strcmp>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bf14      	ite	ne
 8000a04:	2301      	movne	r3, #1
 8000a06:	2300      	moveq	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	08005810 	.word	0x08005810
 8000a18:	08005808 	.word	0x08005808

08000a1c <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive_IT(huart, &ch, 1);
}
#endif
#if ZAD == 5
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 1; i < 4; i++)
 8000a24:	2301      	movs	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e030      	b.n	8000a8c <HAL_UART_RxCpltCallback+0x70>
	{
		if(compLdOn(cmd, i))
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <HAL_UART_RxCpltCallback+0x88>)
 8000a30:	f7ff ffa0 	bl	8000974 <compLdOn>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00e      	beq.n	8000a58 <HAL_UART_RxCpltCallback+0x3c>
		{
			HAL_GPIO_WritePin(ld_port[i-1], ld_pin[i-1], GPIO_PIN_SET);
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <HAL_UART_RxCpltCallback+0x8c>)
 8000a40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a18      	ldr	r2, [pc, #96]	; (8000aac <HAL_UART_RxCpltCallback+0x90>)
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	2201      	movs	r2, #1
 8000a52:	4619      	mov	r1, r3
 8000a54:	f001 f99c 	bl	8001d90 <HAL_GPIO_WritePin>
		}
		if(compLdOff(cmd, i))
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <HAL_UART_RxCpltCallback+0x88>)
 8000a5e:	f7ff ffb3 	bl	80009c8 <compLdOff>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00e      	beq.n	8000a86 <HAL_UART_RxCpltCallback+0x6a>
		{
			HAL_GPIO_WritePin(ld_port[i-1], ld_pin[i-1], GPIO_PIN_RESET);
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_UART_RxCpltCallback+0x8c>)
 8000a6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <HAL_UART_RxCpltCallback+0x90>)
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	f001 f985 	bl	8001d90 <HAL_GPIO_WritePin>
	for(uint8_t i = 1; i < 4; i++)
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d9cb      	bls.n	8000a2a <HAL_UART_RxCpltCallback+0xe>
		}
	}
	HAL_UART_Transmit_IT(huart, cmd, 4);
 8000a92:	2204      	movs	r2, #4
 8000a94:	4903      	ldr	r1, [pc, #12]	; (8000aa4 <HAL_UART_RxCpltCallback+0x88>)
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f002 fbf4 	bl	8003284 <HAL_UART_Transmit_IT>
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000085c 	.word	0x2000085c
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	2000000c 	.word	0x2000000c

08000ab0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, cmd, 4);
 8000ab8:	2204      	movs	r2, #4
 8000aba:	4904      	ldr	r1, [pc, #16]	; (8000acc <HAL_UART_TxCpltCallback+0x1c>)
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f002 fc3f 	bl	8003340 <HAL_UART_Receive_IT>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000085c 	.word	0x2000085c

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x44>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x44>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x44>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <HAL_ETH_MspInit+0x158>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	f040 8096 	bne.w	8000c74 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b48:	4b4d      	ldr	r3, [pc, #308]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a4c      	ldr	r2, [pc, #304]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
 8000b54:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a46      	ldr	r2, [pc, #280]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6c:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a40      	ldr	r2, [pc, #256]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
 8000b84:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a3a      	ldr	r2, [pc, #232]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a34      	ldr	r2, [pc, #208]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a2e      	ldr	r2, [pc, #184]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd8:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a28      	ldr	r2, [pc, #160]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf0:	2332      	movs	r3, #50	; 0x32
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <HAL_ETH_MspInit+0x160>)
 8000c0c:	f000 ff14 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c10:	2386      	movs	r3, #134	; 0x86
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4817      	ldr	r0, [pc, #92]	; (8000c88 <HAL_ETH_MspInit+0x164>)
 8000c2c:	f000 ff04 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c42:	230b      	movs	r3, #11
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480f      	ldr	r0, [pc, #60]	; (8000c8c <HAL_ETH_MspInit+0x168>)
 8000c4e:	f000 fef3 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4808      	ldr	r0, [pc, #32]	; (8000c90 <HAL_ETH_MspInit+0x16c>)
 8000c70:	f000 fee2 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	3738      	adds	r7, #56	; 0x38
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40028000 	.word	0x40028000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40021800 	.word	0x40021800

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0aa      	sub	sp, #168	; 0xa8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2284      	movs	r2, #132	; 0x84
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f004 f91d 	bl	8004ef4 <memset>
  if(huart->Instance==USART3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a26      	ldr	r2, [pc, #152]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d144      	bne.n	8000d4e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fe98 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cde:	f7ff fef7 	bl	8000ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d36:	4619      	mov	r1, r3
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_UART_MspInit+0xcc>)
 8000d3a:	f000 fe7d 	bl	8001a38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2027      	movs	r0, #39	; 0x27
 8000d44:	f000 fa89 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d48:	2027      	movs	r0, #39	; 0x27
 8000d4a:	f000 faa2 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	37a8      	adds	r7, #168	; 0xa8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40004800 	.word	0x40004800
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020c00 	.word	0x40020c00

08000d64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0ac      	sub	sp, #176	; 0xb0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	2284      	movs	r2, #132	; 0x84
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f004 f8b5 	bl	8004ef4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d92:	d159      	bne.n	8000e48 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da0:	f107 0318 	add.w	r3, r7, #24
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 fe2f 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000db0:	f7ff fe8e 	bl	8000ad0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dcc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000de6:	230a      	movs	r3, #10
 8000de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df0:	4619      	mov	r1, r3
 8000df2:	4818      	ldr	r0, [pc, #96]	; (8000e54 <HAL_PCD_MspInit+0xf0>)
 8000df4:	f000 fe20 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e10:	4619      	mov	r1, r3
 8000e12:	4810      	ldr	r0, [pc, #64]	; (8000e54 <HAL_PCD_MspInit+0xf0>)
 8000e14:	f000 fe10 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e22:	6353      	str	r3, [r2, #52]	; 0x34
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	37b0      	adds	r7, #176	; 0xb0
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f8ba 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <USART3_IRQHandler+0x10>)
 8000eb2:	f002 fa89 	bl	80033c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200002cc 	.word	0x200002cc

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f003 ffd6 	bl	8004ea0 <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20050000 	.word	0x20050000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000868 	.word	0x20000868
 8000f28:	20000880 	.word	0x20000880

08000f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f003 ff95 	bl	8004eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fb27 	bl	80005d4 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f94:	08005874 	.word	0x08005874
  ldr r2, =_sbss
 8000f98:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000f9c:	20000880 	.word	0x20000880

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>

08000fa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 f94c 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 f805 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb2:	f7ff fd93 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f967 	bl	80012ae <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f92f 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000018 	.word	0x20000018
 8001014:	20000020 	.word	0x20000020
 8001018:	2000001c 	.word	0x2000001c

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000020 	.word	0x20000020
 8001040:	2000086c 	.word	0x2000086c

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000086c 	.word	0x2000086c

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000020 	.word	0x20000020

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	05fa0000 	.word	0x05fa0000

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff feb6 	bl	8001044 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d008      	beq.n	80012f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e052      	b.n	800139e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0216 	bic.w	r2, r2, #22
 8001306:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001316:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	2b00      	cmp	r3, #0
 800131e:	d103      	bne.n	8001328 <HAL_DMA_Abort+0x62>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0208 	bic.w	r2, r2, #8
 8001336:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0201 	bic.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001348:	e013      	b.n	8001372 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800134a:	f7ff fe7b 	bl	8001044 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b05      	cmp	r3, #5
 8001356:	d90c      	bls.n	8001372 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2220      	movs	r2, #32
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e015      	b.n	800139e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e4      	bne.n	800134a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001384:	223f      	movs	r2, #63	; 0x3f
 8001386:	409a      	lsls	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d004      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00c      	b.n	80013de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e06a      	b.n	80014d4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001404:	2b00      	cmp	r3, #0
 8001406:	d106      	bne.n	8001416 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2223      	movs	r2, #35	; 0x23
 800140c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fb87 	bl	8000b24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_ETH_Init+0xf0>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a30      	ldr	r2, [pc, #192]	; (80014dc <HAL_ETH_Init+0xf0>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <HAL_ETH_Init+0xf0>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <HAL_ETH_Init+0xf4>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <HAL_ETH_Init+0xf4>)
 8001434:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001438:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_ETH_Init+0xf4>)
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	4927      	ldr	r1, [pc, #156]	; (80014e0 <HAL_ETH_Init+0xf4>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_ETH_Init+0xf4>)
 800144a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001462:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001464:	f7ff fdee 	bl	8001044 <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800146a:	e011      	b.n	8001490 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800146c:	f7ff fdea 	bl	8001044 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800147a:	d909      	bls.n	8001490 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2204      	movs	r2, #4
 8001480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	22e0      	movs	r2, #224	; 0xe0
 8001488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e021      	b.n	80014d4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1e4      	bne.n	800146c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f958 	bl	8001758 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f9ff 	bl	80018ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fa55 	bl	800195e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	461a      	mov	r2, r3
 80014ba:	2100      	movs	r1, #0
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f9bd 	bl	800183c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2210      	movs	r2, #16
 80014ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800

080014e4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4b51      	ldr	r3, [pc, #324]	; (8001640 <ETH_SetMACConfig+0x15c>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	7c1b      	ldrb	r3, [r3, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <ETH_SetMACConfig+0x28>
 8001506:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800150a:	e000      	b.n	800150e <ETH_SetMACConfig+0x2a>
 800150c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	7c5b      	ldrb	r3, [r3, #17]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <ETH_SetMACConfig+0x38>
 8001516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800151a:	e000      	b.n	800151e <ETH_SetMACConfig+0x3a>
 800151c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800151e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001524:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	7fdb      	ldrb	r3, [r3, #31]
 800152a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800152c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001532:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	7f92      	ldrb	r2, [r2, #30]
 8001538:	2a00      	cmp	r2, #0
 800153a:	d102      	bne.n	8001542 <ETH_SetMACConfig+0x5e>
 800153c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001540:	e000      	b.n	8001544 <ETH_SetMACConfig+0x60>
 8001542:	2200      	movs	r2, #0
                        macconf->Speed |
 8001544:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	7f1b      	ldrb	r3, [r3, #28]
 800154a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800154c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001552:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800155a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001562:	2a00      	cmp	r2, #0
 8001564:	d102      	bne.n	800156c <ETH_SetMACConfig+0x88>
 8001566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156a:	e000      	b.n	800156e <ETH_SetMACConfig+0x8a>
 800156c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800156e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	7bdb      	ldrb	r3, [r3, #15]
 8001574:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001576:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800157c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001584:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001586:	4313      	orrs	r3, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff fd5c 	bl	800105c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015ca:	2a00      	cmp	r2, #0
 80015cc:	d101      	bne.n	80015d2 <ETH_SetMACConfig+0xee>
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	e000      	b.n	80015d4 <ETH_SetMACConfig+0xf0>
 80015d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015d4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015e2:	2a01      	cmp	r2, #1
 80015e4:	d101      	bne.n	80015ea <ETH_SetMACConfig+0x106>
 80015e6:	2208      	movs	r2, #8
 80015e8:	e000      	b.n	80015ec <ETH_SetMACConfig+0x108>
 80015ea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015ec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015f4:	2a01      	cmp	r2, #1
 80015f6:	d101      	bne.n	80015fc <ETH_SetMACConfig+0x118>
 80015f8:	2204      	movs	r2, #4
 80015fa:	e000      	b.n	80015fe <ETH_SetMACConfig+0x11a>
 80015fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001606:	2a01      	cmp	r2, #1
 8001608:	d101      	bne.n	800160e <ETH_SetMACConfig+0x12a>
 800160a:	2202      	movs	r2, #2
 800160c:	e000      	b.n	8001610 <ETH_SetMACConfig+0x12c>
 800160e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001610:	4313      	orrs	r3, r2
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff fd17 	bl	800105c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	ff20810f 	.word	0xff20810f

08001644 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <ETH_SetDMAConfig+0x110>)
 800165e:	4013      	ands	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	7b1b      	ldrb	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <ETH_SetDMAConfig+0x2c>
 800166a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800166e:	e000      	b.n	8001672 <ETH_SetDMAConfig+0x2e>
 8001670:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	7b5b      	ldrb	r3, [r3, #13]
 8001676:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001678:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	7f52      	ldrb	r2, [r2, #29]
 800167e:	2a00      	cmp	r2, #0
 8001680:	d102      	bne.n	8001688 <ETH_SetDMAConfig+0x44>
 8001682:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001686:	e000      	b.n	800168a <ETH_SetDMAConfig+0x46>
 8001688:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800168a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	7b9b      	ldrb	r3, [r3, #14]
 8001690:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001692:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001698:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	7f1b      	ldrb	r3, [r3, #28]
 800169e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	7f9b      	ldrb	r3, [r3, #30]
 80016a6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016a8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016b6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016b8:	4313      	orrs	r3, r2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	461a      	mov	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff fcbe 	bl	800105c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e8:	461a      	mov	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016f8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016fe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001704:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800170c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800170e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001716:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800171c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001726:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff fc8f 	bl	800105c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	f8de3f23 	.word	0xf8de3f23

08001758 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0a6      	sub	sp, #152	; 0x98
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800176c:	2300      	movs	r3, #0
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001782:	2301      	movs	r3, #1
 8001784:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001794:	2300      	movs	r3, #0
 8001796:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fe86 	bl	80014e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017d8:	2301      	movs	r3, #1
 80017da:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017dc:	2301      	movs	r3, #1
 80017de:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017fe:	2301      	movs	r3, #1
 8001800:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001804:	2301      	movs	r3, #1
 8001806:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800180c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800180e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001812:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001818:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800181a:	2301      	movs	r3, #1
 800181c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001820:	2300      	movs	r3, #0
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff08 	bl	8001644 <ETH_SetDMAConfig>
}
 8001834:	bf00      	nop
 8001836:	3798      	adds	r7, #152	; 0x98
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3305      	adds	r3, #5
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	3204      	adds	r2, #4
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <ETH_MACAddressConfig+0x68>)
 800185e:	4413      	add	r3, r2
 8001860:	461a      	mov	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3303      	adds	r3, #3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	061a      	lsls	r2, r3, #24
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3302      	adds	r3, #2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3301      	adds	r3, #1
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	4313      	orrs	r3, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	4313      	orrs	r3, r2
 8001888:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <ETH_MACAddressConfig+0x6c>)
 800188e:	4413      	add	r3, r2
 8001890:	461a      	mov	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	6013      	str	r3, [r2, #0]
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40028040 	.word	0x40028040
 80018a8:	40028044 	.word	0x40028044

080018ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e03e      	b.n	8001938 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68d9      	ldr	r1, [r3, #12]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	3206      	adds	r2, #6
 80018ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d80c      	bhi.n	800191c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68d9      	ldr	r1, [r3, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	461a      	mov	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	e004      	b.n	8001926 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	461a      	mov	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3301      	adds	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d9bd      	bls.n	80018ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001950:	611a      	str	r2, [r3, #16]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e046      	b.n	80019fa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6919      	ldr	r1, [r3, #16]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	3212      	adds	r2, #18
 80019c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d80c      	bhi.n	80019ea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6919      	ldr	r1, [r3, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	e004      	b.n	80019f4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	461a      	mov	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3301      	adds	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d9b5      	bls.n	800196c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2a:	60da      	str	r2, [r3, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e175      	b.n	8001d44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8164 	bne.w	8001d3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_GPIO_Init+0x56>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d017      	beq.n	8001b2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80be 	beq.w	8001d3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bda:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <HAL_GPIO_Init+0x328>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_GPIO_Init+0x32c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d037      	beq.n	8001c76 <HAL_GPIO_Init+0x23e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a57      	ldr	r2, [pc, #348]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d031      	beq.n	8001c72 <HAL_GPIO_Init+0x23a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a56      	ldr	r2, [pc, #344]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d02b      	beq.n	8001c6e <HAL_GPIO_Init+0x236>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a55      	ldr	r2, [pc, #340]	; (8001d70 <HAL_GPIO_Init+0x338>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d025      	beq.n	8001c6a <HAL_GPIO_Init+0x232>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a54      	ldr	r2, [pc, #336]	; (8001d74 <HAL_GPIO_Init+0x33c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01f      	beq.n	8001c66 <HAL_GPIO_Init+0x22e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a53      	ldr	r2, [pc, #332]	; (8001d78 <HAL_GPIO_Init+0x340>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0x22a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_GPIO_Init+0x344>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0x226>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a51      	ldr	r2, [pc, #324]	; (8001d80 <HAL_GPIO_Init+0x348>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x222>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a50      	ldr	r2, [pc, #320]	; (8001d84 <HAL_GPIO_Init+0x34c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_Init+0x21e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4f      	ldr	r2, [pc, #316]	; (8001d88 <HAL_GPIO_Init+0x350>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_Init+0x21a>
 8001c4e:	2309      	movs	r3, #9
 8001c50:	e012      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c52:	230a      	movs	r3, #10
 8001c54:	e010      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c56:	2308      	movs	r3, #8
 8001c58:	e00e      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	e00c      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c5e:	2306      	movs	r3, #6
 8001c60:	e00a      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c62:	2305      	movs	r3, #5
 8001c64:	e008      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e004      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c76:	2300      	movs	r3, #0
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	f002 0203 	and.w	r2, r2, #3
 8001c7e:	0092      	lsls	r2, r2, #2
 8001c80:	4093      	lsls	r3, r2
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c88:	4935      	ldr	r1, [pc, #212]	; (8001d60 <HAL_GPIO_Init+0x328>)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cba:	4a34      	ldr	r2, [pc, #208]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc0:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	f67f ae86 	bls.w	8001a58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40013800 	.word	0x40013800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40021400 	.word	0x40021400
 8001d7c:	40021800 	.word	0x40021800
 8001d80:	40021c00 	.word	0x40021c00
 8001d84:	40022000 	.word	0x40022000
 8001d88:	40022400 	.word	0x40022400
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc4:	b08f      	sub	sp, #60	; 0x3c
 8001dc6:	af0a      	add	r7, sp, #40	; 0x28
 8001dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e116      	b.n	8002002 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe ffb8 	bl	8000d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 fda8 	bl	8004968 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	687e      	ldr	r6, [r7, #4]
 8001e20:	466d      	mov	r5, sp
 8001e22:	f106 0410 	add.w	r4, r6, #16
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e36:	1d33      	adds	r3, r6, #4
 8001e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3a:	6838      	ldr	r0, [r7, #0]
 8001e3c:	f002 fd3c 	bl	80048b8 <USB_CoreInit>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0d7      	b.n	8002002 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 fd96 	bl	800498a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e04a      	b.n	8001efa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	333d      	adds	r3, #61	; 0x3d
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	333c      	adds	r3, #60	; 0x3c
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	b298      	uxth	r0, r3
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3344      	adds	r3, #68	; 0x44
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3340      	adds	r3, #64	; 0x40
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3348      	adds	r3, #72	; 0x48
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	334c      	adds	r3, #76	; 0x4c
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	3354      	adds	r3, #84	; 0x54
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d3af      	bcc.n	8001e64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e044      	b.n	8001f94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	3301      	adds	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3b5      	bcc.n	8001f0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	687e      	ldr	r6, [r7, #4]
 8001fa6:	466d      	mov	r5, sp
 8001fa8:	f106 0410 	add.w	r4, r6, #16
 8001fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fbc:	1d33      	adds	r3, r6, #4
 8001fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc0:	6838      	ldr	r0, [r7, #0]
 8001fc2:	f002 fd2f 	bl	8004a24 <USB_DevInit>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e014      	b.n	8002002 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f80b 	bl	800200c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 feed 	bl	8004dda <USB_DevDisconnect>

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800200c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_PCDEx_ActivateLPM+0x44>)
 800203c:	4313      	orrs	r3, r2
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	10000003 	.word	0x10000003

08002054 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40007000 	.word	0x40007000

08002074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e291      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8087 	beq.w	80021a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002098:	4b96      	ldr	r3, [pc, #600]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d00c      	beq.n	80020be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a4:	4b93      	ldr	r3, [pc, #588]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d112      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62>
 80020b0:	4b90      	ldr	r3, [pc, #576]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020bc:	d10b      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020be:	4b8d      	ldr	r3, [pc, #564]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d06c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x130>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d168      	bne.n	80021a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e26b      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x7a>
 80020e0:	4b84      	ldr	r3, [pc, #528]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a83      	ldr	r2, [pc, #524]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e02e      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x9c>
 80020f6:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7e      	ldr	r2, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b7c      	ldr	r3, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7b      	ldr	r2, [pc, #492]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01d      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0xc0>
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a72      	ldr	r2, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 8002134:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a6e      	ldr	r2, [pc, #440]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b6c      	ldr	r3, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a6b      	ldr	r2, [pc, #428]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe ff76 	bl	8001044 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7fe ff72 	bl	8001044 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e21f      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0xe8>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe ff62 	bl	8001044 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe ff5e 	bl	8001044 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e20b      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x110>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d069      	beq.n	8002286 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b2:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d11c      	bne.n	8002204 <HAL_RCC_OscConfig+0x190>
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d116      	bne.n	8002204 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x17a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1df      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	493d      	ldr	r1, [pc, #244]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	e040      	b.n	8002286 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff14 	bl	8001044 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7fe ff10 	bl	8001044 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1bd      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4929      	ldr	r1, [pc, #164]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
 8002252:	e018      	b.n	8002286 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe fef0 	bl	8001044 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002268:	f7fe feec 	bl	8001044 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e199      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d038      	beq.n	8002304 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d019      	beq.n	80022ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800229c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7fe fecd 	bl	8001044 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ae:	f7fe fec9 	bl	8001044 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e176      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x23a>
 80022cc:	e01a      	b.n	8002304 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7fe feb3 	bl	8001044 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e2:	f7fe feaf 	bl	8001044 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d903      	bls.n	80022f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e15c      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
 80022f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b91      	ldr	r3, [pc, #580]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ee      	bne.n	80022e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a4 	beq.w	800245a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b8b      	ldr	r3, [pc, #556]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a87      	ldr	r2, [pc, #540]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b85      	ldr	r3, [pc, #532]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233a:	4b82      	ldr	r3, [pc, #520]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002346:	4b7f      	ldr	r3, [pc, #508]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7e      	ldr	r2, [pc, #504]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fe77 	bl	8001044 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7fe fe73 	bl	8001044 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	; 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e120      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236c:	4b75      	ldr	r3, [pc, #468]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x31a>
 8002380:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
 800238c:	e02d      	b.n	80023ea <HAL_RCC_OscConfig+0x376>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x33c>
 8002396:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a69      	ldr	r2, [pc, #420]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
 80023a2:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a66      	ldr	r2, [pc, #408]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x376>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x35e>
 80023b8:	4b61      	ldr	r3, [pc, #388]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a60      	ldr	r2, [pc, #384]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a5d      	ldr	r2, [pc, #372]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x376>
 80023d2:	4b5b      	ldr	r3, [pc, #364]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	4b58      	ldr	r3, [pc, #352]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a57      	ldr	r2, [pc, #348]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7fe fe27 	bl	8001044 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fe23 	bl	8001044 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0ce      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x386>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7fe fe11 	bl	8001044 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fe0d 	bl	8001044 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b40      	ldr	r3, [pc, #256]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80a4 	beq.w	80025ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d06b      	beq.n	8002548 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d149      	bne.n	800250c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b31      	ldr	r3, [pc, #196]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a30      	ldr	r2, [pc, #192]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800247e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fdde 	bl	8001044 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fdda 	bl	8001044 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e087      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	019b      	lsls	r3, r3, #6
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	3b01      	subs	r3, #1
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	4313      	orrs	r3, r2
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80024d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe fdae 	bl	8001044 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7fe fdaa 	bl	8001044 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e057      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x478>
 800250a:	e04f      	b.n	80025ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fd94 	bl	8001044 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fd90 	bl	8001044 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e03d      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x4ac>
 800253e:	e035      	b.n	80025ac <HAL_RCC_OscConfig+0x538>
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x544>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d028      	beq.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d121      	bne.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d11a      	bne.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800257e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002580:	4293      	cmp	r3, r2
 8002582:	d111      	bne.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0d0      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	4965      	ldr	r1, [pc, #404]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800263e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	494d      	ldr	r1, [pc, #308]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d040      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d115      	bne.n	800269e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e07f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e073      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06b      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7fe fcc8 	bl	8001044 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7fe fcc4 	bl	8001044 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e053      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d210      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 020f 	bic.w	r2, r3, #15
 80026f6:	4922      	ldr	r1, [pc, #136]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e032      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4916      	ldr	r1, [pc, #88]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274e:	f000 f821 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002752:	4602      	mov	r2, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	490a      	ldr	r1, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x1cc>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1d0>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fc24 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00
 8002784:	40023800 	.word	0x40023800
 8002788:	08005818 	.word	0x08005818
 800278c:	20000018 	.word	0x20000018
 8002790:	2000001c 	.word	0x2000001c

08002794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002798:	b094      	sub	sp, #80	; 0x50
 800279a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	647b      	str	r3, [r7, #68]	; 0x44
 80027a0:	2300      	movs	r3, #0
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a4:	2300      	movs	r3, #0
 80027a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ac:	4b79      	ldr	r3, [pc, #484]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d00d      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x40>
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	f200 80e1 	bhi.w	8002980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x34>
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x3a>
 80027c6:	e0db      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027cc:	e0db      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_GetSysClockFreq+0x208>)
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d2:	e0d8      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d4:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027de:	4b6d      	ldr	r3, [pc, #436]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d063      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ea:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	099b      	lsrs	r3, r3, #6
 80027f0:	2200      	movs	r2, #0
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
 80027fe:	2300      	movs	r3, #0
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
 8002802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002806:	4622      	mov	r2, r4
 8002808:	462b      	mov	r3, r5
 800280a:	f04f 0000 	mov.w	r0, #0
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	0159      	lsls	r1, r3, #5
 8002814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002818:	0150      	lsls	r0, r2, #5
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4621      	mov	r1, r4
 8002820:	1a51      	subs	r1, r2, r1
 8002822:	6139      	str	r1, [r7, #16]
 8002824:	4629      	mov	r1, r5
 8002826:	eb63 0301 	sbc.w	r3, r3, r1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002838:	4659      	mov	r1, fp
 800283a:	018b      	lsls	r3, r1, #6
 800283c:	4651      	mov	r1, sl
 800283e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002842:	4651      	mov	r1, sl
 8002844:	018a      	lsls	r2, r1, #6
 8002846:	4651      	mov	r1, sl
 8002848:	ebb2 0801 	subs.w	r8, r2, r1
 800284c:	4659      	mov	r1, fp
 800284e:	eb63 0901 	sbc.w	r9, r3, r1
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800285e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002866:	4690      	mov	r8, r2
 8002868:	4699      	mov	r9, r3
 800286a:	4623      	mov	r3, r4
 800286c:	eb18 0303 	adds.w	r3, r8, r3
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	462b      	mov	r3, r5
 8002874:	eb49 0303 	adc.w	r3, r9, r3
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002886:	4629      	mov	r1, r5
 8002888:	024b      	lsls	r3, r1, #9
 800288a:	4621      	mov	r1, r4
 800288c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002890:	4621      	mov	r1, r4
 8002892:	024a      	lsls	r2, r1, #9
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289a:	2200      	movs	r2, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
 800289e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028a4:	f7fd fd14 	bl	80002d0 <__aeabi_uldivmod>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4613      	mov	r3, r2
 80028ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b0:	e058      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b2:	4b38      	ldr	r3, [pc, #224]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	2200      	movs	r2, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	4611      	mov	r1, r2
 80028be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028c2:	623b      	str	r3, [r7, #32]
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
 80028c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028cc:	4642      	mov	r2, r8
 80028ce:	464b      	mov	r3, r9
 80028d0:	f04f 0000 	mov.w	r0, #0
 80028d4:	f04f 0100 	mov.w	r1, #0
 80028d8:	0159      	lsls	r1, r3, #5
 80028da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028de:	0150      	lsls	r0, r2, #5
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4641      	mov	r1, r8
 80028e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ea:	4649      	mov	r1, r9
 80028ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002904:	ebb2 040a 	subs.w	r4, r2, sl
 8002908:	eb63 050b 	sbc.w	r5, r3, fp
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	00eb      	lsls	r3, r5, #3
 8002916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800291a:	00e2      	lsls	r2, r4, #3
 800291c:	4614      	mov	r4, r2
 800291e:	461d      	mov	r5, r3
 8002920:	4643      	mov	r3, r8
 8002922:	18e3      	adds	r3, r4, r3
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	464b      	mov	r3, r9
 8002928:	eb45 0303 	adc.w	r3, r5, r3
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800293a:	4629      	mov	r1, r5
 800293c:	028b      	lsls	r3, r1, #10
 800293e:	4621      	mov	r1, r4
 8002940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002944:	4621      	mov	r1, r4
 8002946:	028a      	lsls	r2, r1, #10
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294e:	2200      	movs	r2, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	61fa      	str	r2, [r7, #28]
 8002954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002958:	f7fd fcba 	bl	80002d0 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4613      	mov	r3, r2
 8002962:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	3301      	adds	r3, #1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetSysClockFreq+0x204>)
 8002982:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002988:	4618      	mov	r0, r3
 800298a:	3750      	adds	r7, #80	; 0x50
 800298c:	46bd      	mov	sp, r7
 800298e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	00f42400 	.word	0x00f42400
 800299c:	007a1200 	.word	0x007a1200

080029a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000018 	.word	0x20000018

080029b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029bc:	f7ff fff0 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0a9b      	lsrs	r3, r3, #10
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08005828 	.word	0x08005828

080029e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029e4:	f7ff ffdc 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0b5b      	lsrs	r3, r3, #13
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08005828 	.word	0x08005828

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a30:	4b69      	ldr	r3, [pc, #420]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a68      	ldr	r2, [pc, #416]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a3a:	6093      	str	r3, [r2, #8]
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a44:	4964      	ldr	r1, [pc, #400]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d017      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a62:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	4959      	ldr	r1, [pc, #356]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a80:	d101      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d017      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a9e:	4b4e      	ldr	r3, [pc, #312]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	494a      	ldr	r1, [pc, #296]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 808b 	beq.w	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	4a39      	ldr	r2, [pc, #228]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6413      	str	r3, [r2, #64]	; 0x40
 8002af8:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b04:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b10:	f7fe fa98 	bl	8001044 <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7fe fa94 	bl	8001044 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e357      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b36:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d035      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d02e      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b54:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d114      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fa5c 	bl	8001044 <HAL_GetTick>
 8002b8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe fa58 	bl	8001044 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e319      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ee      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bbe:	d111      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bce:	400b      	ands	r3, r1
 8002bd0:	4901      	ldr	r1, [pc, #4]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	0ffffcff 	.word	0x0ffffcff
 8002be4:	4baa      	ldr	r3, [pc, #680]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4aa9      	ldr	r2, [pc, #676]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bee:	6093      	str	r3, [r2, #8]
 8002bf0:	4ba7      	ldr	r3, [pc, #668]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	49a4      	ldr	r1, [pc, #656]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c0e:	4ba0      	ldr	r3, [pc, #640]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c14:	4a9e      	ldr	r2, [pc, #632]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c1e:	4b9c      	ldr	r3, [pc, #624]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	4999      	ldr	r1, [pc, #612]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c3c:	4b94      	ldr	r3, [pc, #592]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4a:	4991      	ldr	r1, [pc, #580]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c5e:	4b8c      	ldr	r3, [pc, #560]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c6c:	4988      	ldr	r1, [pc, #544]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c80:	4b83      	ldr	r3, [pc, #524]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8e:	4980      	ldr	r1, [pc, #512]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ca2:	4b7b      	ldr	r3, [pc, #492]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4977      	ldr	r1, [pc, #476]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cc4:	4b72      	ldr	r3, [pc, #456]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	496f      	ldr	r1, [pc, #444]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ce6:	4b6a      	ldr	r3, [pc, #424]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	f023 020c 	bic.w	r2, r3, #12
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	4966      	ldr	r1, [pc, #408]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d08:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	495e      	ldr	r1, [pc, #376]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d2a:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d38:	4955      	ldr	r1, [pc, #340]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d4c:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	494d      	ldr	r1, [pc, #308]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d6e:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	4944      	ldr	r1, [pc, #272]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d90:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	493c      	ldr	r1, [pc, #240]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc0:	4933      	ldr	r1, [pc, #204]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de2:	492b      	ldr	r1, [pc, #172]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d011      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e04:	4922      	ldr	r1, [pc, #136]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e14:	d101      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e44:	4912      	ldr	r1, [pc, #72]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e68:	4909      	ldr	r1, [pc, #36]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d006      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80d9 	beq.w	8003036 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e84:	4b02      	ldr	r3, [pc, #8]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a01      	ldr	r2, [pc, #4]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e8e:	e001      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e90:	40023800 	.word	0x40023800
 8002e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e96:	f7fe f8d5 	bl	8001044 <HAL_GetTick>
 8002e9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e9e:	f7fe f8d1 	bl	8001044 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	; 0x64
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e194      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eb0:	4b6c      	ldr	r3, [pc, #432]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d021      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d11d      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ed0:	4b64      	ldr	r3, [pc, #400]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ede:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee4:	0e1b      	lsrs	r3, r3, #24
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	019a      	lsls	r2, r3, #6
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	061b      	lsls	r3, r3, #24
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	071b      	lsls	r3, r3, #28
 8002f04:	4957      	ldr	r1, [pc, #348]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d004      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d02e      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f36:	d129      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f38:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4c:	0f1b      	lsrs	r3, r3, #28
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	019a      	lsls	r2, r3, #6
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	071b      	lsls	r3, r3, #28
 8002f6c:	493d      	ldr	r1, [pc, #244]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f74:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7a:	f023 021f 	bic.w	r2, r3, #31
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	3b01      	subs	r3, #1
 8002f84:	4937      	ldr	r1, [pc, #220]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01d      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f98:	4b32      	ldr	r3, [pc, #200]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9e:	0e1b      	lsrs	r3, r3, #24
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fa6:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fac:	0f1b      	lsrs	r3, r3, #28
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	019a      	lsls	r2, r3, #6
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	071b      	lsls	r3, r3, #28
 8002fcc:	4925      	ldr	r1, [pc, #148]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d011      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	019a      	lsls	r2, r3, #6
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	071b      	lsls	r3, r3, #28
 8002ffc:	4919      	ldr	r1, [pc, #100]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003004:	4b17      	ldr	r3, [pc, #92]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800300e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003010:	f7fe f818 	bl	8001044 <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003018:	f7fe f814 	bl	8001044 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0d7      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800302a:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b01      	cmp	r3, #1
 800303a:	f040 80cd 	bne.w	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a08      	ldr	r2, [pc, #32]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304a:	f7fd fffb 	bl	8001044 <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003052:	f7fd fff7 	bl	8001044 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b64      	cmp	r3, #100	; 0x64
 800305e:	d903      	bls.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0ba      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003064:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003068:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003074:	d0ed      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003092:	2b00      	cmp	r3, #0
 8003094:	d02e      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d12a      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800309e:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030ac:	4b4d      	ldr	r3, [pc, #308]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	0f1b      	lsrs	r3, r3, #28
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	019a      	lsls	r2, r3, #6
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	071b      	lsls	r3, r3, #28
 80030d2:	4944      	ldr	r1, [pc, #272]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030da:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	493d      	ldr	r1, [pc, #244]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d022      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003108:	d11d      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800310a:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	0e1b      	lsrs	r3, r3, #24
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003118:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	0f1b      	lsrs	r3, r3, #28
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	019a      	lsls	r2, r3, #6
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	061b      	lsls	r3, r3, #24
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	071b      	lsls	r3, r3, #28
 800313e:	4929      	ldr	r1, [pc, #164]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d028      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	0e1b      	lsrs	r3, r3, #24
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	019a      	lsls	r2, r3, #6
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	071b      	lsls	r3, r3, #28
 8003186:	4917      	ldr	r1, [pc, #92]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4911      	ldr	r1, [pc, #68]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b0:	f7fd ff48 	bl	8001044 <HAL_GetTick>
 80031b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031b8:	f7fd ff44 	bl	8001044 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e007      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d6:	d1ef      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800

080031e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e040      	b.n	800327c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fd42 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	; 0x24
 8003214:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fbb6 	bl	8003998 <UART_SetConfig>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e022      	b.n	800327c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fe0e 	bl	8003e60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fe95 	bl	8003fa4 <UART_CheckIdleState>
 800327a:	4603      	mov	r3, r0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003284:	b480      	push	{r7}
 8003286:	b08b      	sub	sp, #44	; 0x2c
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003296:	2b20      	cmp	r3, #32
 8003298:	d147      	bne.n	800332a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_UART_Transmit_IT+0x22>
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e040      	b.n	800332c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	88fa      	ldrh	r2, [r7, #6]
 80032bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	; 0x21
 80032d2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d107      	bne.n	80032ee <HAL_UART_Transmit_IT+0x6a>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a13      	ldr	r2, [pc, #76]	; (8003338 <HAL_UART_Transmit_IT+0xb4>)
 80032ea:	66da      	str	r2, [r3, #108]	; 0x6c
 80032ec:	e002      	b.n	80032f4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a12      	ldr	r2, [pc, #72]	; (800333c <HAL_UART_Transmit_IT+0xb8>)
 80032f2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	613b      	str	r3, [r7, #16]
   return(result);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	623b      	str	r3, [r7, #32]
 8003314:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	69f9      	ldr	r1, [r7, #28]
 8003318:	6a3a      	ldr	r2, [r7, #32]
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e6      	bne.n	80032f4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	372c      	adds	r7, #44	; 0x2c
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	080044d7 	.word	0x080044d7
 800333c:	08004421 	.word	0x08004421

08003340 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003354:	2b20      	cmp	r3, #32
 8003356:	d132      	bne.n	80033be <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_UART_Receive_IT+0x24>
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e02b      	b.n	80033c0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d018      	beq.n	80033ae <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	613b      	str	r3, [r7, #16]
   return(result);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	69f9      	ldr	r1, [r7, #28]
 80033a0:	6a3a      	ldr	r2, [r7, #32]
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e6      	bne.n	800337c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	461a      	mov	r2, r3
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fef3 	bl	80041a0 <UART_Start_Receive_IT>
 80033ba:	4603      	mov	r3, r0
 80033bc:	e000      	b.n	80033c0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3728      	adds	r7, #40	; 0x28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b0ba      	sub	sp, #232	; 0xe8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80033f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80033f6:	4013      	ands	r3, r2
 80033f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80033fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d115      	bne.n	8003430 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00f      	beq.n	8003430 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8297 	beq.w	8003954 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
      }
      return;
 800342e:	e291      	b.n	8003954 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8117 	beq.w	8003668 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800343a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003446:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800344a:	4b85      	ldr	r3, [pc, #532]	; (8003660 <HAL_UART_IRQHandler+0x298>)
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 810a 	beq.w	8003668 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d011      	beq.n	8003484 <HAL_UART_IRQHandler+0xbc>
 8003460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00b      	beq.n	8003484 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2201      	movs	r2, #1
 8003472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d011      	beq.n	80034b4 <HAL_UART_IRQHandler+0xec>
 8003490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2202      	movs	r2, #2
 80034a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034aa:	f043 0204 	orr.w	r2, r3, #4
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d011      	beq.n	80034e4 <HAL_UART_IRQHandler+0x11c>
 80034c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00b      	beq.n	80034e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2204      	movs	r2, #4
 80034d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034da:	f043 0202 	orr.w	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d017      	beq.n	8003520 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003500:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2208      	movs	r2, #8
 800350e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003516:	f043 0208 	orr.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <HAL_UART_IRQHandler+0x18a>
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00c      	beq.n	8003552 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 81fd 	beq.w	8003958 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800356a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d005      	beq.n	80035aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800359e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d04f      	beq.n	800364a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 febe 	bl	800432c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d141      	bne.n	8003642 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1d9      	bne.n	80035be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360e:	2b00      	cmp	r3, #0
 8003610:	d013      	beq.n	800363a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_UART_IRQHandler+0x29c>)
 8003618:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	4618      	mov	r0, r3
 8003620:	f7fd fec1 	bl	80013a6 <HAL_DMA_Abort_IT>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d017      	beq.n	800365a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003634:	4610      	mov	r0, r2
 8003636:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003638:	e00f      	b.n	800365a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f996 	bl	800396c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	e00b      	b.n	800365a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f992 	bl	800396c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	e007      	b.n	800365a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f98e 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003658:	e17e      	b.n	8003958 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365a:	bf00      	nop
    return;
 800365c:	e17c      	b.n	8003958 <HAL_UART_IRQHandler+0x590>
 800365e:	bf00      	nop
 8003660:	04000120 	.word	0x04000120
 8003664:	080043f5 	.word	0x080043f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366c:	2b01      	cmp	r3, #1
 800366e:	f040 814c 	bne.w	800390a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8145 	beq.w	800390a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 813e 	beq.w	800390a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2210      	movs	r2, #16
 8003694:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	f040 80b6 	bne.w	8003812 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8150 	beq.w	800395c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036c6:	429a      	cmp	r2, r3
 80036c8:	f080 8148 	bcs.w	800395c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e0:	f000 8086 	beq.w	80037f0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800370e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003712:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800371a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1da      	bne.n	80036e4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3308      	adds	r3, #8
 8003734:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800373e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3308      	adds	r3, #8
 800374e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003752:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003756:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800375a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e1      	bne.n	800372e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3308      	adds	r3, #8
 8003770:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800377a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800377c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800378e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003790:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003794:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800379c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e3      	bne.n	800376a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c0:	f023 0310 	bic.w	r3, r3, #16
 80037c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80037d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e4      	bne.n	80037b0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fd6b 	bl	80012c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003802:	b29b      	uxth	r3, r3
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	b29b      	uxth	r3, r3
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f8b8 	bl	8003980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003810:	e0a4      	b.n	800395c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800381e:	b29b      	uxth	r3, r3
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8096 	beq.w	8003960 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8091 	beq.w	8003960 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
 8003862:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800386e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e4      	bne.n	800383e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	623b      	str	r3, [r7, #32]
   return(result);
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3308      	adds	r3, #8
 8003894:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003898:	633a      	str	r2, [r7, #48]	; 0x30
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800389e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e3      	bne.n	8003874 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f023 0310 	bic.w	r3, r3, #16
 80038d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	69b9      	ldr	r1, [r7, #24]
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	617b      	str	r3, [r7, #20]
   return(result);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e4      	bne.n	80038c0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003900:	4619      	mov	r1, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f83c 	bl	8003980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003908:	e02a      	b.n	8003960 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800390a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00e      	beq.n	8003934 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01c      	beq.n	8003964 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
    }
    return;
 8003932:	e017      	b.n	8003964 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d012      	beq.n	8003966 <HAL_UART_IRQHandler+0x59e>
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00c      	beq.n	8003966 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fe22 	bl	8004596 <UART_EndTransmit_IT>
    return;
 8003952:	e008      	b.n	8003966 <HAL_UART_IRQHandler+0x59e>
      return;
 8003954:	bf00      	nop
 8003956:	e006      	b.n	8003966 <HAL_UART_IRQHandler+0x59e>
    return;
 8003958:	bf00      	nop
 800395a:	e004      	b.n	8003966 <HAL_UART_IRQHandler+0x59e>
      return;
 800395c:	bf00      	nop
 800395e:	e002      	b.n	8003966 <HAL_UART_IRQHandler+0x59e>
      return;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <HAL_UART_IRQHandler+0x59e>
    return;
 8003964:	bf00      	nop
  }

}
 8003966:	37e8      	adds	r7, #232	; 0xe8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4ba6      	ldr	r3, [pc, #664]	; (8003c5c <UART_SetConfig+0x2c4>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	6979      	ldr	r1, [r7, #20]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a94      	ldr	r2, [pc, #592]	; (8003c60 <UART_SetConfig+0x2c8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d120      	bne.n	8003a56 <UART_SetConfig+0xbe>
 8003a14:	4b93      	ldr	r3, [pc, #588]	; (8003c64 <UART_SetConfig+0x2cc>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d816      	bhi.n	8003a50 <UART_SetConfig+0xb8>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <UART_SetConfig+0x90>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a45 	.word	0x08003a45
 8003a30:	08003a3f 	.word	0x08003a3f
 8003a34:	08003a4b 	.word	0x08003a4b
 8003a38:	2301      	movs	r3, #1
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e150      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e14d      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003a44:	2304      	movs	r3, #4
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e14a      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e147      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003a50:	2310      	movs	r3, #16
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e144      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a83      	ldr	r2, [pc, #524]	; (8003c68 <UART_SetConfig+0x2d0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d132      	bne.n	8003ac6 <UART_SetConfig+0x12e>
 8003a60:	4b80      	ldr	r3, [pc, #512]	; (8003c64 <UART_SetConfig+0x2cc>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d828      	bhi.n	8003ac0 <UART_SetConfig+0x128>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <UART_SetConfig+0xdc>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003ac1 	.word	0x08003ac1
 8003a7c:	08003ac1 	.word	0x08003ac1
 8003a80:	08003ac1 	.word	0x08003ac1
 8003a84:	08003ab5 	.word	0x08003ab5
 8003a88:	08003ac1 	.word	0x08003ac1
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003ac1 	.word	0x08003ac1
 8003a94:	08003aaf 	.word	0x08003aaf
 8003a98:	08003ac1 	.word	0x08003ac1
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003ac1 	.word	0x08003ac1
 8003aa4:	08003abb 	.word	0x08003abb
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e118      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e115      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e112      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003aba:	2308      	movs	r3, #8
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e10f      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e10c      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a68      	ldr	r2, [pc, #416]	; (8003c6c <UART_SetConfig+0x2d4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d120      	bne.n	8003b12 <UART_SetConfig+0x17a>
 8003ad0:	4b64      	ldr	r3, [pc, #400]	; (8003c64 <UART_SetConfig+0x2cc>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ada:	2b30      	cmp	r3, #48	; 0x30
 8003adc:	d013      	beq.n	8003b06 <UART_SetConfig+0x16e>
 8003ade:	2b30      	cmp	r3, #48	; 0x30
 8003ae0:	d814      	bhi.n	8003b0c <UART_SetConfig+0x174>
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d009      	beq.n	8003afa <UART_SetConfig+0x162>
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d810      	bhi.n	8003b0c <UART_SetConfig+0x174>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <UART_SetConfig+0x15c>
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d006      	beq.n	8003b00 <UART_SetConfig+0x168>
 8003af2:	e00b      	b.n	8003b0c <UART_SetConfig+0x174>
 8003af4:	2300      	movs	r3, #0
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e0f2      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003afa:	2302      	movs	r3, #2
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e0ef      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b00:	2304      	movs	r3, #4
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e0ec      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b06:	2308      	movs	r3, #8
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e0e9      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e0e6      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a56      	ldr	r2, [pc, #344]	; (8003c70 <UART_SetConfig+0x2d8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d120      	bne.n	8003b5e <UART_SetConfig+0x1c6>
 8003b1c:	4b51      	ldr	r3, [pc, #324]	; (8003c64 <UART_SetConfig+0x2cc>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b26:	2bc0      	cmp	r3, #192	; 0xc0
 8003b28:	d013      	beq.n	8003b52 <UART_SetConfig+0x1ba>
 8003b2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b2c:	d814      	bhi.n	8003b58 <UART_SetConfig+0x1c0>
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d009      	beq.n	8003b46 <UART_SetConfig+0x1ae>
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d810      	bhi.n	8003b58 <UART_SetConfig+0x1c0>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <UART_SetConfig+0x1a8>
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d006      	beq.n	8003b4c <UART_SetConfig+0x1b4>
 8003b3e:	e00b      	b.n	8003b58 <UART_SetConfig+0x1c0>
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e0cc      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b46:	2302      	movs	r3, #2
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e0c9      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e0c6      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b52:	2308      	movs	r3, #8
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e0c3      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e0c0      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a44      	ldr	r2, [pc, #272]	; (8003c74 <UART_SetConfig+0x2dc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d125      	bne.n	8003bb4 <UART_SetConfig+0x21c>
 8003b68:	4b3e      	ldr	r3, [pc, #248]	; (8003c64 <UART_SetConfig+0x2cc>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b76:	d017      	beq.n	8003ba8 <UART_SetConfig+0x210>
 8003b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7c:	d817      	bhi.n	8003bae <UART_SetConfig+0x216>
 8003b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b82:	d00b      	beq.n	8003b9c <UART_SetConfig+0x204>
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b88:	d811      	bhi.n	8003bae <UART_SetConfig+0x216>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <UART_SetConfig+0x1fe>
 8003b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b92:	d006      	beq.n	8003ba2 <UART_SetConfig+0x20a>
 8003b94:	e00b      	b.n	8003bae <UART_SetConfig+0x216>
 8003b96:	2300      	movs	r3, #0
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e0a1      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e09e      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e09b      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003ba8:	2308      	movs	r3, #8
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e098      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003bae:	2310      	movs	r3, #16
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	e095      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2f      	ldr	r2, [pc, #188]	; (8003c78 <UART_SetConfig+0x2e0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d125      	bne.n	8003c0a <UART_SetConfig+0x272>
 8003bbe:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <UART_SetConfig+0x2cc>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bcc:	d017      	beq.n	8003bfe <UART_SetConfig+0x266>
 8003bce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bd2:	d817      	bhi.n	8003c04 <UART_SetConfig+0x26c>
 8003bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd8:	d00b      	beq.n	8003bf2 <UART_SetConfig+0x25a>
 8003bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bde:	d811      	bhi.n	8003c04 <UART_SetConfig+0x26c>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <UART_SetConfig+0x254>
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be8:	d006      	beq.n	8003bf8 <UART_SetConfig+0x260>
 8003bea:	e00b      	b.n	8003c04 <UART_SetConfig+0x26c>
 8003bec:	2301      	movs	r3, #1
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e076      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e073      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e070      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e06d      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003c04:	2310      	movs	r3, #16
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e06a      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <UART_SetConfig+0x2e4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d138      	bne.n	8003c86 <UART_SetConfig+0x2ee>
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <UART_SetConfig+0x2cc>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c22:	d017      	beq.n	8003c54 <UART_SetConfig+0x2bc>
 8003c24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c28:	d82a      	bhi.n	8003c80 <UART_SetConfig+0x2e8>
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2e:	d00b      	beq.n	8003c48 <UART_SetConfig+0x2b0>
 8003c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c34:	d824      	bhi.n	8003c80 <UART_SetConfig+0x2e8>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <UART_SetConfig+0x2aa>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	d006      	beq.n	8003c4e <UART_SetConfig+0x2b6>
 8003c40:	e01e      	b.n	8003c80 <UART_SetConfig+0x2e8>
 8003c42:	2300      	movs	r3, #0
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e04b      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e048      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e045      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003c54:	2308      	movs	r3, #8
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e042      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003c5a:	bf00      	nop
 8003c5c:	efff69f3 	.word	0xefff69f3
 8003c60:	40011000 	.word	0x40011000
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40004400 	.word	0x40004400
 8003c6c:	40004800 	.word	0x40004800
 8003c70:	40004c00 	.word	0x40004c00
 8003c74:	40005000 	.word	0x40005000
 8003c78:	40011400 	.word	0x40011400
 8003c7c:	40007800 	.word	0x40007800
 8003c80:	2310      	movs	r3, #16
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e02c      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a72      	ldr	r2, [pc, #456]	; (8003e54 <UART_SetConfig+0x4bc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d125      	bne.n	8003cdc <UART_SetConfig+0x344>
 8003c90:	4b71      	ldr	r3, [pc, #452]	; (8003e58 <UART_SetConfig+0x4c0>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c9e:	d017      	beq.n	8003cd0 <UART_SetConfig+0x338>
 8003ca0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ca4:	d817      	bhi.n	8003cd6 <UART_SetConfig+0x33e>
 8003ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003caa:	d00b      	beq.n	8003cc4 <UART_SetConfig+0x32c>
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb0:	d811      	bhi.n	8003cd6 <UART_SetConfig+0x33e>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <UART_SetConfig+0x326>
 8003cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cba:	d006      	beq.n	8003cca <UART_SetConfig+0x332>
 8003cbc:	e00b      	b.n	8003cd6 <UART_SetConfig+0x33e>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e00d      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e00a      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e007      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e004      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e001      	b.n	8003ce0 <UART_SetConfig+0x348>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce8:	d15b      	bne.n	8003da2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cea:	7ffb      	ldrb	r3, [r7, #31]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d828      	bhi.n	8003d42 <UART_SetConfig+0x3aa>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <UART_SetConfig+0x360>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d43 	.word	0x08003d43
 8003d08:	08003d33 	.word	0x08003d33
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d43 	.word	0x08003d43
 8003d14:	08003d43 	.word	0x08003d43
 8003d18:	08003d3b 	.word	0x08003d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7fe fe4c 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 8003d20:	61b8      	str	r0, [r7, #24]
        break;
 8003d22:	e013      	b.n	8003d4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d24:	f7fe fe5c 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 8003d28:	61b8      	str	r0, [r7, #24]
        break;
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <UART_SetConfig+0x4c4>)
 8003d2e:	61bb      	str	r3, [r7, #24]
        break;
 8003d30:	e00c      	b.n	8003d4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7fe fd2f 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8003d36:	61b8      	str	r0, [r7, #24]
        break;
 8003d38:	e008      	b.n	8003d4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3e:	61bb      	str	r3, [r7, #24]
        break;
 8003d40:	e004      	b.n	8003d4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	77bb      	strb	r3, [r7, #30]
        break;
 8003d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d074      	beq.n	8003e3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	005a      	lsls	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	441a      	add	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b0f      	cmp	r3, #15
 8003d6c:	d916      	bls.n	8003d9c <UART_SetConfig+0x404>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d74:	d212      	bcs.n	8003d9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f023 030f 	bic.w	r3, r3, #15
 8003d7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	89fa      	ldrh	r2, [r7, #14]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e04f      	b.n	8003e3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	77bb      	strb	r3, [r7, #30]
 8003da0:	e04c      	b.n	8003e3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003da2:	7ffb      	ldrb	r3, [r7, #31]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d828      	bhi.n	8003dfa <UART_SetConfig+0x462>
 8003da8:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <UART_SetConfig+0x418>)
 8003daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dae:	bf00      	nop
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003ddd 	.word	0x08003ddd
 8003db8:	08003de5 	.word	0x08003de5
 8003dbc:	08003dfb 	.word	0x08003dfb
 8003dc0:	08003deb 	.word	0x08003deb
 8003dc4:	08003dfb 	.word	0x08003dfb
 8003dc8:	08003dfb 	.word	0x08003dfb
 8003dcc:	08003dfb 	.word	0x08003dfb
 8003dd0:	08003df3 	.word	0x08003df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f7fe fdf0 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	61b8      	str	r0, [r7, #24]
        break;
 8003dda:	e013      	b.n	8003e04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ddc:	f7fe fe00 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 8003de0:	61b8      	str	r0, [r7, #24]
        break;
 8003de2:	e00f      	b.n	8003e04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <UART_SetConfig+0x4c4>)
 8003de6:	61bb      	str	r3, [r7, #24]
        break;
 8003de8:	e00c      	b.n	8003e04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dea:	f7fe fcd3 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8003dee:	61b8      	str	r0, [r7, #24]
        break;
 8003df0:	e008      	b.n	8003e04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df6:	61bb      	str	r3, [r7, #24]
        break;
 8003df8:	e004      	b.n	8003e04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	77bb      	strb	r3, [r7, #30]
        break;
 8003e02:	bf00      	nop
    }

    if (pclk != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d018      	beq.n	8003e3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	085a      	lsrs	r2, r3, #1
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	441a      	add	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b0f      	cmp	r3, #15
 8003e22:	d909      	bls.n	8003e38 <UART_SetConfig+0x4a0>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2a:	d205      	bcs.n	8003e38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	e001      	b.n	8003e3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e48:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40007c00 	.word	0x40007c00
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400

08003e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01a      	beq.n	8003f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f5e:	d10a      	bne.n	8003f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fb4:	f7fd f846 	bl	8001044 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d10e      	bne.n	8003fe6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f81b 	bl	8004012 <UART_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e011      	b.n	800400a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b09c      	sub	sp, #112	; 0x70
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004022:	e0a7      	b.n	8004174 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	f000 80a3 	beq.w	8004174 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402e:	f7fd f809 	bl	8001044 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800403a:	429a      	cmp	r2, r3
 800403c:	d302      	bcc.n	8004044 <UART_WaitOnFlagUntilTimeout+0x32>
 800403e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004040:	2b00      	cmp	r3, #0
 8004042:	d13f      	bne.n	80040c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004058:	667b      	str	r3, [r7, #100]	; 0x64
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004064:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e6      	bne.n	8004044 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3308      	adds	r3, #8
 800407c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	663b      	str	r3, [r7, #96]	; 0x60
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3308      	adds	r3, #8
 8004094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004096:	64ba      	str	r2, [r7, #72]	; 0x48
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800409c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e5      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e068      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d050      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e0:	d148      	bne.n	8004174 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
 800410c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e6      	bne.n	80040ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	613b      	str	r3, [r7, #16]
   return(result);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	66bb      	str	r3, [r7, #104]	; 0x68
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3308      	adds	r3, #8
 800413c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800413e:	623a      	str	r2, [r7, #32]
 8004140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	69f9      	ldr	r1, [r7, #28]
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	61bb      	str	r3, [r7, #24]
   return(result);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e010      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69da      	ldr	r2, [r3, #28]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	429a      	cmp	r2, r3
 8004190:	f43f af48 	beq.w	8004024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3770      	adds	r7, #112	; 0x70
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b097      	sub	sp, #92	; 0x5c
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	4613      	mov	r3, r2
 80041ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	88fa      	ldrh	r2, [r7, #6]
 80041c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	d10e      	bne.n	80041f2 <UART_Start_Receive_IT+0x52>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <UART_Start_Receive_IT+0x48>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041e6:	e02d      	b.n	8004244 <UART_Start_Receive_IT+0xa4>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	22ff      	movs	r2, #255	; 0xff
 80041ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041f0:	e028      	b.n	8004244 <UART_Start_Receive_IT+0xa4>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10d      	bne.n	8004216 <UART_Start_Receive_IT+0x76>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <UART_Start_Receive_IT+0x6c>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	22ff      	movs	r2, #255	; 0xff
 8004206:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800420a:	e01b      	b.n	8004244 <UART_Start_Receive_IT+0xa4>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	227f      	movs	r2, #127	; 0x7f
 8004210:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004214:	e016      	b.n	8004244 <UART_Start_Receive_IT+0xa4>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800421e:	d10d      	bne.n	800423c <UART_Start_Receive_IT+0x9c>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d104      	bne.n	8004232 <UART_Start_Receive_IT+0x92>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	227f      	movs	r2, #127	; 0x7f
 800422c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004230:	e008      	b.n	8004244 <UART_Start_Receive_IT+0xa4>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	223f      	movs	r2, #63	; 0x3f
 8004236:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800423a:	e003      	b.n	8004244 <UART_Start_Receive_IT+0xa4>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2222      	movs	r2, #34	; 0x22
 8004250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3308      	adds	r3, #8
 800425a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	657b      	str	r3, [r7, #84]	; 0x54
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3308      	adds	r3, #8
 8004272:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004274:	64ba      	str	r2, [r7, #72]	; 0x48
 8004276:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800427a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e5      	bne.n	8004254 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d107      	bne.n	80042a2 <UART_Start_Receive_IT+0x102>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a21      	ldr	r2, [pc, #132]	; (8004324 <UART_Start_Receive_IT+0x184>)
 800429e:	669a      	str	r2, [r3, #104]	; 0x68
 80042a0:	e002      	b.n	80042a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a20      	ldr	r2, [pc, #128]	; (8004328 <UART_Start_Receive_IT+0x188>)
 80042a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d019      	beq.n	80042e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80042c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
 80042d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e6      	bne.n	80042b0 <UART_Start_Receive_IT+0x110>
 80042e2:	e018      	b.n	8004316 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	613b      	str	r3, [r7, #16]
   return(result);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f043 0320 	orr.w	r3, r3, #32
 80042f8:	653b      	str	r3, [r7, #80]	; 0x50
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004302:	623b      	str	r3, [r7, #32]
 8004304:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	69f9      	ldr	r1, [r7, #28]
 8004308:	6a3a      	ldr	r2, [r7, #32]
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e6      	bne.n	80042e4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	375c      	adds	r7, #92	; 0x5c
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	08004751 	.word	0x08004751
 8004328:	080045eb 	.word	0x080045eb

0800432c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800432c:	b480      	push	{r7}
 800432e:	b095      	sub	sp, #84	; 0x54
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004348:	64fb      	str	r3, [r7, #76]	; 0x4c
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004352:	643b      	str	r3, [r7, #64]	; 0x40
 8004354:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e6      	bne.n	8004334 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3308      	adds	r3, #8
 800436c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	61fb      	str	r3, [r7, #28]
   return(result);
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	64bb      	str	r3, [r7, #72]	; 0x48
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800438c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e5      	bne.n	8004366 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d118      	bne.n	80043d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f023 0310 	bic.w	r3, r3, #16
 80043b6:	647b      	str	r3, [r7, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6979      	ldr	r1, [r7, #20]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	613b      	str	r3, [r7, #16]
   return(result);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e6      	bne.n	80043a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043e8:	bf00      	nop
 80043ea:	3754      	adds	r7, #84	; 0x54
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff faaa 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004420:	b480      	push	{r7}
 8004422:	b08f      	sub	sp, #60	; 0x3c
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442c:	2b21      	cmp	r3, #33	; 0x21
 800442e:	d14c      	bne.n	80044ca <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d132      	bne.n	80044a2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	61fb      	str	r3, [r7, #28]
   return(result);
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e6      	bne.n	800443c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	60bb      	str	r3, [r7, #8]
   return(result);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004482:	633b      	str	r3, [r7, #48]	; 0x30
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6979      	ldr	r1, [r7, #20]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	613b      	str	r3, [r7, #16]
   return(result);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e6      	bne.n	800446e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80044a0:	e013      	b.n	80044ca <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80044ca:	bf00      	nop
 80044cc:	373c      	adds	r7, #60	; 0x3c
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b091      	sub	sp, #68	; 0x44
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e2:	2b21      	cmp	r3, #33	; 0x21
 80044e4:	d151      	bne.n	800458a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d132      	bne.n	8004558 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	633b      	str	r3, [r7, #48]	; 0x30
 8004512:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e6      	bne.n	80044f2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	60fb      	str	r3, [r7, #12]
   return(result);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	69b9      	ldr	r1, [r7, #24]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	617b      	str	r3, [r7, #20]
   return(result);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e6      	bne.n	8004524 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004556:	e018      	b.n	800458a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800456c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	1c9a      	adds	r2, r3, #2
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800458a:	bf00      	nop
 800458c:	3744      	adds	r7, #68	; 0x44
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b088      	sub	sp, #32
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6979      	ldr	r1, [r7, #20]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fc fa67 	bl	8000ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e2:	bf00      	nop
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b096      	sub	sp, #88	; 0x58
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004602:	2b22      	cmp	r3, #34	; 0x22
 8004604:	f040 8098 	bne.w	8004738 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004612:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004616:	b2d9      	uxtb	r1, r3
 8004618:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800461c:	b2da      	uxtb	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	400a      	ands	r2, r1
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d17b      	bne.n	8004748 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800465e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004664:	653b      	str	r3, [r7, #80]	; 0x50
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800466e:	647b      	str	r3, [r7, #68]	; 0x44
 8004670:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e6      	bne.n	8004650 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	623b      	str	r3, [r7, #32]
   return(result);
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3308      	adds	r3, #8
 80046a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046a2:	633a      	str	r2, [r7, #48]	; 0x30
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d12e      	bne.n	8004730 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0310 	bic.w	r3, r3, #16
 80046ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	69b9      	ldr	r1, [r7, #24]
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	617b      	str	r3, [r7, #20]
   return(result);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e6      	bne.n	80046d8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b10      	cmp	r3, #16
 8004716:	d103      	bne.n	8004720 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2210      	movs	r2, #16
 800471e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff f929 	bl	8003980 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800472e:	e00b      	b.n	8004748 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fc f973 	bl	8000a1c <HAL_UART_RxCpltCallback>
}
 8004736:	e007      	b.n	8004748 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	619a      	str	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	3758      	adds	r7, #88	; 0x58
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b096      	sub	sp, #88	; 0x58
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800475e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	2b22      	cmp	r3, #34	; 0x22
 800476a:	f040 8098 	bne.w	800489e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800477e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004782:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004786:	4013      	ands	r3, r2
 8004788:	b29a      	uxth	r2, r3
 800478a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800478c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d17b      	bne.n	80048ae <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	643b      	str	r3, [r7, #64]	; 0x40
 80047d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004808:	62fa      	str	r2, [r7, #44]	; 0x2c
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800480e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004834:	2b01      	cmp	r3, #1
 8004836:	d12e      	bne.n	8004896 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	60bb      	str	r3, [r7, #8]
   return(result);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f023 0310 	bic.w	r3, r3, #16
 8004852:	647b      	str	r3, [r7, #68]	; 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6979      	ldr	r1, [r7, #20]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	613b      	str	r3, [r7, #16]
   return(result);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	2b10      	cmp	r3, #16
 800487c:	d103      	bne.n	8004886 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2210      	movs	r2, #16
 8004884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff f876 	bl	8003980 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004894:	e00b      	b.n	80048ae <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc f8c0 	bl	8000a1c <HAL_UART_RxCpltCallback>
}
 800489c:	e007      	b.n	80048ae <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0208 	orr.w	r2, r2, #8
 80048ac:	619a      	str	r2, [r3, #24]
}
 80048ae:	bf00      	nop
 80048b0:	3758      	adds	r7, #88	; 0x58
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048b8:	b084      	sub	sp, #16
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	f107 001c 	add.w	r0, r7, #28
 80048c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d120      	bne.n	8004912 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	4b20      	ldr	r3, [pc, #128]	; (8004964 <USB_CoreInit+0xac>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fa96 	bl	8004e38 <USB_CoreReset>
 800490c:	4603      	mov	r3, r0
 800490e:	73fb      	strb	r3, [r7, #15]
 8004910:	e010      	b.n	8004934 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa8a 	bl	8004e38 <USB_CoreReset>
 8004924:	4603      	mov	r3, r0
 8004926:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	2b01      	cmp	r3, #1
 8004938:	d10b      	bne.n	8004952 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f043 0206 	orr.w	r2, r3, #6
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004952:	7bfb      	ldrb	r3, [r7, #15]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800495e:	b004      	add	sp, #16
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	ffbdffbf 	.word	0xffbdffbf

08004968 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f023 0201 	bic.w	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d115      	bne.n	80049d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049b8:	2001      	movs	r0, #1
 80049ba:	f7fc fb4f 	bl	800105c <HAL_Delay>
      ms++;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3301      	adds	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fa29 	bl	8004e1c <USB_GetMode>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d01e      	beq.n	8004a0e <USB_SetCurrentMode+0x84>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b31      	cmp	r3, #49	; 0x31
 80049d4:	d9f0      	bls.n	80049b8 <USB_SetCurrentMode+0x2e>
 80049d6:	e01a      	b.n	8004a0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d115      	bne.n	8004a0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049ea:	2001      	movs	r0, #1
 80049ec:	f7fc fb36 	bl	800105c <HAL_Delay>
      ms++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3301      	adds	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa10 	bl	8004e1c <USB_GetMode>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <USB_SetCurrentMode+0x84>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b31      	cmp	r3, #49	; 0x31
 8004a06:	d9f0      	bls.n	80049ea <USB_SetCurrentMode+0x60>
 8004a08:	e001      	b.n	8004a0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e005      	b.n	8004a1a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b32      	cmp	r3, #50	; 0x32
 8004a12:	d101      	bne.n	8004a18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a24:	b084      	sub	sp, #16
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	e009      	b.n	8004a58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3340      	adds	r3, #64	; 0x40
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	2200      	movs	r2, #0
 8004a50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3301      	adds	r3, #1
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b0e      	cmp	r3, #14
 8004a5c:	d9f2      	bls.n	8004a44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11c      	bne.n	8004a9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a72:	f043 0302 	orr.w	r3, r3, #2
 8004a76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e005      	b.n	8004aaa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abc:	4619      	mov	r1, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	680b      	ldr	r3, [r1, #0]
 8004ac8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d10c      	bne.n	8004aea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d104      	bne.n	8004ae0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f965 	bl	8004da8 <USB_SetDevSpeed>
 8004ade:	e008      	b.n	8004af2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f960 	bl	8004da8 <USB_SetDevSpeed>
 8004ae8:	e003      	b.n	8004af2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004aea:	2103      	movs	r1, #3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f95b 	bl	8004da8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004af2:	2110      	movs	r1, #16
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8f3 	bl	8004ce0 <USB_FlushTxFifo>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f91f 	bl	8004d48 <USB_FlushRxFifo>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	461a      	mov	r2, r3
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	461a      	mov	r2, r3
 8004b34:	2300      	movs	r3, #0
 8004b36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	e043      	b.n	8004bc6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b54:	d118      	bne.n	8004b88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	e013      	b.n	8004b9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e008      	b.n	8004b9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	461a      	mov	r2, r3
 8004b96:	2300      	movs	r3, #0
 8004b98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d3b7      	bcc.n	8004b3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bce:	2300      	movs	r3, #0
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e043      	b.n	8004c5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bea:	d118      	bne.n	8004c1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e013      	b.n	8004c30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	461a      	mov	r2, r3
 8004c16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e008      	b.n	8004c30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d3b7      	bcc.n	8004bd4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f043 0210 	orr.w	r2, r3, #16
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <USB_DevInit+0x2b4>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f043 0208 	orr.w	r2, r3, #8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d105      	bne.n	8004cc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <USB_DevInit+0x2b8>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cd4:	b004      	add	sp, #16
 8004cd6:	4770      	bx	lr
 8004cd8:	803c3800 	.word	0x803c3800
 8004cdc:	40000004 	.word	0x40000004

08004ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <USB_FlushTxFifo+0x64>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e01b      	b.n	8004d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	daf2      	bge.n	8004cee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	019b      	lsls	r3, r3, #6
 8004d10:	f043 0220 	orr.w	r2, r3, #32
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <USB_FlushTxFifo+0x64>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e006      	b.n	8004d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d0f0      	beq.n	8004d18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	00030d40 	.word	0x00030d40

08004d48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <USB_FlushRxFifo+0x5c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e018      	b.n	8004d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	daf2      	bge.n	8004d54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2210      	movs	r2, #16
 8004d76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <USB_FlushRxFifo+0x5c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e006      	b.n	8004d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d0f0      	beq.n	8004d78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	00030d40 	.word	0x00030d40

08004da8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004df4:	f023 0303 	bic.w	r3, r3, #3
 8004df8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e08:	f043 0302 	orr.w	r3, r3, #2
 8004e0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0301 	and.w	r3, r3, #1
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <USB_CoreReset+0x64>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e01b      	b.n	8004e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	daf2      	bge.n	8004e44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3301      	adds	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <USB_CoreReset+0x64>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e006      	b.n	8004e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d0f0      	beq.n	8004e6e <USB_CoreReset+0x36>

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	00030d40 	.word	0x00030d40

08004ea0 <__errno>:
 8004ea0:	4b01      	ldr	r3, [pc, #4]	; (8004ea8 <__errno+0x8>)
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000024 	.word	0x20000024

08004eac <__libc_init_array>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	4d0d      	ldr	r5, [pc, #52]	; (8004ee4 <__libc_init_array+0x38>)
 8004eb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ee8 <__libc_init_array+0x3c>)
 8004eb2:	1b64      	subs	r4, r4, r5
 8004eb4:	10a4      	asrs	r4, r4, #2
 8004eb6:	2600      	movs	r6, #0
 8004eb8:	42a6      	cmp	r6, r4
 8004eba:	d109      	bne.n	8004ed0 <__libc_init_array+0x24>
 8004ebc:	4d0b      	ldr	r5, [pc, #44]	; (8004eec <__libc_init_array+0x40>)
 8004ebe:	4c0c      	ldr	r4, [pc, #48]	; (8004ef0 <__libc_init_array+0x44>)
 8004ec0:	f000 fc8e 	bl	80057e0 <_init>
 8004ec4:	1b64      	subs	r4, r4, r5
 8004ec6:	10a4      	asrs	r4, r4, #2
 8004ec8:	2600      	movs	r6, #0
 8004eca:	42a6      	cmp	r6, r4
 8004ecc:	d105      	bne.n	8004eda <__libc_init_array+0x2e>
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
 8004ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed4:	4798      	blx	r3
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7ee      	b.n	8004eb8 <__libc_init_array+0xc>
 8004eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ede:	4798      	blx	r3
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	e7f2      	b.n	8004eca <__libc_init_array+0x1e>
 8004ee4:	0800586c 	.word	0x0800586c
 8004ee8:	0800586c 	.word	0x0800586c
 8004eec:	0800586c 	.word	0x0800586c
 8004ef0:	08005870 	.word	0x08005870

08004ef4 <memset>:
 8004ef4:	4402      	add	r2, r0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d100      	bne.n	8004efe <memset+0xa>
 8004efc:	4770      	bx	lr
 8004efe:	f803 1b01 	strb.w	r1, [r3], #1
 8004f02:	e7f9      	b.n	8004ef8 <memset+0x4>

08004f04 <siprintf>:
 8004f04:	b40e      	push	{r1, r2, r3}
 8004f06:	b500      	push	{lr}
 8004f08:	b09c      	sub	sp, #112	; 0x70
 8004f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f0c:	9002      	str	r0, [sp, #8]
 8004f0e:	9006      	str	r0, [sp, #24]
 8004f10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f14:	4809      	ldr	r0, [pc, #36]	; (8004f3c <siprintf+0x38>)
 8004f16:	9107      	str	r1, [sp, #28]
 8004f18:	9104      	str	r1, [sp, #16]
 8004f1a:	4909      	ldr	r1, [pc, #36]	; (8004f40 <siprintf+0x3c>)
 8004f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f20:	9105      	str	r1, [sp, #20]
 8004f22:	6800      	ldr	r0, [r0, #0]
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	a902      	add	r1, sp, #8
 8004f28:	f000 f868 	bl	8004ffc <_svfiprintf_r>
 8004f2c:	9b02      	ldr	r3, [sp, #8]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	b01c      	add	sp, #112	; 0x70
 8004f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f38:	b003      	add	sp, #12
 8004f3a:	4770      	bx	lr
 8004f3c:	20000024 	.word	0x20000024
 8004f40:	ffff0208 	.word	0xffff0208

08004f44 <__ssputs_r>:
 8004f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	688e      	ldr	r6, [r1, #8]
 8004f4a:	429e      	cmp	r6, r3
 8004f4c:	4682      	mov	sl, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	4690      	mov	r8, r2
 8004f52:	461f      	mov	r7, r3
 8004f54:	d838      	bhi.n	8004fc8 <__ssputs_r+0x84>
 8004f56:	898a      	ldrh	r2, [r1, #12]
 8004f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f5c:	d032      	beq.n	8004fc4 <__ssputs_r+0x80>
 8004f5e:	6825      	ldr	r5, [r4, #0]
 8004f60:	6909      	ldr	r1, [r1, #16]
 8004f62:	eba5 0901 	sub.w	r9, r5, r1
 8004f66:	6965      	ldr	r5, [r4, #20]
 8004f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f70:	3301      	adds	r3, #1
 8004f72:	444b      	add	r3, r9
 8004f74:	106d      	asrs	r5, r5, #1
 8004f76:	429d      	cmp	r5, r3
 8004f78:	bf38      	it	cc
 8004f7a:	461d      	movcc	r5, r3
 8004f7c:	0553      	lsls	r3, r2, #21
 8004f7e:	d531      	bpl.n	8004fe4 <__ssputs_r+0xa0>
 8004f80:	4629      	mov	r1, r5
 8004f82:	f000 fb63 	bl	800564c <_malloc_r>
 8004f86:	4606      	mov	r6, r0
 8004f88:	b950      	cbnz	r0, 8004fa0 <__ssputs_r+0x5c>
 8004f8a:	230c      	movs	r3, #12
 8004f8c:	f8ca 3000 	str.w	r3, [sl]
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f96:	81a3      	strh	r3, [r4, #12]
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa0:	6921      	ldr	r1, [r4, #16]
 8004fa2:	464a      	mov	r2, r9
 8004fa4:	f000 fabe 	bl	8005524 <memcpy>
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	6126      	str	r6, [r4, #16]
 8004fb6:	6165      	str	r5, [r4, #20]
 8004fb8:	444e      	add	r6, r9
 8004fba:	eba5 0509 	sub.w	r5, r5, r9
 8004fbe:	6026      	str	r6, [r4, #0]
 8004fc0:	60a5      	str	r5, [r4, #8]
 8004fc2:	463e      	mov	r6, r7
 8004fc4:	42be      	cmp	r6, r7
 8004fc6:	d900      	bls.n	8004fca <__ssputs_r+0x86>
 8004fc8:	463e      	mov	r6, r7
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	4632      	mov	r2, r6
 8004fce:	4641      	mov	r1, r8
 8004fd0:	f000 fab6 	bl	8005540 <memmove>
 8004fd4:	68a3      	ldr	r3, [r4, #8]
 8004fd6:	1b9b      	subs	r3, r3, r6
 8004fd8:	60a3      	str	r3, [r4, #8]
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	4433      	add	r3, r6
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e7db      	b.n	8004f9c <__ssputs_r+0x58>
 8004fe4:	462a      	mov	r2, r5
 8004fe6:	f000 fba5 	bl	8005734 <_realloc_r>
 8004fea:	4606      	mov	r6, r0
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d1e1      	bne.n	8004fb4 <__ssputs_r+0x70>
 8004ff0:	6921      	ldr	r1, [r4, #16]
 8004ff2:	4650      	mov	r0, sl
 8004ff4:	f000 fabe 	bl	8005574 <_free_r>
 8004ff8:	e7c7      	b.n	8004f8a <__ssputs_r+0x46>
	...

08004ffc <_svfiprintf_r>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	4698      	mov	r8, r3
 8005002:	898b      	ldrh	r3, [r1, #12]
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	b09d      	sub	sp, #116	; 0x74
 8005008:	4607      	mov	r7, r0
 800500a:	460d      	mov	r5, r1
 800500c:	4614      	mov	r4, r2
 800500e:	d50e      	bpl.n	800502e <_svfiprintf_r+0x32>
 8005010:	690b      	ldr	r3, [r1, #16]
 8005012:	b963      	cbnz	r3, 800502e <_svfiprintf_r+0x32>
 8005014:	2140      	movs	r1, #64	; 0x40
 8005016:	f000 fb19 	bl	800564c <_malloc_r>
 800501a:	6028      	str	r0, [r5, #0]
 800501c:	6128      	str	r0, [r5, #16]
 800501e:	b920      	cbnz	r0, 800502a <_svfiprintf_r+0x2e>
 8005020:	230c      	movs	r3, #12
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	f04f 30ff 	mov.w	r0, #4294967295
 8005028:	e0d1      	b.n	80051ce <_svfiprintf_r+0x1d2>
 800502a:	2340      	movs	r3, #64	; 0x40
 800502c:	616b      	str	r3, [r5, #20]
 800502e:	2300      	movs	r3, #0
 8005030:	9309      	str	r3, [sp, #36]	; 0x24
 8005032:	2320      	movs	r3, #32
 8005034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005038:	f8cd 800c 	str.w	r8, [sp, #12]
 800503c:	2330      	movs	r3, #48	; 0x30
 800503e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80051e8 <_svfiprintf_r+0x1ec>
 8005042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005046:	f04f 0901 	mov.w	r9, #1
 800504a:	4623      	mov	r3, r4
 800504c:	469a      	mov	sl, r3
 800504e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005052:	b10a      	cbz	r2, 8005058 <_svfiprintf_r+0x5c>
 8005054:	2a25      	cmp	r2, #37	; 0x25
 8005056:	d1f9      	bne.n	800504c <_svfiprintf_r+0x50>
 8005058:	ebba 0b04 	subs.w	fp, sl, r4
 800505c:	d00b      	beq.n	8005076 <_svfiprintf_r+0x7a>
 800505e:	465b      	mov	r3, fp
 8005060:	4622      	mov	r2, r4
 8005062:	4629      	mov	r1, r5
 8005064:	4638      	mov	r0, r7
 8005066:	f7ff ff6d 	bl	8004f44 <__ssputs_r>
 800506a:	3001      	adds	r0, #1
 800506c:	f000 80aa 	beq.w	80051c4 <_svfiprintf_r+0x1c8>
 8005070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005072:	445a      	add	r2, fp
 8005074:	9209      	str	r2, [sp, #36]	; 0x24
 8005076:	f89a 3000 	ldrb.w	r3, [sl]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80a2 	beq.w	80051c4 <_svfiprintf_r+0x1c8>
 8005080:	2300      	movs	r3, #0
 8005082:	f04f 32ff 	mov.w	r2, #4294967295
 8005086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800508a:	f10a 0a01 	add.w	sl, sl, #1
 800508e:	9304      	str	r3, [sp, #16]
 8005090:	9307      	str	r3, [sp, #28]
 8005092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005096:	931a      	str	r3, [sp, #104]	; 0x68
 8005098:	4654      	mov	r4, sl
 800509a:	2205      	movs	r2, #5
 800509c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a0:	4851      	ldr	r0, [pc, #324]	; (80051e8 <_svfiprintf_r+0x1ec>)
 80050a2:	f7fb f8c5 	bl	8000230 <memchr>
 80050a6:	9a04      	ldr	r2, [sp, #16]
 80050a8:	b9d8      	cbnz	r0, 80050e2 <_svfiprintf_r+0xe6>
 80050aa:	06d0      	lsls	r0, r2, #27
 80050ac:	bf44      	itt	mi
 80050ae:	2320      	movmi	r3, #32
 80050b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b4:	0711      	lsls	r1, r2, #28
 80050b6:	bf44      	itt	mi
 80050b8:	232b      	movmi	r3, #43	; 0x2b
 80050ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050be:	f89a 3000 	ldrb.w	r3, [sl]
 80050c2:	2b2a      	cmp	r3, #42	; 0x2a
 80050c4:	d015      	beq.n	80050f2 <_svfiprintf_r+0xf6>
 80050c6:	9a07      	ldr	r2, [sp, #28]
 80050c8:	4654      	mov	r4, sl
 80050ca:	2000      	movs	r0, #0
 80050cc:	f04f 0c0a 	mov.w	ip, #10
 80050d0:	4621      	mov	r1, r4
 80050d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050d6:	3b30      	subs	r3, #48	; 0x30
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d94e      	bls.n	800517a <_svfiprintf_r+0x17e>
 80050dc:	b1b0      	cbz	r0, 800510c <_svfiprintf_r+0x110>
 80050de:	9207      	str	r2, [sp, #28]
 80050e0:	e014      	b.n	800510c <_svfiprintf_r+0x110>
 80050e2:	eba0 0308 	sub.w	r3, r0, r8
 80050e6:	fa09 f303 	lsl.w	r3, r9, r3
 80050ea:	4313      	orrs	r3, r2
 80050ec:	9304      	str	r3, [sp, #16]
 80050ee:	46a2      	mov	sl, r4
 80050f0:	e7d2      	b.n	8005098 <_svfiprintf_r+0x9c>
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	1d19      	adds	r1, r3, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	9103      	str	r1, [sp, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bfbb      	ittet	lt
 80050fe:	425b      	neglt	r3, r3
 8005100:	f042 0202 	orrlt.w	r2, r2, #2
 8005104:	9307      	strge	r3, [sp, #28]
 8005106:	9307      	strlt	r3, [sp, #28]
 8005108:	bfb8      	it	lt
 800510a:	9204      	strlt	r2, [sp, #16]
 800510c:	7823      	ldrb	r3, [r4, #0]
 800510e:	2b2e      	cmp	r3, #46	; 0x2e
 8005110:	d10c      	bne.n	800512c <_svfiprintf_r+0x130>
 8005112:	7863      	ldrb	r3, [r4, #1]
 8005114:	2b2a      	cmp	r3, #42	; 0x2a
 8005116:	d135      	bne.n	8005184 <_svfiprintf_r+0x188>
 8005118:	9b03      	ldr	r3, [sp, #12]
 800511a:	1d1a      	adds	r2, r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	9203      	str	r2, [sp, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	bfb8      	it	lt
 8005124:	f04f 33ff 	movlt.w	r3, #4294967295
 8005128:	3402      	adds	r4, #2
 800512a:	9305      	str	r3, [sp, #20]
 800512c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051f8 <_svfiprintf_r+0x1fc>
 8005130:	7821      	ldrb	r1, [r4, #0]
 8005132:	2203      	movs	r2, #3
 8005134:	4650      	mov	r0, sl
 8005136:	f7fb f87b 	bl	8000230 <memchr>
 800513a:	b140      	cbz	r0, 800514e <_svfiprintf_r+0x152>
 800513c:	2340      	movs	r3, #64	; 0x40
 800513e:	eba0 000a 	sub.w	r0, r0, sl
 8005142:	fa03 f000 	lsl.w	r0, r3, r0
 8005146:	9b04      	ldr	r3, [sp, #16]
 8005148:	4303      	orrs	r3, r0
 800514a:	3401      	adds	r4, #1
 800514c:	9304      	str	r3, [sp, #16]
 800514e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005152:	4826      	ldr	r0, [pc, #152]	; (80051ec <_svfiprintf_r+0x1f0>)
 8005154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005158:	2206      	movs	r2, #6
 800515a:	f7fb f869 	bl	8000230 <memchr>
 800515e:	2800      	cmp	r0, #0
 8005160:	d038      	beq.n	80051d4 <_svfiprintf_r+0x1d8>
 8005162:	4b23      	ldr	r3, [pc, #140]	; (80051f0 <_svfiprintf_r+0x1f4>)
 8005164:	bb1b      	cbnz	r3, 80051ae <_svfiprintf_r+0x1b2>
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	3307      	adds	r3, #7
 800516a:	f023 0307 	bic.w	r3, r3, #7
 800516e:	3308      	adds	r3, #8
 8005170:	9303      	str	r3, [sp, #12]
 8005172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005174:	4433      	add	r3, r6
 8005176:	9309      	str	r3, [sp, #36]	; 0x24
 8005178:	e767      	b.n	800504a <_svfiprintf_r+0x4e>
 800517a:	fb0c 3202 	mla	r2, ip, r2, r3
 800517e:	460c      	mov	r4, r1
 8005180:	2001      	movs	r0, #1
 8005182:	e7a5      	b.n	80050d0 <_svfiprintf_r+0xd4>
 8005184:	2300      	movs	r3, #0
 8005186:	3401      	adds	r4, #1
 8005188:	9305      	str	r3, [sp, #20]
 800518a:	4619      	mov	r1, r3
 800518c:	f04f 0c0a 	mov.w	ip, #10
 8005190:	4620      	mov	r0, r4
 8005192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005196:	3a30      	subs	r2, #48	; 0x30
 8005198:	2a09      	cmp	r2, #9
 800519a:	d903      	bls.n	80051a4 <_svfiprintf_r+0x1a8>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0c5      	beq.n	800512c <_svfiprintf_r+0x130>
 80051a0:	9105      	str	r1, [sp, #20]
 80051a2:	e7c3      	b.n	800512c <_svfiprintf_r+0x130>
 80051a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051a8:	4604      	mov	r4, r0
 80051aa:	2301      	movs	r3, #1
 80051ac:	e7f0      	b.n	8005190 <_svfiprintf_r+0x194>
 80051ae:	ab03      	add	r3, sp, #12
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	462a      	mov	r2, r5
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <_svfiprintf_r+0x1f8>)
 80051b6:	a904      	add	r1, sp, #16
 80051b8:	4638      	mov	r0, r7
 80051ba:	f3af 8000 	nop.w
 80051be:	1c42      	adds	r2, r0, #1
 80051c0:	4606      	mov	r6, r0
 80051c2:	d1d6      	bne.n	8005172 <_svfiprintf_r+0x176>
 80051c4:	89ab      	ldrh	r3, [r5, #12]
 80051c6:	065b      	lsls	r3, r3, #25
 80051c8:	f53f af2c 	bmi.w	8005024 <_svfiprintf_r+0x28>
 80051cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ce:	b01d      	add	sp, #116	; 0x74
 80051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d4:	ab03      	add	r3, sp, #12
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	462a      	mov	r2, r5
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <_svfiprintf_r+0x1f8>)
 80051dc:	a904      	add	r1, sp, #16
 80051de:	4638      	mov	r0, r7
 80051e0:	f000 f87a 	bl	80052d8 <_printf_i>
 80051e4:	e7eb      	b.n	80051be <_svfiprintf_r+0x1c2>
 80051e6:	bf00      	nop
 80051e8:	08005830 	.word	0x08005830
 80051ec:	0800583a 	.word	0x0800583a
 80051f0:	00000000 	.word	0x00000000
 80051f4:	08004f45 	.word	0x08004f45
 80051f8:	08005836 	.word	0x08005836

080051fc <_printf_common>:
 80051fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	4616      	mov	r6, r2
 8005202:	4699      	mov	r9, r3
 8005204:	688a      	ldr	r2, [r1, #8]
 8005206:	690b      	ldr	r3, [r1, #16]
 8005208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800520c:	4293      	cmp	r3, r2
 800520e:	bfb8      	it	lt
 8005210:	4613      	movlt	r3, r2
 8005212:	6033      	str	r3, [r6, #0]
 8005214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005218:	4607      	mov	r7, r0
 800521a:	460c      	mov	r4, r1
 800521c:	b10a      	cbz	r2, 8005222 <_printf_common+0x26>
 800521e:	3301      	adds	r3, #1
 8005220:	6033      	str	r3, [r6, #0]
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	0699      	lsls	r1, r3, #26
 8005226:	bf42      	ittt	mi
 8005228:	6833      	ldrmi	r3, [r6, #0]
 800522a:	3302      	addmi	r3, #2
 800522c:	6033      	strmi	r3, [r6, #0]
 800522e:	6825      	ldr	r5, [r4, #0]
 8005230:	f015 0506 	ands.w	r5, r5, #6
 8005234:	d106      	bne.n	8005244 <_printf_common+0x48>
 8005236:	f104 0a19 	add.w	sl, r4, #25
 800523a:	68e3      	ldr	r3, [r4, #12]
 800523c:	6832      	ldr	r2, [r6, #0]
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	42ab      	cmp	r3, r5
 8005242:	dc26      	bgt.n	8005292 <_printf_common+0x96>
 8005244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005248:	1e13      	subs	r3, r2, #0
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	bf18      	it	ne
 800524e:	2301      	movne	r3, #1
 8005250:	0692      	lsls	r2, r2, #26
 8005252:	d42b      	bmi.n	80052ac <_printf_common+0xb0>
 8005254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005258:	4649      	mov	r1, r9
 800525a:	4638      	mov	r0, r7
 800525c:	47c0      	blx	r8
 800525e:	3001      	adds	r0, #1
 8005260:	d01e      	beq.n	80052a0 <_printf_common+0xa4>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	68e5      	ldr	r5, [r4, #12]
 8005266:	6832      	ldr	r2, [r6, #0]
 8005268:	f003 0306 	and.w	r3, r3, #6
 800526c:	2b04      	cmp	r3, #4
 800526e:	bf08      	it	eq
 8005270:	1aad      	subeq	r5, r5, r2
 8005272:	68a3      	ldr	r3, [r4, #8]
 8005274:	6922      	ldr	r2, [r4, #16]
 8005276:	bf0c      	ite	eq
 8005278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800527c:	2500      	movne	r5, #0
 800527e:	4293      	cmp	r3, r2
 8005280:	bfc4      	itt	gt
 8005282:	1a9b      	subgt	r3, r3, r2
 8005284:	18ed      	addgt	r5, r5, r3
 8005286:	2600      	movs	r6, #0
 8005288:	341a      	adds	r4, #26
 800528a:	42b5      	cmp	r5, r6
 800528c:	d11a      	bne.n	80052c4 <_printf_common+0xc8>
 800528e:	2000      	movs	r0, #0
 8005290:	e008      	b.n	80052a4 <_printf_common+0xa8>
 8005292:	2301      	movs	r3, #1
 8005294:	4652      	mov	r2, sl
 8005296:	4649      	mov	r1, r9
 8005298:	4638      	mov	r0, r7
 800529a:	47c0      	blx	r8
 800529c:	3001      	adds	r0, #1
 800529e:	d103      	bne.n	80052a8 <_printf_common+0xac>
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a8:	3501      	adds	r5, #1
 80052aa:	e7c6      	b.n	800523a <_printf_common+0x3e>
 80052ac:	18e1      	adds	r1, r4, r3
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	2030      	movs	r0, #48	; 0x30
 80052b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052b6:	4422      	add	r2, r4
 80052b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052c0:	3302      	adds	r3, #2
 80052c2:	e7c7      	b.n	8005254 <_printf_common+0x58>
 80052c4:	2301      	movs	r3, #1
 80052c6:	4622      	mov	r2, r4
 80052c8:	4649      	mov	r1, r9
 80052ca:	4638      	mov	r0, r7
 80052cc:	47c0      	blx	r8
 80052ce:	3001      	adds	r0, #1
 80052d0:	d0e6      	beq.n	80052a0 <_printf_common+0xa4>
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7d9      	b.n	800528a <_printf_common+0x8e>
	...

080052d8 <_printf_i>:
 80052d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052dc:	7e0f      	ldrb	r7, [r1, #24]
 80052de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052e0:	2f78      	cmp	r7, #120	; 0x78
 80052e2:	4691      	mov	r9, r2
 80052e4:	4680      	mov	r8, r0
 80052e6:	460c      	mov	r4, r1
 80052e8:	469a      	mov	sl, r3
 80052ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052ee:	d807      	bhi.n	8005300 <_printf_i+0x28>
 80052f0:	2f62      	cmp	r7, #98	; 0x62
 80052f2:	d80a      	bhi.n	800530a <_printf_i+0x32>
 80052f4:	2f00      	cmp	r7, #0
 80052f6:	f000 80d8 	beq.w	80054aa <_printf_i+0x1d2>
 80052fa:	2f58      	cmp	r7, #88	; 0x58
 80052fc:	f000 80a3 	beq.w	8005446 <_printf_i+0x16e>
 8005300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005308:	e03a      	b.n	8005380 <_printf_i+0xa8>
 800530a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800530e:	2b15      	cmp	r3, #21
 8005310:	d8f6      	bhi.n	8005300 <_printf_i+0x28>
 8005312:	a101      	add	r1, pc, #4	; (adr r1, 8005318 <_printf_i+0x40>)
 8005314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005318:	08005371 	.word	0x08005371
 800531c:	08005385 	.word	0x08005385
 8005320:	08005301 	.word	0x08005301
 8005324:	08005301 	.word	0x08005301
 8005328:	08005301 	.word	0x08005301
 800532c:	08005301 	.word	0x08005301
 8005330:	08005385 	.word	0x08005385
 8005334:	08005301 	.word	0x08005301
 8005338:	08005301 	.word	0x08005301
 800533c:	08005301 	.word	0x08005301
 8005340:	08005301 	.word	0x08005301
 8005344:	08005491 	.word	0x08005491
 8005348:	080053b5 	.word	0x080053b5
 800534c:	08005473 	.word	0x08005473
 8005350:	08005301 	.word	0x08005301
 8005354:	08005301 	.word	0x08005301
 8005358:	080054b3 	.word	0x080054b3
 800535c:	08005301 	.word	0x08005301
 8005360:	080053b5 	.word	0x080053b5
 8005364:	08005301 	.word	0x08005301
 8005368:	08005301 	.word	0x08005301
 800536c:	0800547b 	.word	0x0800547b
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	1d1a      	adds	r2, r3, #4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	602a      	str	r2, [r5, #0]
 8005378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800537c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005380:	2301      	movs	r3, #1
 8005382:	e0a3      	b.n	80054cc <_printf_i+0x1f4>
 8005384:	6820      	ldr	r0, [r4, #0]
 8005386:	6829      	ldr	r1, [r5, #0]
 8005388:	0606      	lsls	r6, r0, #24
 800538a:	f101 0304 	add.w	r3, r1, #4
 800538e:	d50a      	bpl.n	80053a6 <_printf_i+0xce>
 8005390:	680e      	ldr	r6, [r1, #0]
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	2e00      	cmp	r6, #0
 8005396:	da03      	bge.n	80053a0 <_printf_i+0xc8>
 8005398:	232d      	movs	r3, #45	; 0x2d
 800539a:	4276      	negs	r6, r6
 800539c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a0:	485e      	ldr	r0, [pc, #376]	; (800551c <_printf_i+0x244>)
 80053a2:	230a      	movs	r3, #10
 80053a4:	e019      	b.n	80053da <_printf_i+0x102>
 80053a6:	680e      	ldr	r6, [r1, #0]
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053ae:	bf18      	it	ne
 80053b0:	b236      	sxthne	r6, r6
 80053b2:	e7ef      	b.n	8005394 <_printf_i+0xbc>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	1d19      	adds	r1, r3, #4
 80053ba:	6029      	str	r1, [r5, #0]
 80053bc:	0601      	lsls	r1, r0, #24
 80053be:	d501      	bpl.n	80053c4 <_printf_i+0xec>
 80053c0:	681e      	ldr	r6, [r3, #0]
 80053c2:	e002      	b.n	80053ca <_printf_i+0xf2>
 80053c4:	0646      	lsls	r6, r0, #25
 80053c6:	d5fb      	bpl.n	80053c0 <_printf_i+0xe8>
 80053c8:	881e      	ldrh	r6, [r3, #0]
 80053ca:	4854      	ldr	r0, [pc, #336]	; (800551c <_printf_i+0x244>)
 80053cc:	2f6f      	cmp	r7, #111	; 0x6f
 80053ce:	bf0c      	ite	eq
 80053d0:	2308      	moveq	r3, #8
 80053d2:	230a      	movne	r3, #10
 80053d4:	2100      	movs	r1, #0
 80053d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053da:	6865      	ldr	r5, [r4, #4]
 80053dc:	60a5      	str	r5, [r4, #8]
 80053de:	2d00      	cmp	r5, #0
 80053e0:	bfa2      	ittt	ge
 80053e2:	6821      	ldrge	r1, [r4, #0]
 80053e4:	f021 0104 	bicge.w	r1, r1, #4
 80053e8:	6021      	strge	r1, [r4, #0]
 80053ea:	b90e      	cbnz	r6, 80053f0 <_printf_i+0x118>
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	d04d      	beq.n	800548c <_printf_i+0x1b4>
 80053f0:	4615      	mov	r5, r2
 80053f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053f6:	fb03 6711 	mls	r7, r3, r1, r6
 80053fa:	5dc7      	ldrb	r7, [r0, r7]
 80053fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005400:	4637      	mov	r7, r6
 8005402:	42bb      	cmp	r3, r7
 8005404:	460e      	mov	r6, r1
 8005406:	d9f4      	bls.n	80053f2 <_printf_i+0x11a>
 8005408:	2b08      	cmp	r3, #8
 800540a:	d10b      	bne.n	8005424 <_printf_i+0x14c>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	07de      	lsls	r6, r3, #31
 8005410:	d508      	bpl.n	8005424 <_printf_i+0x14c>
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	6861      	ldr	r1, [r4, #4]
 8005416:	4299      	cmp	r1, r3
 8005418:	bfde      	ittt	le
 800541a:	2330      	movle	r3, #48	; 0x30
 800541c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005420:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005424:	1b52      	subs	r2, r2, r5
 8005426:	6122      	str	r2, [r4, #16]
 8005428:	f8cd a000 	str.w	sl, [sp]
 800542c:	464b      	mov	r3, r9
 800542e:	aa03      	add	r2, sp, #12
 8005430:	4621      	mov	r1, r4
 8005432:	4640      	mov	r0, r8
 8005434:	f7ff fee2 	bl	80051fc <_printf_common>
 8005438:	3001      	adds	r0, #1
 800543a:	d14c      	bne.n	80054d6 <_printf_i+0x1fe>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	b004      	add	sp, #16
 8005442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005446:	4835      	ldr	r0, [pc, #212]	; (800551c <_printf_i+0x244>)
 8005448:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800544c:	6829      	ldr	r1, [r5, #0]
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	f851 6b04 	ldr.w	r6, [r1], #4
 8005454:	6029      	str	r1, [r5, #0]
 8005456:	061d      	lsls	r5, r3, #24
 8005458:	d514      	bpl.n	8005484 <_printf_i+0x1ac>
 800545a:	07df      	lsls	r7, r3, #31
 800545c:	bf44      	itt	mi
 800545e:	f043 0320 	orrmi.w	r3, r3, #32
 8005462:	6023      	strmi	r3, [r4, #0]
 8005464:	b91e      	cbnz	r6, 800546e <_printf_i+0x196>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	f023 0320 	bic.w	r3, r3, #32
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	2310      	movs	r3, #16
 8005470:	e7b0      	b.n	80053d4 <_printf_i+0xfc>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	f043 0320 	orr.w	r3, r3, #32
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	2378      	movs	r3, #120	; 0x78
 800547c:	4828      	ldr	r0, [pc, #160]	; (8005520 <_printf_i+0x248>)
 800547e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005482:	e7e3      	b.n	800544c <_printf_i+0x174>
 8005484:	0659      	lsls	r1, r3, #25
 8005486:	bf48      	it	mi
 8005488:	b2b6      	uxthmi	r6, r6
 800548a:	e7e6      	b.n	800545a <_printf_i+0x182>
 800548c:	4615      	mov	r5, r2
 800548e:	e7bb      	b.n	8005408 <_printf_i+0x130>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	6826      	ldr	r6, [r4, #0]
 8005494:	6961      	ldr	r1, [r4, #20]
 8005496:	1d18      	adds	r0, r3, #4
 8005498:	6028      	str	r0, [r5, #0]
 800549a:	0635      	lsls	r5, r6, #24
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	d501      	bpl.n	80054a4 <_printf_i+0x1cc>
 80054a0:	6019      	str	r1, [r3, #0]
 80054a2:	e002      	b.n	80054aa <_printf_i+0x1d2>
 80054a4:	0670      	lsls	r0, r6, #25
 80054a6:	d5fb      	bpl.n	80054a0 <_printf_i+0x1c8>
 80054a8:	8019      	strh	r1, [r3, #0]
 80054aa:	2300      	movs	r3, #0
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	4615      	mov	r5, r2
 80054b0:	e7ba      	b.n	8005428 <_printf_i+0x150>
 80054b2:	682b      	ldr	r3, [r5, #0]
 80054b4:	1d1a      	adds	r2, r3, #4
 80054b6:	602a      	str	r2, [r5, #0]
 80054b8:	681d      	ldr	r5, [r3, #0]
 80054ba:	6862      	ldr	r2, [r4, #4]
 80054bc:	2100      	movs	r1, #0
 80054be:	4628      	mov	r0, r5
 80054c0:	f7fa feb6 	bl	8000230 <memchr>
 80054c4:	b108      	cbz	r0, 80054ca <_printf_i+0x1f2>
 80054c6:	1b40      	subs	r0, r0, r5
 80054c8:	6060      	str	r0, [r4, #4]
 80054ca:	6863      	ldr	r3, [r4, #4]
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	2300      	movs	r3, #0
 80054d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d4:	e7a8      	b.n	8005428 <_printf_i+0x150>
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	462a      	mov	r2, r5
 80054da:	4649      	mov	r1, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	47d0      	blx	sl
 80054e0:	3001      	adds	r0, #1
 80054e2:	d0ab      	beq.n	800543c <_printf_i+0x164>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	079b      	lsls	r3, r3, #30
 80054e8:	d413      	bmi.n	8005512 <_printf_i+0x23a>
 80054ea:	68e0      	ldr	r0, [r4, #12]
 80054ec:	9b03      	ldr	r3, [sp, #12]
 80054ee:	4298      	cmp	r0, r3
 80054f0:	bfb8      	it	lt
 80054f2:	4618      	movlt	r0, r3
 80054f4:	e7a4      	b.n	8005440 <_printf_i+0x168>
 80054f6:	2301      	movs	r3, #1
 80054f8:	4632      	mov	r2, r6
 80054fa:	4649      	mov	r1, r9
 80054fc:	4640      	mov	r0, r8
 80054fe:	47d0      	blx	sl
 8005500:	3001      	adds	r0, #1
 8005502:	d09b      	beq.n	800543c <_printf_i+0x164>
 8005504:	3501      	adds	r5, #1
 8005506:	68e3      	ldr	r3, [r4, #12]
 8005508:	9903      	ldr	r1, [sp, #12]
 800550a:	1a5b      	subs	r3, r3, r1
 800550c:	42ab      	cmp	r3, r5
 800550e:	dcf2      	bgt.n	80054f6 <_printf_i+0x21e>
 8005510:	e7eb      	b.n	80054ea <_printf_i+0x212>
 8005512:	2500      	movs	r5, #0
 8005514:	f104 0619 	add.w	r6, r4, #25
 8005518:	e7f5      	b.n	8005506 <_printf_i+0x22e>
 800551a:	bf00      	nop
 800551c:	08005841 	.word	0x08005841
 8005520:	08005852 	.word	0x08005852

08005524 <memcpy>:
 8005524:	440a      	add	r2, r1
 8005526:	4291      	cmp	r1, r2
 8005528:	f100 33ff 	add.w	r3, r0, #4294967295
 800552c:	d100      	bne.n	8005530 <memcpy+0xc>
 800552e:	4770      	bx	lr
 8005530:	b510      	push	{r4, lr}
 8005532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800553a:	4291      	cmp	r1, r2
 800553c:	d1f9      	bne.n	8005532 <memcpy+0xe>
 800553e:	bd10      	pop	{r4, pc}

08005540 <memmove>:
 8005540:	4288      	cmp	r0, r1
 8005542:	b510      	push	{r4, lr}
 8005544:	eb01 0402 	add.w	r4, r1, r2
 8005548:	d902      	bls.n	8005550 <memmove+0x10>
 800554a:	4284      	cmp	r4, r0
 800554c:	4623      	mov	r3, r4
 800554e:	d807      	bhi.n	8005560 <memmove+0x20>
 8005550:	1e43      	subs	r3, r0, #1
 8005552:	42a1      	cmp	r1, r4
 8005554:	d008      	beq.n	8005568 <memmove+0x28>
 8005556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800555e:	e7f8      	b.n	8005552 <memmove+0x12>
 8005560:	4402      	add	r2, r0
 8005562:	4601      	mov	r1, r0
 8005564:	428a      	cmp	r2, r1
 8005566:	d100      	bne.n	800556a <memmove+0x2a>
 8005568:	bd10      	pop	{r4, pc}
 800556a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800556e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005572:	e7f7      	b.n	8005564 <memmove+0x24>

08005574 <_free_r>:
 8005574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005576:	2900      	cmp	r1, #0
 8005578:	d044      	beq.n	8005604 <_free_r+0x90>
 800557a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800557e:	9001      	str	r0, [sp, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f1a1 0404 	sub.w	r4, r1, #4
 8005586:	bfb8      	it	lt
 8005588:	18e4      	addlt	r4, r4, r3
 800558a:	f000 f913 	bl	80057b4 <__malloc_lock>
 800558e:	4a1e      	ldr	r2, [pc, #120]	; (8005608 <_free_r+0x94>)
 8005590:	9801      	ldr	r0, [sp, #4]
 8005592:	6813      	ldr	r3, [r2, #0]
 8005594:	b933      	cbnz	r3, 80055a4 <_free_r+0x30>
 8005596:	6063      	str	r3, [r4, #4]
 8005598:	6014      	str	r4, [r2, #0]
 800559a:	b003      	add	sp, #12
 800559c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055a0:	f000 b90e 	b.w	80057c0 <__malloc_unlock>
 80055a4:	42a3      	cmp	r3, r4
 80055a6:	d908      	bls.n	80055ba <_free_r+0x46>
 80055a8:	6825      	ldr	r5, [r4, #0]
 80055aa:	1961      	adds	r1, r4, r5
 80055ac:	428b      	cmp	r3, r1
 80055ae:	bf01      	itttt	eq
 80055b0:	6819      	ldreq	r1, [r3, #0]
 80055b2:	685b      	ldreq	r3, [r3, #4]
 80055b4:	1949      	addeq	r1, r1, r5
 80055b6:	6021      	streq	r1, [r4, #0]
 80055b8:	e7ed      	b.n	8005596 <_free_r+0x22>
 80055ba:	461a      	mov	r2, r3
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	b10b      	cbz	r3, 80055c4 <_free_r+0x50>
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	d9fa      	bls.n	80055ba <_free_r+0x46>
 80055c4:	6811      	ldr	r1, [r2, #0]
 80055c6:	1855      	adds	r5, r2, r1
 80055c8:	42a5      	cmp	r5, r4
 80055ca:	d10b      	bne.n	80055e4 <_free_r+0x70>
 80055cc:	6824      	ldr	r4, [r4, #0]
 80055ce:	4421      	add	r1, r4
 80055d0:	1854      	adds	r4, r2, r1
 80055d2:	42a3      	cmp	r3, r4
 80055d4:	6011      	str	r1, [r2, #0]
 80055d6:	d1e0      	bne.n	800559a <_free_r+0x26>
 80055d8:	681c      	ldr	r4, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	6053      	str	r3, [r2, #4]
 80055de:	4421      	add	r1, r4
 80055e0:	6011      	str	r1, [r2, #0]
 80055e2:	e7da      	b.n	800559a <_free_r+0x26>
 80055e4:	d902      	bls.n	80055ec <_free_r+0x78>
 80055e6:	230c      	movs	r3, #12
 80055e8:	6003      	str	r3, [r0, #0]
 80055ea:	e7d6      	b.n	800559a <_free_r+0x26>
 80055ec:	6825      	ldr	r5, [r4, #0]
 80055ee:	1961      	adds	r1, r4, r5
 80055f0:	428b      	cmp	r3, r1
 80055f2:	bf04      	itt	eq
 80055f4:	6819      	ldreq	r1, [r3, #0]
 80055f6:	685b      	ldreq	r3, [r3, #4]
 80055f8:	6063      	str	r3, [r4, #4]
 80055fa:	bf04      	itt	eq
 80055fc:	1949      	addeq	r1, r1, r5
 80055fe:	6021      	streq	r1, [r4, #0]
 8005600:	6054      	str	r4, [r2, #4]
 8005602:	e7ca      	b.n	800559a <_free_r+0x26>
 8005604:	b003      	add	sp, #12
 8005606:	bd30      	pop	{r4, r5, pc}
 8005608:	20000870 	.word	0x20000870

0800560c <sbrk_aligned>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4e0e      	ldr	r6, [pc, #56]	; (8005648 <sbrk_aligned+0x3c>)
 8005610:	460c      	mov	r4, r1
 8005612:	6831      	ldr	r1, [r6, #0]
 8005614:	4605      	mov	r5, r0
 8005616:	b911      	cbnz	r1, 800561e <sbrk_aligned+0x12>
 8005618:	f000 f8bc 	bl	8005794 <_sbrk_r>
 800561c:	6030      	str	r0, [r6, #0]
 800561e:	4621      	mov	r1, r4
 8005620:	4628      	mov	r0, r5
 8005622:	f000 f8b7 	bl	8005794 <_sbrk_r>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	d00a      	beq.n	8005640 <sbrk_aligned+0x34>
 800562a:	1cc4      	adds	r4, r0, #3
 800562c:	f024 0403 	bic.w	r4, r4, #3
 8005630:	42a0      	cmp	r0, r4
 8005632:	d007      	beq.n	8005644 <sbrk_aligned+0x38>
 8005634:	1a21      	subs	r1, r4, r0
 8005636:	4628      	mov	r0, r5
 8005638:	f000 f8ac 	bl	8005794 <_sbrk_r>
 800563c:	3001      	adds	r0, #1
 800563e:	d101      	bne.n	8005644 <sbrk_aligned+0x38>
 8005640:	f04f 34ff 	mov.w	r4, #4294967295
 8005644:	4620      	mov	r0, r4
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	20000874 	.word	0x20000874

0800564c <_malloc_r>:
 800564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005650:	1ccd      	adds	r5, r1, #3
 8005652:	f025 0503 	bic.w	r5, r5, #3
 8005656:	3508      	adds	r5, #8
 8005658:	2d0c      	cmp	r5, #12
 800565a:	bf38      	it	cc
 800565c:	250c      	movcc	r5, #12
 800565e:	2d00      	cmp	r5, #0
 8005660:	4607      	mov	r7, r0
 8005662:	db01      	blt.n	8005668 <_malloc_r+0x1c>
 8005664:	42a9      	cmp	r1, r5
 8005666:	d905      	bls.n	8005674 <_malloc_r+0x28>
 8005668:	230c      	movs	r3, #12
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	2600      	movs	r6, #0
 800566e:	4630      	mov	r0, r6
 8005670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005674:	4e2e      	ldr	r6, [pc, #184]	; (8005730 <_malloc_r+0xe4>)
 8005676:	f000 f89d 	bl	80057b4 <__malloc_lock>
 800567a:	6833      	ldr	r3, [r6, #0]
 800567c:	461c      	mov	r4, r3
 800567e:	bb34      	cbnz	r4, 80056ce <_malloc_r+0x82>
 8005680:	4629      	mov	r1, r5
 8005682:	4638      	mov	r0, r7
 8005684:	f7ff ffc2 	bl	800560c <sbrk_aligned>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	4604      	mov	r4, r0
 800568c:	d14d      	bne.n	800572a <_malloc_r+0xde>
 800568e:	6834      	ldr	r4, [r6, #0]
 8005690:	4626      	mov	r6, r4
 8005692:	2e00      	cmp	r6, #0
 8005694:	d140      	bne.n	8005718 <_malloc_r+0xcc>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	4631      	mov	r1, r6
 800569a:	4638      	mov	r0, r7
 800569c:	eb04 0803 	add.w	r8, r4, r3
 80056a0:	f000 f878 	bl	8005794 <_sbrk_r>
 80056a4:	4580      	cmp	r8, r0
 80056a6:	d13a      	bne.n	800571e <_malloc_r+0xd2>
 80056a8:	6821      	ldr	r1, [r4, #0]
 80056aa:	3503      	adds	r5, #3
 80056ac:	1a6d      	subs	r5, r5, r1
 80056ae:	f025 0503 	bic.w	r5, r5, #3
 80056b2:	3508      	adds	r5, #8
 80056b4:	2d0c      	cmp	r5, #12
 80056b6:	bf38      	it	cc
 80056b8:	250c      	movcc	r5, #12
 80056ba:	4629      	mov	r1, r5
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff ffa5 	bl	800560c <sbrk_aligned>
 80056c2:	3001      	adds	r0, #1
 80056c4:	d02b      	beq.n	800571e <_malloc_r+0xd2>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	442b      	add	r3, r5
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	e00e      	b.n	80056ec <_malloc_r+0xa0>
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	1b52      	subs	r2, r2, r5
 80056d2:	d41e      	bmi.n	8005712 <_malloc_r+0xc6>
 80056d4:	2a0b      	cmp	r2, #11
 80056d6:	d916      	bls.n	8005706 <_malloc_r+0xba>
 80056d8:	1961      	adds	r1, r4, r5
 80056da:	42a3      	cmp	r3, r4
 80056dc:	6025      	str	r5, [r4, #0]
 80056de:	bf18      	it	ne
 80056e0:	6059      	strne	r1, [r3, #4]
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	bf08      	it	eq
 80056e6:	6031      	streq	r1, [r6, #0]
 80056e8:	5162      	str	r2, [r4, r5]
 80056ea:	604b      	str	r3, [r1, #4]
 80056ec:	4638      	mov	r0, r7
 80056ee:	f104 060b 	add.w	r6, r4, #11
 80056f2:	f000 f865 	bl	80057c0 <__malloc_unlock>
 80056f6:	f026 0607 	bic.w	r6, r6, #7
 80056fa:	1d23      	adds	r3, r4, #4
 80056fc:	1af2      	subs	r2, r6, r3
 80056fe:	d0b6      	beq.n	800566e <_malloc_r+0x22>
 8005700:	1b9b      	subs	r3, r3, r6
 8005702:	50a3      	str	r3, [r4, r2]
 8005704:	e7b3      	b.n	800566e <_malloc_r+0x22>
 8005706:	6862      	ldr	r2, [r4, #4]
 8005708:	42a3      	cmp	r3, r4
 800570a:	bf0c      	ite	eq
 800570c:	6032      	streq	r2, [r6, #0]
 800570e:	605a      	strne	r2, [r3, #4]
 8005710:	e7ec      	b.n	80056ec <_malloc_r+0xa0>
 8005712:	4623      	mov	r3, r4
 8005714:	6864      	ldr	r4, [r4, #4]
 8005716:	e7b2      	b.n	800567e <_malloc_r+0x32>
 8005718:	4634      	mov	r4, r6
 800571a:	6876      	ldr	r6, [r6, #4]
 800571c:	e7b9      	b.n	8005692 <_malloc_r+0x46>
 800571e:	230c      	movs	r3, #12
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4638      	mov	r0, r7
 8005724:	f000 f84c 	bl	80057c0 <__malloc_unlock>
 8005728:	e7a1      	b.n	800566e <_malloc_r+0x22>
 800572a:	6025      	str	r5, [r4, #0]
 800572c:	e7de      	b.n	80056ec <_malloc_r+0xa0>
 800572e:	bf00      	nop
 8005730:	20000870 	.word	0x20000870

08005734 <_realloc_r>:
 8005734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005738:	4680      	mov	r8, r0
 800573a:	4614      	mov	r4, r2
 800573c:	460e      	mov	r6, r1
 800573e:	b921      	cbnz	r1, 800574a <_realloc_r+0x16>
 8005740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005744:	4611      	mov	r1, r2
 8005746:	f7ff bf81 	b.w	800564c <_malloc_r>
 800574a:	b92a      	cbnz	r2, 8005758 <_realloc_r+0x24>
 800574c:	f7ff ff12 	bl	8005574 <_free_r>
 8005750:	4625      	mov	r5, r4
 8005752:	4628      	mov	r0, r5
 8005754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005758:	f000 f838 	bl	80057cc <_malloc_usable_size_r>
 800575c:	4284      	cmp	r4, r0
 800575e:	4607      	mov	r7, r0
 8005760:	d802      	bhi.n	8005768 <_realloc_r+0x34>
 8005762:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005766:	d812      	bhi.n	800578e <_realloc_r+0x5a>
 8005768:	4621      	mov	r1, r4
 800576a:	4640      	mov	r0, r8
 800576c:	f7ff ff6e 	bl	800564c <_malloc_r>
 8005770:	4605      	mov	r5, r0
 8005772:	2800      	cmp	r0, #0
 8005774:	d0ed      	beq.n	8005752 <_realloc_r+0x1e>
 8005776:	42bc      	cmp	r4, r7
 8005778:	4622      	mov	r2, r4
 800577a:	4631      	mov	r1, r6
 800577c:	bf28      	it	cs
 800577e:	463a      	movcs	r2, r7
 8005780:	f7ff fed0 	bl	8005524 <memcpy>
 8005784:	4631      	mov	r1, r6
 8005786:	4640      	mov	r0, r8
 8005788:	f7ff fef4 	bl	8005574 <_free_r>
 800578c:	e7e1      	b.n	8005752 <_realloc_r+0x1e>
 800578e:	4635      	mov	r5, r6
 8005790:	e7df      	b.n	8005752 <_realloc_r+0x1e>
	...

08005794 <_sbrk_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4d06      	ldr	r5, [pc, #24]	; (80057b0 <_sbrk_r+0x1c>)
 8005798:	2300      	movs	r3, #0
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	f7fb fb8e 	bl	8000ec0 <_sbrk>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_sbrk_r+0x1a>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_sbrk_r+0x1a>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	20000878 	.word	0x20000878

080057b4 <__malloc_lock>:
 80057b4:	4801      	ldr	r0, [pc, #4]	; (80057bc <__malloc_lock+0x8>)
 80057b6:	f000 b811 	b.w	80057dc <__retarget_lock_acquire_recursive>
 80057ba:	bf00      	nop
 80057bc:	2000087c 	.word	0x2000087c

080057c0 <__malloc_unlock>:
 80057c0:	4801      	ldr	r0, [pc, #4]	; (80057c8 <__malloc_unlock+0x8>)
 80057c2:	f000 b80c 	b.w	80057de <__retarget_lock_release_recursive>
 80057c6:	bf00      	nop
 80057c8:	2000087c 	.word	0x2000087c

080057cc <_malloc_usable_size_r>:
 80057cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057d0:	1f18      	subs	r0, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bfbc      	itt	lt
 80057d6:	580b      	ldrlt	r3, [r1, r0]
 80057d8:	18c0      	addlt	r0, r0, r3
 80057da:	4770      	bx	lr

080057dc <__retarget_lock_acquire_recursive>:
 80057dc:	4770      	bx	lr

080057de <__retarget_lock_release_recursive>:
 80057de:	4770      	bx	lr

080057e0 <_init>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr

080057ec <_fini>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr
